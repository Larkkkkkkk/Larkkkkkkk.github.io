<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Larkkkkkkk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://larkkkkkkk.github.io/"/>
  <updated>2023-11-02T12:43:48.234Z</updated>
  <id>https://larkkkkkkk.github.io/</id>
  
  <author>
    <name>Larkkkkkkk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://larkkkkkkk.github.io/2023/11/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://larkkkkkkk.github.io/2023/11/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2023-11-02T12:40:52.000Z</published>
    <updated>2023-11-02T12:43:48.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-计算机网络"><a href="#1-计算机网络" class="headerlink" title="1.计算机网络"></a>1.计算机网络</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-计算机网络&quot;&gt;&lt;a href=&quot;#1-计算机网络&quot; class=&quot;headerlink&quot; title=&quot;1.计算机网络&quot;&gt;&lt;/a&gt;1.计算机网络&lt;/h1&gt;
      
    
    </summary>
    
    
    
      <category term="计算机网络" scheme="https://Larkkkkkkk.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-网络编程</title>
    <link href="https://larkkkkkkk.github.io/2023/11/02/JAVA-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://larkkkkkkk.github.io/2023/11/02/JAVA-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2023-11-02T08:51:25.000Z</published>
    <updated>2023-11-03T12:59:06.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第16章-网络编程"><a href="#第16章-网络编程" class="headerlink" title="第16章_网络编程"></a>第16章_网络编程</h1><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021655371.png" alt="第3阶段：Java高级应用-第16章" style="zoom: 50%;"><hr><h2 id="1-网络编程概述"><a href="#1-网络编程概述" class="headerlink" title="1. 网络编程概述"></a>1. 网络编程概述</h2><p>Java是 Internet 上的语言，它从语言级上提供了对网络应用程序的支持，程序员能够很容易开发常见的网络应用程序。</p><p>Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 <strong>JVM 控制</strong>。并且 Java 实现了一个跨平台的网络库，<code>程序员面对的是一个统一的网络编程环境</code>。</p><h3 id="1-1-软件架构"><a href="#1-1-软件架构" class="headerlink" title="1.1 软件架构"></a>1.1 软件架构</h3><ul><li><strong>C/S架构</strong> ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有QQ、美团app、360安全卫士等软件。</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021656622.jpg" style="zoom:67%;"><p><strong>B/S架构</strong> ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有IE、谷歌、火狐等。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021656506.jpg" style="zoom:67%;"><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h3 id="1-2-网络基础"><a href="#1-2-网络基础" class="headerlink" title="1.2 网络基础"></a>1.2 网络基础</h3><ul><li><p><strong>计算机网络：</strong><br>把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。</p></li><li><p><strong>网络编程的目的：</strong>直接/间接地通过网络协议与其它计算机实现数据交换，进行通讯。</p></li><li><p><strong>网络编程中有三个主要的问题：</strong></p><ul><li>问题1：如何准确地定位网络上一台或多台主机(去看病如何找到你？)    —使用IP地址(找到你)</li><li>问题2：如何定位主机上的特定的应用(找到你之后如何判断是哪里有病？)   —使用端口号(定位你身上特定的位置)</li><li>问题3：找到主机后，如何可靠、高效地进行数据传输(确定病因如何用药？)  —规范网络通信协议(可靠、高效地进行数据传输)</li></ul></li></ul><h2 id="2-网络通信要素"><a href="#2-网络通信要素" class="headerlink" title="2. 网络通信要素"></a>2. 网络通信要素</h2><h3 id="2-1-如何实现网络中的主机互相通信"><a href="#2-1-如何实现网络中的主机互相通信" class="headerlink" title="2.1 如何实现网络中的主机互相通信"></a>2.1 如何实现网络中的主机互相通信</h3><ul><li>通信双方地址<ul><li>IP</li><li>端口号</li></ul></li><li>一定的规则：不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议，即网络通信协议。</li></ul><p><strong>生活类比：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021656025.png" alt="image-20220503144420721" style="zoom:67%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021657189.png" alt="image-20220503144450241" style="zoom:67%;"><h3 id="2-2-通信要素一：IP地址和域名"><a href="#2-2-通信要素一：IP地址和域名" class="headerlink" title="2.2 通信要素一：IP地址和域名"></a>2.2 通信要素一：IP地址和域名</h3><h4 id="2-2-1-IP地址"><a href="#2-2-1-IP地址" class="headerlink" title="2.2.1 IP地址"></a>2.2.1 IP地址</h4><p><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给网络中的一台计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</p><p><strong>IP地址分类方式一：</strong></p><ul><li><p><code>IPv4</code>：是一个<strong>32位的二进制数</strong>，通常被分为<strong>4个字节</strong>，表示成<code>a.b.c.d</code> 的形式，以点分<code>十进制</code>表示，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021657869.png" alt="image-20220503145929568" style="zoom:80%;"><ul><li><p>这种方式最多可以表示42亿个。其中，30亿都在北美，亚洲4亿，中国2.9亿。2011年初已经用尽。</p></li><li><p>IP地址 = 网络地址 +主机地址</p><ul><li>网络地址：标识计算机或网络设备所在的网段</li></ul></li><li><p>主机地址：标识特定主机或网络设备</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021657463.jpeg" alt="20220518_101503"></p><p>其中，E类用于科研。</p></li></ul></li><li><p><code>IPv6</code>：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>​    为了扩大地址空间，拟通过IPv6重新定义地址空间，采用<strong>128位地址长度</strong>，共<strong>16个字节</strong>，写成8个无符号整数，每个整数用四个<strong>十六进制位</strong>表示，数之间<strong>用冒号（：）分开</strong>。<br>​    比如：<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，按保守方法估算IPv6实际可分配的地址，整个地球的每平方米面积上仍可 分配1000多个地址，这样就解决了网络地址资源数量不够的问题。2012年6月6日，国际互联网协会举行了世界IPv6启动纪念日，这一天，全球IPv6网络正式启动。多家知名网站，如Google、Facebook和Yahoo等，于当天全球标准时间0点（北京时间8点整）开始永久性支持IPv6访问。2018年6月，三大运营商联合阿里云宣布，将全面对外提供IPv6服务，并计划在2025年前助推中国互联网真正实现“IPv6 Only”。</p><p>在IPv6的设计过程中除了一劳永逸地解决了地址短缺问题以外，还考虑了在IPv4中解决不好的其它问题，主要有端到端IP连接、服务质量（QoS）、安全性、多播、移动性、即插即用等。</p></li></ul><p><strong>IP地址分类方式二：</strong></p><p>公网地址( 万维网使用）和 私有地址( 局域网使用）。192.168.开头的就是私有地址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用。</p><p><strong>常用命令：</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><ul><li>检查网络是否连通，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 空格 IP地址</span><br><span class="line">ping <span class="number">220.181</span><span class="number">.57</span><span class="number">.216</span></span><br></pre></td></tr></table></figure><p><strong>特殊的IP地址：</strong></p><ul><li>本地回环地址(hostAddress)：<code>127.0.0.1</code>  </li><li>主机名(hostName)：<code>localhost</code></li></ul><h4 id="2-2-2-域名"><a href="#2-2-2-域名" class="headerlink" title="2.2.2 域名"></a>2.2.2 域名</h4><p>Internet上的主机有两种方式表示地址：</p><ul><li>域名(hostName)：<a href="http://www.atguigu.com" target="_blank" rel="noopener">www.atguigu.com</a></li><li>IP 地址(hostAddress)：202.108.35.210</li></ul><p><strong>域名解析：</strong>因为IP地址数字不便于记忆，因此出现了域名。域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS，Domain Name System，域名系统)负责将域名转化成IP地址，这样才能和主机建立连接。 </p><p>简单理解：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021657028.png" alt="image-20220415003729013" style="zoom:80%;"><p>详细理解：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311021657193.png" alt="image-20220131125934581"></p><ol><li>在浏览器中输入www . qq .com 域名，操作系统会先检查自己本地的<code>hosts文件</code>是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</li><li>如果hosts里没有这个域名的映射，则查找<code>本地DNS解析器缓存</code>，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</li><li>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它<code>本地DNS服务器</code>，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</li><li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已<code>缓存</code>了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</li><li>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(<a href="http://qq.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找（http://qq.com)域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机。" target="_blank" rel="noopener">http://qq.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找（http://qq.com)域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机。</a></li><li>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</li></ol><h3 id="2-3-通信要素二：端口号"><a href="#2-3-通信要素二：端口号" class="headerlink" title="2.3 通信要素二：端口号"></a>2.3 通信要素二：端口号</h3><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）。</p><p>不同的进程，设置不同的端口号。</p><ul><li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。<ul><li>公认端口：0~1023。被预先定义的服务通信占用，如：HTTP（80），FTP（21），Telnet（23）</li><li>注册端口：1024~49151。分配给用户进程或应用程序。如：Tomcat（8080），MySQL（3306），Oracle（1521）。</li><li>动态/ 私有端口：49152~65535。</li></ul></li></ul><p>如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022032358.png" alt="image-20220415004400166" style="zoom:80%;"><h3 id="2-4-通信要素三：网络通信协议"><a href="#2-4-通信要素三：网络通信协议" class="headerlink" title="2.4 通信要素三：网络通信协议"></a>2.4 通信要素三：网络通信协议</h3><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。</p><ul><li><code>网络通信协议</code>：在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤、出错控制等做了统一规定，通信双方必须同时遵守才能完成数据交换。</li></ul><p><strong>新的问题：网络协议涉及内容太多、太复杂。如何解决？</strong></p><p>计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩解压缩，差错控制，流量控制，路由控制，如何实现如此复杂的网络协议呢？<code>通信协议分层思想</code>。</p><p>在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。最常用的复合方式是<strong>层次方式</strong>，即<code>同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系</code>。各层互不影响，利于系统的开发和扩展。</p><p>这里有两套参考模型</p><ul><li>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广</li><li>TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022033673.png" alt></p><p>上图中，OSI参考模型：模型<code>过于理想化</code>，未能在因特网上进行广泛推广。 TCP/IP参考模型(或TCP/IP协议)：事实上的<code>国际标准</code>。</p><ul><li><p><strong>TCP/IP协议：</strong> 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，TCP/IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。是Internet最基本、最广泛的协议。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022033656.png" alt="image-20220512234904047" style="zoom:80%;"></li></ul><p><strong>TCP/IP协议中的四层介绍：</strong></p><ul><li><code>应用层</code>：应用层决定了向用户提供应用服务时通信的活动。主要协议有：HTTP协议、FTP协议、SNMP（简单网络管理协议）、SMTP（简单邮件传输协议）和POP3（Post Office Protocol 3的简称,即邮局协议的第3个版）等。</li><li><code>传输层</code>：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。TCP（Transmission Control Protocol）协议，即传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议。UDP(User Datagram Protocol，用户数据报协议)：是一个无连接的传输层协议、提供面向事务的简单不可靠的信息传送服务。</li><li><code>网络层</code>：网络层是整个TCP/IP协议的核心，支持网间互连的数据通信。它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。而IP协议是一种非常重要的协议。IP（internet protocal）又称为互联网协议。IP的责任就是把数据从源传送到目的地。它在源地址和目的地址之间传送一种称之为数据包的东西，它还提供对数据大小的重新组装功能，以适应不同网络对包大小的要求。</li></ul><ul><li><code>物理+数据链路层</code>：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022033239.png" alt="image-20220514172435398"></p><h2 id="2-谈传输层协议：TCP与UDP协议"><a href="#2-谈传输层协议：TCP与UDP协议" class="headerlink" title="2. 谈传输层协议：TCP与UDP协议"></a>2. 谈传输层协议：TCP与UDP协议</h2><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><ul><li><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。</li><li><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。</li></ul><h3 id="2-1-TCP协议与UDP协议"><a href="#2-1-TCP协议与UDP协议" class="headerlink" title="2.1 TCP协议与UDP协议"></a>2.1 TCP协议与UDP协议</h3><p><strong>TCP协议：</strong></p><ul><li>TCP协议进行通信的两个应用进程：客户端、服务端。</li><li>使用TCP协议前，须先<code>建立TCP连接</code>，形成基于字节流的传输数据通道</li><li>传输前，采用“三次握手”方式，点对点通信，是<code>可靠的</code><ul><li>TCP协议使用<code>重发机制</code>，当一个通信实体发送一个消息给另一个通信实体后，需要收到另一个通信实体确认信息，如果没有收到另一个通信实体确认信息，则会再次重复刚才发送的消息。</li></ul></li><li>在连接中可进行<code>大数据量的传输</code></li><li>传输完毕，需<code>释放已建立的连接，效率低</code></li></ul><p><strong>UDP协议：</strong></p><ul><li>UDP协议进行通信的两个应用进程：发送端、接收端。</li><li>将数据、源、目的封装成数据包（传输的基本单位），<code>不需要建立连接</code></li><li>发送不管对方是否准备好，接收方收到也不确认，不能保证数据的完整性，故是<code>不可靠的</code></li><li>每个数据报的大小限制在<code>64K</code>内</li><li>发送数据结束时<code>无需释放资源，开销小，通信效率高</code></li><li>适用场景：音频、视频和普通数据的传输。例如视频会议</li></ul><blockquote><p>TCP生活案例：打电话</p><p>UDP生活案例：发送短信、发电报</p></blockquote><h3 id="2-2-三次握手"><a href="#2-2-三次握手" class="headerlink" title="2.2 三次握手"></a>2.2 三次握手</h3><p>TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。</p><ul><li>第一次握手，客户端向服务器端发起TCP连接的请求</li><li>第二次握手，服务器端发送针对客户端TCP连接请求的确认</li><li>第三次握手，客户端发送确认的确认</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022034462.png" alt="image-20220415010105484" style="zoom:80%;"><blockquote><p>1、客户端会随机一个初始序列号seq=x，设置SYN=1 ，表示这是SYN握手报文。然后就可以把这个 SYN 报文发送给服务端了，表示向服务端发起连接，之后客户端处于<code>同步已发送</code>状态。</p><p>2、服务端收到客户端的 SYN 报文后，也随机一个初始序列号(seq=y)，设置ack=x+1，表示收到了客户端的x之前的数据，希望客户端下次发送的数据从x+1开始。<br>设置 SYN=1 和 ACK=1。表示这是一个SYN握手和ACK确认应答报文。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于<code>同步已接收</code>状态。</p><p>3、客户端收到服务端报文后，还要向服务端回应最后一个应答报文，将ACK置为 1 ，表示这是一个应答报文<br>ack=y+1 ，表示收到了服务器的y之前的数据，希望服务器下次发送的数据从y+1开始。<br>最后把报文发送给服务端，这次报文可以携带数据，之后客户端处于 连接已建立 状态。服务器收到客户端的应答报文后，也进入<code>连接已建立</code>状态。</p></blockquote><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h3 id="2-3-四次挥手"><a href="#2-3-四次挥手" class="headerlink" title="2.3 四次挥手"></a>2.3 四次挥手</h3><p>TCP协议中，在发送数据结束后，释放连接时需要经过四次挥手。</p><ul><li>第一次挥手：客户端向服务器端提出结束连接，<code>让服务器做最后的准备工作</code>。此时，客户端处于半关闭状态，即表示不再向服务器发送数据了，但是还可以接受数据。</li><li>第二次挥手：服务器接收到客户端释放连接的请求后，<code>会将最后的数据发给客户端</code>。并告知上层的应用进程不再接收数据。</li><li>第三次挥手：服务器发送完数据后，会给客户端<code>发送一个释放连接的报文</code>。那么客户端接收后就知道可以正式释放连接了。</li><li>第四次挥手：客户端接收到服务器最后的释放连接报文后，要<code>回复一个彻底断开的报文</code>。这样服务器收到后才会彻底释放连接。这里客户端，发送完最后的报文后，会等待2MSL，因为有可能服务器没有收到最后的报文，那么服务器迟迟没收到，就会再次给客户端发送释放连接的报文，此时客户端在等待时间范围内接收到，会重新发送最后的报文，并重新计时。如果等待2MSL后，没有收到，那么彻底断开。</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022034719.png" alt="image-20220415010205891" style="zoom:80%;"><blockquote><p>1、客户端打算断开连接，向服务器发送FIN报文(FIN标记位被设置为1，1表示为FIN，0表示不是)，FIN报文中会指定一个序列号，之后客户端进入FIN_WAIT_1状态。也就是客户端发出连接释放报文段(FIN报文)，指定序列号seq = u，主动关闭TCP连接，等待服务器的确认。</p><p>2、服务器收到连接释放报文段(FIN报文)后，就向客户端发送ACK应答报文，以客户端的FIN报文的序列号 seq+1 作为ACK应答报文段的确认序列号ack = seq+1 = u + 1。接着服务器进入CLOSE_WAIT(等待关闭)状态，此时的TCP处于半关闭状态(下面会说什么是半关闭状态)，客户端到服务器的连接释放。客户端收到来自服务器的ACK应答报文段后，进入FIN_WAIT_2状态。</p><p>3、服务器也打算断开连接，向客户端发送连接释放(FIN)报文段，之后服务器进入LASK_ACK(最后确认)状态，等待客户端的确认。服务器的连接释放(FIN)报文段的FIN=1，ACK=1，序列号seq=m，确认序列号ack=u+1。</p><p>4、客户端收到来自服务器的连接释放(FIN)报文段后，会向服务器发送一个ACK应答报文段，以连接释放(FIN)报文段的确认序号 ack 作为ACK应答报文段的序列号 seq，以连接释放(FIN)报文段的序列号 seq+1作为确认序号ack。</p><p>之后客户端进入TIME_WAIT(时间等待)状态，服务器收到ACK应答报文段后，服务器就进入CLOSE(关闭)状态，到此服务器的连接已经完成关闭。客户端处于TIME_WAIT状态时，此时的TCP还未释放掉，需要等待2MSL后，客户端才进入CLOSE状态。</p></blockquote><h2 id="3-网络编程API"><a href="#3-网络编程API" class="headerlink" title="3. 网络编程API"></a>3. 网络编程API</h2><h3 id="3-1-InetAddress类"><a href="#3-1-InetAddress类" class="headerlink" title="3.1 InetAddress类"></a>3.1 InetAddress类</h3><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p><p>InetAddress 类没有提供公共的构造器，而是提供如下几个静态方法来获取InetAddress 实例</p><ul><li>public static InetAddress getLocalHost()</li><li>public static InetAddress getByName(String host)</li><li>public static InetAddress getByAddress(byte[] addr)</li></ul><p>InetAddress 提供了如下几个常用的方法</p><ul><li>public String getHostAddress() ：返回 IP 地址字符串（以文本表现形式）</li><li>public String getHostName() ：获取此 IP 地址的主机名</li><li>public boolean isReachable(int timeout)：测试是否可以达到该地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">//1.实例化 获取指定ip对应的InetAddress的实例</span></span><br><span class="line">        <span class="comment">// getByName()</span></span><br><span class="line">        InetAddress inet1 = InetAddress.getByName(<span class="string">"192.168.23.31"</span>);</span><br><span class="line">        System.out.println(<span class="string">"指定ip的信息: "</span>+inet1);</span><br><span class="line">        InetAddress inet2 = InetAddress.getByName(<span class="string">"www.xt7910.top"</span>); <span class="comment">//域名解析出ip为185.199.111.153</span></span><br><span class="line">        System.out.println(<span class="string">"指定域名的信息: "</span>+inet2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.实例化 获取本地ip对应的InetAddress的实例</span></span><br><span class="line">        <span class="comment">// getLocalHost() 本机地址</span></span><br><span class="line">        InetAddress localHost1 = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(<span class="string">"本机名/IP地址: "</span>+localHost1); <span class="comment">//larkkkkkkk/10.171.87.85</span></span><br><span class="line">        InetAddress localHost2 = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);<span class="comment">//本地回路地址：127.0.0.1</span></span><br><span class="line">        System.out.println(<span class="string">"本地回路地址: "</span>+localHost2);</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line">        System.out.println(<span class="string">"我的域名信息: "</span>+inet2.getHostName());   <span class="comment">//打印域名</span></span><br><span class="line">        System.out.println(<span class="string">"我的域名ip地址: "</span>+inet2.getHostAddress()); <span class="comment">//打印地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">指定ip的信息: /<span class="number">192.168</span><span class="number">.23</span><span class="number">.31</span></span><br><span class="line">指定域名的信息: www.xt7910.top/<span class="number">185.199</span><span class="number">.111</span><span class="number">.153</span></span><br><span class="line">本机名/IP地址: larkkkkkkk/<span class="number">10.171</span><span class="number">.87</span><span class="number">.85</span></span><br><span class="line">本地回路地址: /<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">-----------------------------------------------------</span><br><span class="line">我的域名信息: www.xt7910.top</span><br><span class="line">我的域名ip地址: <span class="number">185.199</span><span class="number">.111</span><span class="number">.153</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022034189.png" alt="1564024137998"></p><h3 id="3-2-Socket类"><a href="#3-2-Socket类" class="headerlink" title="3.2 Socket类"></a>3.2 Socket类</h3><ul><li>具有唯一标识的<strong>IP地址</strong>+<strong>端口号</strong> –组合–&gt;  构成唯一能识别的<strong>标识符套接字（Socket）</strong>。</li><li>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。网络通信其实就是Socket间的通信。</li></ul><ul><li><p>通信的两端都要有Socket，是两台机器间通信的端点。</p></li><li><p>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</p></li><li><p>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</p></li><li><p>Socket分类：</p><ul><li>流套接字（stream socket）：使用TCP提供<strong>可依赖</strong>的字节流服务<ul><li>ServerSocket：此类实现TCP服务器套接字。服务器套接字等待请求通过网络传入。</li><li>Socket：此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。</li></ul></li><li>数据报套接字（datagram socket）：使用UDP提供“<strong>尽力而为</strong>”的数据报服务<ul><li>DatagramSocket：此类表示用来发送和接收UDP数据报包的套接字。 </li></ul></li></ul></li></ul><h3 id="3-3-Socket相关类API"><a href="#3-3-Socket相关类API" class="headerlink" title="3.3 Socket相关类API"></a>3.3 Socket相关类API</h3><h4 id="3-3-1-ServerSocket类"><a href="#3-3-1-ServerSocket类" class="headerlink" title="3.3.1 ServerSocket类"></a>3.3.1 ServerSocket类</h4><p><strong>ServerSocket类的构造方法：</strong></p><ul><li>ServerSocket(int port) ：创建绑定到特定端口的服务器套接字。</li></ul><p><strong>ServerSocket类的常用方法：</strong></p><ul><li>Socket accept()：侦听并接受到此套接字的连接。 </li></ul><h4 id="3-3-2-Socket类"><a href="#3-3-2-Socket类" class="headerlink" title="3.3.2 Socket类"></a>3.3.2 Socket类</h4><p><strong>Socket类的常用构造方法</strong>：</p><ul><li>public Socket(InetAddress address,int port)：创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</li><li>public Socket(String host,int port)：创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ul><p><strong>Socket类的常用方法</strong>：</p><ul><li>public InputStream getInputStream()：返回此套接字的输入流，可以用于接收消息</li><li>public OutputStream getOutputStream()：返回此套接字的输出流，可以用于发送消息</li><li>public InetAddress getInetAddress()：此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</li><li>public InetAddress getLocalAddress()：获取套接字绑定的本地地址。</li><li>public int getPort()：此套接字连接到的远程端口号；如果尚未连接套接字，则返回 0。</li><li>public int getLocalPort()：返回此套接字绑定到的本地端口。如果尚未绑定套接字，则返回 -1。</li><li>public void close()：关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和 OutputStream。 </li><li>public void shutdownInput()：如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。 即不能在从此套接字的输入流中接收任何数据。</li><li>public void shutdownOutput()：禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</li></ul><p><strong>注意：</strong>先后调用Socket的shutdownInput()和shutdownOutput()方法，仅仅关闭了输入流和输出流，并不等于调用Socket的close()方法。在通信结束后，仍然要调用Scoket的close()方法，因为只有该方法才会释放Socket占用的资源，比如占用的本地端口号等。</p><h4 id="3-3-3-DatagramSocket类"><a href="#3-3-3-DatagramSocket类" class="headerlink" title="3.3.3 DatagramSocket类"></a>3.3.3 DatagramSocket类</h4><p><strong>DatagramSocket 类的常用方法：</strong></p><ul><li>public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。</li><li>public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。 </li><li>public void close()关闭此数据报套接字。 </li><li>public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的 IP 地址和远程主机的端口号。 </li><li>public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket 的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。 </li><li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。</li><li>public int getLocalPort()返回此套接字绑定的本地主机上的端口号。 </li><li>public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回 null。</li><li>public int getPort()返回此套接字的端口。如果套接字未连接，则返回 -1。</li></ul><h4 id="3-3-4-DatagramPacket类"><a href="#3-3-4-DatagramPacket类" class="headerlink" title="3.3.4 DatagramPacket类"></a>3.3.4 DatagramPacket类</h4><p><strong>DatagramPacket类的常用方法：</strong></p><ul><li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</li><li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length 参数必须小于等于 buf.length。</li><li>public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</li><li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</li><li><code>public byte[] getData()</code>返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</li><li><code>public int getLength()</code>返回将要发送或接收到的数据的长度。</li></ul><h2 id="4-TCP网络编程"><a href="#4-TCP网络编程" class="headerlink" title="4. TCP网络编程"></a>4. TCP网络编程</h2><h3 id="4-1-通信模型"><a href="#4-1-通信模型" class="headerlink" title="4.1 通信模型"></a>4.1 通信模型</h3><p>Java语言的基于套接字TCP编程分为服务端编程和客户端编程，其通信模型如图所示：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022034989.png" alt="image-20220514172833216" style="zoom:67%;"><h3 id="4-2-开发步骤"><a href="#4-2-开发步骤" class="headerlink" title="4.2 开发步骤"></a>4.2 开发步骤</h3><p><strong>客户端程序包含以下四个基本的步骤 ：</strong></p><ul><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li><li>打开连接到 Socket  的输入/ 出流： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li><li>按照一定的协议对 Socket 进行读/ 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线路。</li><li>关闭 Socket ：断开客户端到服务器的连接，释放线路</li></ul><p><strong>服务器端程序包含以下四个基本的 步骤：</strong></p><ul><li>调用 ServerSocket(int port)  ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</li><li>调用 accept() ：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</li><li>调用  该Socket 类对象的 getOutputStream()  和 getInputStream () ：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭Socket 对象：客户端访问结束，关闭通信套接字。</li></ul><h3 id="4-3-例题与练习"><a href="#4-3-例题与练习" class="headerlink" title="4.3 例题与练习"></a>4.3 例题与练习</h3><p>例题1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">public class TCPTest1 &#123;</span><br><span class="line">    &#x2F;&#x2F;客户端 ---发送端</span><br><span class="line">    @Test</span><br><span class="line">    public void client() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建一个Socket</span><br><span class="line">        InetAddress inetAddress&#x3D;InetAddress.getByName(&quot;10.171.87.85&quot;);</span><br><span class="line">        Socket socket&#x3D;new Socket(inetAddress,8080);</span><br><span class="line">        &#x2F;&#x2F;2.发送数据</span><br><span class="line">        OutputStream outputStream &#x3D; socket.getOutputStream();</span><br><span class="line">        outputStream.write(&quot;你好我是客户端&quot;.getBytes());</span><br><span class="line">        &#x2F;&#x2F;3.关闭Socket</span><br><span class="line">        socket.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;服务端 ---接收端</span><br><span class="line">    @Test</span><br><span class="line">    public void server() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建一个ServerSocket</span><br><span class="line">        ServerSocket serverSocket&#x3D;new ServerSocket(8080);</span><br><span class="line">        &#x2F;&#x2F;2.调用accept(),接收客户端的Socket</span><br><span class="line">        Socket socket &#x3D; serverSocket.accept();  &#x2F;&#x2F;阻塞式方法</span><br><span class="line">        System.out.println(socket.getInetAddress().getHostName()+&quot;给我发送的请求&quot;);</span><br><span class="line">        System.out.println(&quot;服务器端已开启&quot;);</span><br><span class="line">        &#x2F;&#x2F;3.接收数据</span><br><span class="line">        InputStream inputStream &#x3D; socket.getInputStream();</span><br><span class="line">        byte[] buffer&#x3D;new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        ByteArrayOutputStream baos&#x3D;new ByteArrayOutputStream();  &#x2F;&#x2F;使用一个字符数组-输出流   内部维护一个byte[]数组</span><br><span class="line">        while((len&#x3D;inputStream.read(buffer))!&#x3D;-1)&#123;</span><br><span class="line">            baos.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">        System.out.println(&quot;数据已经接收完毕&quot;);</span><br><span class="line">        &#x2F;&#x2F;4.关闭Socket和ServerSocket</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311031512799.png" alt="image-20231103151202673"></p><p>例题2：客户端发送文件给服务端，服务端将文件保存在本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package net;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">public class TCPTest2 &#123;</span><br><span class="line">    &#x2F;&#x2F;客户端 ---发送端</span><br><span class="line">    @Test</span><br><span class="line">    public void client() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建一个Socket</span><br><span class="line">        &#x2F;&#x2F;指明对方(服务器端)的ip地址和端口号</span><br><span class="line">        InetAddress inetAddress&#x3D;InetAddress.getByName(&quot;10.171.87.85&quot;);</span><br><span class="line">        Socket socket&#x3D;new Socket(inetAddress,8080);</span><br><span class="line">        &#x2F;&#x2F;2.创建File类对象，创建FileInputStream类实例</span><br><span class="line">        File file&#x3D;new File(&quot;E:\\javacode\\test\\src\\net\\playgirl.jpg&quot;);</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(file);</span><br><span class="line">        &#x2F;&#x2F;3.通过socket获得输出流</span><br><span class="line">        OutputStream outputStream &#x3D; socket.getOutputStream();</span><br><span class="line">        &#x2F;&#x2F;4.读写数据</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len &#x3D; fis.read(buffer)) !&#x3D; -1)&#123;</span><br><span class="line">            outputStream.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;数据发送完毕&quot;);</span><br><span class="line">        &#x2F;&#x2F;5.关闭Socket和相关流</span><br><span class="line">        socket.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;服务端 ---接收端</span><br><span class="line">    @Test</span><br><span class="line">    public void server() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建一个ServerSocket</span><br><span class="line">        ServerSocket serverSocket&#x3D;new ServerSocket(8080);</span><br><span class="line">        &#x2F;&#x2F;2.调用accept(),接收客户端的Socket</span><br><span class="line">        Socket socket &#x3D; serverSocket.accept();  &#x2F;&#x2F;阻塞式方法</span><br><span class="line">        System.out.println(socket.getInetAddress().getHostName()+&quot;给我发送的请求&quot;);</span><br><span class="line">        System.out.println(&quot;服务器端已开启&quot;);</span><br><span class="line">        &#x2F;&#x2F;3.通过socket获取一个输入流</span><br><span class="line">        InputStream inputStream &#x3D; socket.getInputStream();</span><br><span class="line">        &#x2F;&#x2F;4.创建File类对象，创建FileOutStream对象</span><br><span class="line">        File file &#x3D; new File(&quot;E:\\javacode\\test\\src\\net\\girlclient.jpg&quot;);</span><br><span class="line">        FileOutputStream fos &#x3D; new FileOutputStream(file);</span><br><span class="line">        &#x2F;&#x2F;5.读写过程</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len &#x3D; inputStream.read(buffer)) !&#x3D; -1)&#123;</span><br><span class="line">            fos.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;数据接收完毕&quot;);</span><br><span class="line">        &#x2F;&#x2F;6.关闭Socket和ServerSocket还有相关流</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311031530240.png" alt="image-20231103153058152" style="zoom:65%;"><p>例题3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">package net;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">public class TCPTest3 &#123;</span><br><span class="line">    &#x2F;&#x2F;客户端 ---发送端</span><br><span class="line">    @Test</span><br><span class="line">    public void client() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建一个Socket</span><br><span class="line">        &#x2F;&#x2F;指明对方(服务器端)的ip地址和端口号</span><br><span class="line">        InetAddress inetAddress&#x3D;InetAddress.getByName(&quot;10.171.87.85&quot;);</span><br><span class="line">        Socket socket&#x3D;new Socket(inetAddress,8080);</span><br><span class="line">        &#x2F;&#x2F;2.创建File类对象，创建FileInputStream类实例</span><br><span class="line">        File file&#x3D;new File(&quot;E:\\javacode\\test\\src\\net\\playgirl.jpg&quot;);</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(file);</span><br><span class="line">        &#x2F;&#x2F;3.通过socket获得输出流</span><br><span class="line">        OutputStream outputStream &#x3D; socket.getOutputStream();</span><br><span class="line">        &#x2F;&#x2F;4.读写数据</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len &#x3D; fis.read(buffer)) !&#x3D; -1)&#123;</span><br><span class="line">            outputStream.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;client数据发送完毕&quot;);</span><br><span class="line">        &#x2F;&#x2F;客户端表明不再继续发送数据</span><br><span class="line">        socket.shutdownOutput();  &#x2F;&#x2F;不加的话可能认为还没发送完毕</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;4.新增 接收客户端返回的数据</span><br><span class="line">        InputStream inputStream &#x3D; socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos&#x3D;new ByteArrayOutputStream();  &#x2F;&#x2F;防止中文乱码</span><br><span class="line">        byte[] buffer1 &#x3D; new byte[5];</span><br><span class="line">        int len1;</span><br><span class="line">        while((len1 &#x3D; inputStream.read(buffer1)) !&#x3D; -1)&#123;</span><br><span class="line">            baos.write(buffer1,0,len1);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;sever接受服务端的信息&quot;+baos);</span><br><span class="line">        &#x2F;&#x2F;5.关闭Socket和相关流</span><br><span class="line">        socket.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        baos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;服务端 ---接收端</span><br><span class="line">    @Test</span><br><span class="line">    public void server() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;1.创建一个ServerSocket</span><br><span class="line">        ServerSocket serverSocket&#x3D;new ServerSocket(8080);</span><br><span class="line">        &#x2F;&#x2F;2.调用accept(),接收客户端的Socket</span><br><span class="line">        Socket socket &#x3D; serverSocket.accept();  &#x2F;&#x2F;阻塞式方法</span><br><span class="line">        System.out.println(socket.getInetAddress().getHostName()+&quot;给我发送的请求&quot;);</span><br><span class="line">        System.out.println(&quot;服务器端已开启&quot;);</span><br><span class="line">        &#x2F;&#x2F;3.通过socket获取一个输入流</span><br><span class="line">        InputStream inputStream &#x3D; socket.getInputStream();</span><br><span class="line">        &#x2F;&#x2F;4.创建File类对象，创建FileOutStream对象</span><br><span class="line">        File file &#x3D; new File(&quot;E:\\javacode\\test\\src\\net\\girlclient.jpg&quot;);</span><br><span class="line">        FileOutputStream fos &#x3D; new FileOutputStream(file);</span><br><span class="line">        &#x2F;&#x2F;5.读写过程</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len &#x3D; inputStream.read(buffer)) !&#x3D; -1)&#123;</span><br><span class="line">            fos.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;server数据接收完毕&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;5.新增 返回数据给客户端</span><br><span class="line">        OutputStream outputStream &#x3D; socket.getOutputStream();</span><br><span class="line">        outputStream.write(&quot;client谢谢你收到了&quot;.getBytes());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;6.关闭Socket和ServerSocket还有相关流</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311031601732.png" alt="image-20231103160126679"></p><p>练习1：服务端读取图片并发送给客户端，客户端保存图片到本地</p><p>练习2：客户端给服务端发送文本，服务端会将文本转成大写在返回给客户端。</p><p><strong>演示单个客户端与服务器单次通信：</strong></p><p>需求：客户端连接服务器，连接成功后给服务发送“lalala”，服务器收到消息后，给客户端返回“欢迎登录”，客户端接收消息后，断开连接</p><p><strong>1、服务器端示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1、准备一个ServerSocket对象，并绑定8888端口</span></span><br><span class="line">        ServerSocket server =  <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">"等待连接...."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、在8888端口监听客户端的连接，该方法是个阻塞的方法，如果没有客户端连接，将一直等待</span></span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        InetAddress inetAddress = socket.getInetAddress();</span><br><span class="line">        System.out.println(inetAddress.getHostAddress() + <span class="string">"客户端连接成功！！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、获取输入流，用来接收该客户端发送给服务器的数据</span></span><br><span class="line">        InputStream input = socket.getInputStream();</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = input.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            s.append(<span class="keyword">new</span> String(data, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(inetAddress.getHostAddress() + <span class="string">"客户端发送的消息是："</span> + s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、获取输出流，用来发送数据给该客户端</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        out.write(<span class="string">"欢迎登录"</span>.getBytes());</span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、关闭socket，不再与该客户端通信</span></span><br><span class="line">        <span class="comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、如果不再接收任何客户端通信，可以关闭ServerSocket</span></span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、客户端示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取输出流，用来发送数据给服务器</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        out.write(<span class="string">"lalala"</span>.getBytes());</span><br><span class="line">        <span class="comment">//会在流末尾写入一个“流的末尾”标记，对方才能读到-1，否则对方的读取方法会一致阻塞</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、获取输入流，用来接收服务器发送给该客户端的数据</span></span><br><span class="line">        InputStream input = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = input.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            s.append(<span class="keyword">new</span> String(data, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"服务器返回的消息是："</span> + s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、关闭socket，不再与服务器通信，即断开与服务器的连接</span></span><br><span class="line">        <span class="comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>演示多个客户端与服务器之间的多次通信：</strong></p><p>通常情况下，服务器不应该只接受一个客户端请求，而应该不断地接受来自客户端的所有请求，所以Java程序通常会通过循环，不断地调用ServerSocket的accept()方法。</p><p>如果服务器端要“同时”处理多个客户端的请求，因此服务器端需要为<strong>每一个客户端单独分配一个线程</strong>来处理，否则无法实现“同时”。</p><p>咱们之前学习IO流的时候，提到过装饰者设计模式，该设计使得不管底层IO流是怎样的节点流：文件流也好，网络Socket产生的流也好，程序都可以将其包装成处理流，甚至可以多层包装，从而提供更多方便的处理。</p><p>案例需求：多个客户端连接服务器，并进行多次通信</p><ul><li>每一个客户端连接成功后，从键盘输入英文单词或中国成语，并发送给服务器</li><li>服务器收到客户端的消息后，把词语“反转”后返回给客户端</li><li>客户端接收服务器返回的“词语”，打印显示</li><li>当客户端输入“stop”时断开与服务器的连接</li><li>多个客户端可以同时给服务器发送“词语”，服务器可以“同时”处理多个客户端的请求</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022035870.png" alt="image-20220514173031651" style="zoom:80%;"><p><strong>1、服务器端示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、准备一个ServerSocket</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">"等待连接..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 2、监听一个客户端的连接</span></span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + ++count + <span class="string">"个客户端"</span>+socket.getInetAddress().getHostAddress()+<span class="string">"连接成功！！"</span>);</span><br><span class="line"></span><br><span class="line">            ClientHandlerThread ct = <span class="keyword">new</span> ClientHandlerThread(socket);</span><br><span class="line">            ct.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里没有关闭server，永远监听</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line">        <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClientHandlerThread</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">            ip = socket.getInetAddress().getHostAddress();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//（1）获取输入流，用来接收该客户端发送给服务器的数据</span></span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                <span class="comment">//（2）获取输出流，用来发送数据给该客户端</span></span><br><span class="line">                PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line">                String str;</span><br><span class="line">                <span class="comment">// （3）接收数据</span></span><br><span class="line">                <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//（4）反转</span></span><br><span class="line">                    StringBuilder word = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">                    word.reverse();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//（5）返回给客户端</span></span><br><span class="line">                    ps.println(word);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"客户端"</span> + ip+<span class="string">"正常退出"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception  e)&#123;</span><br><span class="line">                System.out.println(<span class="string">"客户端"</span> + ip+<span class="string">"意外退出"</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//（6）断开连接</span></span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、客户端示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取输出流，用来发送数据给服务器</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(out);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、获取输入流，用来接收服务器发送给该客户端的数据</span></span><br><span class="line">        InputStream input = socket.getInputStream();</span><br><span class="line">        BufferedReader br;</span><br><span class="line">        <span class="keyword">if</span>(args!= <span class="keyword">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            String encoding = args[<span class="number">0</span>];</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input,encoding));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入发送给服务器的单词或成语："</span>);</span><br><span class="line">            String message = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(message.equals(<span class="string">"stop"</span>))&#123;</span><br><span class="line">                socket.shutdownOutput();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4、 发送数据</span></span><br><span class="line">            ps.println(message);</span><br><span class="line">            <span class="comment">// 接收数据</span></span><br><span class="line">            String feedback  = br.readLine();</span><br><span class="line">            System.out.println(<span class="string">"从服务器收到的反馈是："</span> + feedback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、关闭socket，断开与服务器的连接</span></span><br><span class="line">        scanner.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-案例：聊天室"><a href="#4-4-案例：聊天室" class="headerlink" title="4.4 案例：聊天室"></a>4.4 案例：聊天室</h3><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChatServer</span> </span>&#123;</span><br><span class="line"><span class="comment">//这个集合用来存储所有在线的客户端</span></span><br><span class="line"><span class="keyword">static</span> ArrayList&lt;Socket&gt; online = <span class="keyword">new</span>  ArrayList&lt;Socket&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1、启动服务器，绑定端口号</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、接收n多的客户端同时连接</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">Socket accept = server.accept();</span><br><span class="line"></span><br><span class="line">online.add(accept);<span class="comment">//把新连接的客户端添加到online列表中</span></span><br><span class="line"></span><br><span class="line">MessageHandler mh = <span class="keyword">new</span> MessageHandler(accept);</span><br><span class="line">mh.start();<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageHandler</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MessageHandler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.socket = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ip = socket.getInetAddress().getHostAddress();</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入：给其他客户端转发“我上线了”</span></span><br><span class="line">sendToOther(ip+<span class="string">"上线了"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)接收该客户端的发送的消息</span></span><br><span class="line">InputStream input = socket.getInputStream();</span><br><span class="line">InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(input);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line"></span><br><span class="line">String str;</span><br><span class="line"><span class="keyword">while</span>((str = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//(2)给其他在线客户端转发</span></span><br><span class="line">sendToOther(ip+<span class="string">":"</span>+str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sendToOther(ip+<span class="string">"下线了"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sendToOther(ip+<span class="string">"掉线了"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//从在线人员中移除我</span></span><br><span class="line">online.remove(socket);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个方法：给其他客户端转发xxx消息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendToOther</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//遍历所有的在线客户端，一一转发</span></span><br><span class="line"><span class="keyword">for</span> (Socket on : online) &#123;</span><br><span class="line">OutputStream every = on.getOutputStream();</span><br><span class="line"><span class="comment">//为什么用PrintStream？目的用它的println方法，按行打印</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(every);</span><br><span class="line"></span><br><span class="line">ps.println(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChatClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1、连接服务器</span></span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、开启两个线程</span></span><br><span class="line"><span class="comment">//(1)一个线程负责看别人聊，即接收服务器转发的消息</span></span><br><span class="line">Receive receive = <span class="keyword">new</span> Receive(socket);</span><br><span class="line">receive.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)一个线程负责发送自己的话</span></span><br><span class="line">Send send = <span class="keyword">new</span> Send(socket);</span><br><span class="line">send.start();</span><br><span class="line"></span><br><span class="line">send.join();<span class="comment">//等我发送线程结束了，才结束整个程序</span></span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Send</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Send</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.socket = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">OutputStream outputStream = socket.getOutputStream();</span><br><span class="line"><span class="comment">//按行打印</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(outputStream);</span><br><span class="line"></span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从键盘不断的输入自己的话，给服务器发送，由服务器给其他人转发</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">System.out.print(<span class="string">"自己的话："</span>);</span><br><span class="line">String str = input.nextLine();</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"bye"</span>.equals(str))&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ps.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receive</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Receive</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.socket = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">InputStream inputStream = socket.getInputStream();</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(input.hasNextLine())&#123;</span><br><span class="line">String line = input.nextLine();</span><br><span class="line">System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-理解客户端、服务端"><a href="#4-5-理解客户端、服务端" class="headerlink" title="4.5 理解客户端、服务端"></a>4.5 理解客户端、服务端</h3><ul><li><p>客户端：</p><ul><li>自定义</li><li>浏览器(browser — server)</li></ul></li><li><p>服务端：</p><ul><li>自定义</li><li>Tomcat服务器</li></ul></li></ul><h2 id="5-UDP网络编程"><a href="#5-UDP网络编程" class="headerlink" title="5. UDP网络编程"></a>5. UDP网络编程</h2><p>UDP(User Datagram Protocol，用户数据报协议)：是一个无连接的传输层协议、提供面向事务的简单不可靠的信息传送服务，类似于短信。</p><h3 id="5-1-通信模型"><a href="#5-1-通信模型" class="headerlink" title="5.1 通信模型"></a>5.1 通信模型</h3><p>UDP协议是一种<strong>面向非连接</strong>的协议，面向非连接指的是在正式通信前不必与对方先建立连接，不管对方状态就直接发送，至于对方是否可以接收到这些数据内容，UDP协议无法控制，因此说，UDP协议是一种<strong>不可靠的</strong>协议。无连接的好处就是快，省内存空间和流量，因为维护连接需要创建大量的数据结构。UDP会尽最大努力交付数据，但不保证可靠交付，没有TCP的确认机制、重传机制，如果因为网络原因没有传送到对端，UDP也不会给应用层返回错误信息。</p><p>UDP协议是面向数据报文的信息传送服务。UDP在发送端没有缓冲区，对于应用层交付下来的报文在添加了首部之后就直接交付于ip层，不会进行合并，也不会进行拆分，而是一次交付一个完整的报文。比如我们要发送100个字节的报文，我们调用一次send()方法就会发送100字节，接收方也需要用receive()方法一次性接收100字节，不能使用循环每次获取10个字节，获取十次这样的做法。</p><p>UDP协议没有拥塞控制，所以当网络出现的拥塞不会导致主机发送数据的速率降低。虽然UDP的接收端有缓冲区，但是这个缓冲区只负责接收，并不会保证UDP报文的到达顺序是否和发送的顺序一致。因为网络传输的时候，由于网络拥塞的存在是很大的可能导致先发的报文比后发的报文晚到达。如果此时缓冲区满了，后面到达的报文将直接被丢弃。这个对实时应用来说很重要，比如：视频通话、直播等应用。</p><p>因此UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境，数据报大小限制在64K以下。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022035036.png" alt="image-20220131144712460"></p><p>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</p><p> UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证  UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</p><p> DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</p><p> UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</p><h3 id="5-2-开发步骤"><a href="#5-2-开发步骤" class="headerlink" title="5.2 开发步骤"></a>5.2 开发步骤</h3><p><strong>发送端程序包含以下四个基本的步骤：</strong></p><ul><li>创建DatagramSocket ：默认使用系统随机分配端口号。</li><li>创建DatagramPacket：将要发送的数据用字节数组表示，并指定要发送的数据长度，接收方的IP地址和端口号。</li><li>调用  该DatagramSocket 类对象的 send方法 ：发送数据报DatagramPacket对象。</li><li>关闭DatagramSocket 对象：发送端程序结束，关闭通信套接字。</li></ul><p><strong>接收端程序包含以下四个基本的步骤 ：</strong></p><ul><li>创建DatagramSocket ：指定监听的端口号。</li><li>创建DatagramPacket：指定接收数据用的字节数组，起到临时数据缓冲区的效果，并指定最大可以接收的数据长度。</li><li>调用  该DatagramSocket 类对象的receive方法 ：接收数据报DatagramPacket对象。。</li><li>关闭DatagramSocket ：接收端程序结束，关闭通信套接字。</li></ul><h3 id="5-3-演示发送和接收消息"><a href="#5-3-演示发送和接收消息" class="headerlink" title="5.3 演示发送和接收消息"></a>5.3 演示发送和接收消息</h3><p>基于UDP协议的网络编程仍然需要在通信实例的两端各建立一个Socket，但这两个Socket之间并没有虚拟链路，这两个Socket只是发送、接收数据报的对象，Java提供了DatagramSocket对象作为基于UDP协议的Socket，使用DatagramPacket代表DatagramSocket发送、接收的数据报。</p><h4 id="举例1："><a href="#举例1：" class="headerlink" title="举例1："></a>举例1：</h4><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">    <span class="keyword">byte</span>[] by = <span class="string">"hello,atguigu.com"</span>.getBytes();</span><br><span class="line">    DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(by, <span class="number">0</span>, by.length,     InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">10000</span>);</span><br><span class="line">    ds.send(dp);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ds != <span class="keyword">null</span>)</span><br><span class="line">        ds.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">64</span>];</span><br><span class="line">    DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(by, by.length);</span><br><span class="line">    ds.receive(dp);</span><br><span class="line">    String str = <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength());</span><br><span class="line">    System.out.println(str + <span class="string">"--"</span> + dp.getAddress());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ds != <span class="keyword">null</span>)</span><br><span class="line">        ds.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="举例2："><a href="#举例2：" class="headerlink" title="举例2："></a>举例2：</h4><p><strong>发送端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1、建立发送端的DatagramSocket</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要发送的数据</span></span><br><span class="line">        ArrayList&lt;String&gt; all = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        all.add(<span class="string">"尚硅谷让天下没有难学的技术！"</span>);</span><br><span class="line">        all.add(<span class="string">"学高端前沿的IT技术来尚硅谷！"</span>);</span><br><span class="line">        all.add(<span class="string">"尚硅谷让你的梦想变得更具体！"</span>);</span><br><span class="line">        all.add(<span class="string">"尚硅谷让你的努力更有价值！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收方的IP地址</span></span><br><span class="line">        InetAddress ip = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">//接收方的监听端口号</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9999</span>;</span><br><span class="line">        <span class="comment">//发送多个数据报</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; all.size(); i++) &#123;</span><br><span class="line"><span class="comment">//2、建立数据包DatagramPacket</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = all.get(i).getBytes();</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(data, <span class="number">0</span>, data.length, ip, port);</span><br><span class="line"><span class="comment">//3、调用Socket的发送方法</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、关闭Socket</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1、建立接收端的DatagramSocket，需要指定本端的监听端口号</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一直监听数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//2、建立数据包DatagramPacket</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">64</span>];</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buffer,buffer.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、调用Socket的接收方法</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、拆封数据</span></span><br><span class="line">            String str = <span class="keyword">new</span> String(dp.getData(),<span class="number">0</span>,dp.getLength());</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ds.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-URL编程"><a href="#6-URL编程" class="headerlink" title="6. URL编程"></a>6. URL编程</h2><h3 id="6-1-URL类"><a href="#6-1-URL类" class="headerlink" title="6.1 URL类"></a>6.1 URL类</h3><ul><li><p>URL(Uniform Resource Locator)：<strong>统一资源定位符</strong>，它表示 Internet 上某一资源的地址。</p></li><li><p>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp 站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。 </p></li><li><p>URL的基本结构由5部分组成：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;#片段名?参数列表</span><br></pre></td></tr></table></figure><ul><li><p>例如: <a href="http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123" target="_blank" rel="noopener">http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123</a></p><ul><li>片段名：即锚点，例如看小说，直接定位到章节</li><li>参数列表格式：参数名=参数值&amp;参数名=参数值….</li></ul></li><li><p>为了表示URL，java.net 中实现了<strong>类 URL</strong>。我们可以通过下面的构造器来初始化一个 URL 对象：</p><ul><li><p>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL url = new URL("http://www. atguigu.com/");</span><br></pre></td></tr></table></figure></li><li><p>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL downloadUrl = new URL(url, “download.html")</span><br></pre></td></tr></table></figure><p>public URL(String protocol, String host, String file); 例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL url = new URL("http", "www.atguigu.com", “download. html");</span><br></pre></td></tr></table></figure></li><li><p>public URL(String protocol, String host, int port, String file); 例如: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL gamelan = <span class="keyword">new</span> URL(<span class="string">"http"</span>, <span class="string">"www.atguigu.com"</span>, <span class="number">80</span>, “download.html<span class="string">");</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>URL类的构造器都声明抛出<strong>非运行时异常</strong>，必须要对这一异常进行处理，通常是用 <strong>try-catch 语句</strong>进行捕获。</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311022036723.png" alt="image-20220415013546074"></p><h3 id="6-2-URL类常用方法"><a href="#6-2-URL类常用方法" class="headerlink" title="6.2 URL类常用方法"></a>6.2 URL类常用方法</h3><p>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：</p><ul><li><p>public String getProtocol( )   获取该URL的协议名</p></li><li><p>public String getHost( )      获取该URL的主机名</p></li><li><p>public String getPort( )      获取该URL的端口号</p></li><li><p>public String getPath( )      获取该URL的文件路径</p></li><li><p>public String getFile( )       获取该URL的文件名</p></li><li><p>public String getQuery(  )    获取该URL的查询名</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">        String str=<span class="string">"http://192.168.21.107:8080/examples/abcd.jpg?name=Tom"</span>;</span><br><span class="line">        URL url=<span class="keyword">new</span> URL(str);</span><br><span class="line">        System.out.println(<span class="string">"协议:"</span>+url.getProtocol());</span><br><span class="line">        System.out.println(<span class="string">"主机号:"</span>+url.getHost());</span><br><span class="line">        System.out.println(<span class="string">"端口号:"</span>+url.getPort());</span><br><span class="line">        System.out.println(<span class="string">"文件路径:"</span>+url.getPath());</span><br><span class="line">        System.out.println(<span class="string">"文件名:"</span>+url.getFile());</span><br><span class="line">        System.out.println(<span class="string">"参数列表:"</span>+url.getQuery());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311031629101.png" alt="image-20231103162911038"></p><h3 id="6-3-针对HTTP协议的URLConnection类"><a href="#6-3-针对HTTP协议的URLConnection类" class="headerlink" title="6.3 针对HTTP协议的URLConnection类"></a>6.3 针对HTTP协议的URLConnection类</h3><ul><li><p>URL的方法 openStream()：<strong>能从网络上读取数据</strong></p></li><li><p>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。</p></li><li><p>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection 对象。如果连接过程失败，将产生IOException. </p><ul><li><pre><code>String str=&quot;http://raw.githubusercontent.com/.images/202311031512799.png&quot;;URL url=new URL(str);HttpURLConnection urlConnection= (HttpURLConnection) url.openConnection();<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。</span><br><span class="line"></span><br><span class="line">  - public Object getContent( ) throws IOException</span><br><span class="line">  - public int getContentLength( )</span><br><span class="line">  - public String getContentType( )</span><br><span class="line">  - public long getDate( )</span><br><span class="line">  - public long getLastModified( )</span><br><span class="line">  - public InputStream getInputStream ( ) throws IOException</span><br><span class="line">  - public OutputSteram getOutputStream( )throws IOException</span><br></pre></td></tr></table></figure>import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.io.*;public class UrlTestDown {  public static void main(String[] args) throws IOException {      //将URL代表的资源下载到本地      //1.获取URL实例      String str=&quot;http://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311031512799.png&quot;;      URL url=new URL(str);      //2.建立与服务器端的连接      HttpURLConnection urlConnection= (HttpURLConnection) url.openConnection();      //3.获取输入流(从服务器得到)、创建输出流(存储到本地)      InputStream is = urlConnection.getInputStream();      File file=new File(&quot;hahha.png&quot;);      FileOutputStream fos=new FileOutputStream(file);      //4.读写数据      byte[] buffer = new byte[1024];      int len;      while ((len = is.read(buffer)) != -1) {          fos.write(buffer, 0, len);      }      System.out.println(&quot;文件下载完成&quot;);      //5.关闭资源      fos.close();      is.close();      urlConnection.disconnect(); //还比较特殊  }}</code></pre></li></ul><p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20231103164404714.png" alt="image-20231103164404714"></p></li></ul><h3 id="6-4-小结"><a href="#6-4-小结" class="headerlink" title="6.4 小结"></a>6.4 小结</h3><ul><li>位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。</li><li>客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。</li><li>Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP 地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。</li><li>类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li><li>类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示 Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第16章-网络编程&quot;&gt;&lt;a href=&quot;#第16章-网络编程&quot; class=&quot;headerlink&quot; title=&quot;第16章_网络编程&quot;&gt;&lt;/a&gt;第16章_网络编程&lt;/h1&gt;&lt;h2 id=&quot;本章专题与脉络&quot;&gt;&lt;a href=&quot;#本章专题与脉络&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-File类和IO流</title>
    <link href="https://larkkkkkkk.github.io/2023/10/31/JAVA-File%E7%B1%BB%E5%92%8CIO%E6%B5%81/"/>
    <id>https://larkkkkkkk.github.io/2023/10/31/JAVA-File%E7%B1%BB%E5%92%8CIO%E6%B5%81/</id>
    <published>2023-10-31T13:35:08.000Z</published>
    <updated>2023-11-02T08:46:02.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第15章-File类与IO流"><a href="#第15章-File类与IO流" class="headerlink" title="第15章_File类与IO流"></a>第15章_File类与IO流</h1><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010935879.png" alt="第3阶段：Java高级应用-第15章" style="zoom:67%;"><hr><h2 id="1-java-io-File类的使用"><a href="#1-java-io-File类的使用" class="headerlink" title="1. java.io.File类的使用"></a>1. java.io.File类的使用</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><ul><li>File类及本章下的各种流，都定义在<strong>java.io</strong>包下。</li><li>一个File对象  —-代表—-&gt;  硬盘或网络中可能存在的一个文件/文件目录（俗称文件夹），与平台无关。（体会万事万物皆对象）</li><li>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。<ul><li>File对象可以作为参数传递给流的构造器。</li></ul></li><li>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</li></ul><h3 id="1-2-构造器"><a href="#1-2-构造器" class="headerlink" title="1.2 构造器"></a>1.2 构造器</h3><ul><li><code>public File(String pathname)</code> ：以pathname为路径创建File对象，可以是绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。</li><li><code>public File(String parent, String child)</code> ：以parent为父路径，child为子路径创建File对象。</li><li><code>public File(File parent, String child)</code> ：根据一个父File对象和子文件路径创建File对象</li></ul><p>关于路径：</p><ul><li><strong>绝对路径：</strong>从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径：</strong>相对于<code>项目目录</code>的路径，这是一个便捷的路径，开发中经常使用。<ul><li>IDEA中，main中的文件的相对路径，是相对于”<code>当前工程project</code>“</li><li>IDEA中，单元测试方法中的文件的相对路径，是相对于”<code>当前模块module</code>“</li></ul></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileObjectTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.File(String pathname)</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\javacode\\test\\abc"</span>);</span><br><span class="line">        System.out.println(file1.getAbsoluteFile());  <span class="comment">// D:\javacode\test\abc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.File(String parent,String child) 以parent为父路径，child为子路径创建File对象</span></span><br><span class="line">        <span class="comment">//参数1：一定是一个文件目录</span></span><br><span class="line">        <span class="comment">//参数2：可以是一个文件，也可以是一个文件目录</span></span><br><span class="line">        String parent = <span class="string">"D:\\aaa"</span>;</span><br><span class="line">        String child = <span class="string">"bbb.txt"</span>;</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(parent, child);</span><br><span class="line">        System.out.println(file2.getAbsoluteFile());   <span class="comment">// D:\aaa\bbb.txt </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.File(File parent,String child)  根据一个父File对象和子文件路径创建File对象</span></span><br><span class="line">        <span class="comment">// 参数1：一定是一个文件目录</span></span><br><span class="line">        <span class="comment">//参数2：可以是一个文件，也可以是一个文件目录</span></span><br><span class="line">        File parentDir = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">        String childFile = <span class="string">"bbb.txt"</span>;</span><br><span class="line">        File file3 = <span class="keyword">new</span> File(parentDir, childFile);</span><br><span class="line">        System.out.println(file3.getAbsoluteFile());  <span class="comment">// D:\aaa\bbb.txt </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"d:\\atguigu\\javase\\HelloIO.java"</span>); <span class="comment">//绝对路径</span></span><br><span class="line">        System.out.println(<span class="string">"文件/目录的名称："</span> + f1.getName());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的构造路径名："</span> + f1.getPath());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的绝对路径名："</span> + f1.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的父目录名："</span> + f1.getParent());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"/HelloIO.java"</span>);<span class="comment">//绝对路径，从根路径开始</span></span><br><span class="line">        System.out.println(<span class="string">"文件/目录的名称："</span> + f2.getName());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的构造路径名："</span> + f2.getPath());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的绝对路径名："</span> + f2.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的父目录名："</span> + f2.getParent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">"HelloIO.java"</span>);<span class="comment">//相对路径</span></span><br><span class="line">        System.out.println(<span class="string">"user.dir ="</span> + System.getProperty(<span class="string">"user.dir"</span>));</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的名称："</span> + f3.getName());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的构造路径名："</span> + f3.getPath());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的绝对路径名："</span> + f3.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的父目录名："</span> + f3.getParent());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        File f5 = <span class="keyword">new</span> File(<span class="string">"HelloIO.java"</span>);<span class="comment">//相对路径</span></span><br><span class="line">        System.out.println(<span class="string">"user.dir ="</span> + System.getProperty(<span class="string">"user.dir"</span>));</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的名称："</span> + f5.getName());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的构造路径名："</span> + f5.getPath());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的绝对路径名："</span> + f5.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"文件/目录的父目录名："</span> + f5.getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li><p>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</p></li><li><p>window的路径分隔符使用“\”，而Java程序中的“\”表示转义字符，所以在Windows中表示路径，需要用“\”。或者直接使用“/”也可以，Java程序支持将“/”当成平台无关的<code>路径分隔符</code>。或者直接使用File.separator常量值表示。比如：</p><p>File file2 = new File(“d:” + File.separator + “atguigu” + File.separator + “info.txt”);</p></li><li><p>当构造路径是绝对路径时，那么getPath和getAbsolutePath结果一样</p><p>当构造路径是相对路径时，那么getAbsolutePath的路径 = user.dir的路径 + 构造路径</p></li></ol></blockquote><h3 id="1-3-常用方法"><a href="#1-3-常用方法" class="headerlink" title="1.3 常用方法"></a>1.3 常用方法</h3><h4 id="1、获取文件和目录基本信息"><a href="#1、获取文件和目录基本信息" class="headerlink" title="1、获取文件和目录基本信息"></a>1、获取文件和目录基本信息</h4><ul><li>public String getName() ：获取名称</li><li>public String getPath() ：获取路径</li><li><code>public String getAbsolutePath()</code>：获取绝对路径</li><li>public File getAbsoluteFile()：获取绝对路径表示的文件</li><li><code>public String getParent()</code>：获取上层文件目录路径。若无，返回null</li><li>public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</li><li>public long lastModified() ：获取最后一次的修改时间，毫秒值</li></ul><blockquote><p>如果File对象代表的文件或目录存在，则File对象实例初始化时，就会用硬盘中对应文件或目录的属性信息（例如，时间、类型等）为File对象的属性赋值，否则除了路径和名称，File对象的其他属性将会保留默认值。</p></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010936470.png" alt="image-20220412215446368" style="zoom:80%;"><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//文件存在</span></span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:\\宋亚翔-学业奖材料\\宋亚翔.docx"</span>);</span><br><span class="line">    System.out.println(<span class="string">"文件名称:"</span>+file.getName());</span><br><span class="line">    System.out.println(<span class="string">"文件路径:"</span>+file.getPath());</span><br><span class="line">    System.out.println(<span class="string">"文件绝对路径:"</span>+file.getAbsoluteFile());</span><br><span class="line">    System.out.println(<span class="string">"绝对路径的文件:"</span>+file.getAbsoluteFile());</span><br><span class="line">    System.out.println(<span class="string">"上层文件目录路径:"</span>+file.getParent());</span><br><span class="line">    System.out.println(<span class="string">"文件大小(字节数):"</span>+file.length());</span><br><span class="line">    System.out.println(<span class="string">"足迹后一次修改时间(毫秒值):"</span>+file.lastModified());</span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------------------------------"</span>);</span><br><span class="line">    <span class="comment">//文件不存在</span></span><br><span class="line">    File file1=<span class="keyword">new</span> File(<span class="string">"E:\\宋亚翔-学业奖材料\\李四.docx"</span>);</span><br><span class="line">    System.out.println(<span class="string">"文件名称:"</span>+file1.getName());</span><br><span class="line">    System.out.println(<span class="string">"文件路径:"</span>+file1.getPath());</span><br><span class="line">    System.out.println(<span class="string">"文件绝对路径:"</span>+file1.getAbsoluteFile());</span><br><span class="line">    System.out.println(<span class="string">"绝对路径的文件:"</span>+file1.getAbsoluteFile());</span><br><span class="line">    System.out.println(<span class="string">"上层文件目录路径:"</span>+file1.getParent());</span><br><span class="line">    <span class="comment">//其他属性保留默认值</span></span><br><span class="line">    System.out.println(<span class="string">"文件大小(字节数):"</span>+file1.length());</span><br><span class="line">    System.out.println(<span class="string">"足迹后一次修改时间(毫秒值):"</span>+file1.lastModified());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311011034030.png" alt="image-20231101103403951"></p><h4 id="2、列出目录的下一级"><a href="#2、列出目录的下一级" class="headerlink" title="2、列出目录的下一级"></a>2、列出目录的下一级</h4><ul><li>public String[] list() ：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li>public File[] listFiles() ：返回一个File数组，表示该File目录中的所有的子文件或目录。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//文件存在</span></span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:\\宋亚翔-学业奖材料"</span>);</span><br><span class="line">    String[] strs=file.list();</span><br><span class="line">    <span class="keyword">for</span>(String temp:strs)&#123;</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">    File[] files = file.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File temp:files)&#123;</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311011102588.png" alt="image-20231101110256535"></p><h4 id="3、File类的重命名功能"><a href="#3、File类的重命名功能" class="headerlink" title="3、File类的重命名功能"></a>3、File类的重命名功能</h4><ul><li>public boolean renameTo(File dest):把文件重命名为指定的文件路径。</li></ul><h4 id="4、判断功能的方法"><a href="#4、判断功能的方法" class="headerlink" title="4、判断功能的方法"></a>4、判断功能的方法</h4><ul><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li><li>public boolean canRead() ：判断是否可读</li><li>public boolean canWrite() ：判断是否可写</li><li>public boolean isHidden() ：判断是否隐藏</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//文件存在</span></span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:\\宋亚翔-学业奖材料\\宋亚翔.docx"</span>);</span><br><span class="line">    System.out.println(<span class="string">"文件是否存在:"</span>+file.exists());</span><br><span class="line">    System.out.println(<span class="string">"file是否为目录:"</span>+file.isDirectory());</span><br><span class="line">    System.out.println(<span class="string">"file是否为文件:"</span>+file.isFile());</span><br><span class="line">    System.out.println(<span class="string">"file是否可读:"</span>+file.canRead());</span><br><span class="line">    System.out.println(<span class="string">"file是否可写:"</span>+file.canWrite());</span><br><span class="line">    System.out.println(<span class="string">"file是否隐藏:"</span>+file.isHidden());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311011107117.png" alt="image-20231101110745077"></p><blockquote><p>如果文件或目录不存在，那么exists()、isFile()和isDirectory()都是返回true</p></blockquote><h4 id="5、创建、删除功能"><a href="#5、创建、删除功能" class="headerlink" title="5、创建、删除功能"></a>5、创建、删除功能</h4><ul><li><code>public boolean createNewFile()</code> ：创建文件。若文件存在，则不创建，返回false。</li><li><code>public boolean mkdir()</code> ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</li><li><code>public boolean mkdirs()</code> ：创建文件目录。如果上层文件目录不存在，一并创建。</li><li><code>public boolean delete()</code> ：删除文件或者文件夹<br>删除注意事项：① Java中的删除不走回收站。② 要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCreateDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 文件的创建</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"aaa.txt"</span>);</span><br><span class="line">        System.out.println(<span class="string">"aaa.txt是否存在:"</span>+f.exists()); </span><br><span class="line">        System.out.println(<span class="string">"aaa.txt是否创建:"</span>+f.createNewFile()); </span><br><span class="line">        System.out.println(<span class="string">"aaa.txt是否存在:"</span>+f.exists()); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 目录的创建</span></span><br><span class="line">        File f2= <span class="keyword">new</span> File(<span class="string">"newDir"</span>);</span><br><span class="line">        System.out.println(<span class="string">"newDir是否存在:"</span>+f2.exists());</span><br><span class="line">        System.out.println(<span class="string">"newDir是否创建:"</span>+f2.mkdir());</span><br><span class="line">        System.out.println(<span class="string">"newDir是否存在:"</span>+f2.exists());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一级目录</span></span><br><span class="line">        File f3= <span class="keyword">new</span> File(<span class="string">"newDira\\newDirb"</span>);</span><br><span class="line">        System.out.println(<span class="string">"newDira\\newDirb创建："</span> + f3.mkdir());</span><br><span class="line">        File f4= <span class="keyword">new</span> File(<span class="string">"newDir\\newDirb"</span>);</span><br><span class="line">        System.out.println(<span class="string">"newDir\\newDirb创建："</span> + f4.mkdir());</span><br><span class="line">        <span class="comment">// 创建多级目录</span></span><br><span class="line">        File f5= <span class="keyword">new</span> File(<span class="string">"newDira\\newDirb"</span>);</span><br><span class="line">        System.out.println(<span class="string">"newDira\\newDirb创建："</span> + f5.mkdirs());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件的删除</span></span><br><span class="line">        System.out.println(<span class="string">"aaa.txt删除："</span> + f.delete());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 目录的删除   delete方法，如果此File表示目录，则目录必须为空才能删除</span></span><br><span class="line">        System.out.println(<span class="string">"newDir删除："</span> + f2.delete());</span><br><span class="line">        System.out.println(<span class="string">"newDir\\newDirb删除："</span> + f4.delete()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">aaa.txt是否存在:<span class="keyword">false</span></span><br><span class="line">aaa.txt是否创建:<span class="keyword">true</span></span><br><span class="line">aaa.txt是否存在:<span class="keyword">true</span></span><br><span class="line">newDir是否存在:<span class="keyword">false</span></span><br><span class="line">newDir是否创建:<span class="keyword">true</span></span><br><span class="line">newDir是否存在:<span class="keyword">true</span></span><br><span class="line">newDira\newDirb创建：<span class="keyword">false</span></span><br><span class="line">newDir\newDirb创建：<span class="keyword">true</span></span><br><span class="line">newDira\newDirb创建：<span class="keyword">true</span></span><br><span class="line">aaa.txt删除：<span class="keyword">true</span></span><br><span class="line">newDir删除：<span class="keyword">false</span></span><br><span class="line">newDir\newDirb删除：<span class="keyword">true</span></span><br></pre></td></tr></table></figure><blockquote><p>API中说明：delete方法，如果此File表示目录，则目录必须为空才能删除。</p></blockquote><h3 id="1-4-练习"><a href="#1-4-练习" class="headerlink" title="1.4 练习"></a>1.4 练习</h3><p>练习1：利用File构造器，new 一个文件目录file</p><p>​      1) 在其中创建多个文件和目录</p><pre><code>2) 编写方法，实现删除file中指定文件的操作</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test6() throws IOException &#123;</span><br><span class="line">    File file&#x3D;new File(&quot;F:\\test1&quot;);</span><br><span class="line">    File file1&#x3D;new File(&quot;F:\\test1\\abc.txt&quot;);</span><br><span class="line">    File file2&#x3D;new File(&quot;F:\\test1\\aaa.txt&quot;);</span><br><span class="line">    File file3&#x3D;new File(&quot;F:\\test1\\test1mulu&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建一个文件目录</span><br><span class="line">    System.out.println(file.mkdir());  &#x2F;&#x2F;创建一个test1目录</span><br><span class="line">    &#x2F;&#x2F;创建多个文件和目录</span><br><span class="line">    System.out.println(file1.createNewFile());   &#x2F;&#x2F;新增abc.txt文件</span><br><span class="line">    System.out.println(file2.createNewFile());   &#x2F;&#x2F;新增aaa.txt文件</span><br><span class="line">    System.out.println(file3.mkdir());  &#x2F;&#x2F;新增test1mulu文件</span><br><span class="line">    &#x2F;&#x2F;删除file中指定文件</span><br><span class="line">    System.out.println(file1.delete());  &#x2F;&#x2F;删除abc.txt文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311011433250.png" alt="image-20231101143332206"></p><p>练习2：判断指定目录下是否有后缀名为.jpg的文件。如果有，就输出该文件名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindJPGFileTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//方法1：</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">File srcFile = <span class="keyword">new</span> File(<span class="string">"d:\\code"</span>);</span><br><span class="line"></span><br><span class="line">String[] fileNames = srcFile.list();  <span class="comment">//将code目录下所有文件转为字符串数组</span></span><br><span class="line"><span class="keyword">for</span>(String fileName : fileNames)&#123;</span><br><span class="line"><span class="keyword">if</span>(fileName.endsWith(<span class="string">".jpg"</span>))&#123;  <span class="comment">//查看是否以.jpg文件名结束</span></span><br><span class="line">System.out.println(fileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//方法2：</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">File srcFile = <span class="keyword">new</span> File(<span class="string">"d:\\code"</span>);</span><br><span class="line"></span><br><span class="line">File[] listFiles = srcFile.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File file : listFiles)&#123;</span><br><span class="line"><span class="keyword">if</span>(file.getName().endsWith(<span class="string">".jpg"</span>))&#123;</span><br><span class="line">System.out.println(file.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//方法3：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File类提供了两个文件过滤器方法</span></span><br><span class="line"><span class="comment"> * public String[] list(FilenameFilter filter)</span></span><br><span class="line"><span class="comment"> * public File[] listFiles(FileFilter filter)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">File srcFile = <span class="keyword">new</span> File(<span class="string">"d:\\code"</span>);</span><br><span class="line"></span><br><span class="line">File[] subFiles = srcFile.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name.endsWith(<span class="string">".jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(File file : subFiles)&#123;</span><br><span class="line">System.out.println(file.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习3：遍历指定目录所有文件名称，包括子文件目录中的文件。</p><p>  拓展1：并计算指定目录占用空间的大小</p><p>  拓展2：删除指定文件目录及其下的所有文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListFilesTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//练习3：(方式1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSubFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印目录的子文件</span></span><br><span class="line">        File[] subfiles = dir.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File f : subfiles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isDirectory()) &#123;<span class="comment">// 文件目录</span></span><br><span class="line">                printSubFile(f);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 文件</span></span><br><span class="line">                System.out.println(f.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //练习3：(方式2)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAllSubFiles</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            File[] all = file.listFiles();</span><br><span class="line">            <span class="comment">// 如果all[i]是文件，直接打印</span></span><br><span class="line">            <span class="comment">// 如果all[i]是目录，接着再获取它的下一级</span></span><br><span class="line">            <span class="keyword">for</span> (File f : all) &#123;</span><br><span class="line">                listAllSubFiles(f);<span class="comment">// 递归调用：自己调用自己就叫递归</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListAllFiles</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建目录对象</span></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"E:\\teach\\01_javaSE\\_尚硅谷Java编程语言\\3_软件"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.打印目录的子文件</span></span><br><span class="line">        printSubFile(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拓展1：求指定目录所在空间的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDirectorySize</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// file是文件，那么直接返回file.length()</span></span><br><span class="line">        <span class="comment">// file是目录，把它的下一级的所有file大小加起来就是它的总大小</span></span><br><span class="line">        <span class="keyword">long</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            size = file.length();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            File[] all = file.listFiles();<span class="comment">// 获取file的下一级</span></span><br><span class="line">            <span class="comment">// 累加all[i]的大小</span></span><br><span class="line">            <span class="keyword">for</span> (File f : all) &#123;</span><br><span class="line">                size += getDirectorySize(f);<span class="comment">// f的大小;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拓展2：删除指定的目录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDirectory</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果file是文件，直接delete</span></span><br><span class="line">        <span class="comment">// 如果file是目录，先把它的下一级干掉，然后删除自己</span></span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            File[] all = file.listFiles();</span><br><span class="line">            <span class="comment">// 循环删除的是file的下一级</span></span><br><span class="line">            <span class="keyword">for</span> (File f : all) &#123;<span class="comment">// f代表file的每一个下级</span></span><br><span class="line">                deleteDirectory(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除自己</span></span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-IO流原理及流的分类"><a href="#2-IO流原理及流的分类" class="headerlink" title="2. IO流原理及流的分类"></a>2. IO流原理及流的分类</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010937721.png" alt="image-20220412224132724"></p><h3 id="2-1-Java-IO原理"><a href="#2-1-Java-IO原理" class="headerlink" title="2.1 Java IO原理"></a>2.1 Java IO原理</h3><ul><li><p>Java程序中，<strong>数据的输入/输出操作</strong>以“<code>流(stream)</code>” 的方式进行，可以看做是一种数据的流动。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010937428.png" alt="image-20220503123117300" style="zoom: 80%;"></li><li><p>I/O流中的I/O是<code>Input/Output</code>的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</p><ul><li><code>输入input</code>：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</li><li><code>输出output</code>：将程序（内存）数据输出到磁盘、光盘等存储设备中。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010937530.png" alt="image-20220412224700133"></p><h3 id="2-2-流的分类"><a href="#2-2-流的分类" class="headerlink" title="2.2 流的分类"></a>2.2 流的分类</h3><p><code>java.io</code>包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过<code>标准的方法</code>输入或输出数据。</p><ul><li><p>按<strong>数据的流向不同</strong>  —-&gt; ：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 <ul><li>以InputStream、Reader结尾</li></ul></li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。<ul><li>以OutputStream、Writer结尾</li></ul></li></ul></li><li><p>按<strong>操作数据单位的不同 ** —-&gt; ：</strong>字节流（8bit）<strong>和</strong>字符流（16bit）**。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。<ul><li>以InputStream、OutputStream结尾</li></ul></li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。<ul><li>以Reader、Writer结尾</li></ul></li></ul></li><li><p>根据<strong>IO流的角色不同</strong> —-&gt; ：<strong>节点流</strong>和<strong>处理流</strong>。</p><ul><li><p><strong>节点流</strong>：直接从数据源或目的地读写数据</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010937732.png" alt="image-20220412230745170"></p></li><li><p><strong>处理流</strong>：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010937489.png" alt="image-20220412230751461"></p></li></ul></li></ul><p>小结：图解</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010937159.png" alt="image-20220412225253349" style="zoom:67%;"><h3 id="2-3-流的API"><a href="#2-3-流的API" class="headerlink" title="2.3 流的API"></a>2.3 流的API</h3><ul><li>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。</li></ul><table><thead><tr><th align="center">（抽象基类）</th><th align="center">输入流</th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center">字节流(以字节为单位，读写数据)</td><td align="center">InputStream</td><td align="center">OutputStream</td></tr><tr><td align="center">字符流(以字符为单位，读写数据)</td><td align="center">Reader</td><td align="center">Writer</td></tr></tbody></table><ul><li>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010938499.png" alt="image-20220412230501953"></p><p><strong>常用节点流：</strong> 　</p><ul><li>文件流： FileInputStream、FileOutputStrean、FileReader、FileWriter </li><li>字节/字符数组流： ByteArrayInputStream、ByteArrayOutputStream、CharArrayReader、CharArrayWriter <ul><li>对数组进行处理的节点流（对应的不再是文件，而是内存中的一个数组）。</li></ul></li></ul><p><strong>常用处理流：</strong></p><ul><li>缓冲流：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter<ul><li>作用：增加缓冲功能，避免频繁读写硬盘，进而提升读写效率。</li></ul></li><li>转换流：InputStreamReader、OutputStreamReader<ul><li>作用：实现字节流和字符流之间的转换。</li></ul></li><li>对象流：ObjectInputStream、ObjectOutputStream<ul><li>作用：提供直接读写Java对象功能</li></ul></li></ul><h2 id="3-节点流之一：FileReader-FileWriter"><a href="#3-节点流之一：FileReader-FileWriter" class="headerlink" title="3. 节点流之一：FileReader\FileWriter"></a>3. 节点流之一：FileReader\FileWriter</h2><h3 id="3-1-Reader与Writer"><a href="#3-1-Reader与Writer" class="headerlink" title="3.1 Reader与Writer"></a>3.1 Reader与Writer</h3><p>Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。不能操作图片，视频等非文本文件。</p><blockquote><p>常见的文本文件有如下的格式：.txt、.java、.c、.cpp、.py等</p><p>注意：.doc、.xls、.ppt这些都不是文本文件。</p></blockquote><h4 id="3-1-1-字符输入流：Reader"><a href="#3-1-1-字符输入流：Reader" class="headerlink" title="3.1.1 字符输入流：Reader"></a>3.1.1 字符输入流：Reader</h4><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的父类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public int read()</code>： 从输入流读取一个字符。 虽然读取了一个字符，但是会自动提升为int类型。返回该字符的Unicode编码值。如果已经到达流末尾了，则返回-1。</li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。每次最多读取cbuf.length个字符。返回实际读取的字符个数。如果已经到达流末尾，没有数据可读，则返回-1。 </li><li><code>public int read(char[] cbuf,int off,int len)</code>：从输入流中读取一些字符，并将它们存储到字符数组 cbuf中，从cbuf[off]开始的位置存储。每次最多读取len个字符。返回实际读取的字符个数。如果已经到达流末尾，没有数据可读，则返回-1。 </li><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li></ul><blockquote><p>注意：当完成流的操作时，必须调用close()方法，释放系统资源，否则会造成内存泄漏。</p></blockquote><h4 id="3-1-2-字符输出流：Writer"><a href="#3-1-2-字符输出流：Writer" class="headerlink" title="3.1.2 字符输出流：Writer"></a>3.1.2 字符输出流：Writer</h4><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void write(int c)</code> ：写出单个字符。</li><li><code>public void write(char[] cbuf)</code>：写出字符数组。 </li><li><code>public void write(char[] cbuf, int off, int len)</code>：写出字符数组的某一部分。off：数组的开始索引；len：写出的字符个数。 </li><li><code>public void write(String str)</code>：写出字符串。 </li><li><code>public void write(String str, int off, int len)</code> ：写出字符串的某一部分。off：字符串的开始索引；len：写出的字符个数。</li><li><code>public void flush()</code>：刷新该流的缓冲。  </li><li><code>public void close()</code> ：关闭此流。</li></ul><blockquote><p>注意：当完成流的操作时，必须调用close()方法，释放系统资源，否则会造成内存泄漏。</p></blockquote><h3 id="3-2-FileReader-与-FileWriter"><a href="#3-2-FileReader-与-FileWriter" class="headerlink" title="3.2 FileReader 与 FileWriter"></a>3.2 FileReader 与 FileWriter</h3><h4 id="3-2-1-FileReader"><a href="#3-2-1-FileReader" class="headerlink" title="3.2.1 FileReader"></a>3.2.1 FileReader</h4><p><code>java.io.FileReader</code>类用于读取字符文件，构造时使用系统默认的字符编码和默认字节缓冲区。</p><ul><li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li><li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </li></ul><p><strong>举例：</strong>读取hello.txt文件中的字符数据，并显示在控制台上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现方式1</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        <span class="comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="comment">//3. 通过相关流的方法，读取文件中的数据</span></span><br><span class="line"><span class="comment">//        int data = fr.read(); //每调用一次读取一个字符</span></span><br><span class="line"><span class="comment">//        while (data != -1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char) data);</span></span><br><span class="line"><span class="comment">//            data = fr.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 关闭相关的流资源，避免出现内存泄漏</span></span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现方式2：在方式1的基础上改进，使用try-catch-finally处理异常。保证流是可以关闭的</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">            <span class="comment">//3. 通过相关流的方法，读取文件中的数据</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * read():每次从对接的文件中读取一个字符。并将此字符返回。</span></span><br><span class="line"><span class="comment">             * 如果返回值为-1,则表示文件到了末尾，可以不再读取。</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line"><span class="comment">//            int data = fr.read();</span></span><br><span class="line"><span class="comment">//            while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//                data = fr.read();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4. 关闭相关的流资源，避免出现内存泄漏</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现方式3：调用read(char[] cbuf),每次从文件中读取多个字符</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建File类的对象，对应着物理磁盘上的某个文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="comment">//2. 创建FileReader流对象，将File类的对象作为参数传递到FileReader的构造器中</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">            <span class="comment">//3. 通过相关流的方法，读取文件中的数据</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * read(char[] cbuf) : 每次将文件中的数据读入到cbuf数组中，并返回读入到数组中的</span></span><br><span class="line"><span class="comment">             * 字符的个数。</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">int</span> len; <span class="comment">//记录每次读入的字符的个数</span></span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//处理char[]数组即可</span></span><br><span class="line">                <span class="comment">//错误：</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//错误：</span></span><br><span class="line"><span class="comment">//                String str = new String(cbuf);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确：</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; len;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//正确：</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuf, <span class="number">0</span>, len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4. 关闭相关的流资源，避免出现内存泄漏</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同实现方式的类比：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010938769.png" alt="image-20220518095907714"></p><h4 id="3-2-2-FileWriter"><a href="#3-2-2-FileWriter" class="headerlink" title="3.2.2 FileWriter"></a>3.2.2 FileWriter</h4><p><code>java.io.FileWriter</code>类用于写出字符到文件，构造时使用系统默认的字符编码和默认字节缓冲区。</p><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。  </li><li><code>FileWriter(File file,boolean append)</code>： 创建一个新的 FileWriter，指明是否在现有文件末尾追加内容。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"fw.txt"</span>));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.write(<span class="string">'b'</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">        fw.write(<span class="string">'C'</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">        fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"fw.txt"</span>));</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">"尚硅谷"</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出字符数组</span></span><br><span class="line">        fw.write(chars); <span class="comment">// 尚硅谷</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出从索引1开始，2个字符。</span></span><br><span class="line">        fw.write(chars,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 硅谷</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        String msg = <span class="string">"尚硅谷"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出字符数组</span></span><br><span class="line">        fw.write(msg); <span class="comment">//尚硅谷</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出从索引1开始，2个字符。</span></span><br><span class="line">        fw.write(msg,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 硅谷</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建File的对象</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"personinfo.txt"</span>);</span><br><span class="line">            <span class="comment">//2. 创建FileWriter的对象，将File对象作为参数传递到FileWriter的构造器中</span></span><br><span class="line">            <span class="comment">//如果输出的文件已存在，则会对现有的文件进行覆盖</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line"><span class="comment">//            fw = new FileWriter(file,false);</span></span><br><span class="line">            <span class="comment">//如果输出的文件已存在，则会在现有的文件末尾写入数据</span></span><br><span class="line"><span class="comment">//            fw = new FileWriter(file,true);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 调用相关的方法，实现数据的写出操作</span></span><br><span class="line">            <span class="comment">//write(String str) / write(char[] cbuf)</span></span><br><span class="line">            fw.write(<span class="string">"I love you,"</span>);</span><br><span class="line">            fw.write(<span class="string">"you love him."</span>);</span><br><span class="line">            fw.write(<span class="string">"so sad"</span>.toCharArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4. 关闭资源，避免内存泄漏</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-小结"><a href="#3-2-3-小结" class="headerlink" title="3.2.3 小结"></a>3.2.3 小结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">① 因为出现流资源的调用，为了避免内存泄漏，需要使用try-catch-finally处理异常</span><br><span class="line">② 对于输入流来说，File类的对象必须在物理磁盘上存在，否则执行就会报FileNotFoundException。如果传入的是一个目录，则会报IOException异常。</span><br><span class="line">对于输出流来说，File类的对象是可以不存在的。</span><br><span class="line">   &gt; 如果File类的对象不存在，则可以在输出的过程中，自动创建File类的对象</span><br><span class="line">   &gt; 如果File类的对象存在，</span><br><span class="line">      &gt; 如果调用FileWriter(File file)或FileWriter(File file,false)，输出时会新建File文件覆盖已有的文件</span><br><span class="line">      &gt; 如果调用FileWriter(File file,true)构造器，则在现有的文件末尾追加写出内容。</span><br></pre></td></tr></table></figure><h3 id="3-3-关于flush（刷新）"><a href="#3-3-关于flush（刷新）" class="headerlink" title="3.3  关于flush（刷新）"></a>3.3  关于flush（刷新）</h3><p>因为内置缓冲区的原因，如果FileWriter不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush()</code> 方法了。</p><ul><li><code>flush()</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close()</code>：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p>注意：即便是flush()方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWriteFlush</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">        <span class="comment">// 写出数据，通过flush</span></span><br><span class="line">        fw.write(<span class="string">'刷'</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        fw.write(<span class="string">'新'</span>); <span class="comment">// 继续写出第2个字符，写出成功</span></span><br><span class="line">        fw.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出数据，通过close</span></span><br><span class="line">        fw.write(<span class="string">'关'</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fw.write(<span class="string">'闭'</span>); <span class="comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-节点流之二：FileInputStream-FileOutputStream"><a href="#4-节点流之二：FileInputStream-FileOutputStream" class="headerlink" title="4. 节点流之二：FileInputStream\FileOutputStream"></a>4. 节点流之二：FileInputStream\FileOutputStream</h2><p>如果我们读取或写出的数据是非文本文件，则Reader、Writer就无能为力了，必须使用字节流。</p><h3 id="4-1-InputStream和OutputStream"><a href="#4-1-InputStream和OutputStream" class="headerlink" title="4.1 InputStream和OutputStream"></a>4.1 InputStream和OutputStream</h3><h4 id="4-1-1-字节输入流：InputStream"><a href="#4-1-1-字节输入流：InputStream" class="headerlink" title="4.1.1 字节输入流：InputStream"></a>4.1.1 字节输入流：InputStream</h4><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public int read()</code>： 从输入流读取一个字节。返回读取的字节值。虽然读取了一个字节，但是会自动提升为int类型。如果已经到达流末尾，没有数据可读，则返回-1。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。每次最多读取b.length个字节。返回实际读取的字节个数。如果已经到达流末尾，没有数据可读，则返回-1。 </li><li><code>public int read(byte[] b,int off,int len)</code>：从输入流中读取一些字节数，并将它们存储到字节数组 b中，从b[off]开始存储，每次最多读取len个字节 。返回实际读取的字节个数。如果已经到达流末尾，没有数据可读，则返回-1。 </li><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li></ul><blockquote><p>说明：close()方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h4 id="4-1-2-字节输出流：OutputStream"><a href="#4-1-2-字节输出流：OutputStream" class="headerlink" title="4.1.2 字节输出流：OutputStream"></a>4.1.2 字节输出流：OutputStream</h4><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void write(int b)</code> ：将指定的字节输出流。虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li></ul><blockquote><p>说明：close()方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h3 id="4-2-FileInputStream-与-FileOutputStream"><a href="#4-2-FileInputStream-与-FileOutputStream" class="headerlink" title="4.2 FileInputStream 与 FileOutputStream"></a>4.2 FileInputStream 与 FileOutputStream</h3><h4 id="4-2-1-FileInputStream"><a href="#4-2-1-FileInputStream" class="headerlink" title="4.2.1 FileInputStream"></a>4.2.1 FileInputStream</h4><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//read.txt文件中的内容如下：</span></span><br><span class="line">abcde</span><br></pre></td></tr></table></figure><p>读取操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">        <span class="comment">// 读取数据，返回一个字节</span></span><br><span class="line">        <span class="keyword">int</span> read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        <span class="comment">// 读取到末尾,返回-1</span></span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println(read);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        文件内容：abcde</span></span><br><span class="line"><span class="comment">        输出结果：</span></span><br><span class="line"><span class="comment">        a</span></span><br><span class="line"><span class="comment">        b</span></span><br><span class="line"><span class="comment">        c</span></span><br><span class="line"><span class="comment">        d</span></span><br><span class="line"><span class="comment">        e</span></span><br><span class="line"><span class="comment">        -1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">        <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">        <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        输出结果：</span></span><br><span class="line"><span class="comment">        ab</span></span><br><span class="line"><span class="comment">        cd</span></span><br><span class="line"><span class="comment">        ed</span></span><br><span class="line"><span class="comment">        最后错误数据`d`，是由于最后一次读取时，只读取一个字节`e`，数组中，</span></span><br><span class="line"><span class="comment">        上次读取的数据没有被完全替换，所以要通过`len` ，获取有效的字节</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">        <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b,<span class="number">0</span>,len));<span class="comment">//  len 每次读取的有效字节个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        输出结果：</span></span><br><span class="line"><span class="comment">        ab</span></span><br><span class="line"><span class="comment">        cd</span></span><br><span class="line"><span class="comment">        e</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-FileOutputStream"><a href="#4-2-2-FileOutputStream" class="headerlink" title="4.2.2 FileOutputStream"></a>4.2.2 FileOutputStream</h4><p><code>java.io.FileOutputStream</code>类是文件输出流，用于将数据写出到文件。</p><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流，写出由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流，指定的名称为写出文件。</li><li><code>public FileOutputStream(File file, boolean append)</code>：  创建文件输出流，指明是否在现有文件末尾追加内容。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意：应该使用try-catch-finally处理异常。这里出于方便阅读代码，使用了throws的方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">        fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">        fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">      <span class="comment">/*  输出结果：abc*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这段程序如果多运行几次，每次都会在原来文件末尾追加abcde</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line">        fos.write(b);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用FileInputStream\FileOutputStream，实现对文件的复制</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 造文件-造流</span></span><br><span class="line">            <span class="comment">//复制图片：成功</span></span><br><span class="line"><span class="comment">//            fis = new FileInputStream(new File("pony.jpg"));</span></span><br><span class="line"><span class="comment">//            fos = new FileOutputStream(new File("pony_copy1.jpg"));</span></span><br><span class="line">            <span class="comment">//复制文本文件：成功</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"hello.txt"</span>));</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 复制操作（读、写）</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//每次读入到buffer中字节的个数</span></span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"复制成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//3. 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>)</span><br><span class="line">                    fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>)</span><br><span class="line">                    fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-练习"><a href="#4-3-练习" class="headerlink" title="4.3 练习"></a>4.3 练习</h3><p><strong>练习：</strong>实现图片加密操作。</p><p>提示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010939433.png" alt="image-20220413002723838"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSecretTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//图片的加密  </span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"pony.jpg"</span>);</span><br><span class="line">            File file2 = <span class="keyword">new</span> File(<span class="string">"pony_secret.jpg"</span>);</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line">            <span class="comment">//方式2：每次读入一个字节数组，效率高</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                    buffer[i] = (<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"加密成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的解密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"pony_secret.jpg"</span>);</span><br><span class="line">            File file2 = <span class="keyword">new</span> File(<span class="string">"pony_unsecret.jpg"</span>);</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line">            <span class="comment">//方式2：每次读入一个字节数组，效率高</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                    buffer[i] = (<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"解密成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-处理流之一：缓冲流"><a href="#5-处理流之一：缓冲流" class="headerlink" title="5. 处理流之一：缓冲流"></a>5. 处理流之一：缓冲流</h2><ul><li><p><code>为了提高数据读写的速度</code>，Java API提供了带缓冲功能的流类：缓冲流。</p></li><li><p>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul></li><li><p>缓冲流的基本原理：在创建流对象时，内部会创建一个缓冲区数组（缺省使用<code>8192个字节(8Kb)</code>的缓冲区），通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010939538.png" alt="image-20220413002314063"></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010939697.png" alt="image-20220514183413011" style="zoom:80%;"><h3 id="5-1-构造器"><a href="#5-1-构造器" class="headerlink" title="5.1 构造器"></a>5.1 构造器</h3><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的字节型的缓冲输入流。 </li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的字节型的缓冲输出流。</li></ul><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"abc.jpg"</span>));</span><br><span class="line"><span class="comment">// 创建字节缓冲输出流</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"abc_copy.jpg"</span>));</span><br></pre></td></tr></table></figure><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个 新的字符型的缓冲输入流。 </li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的字符型的缓冲输出流。</li></ul><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"br.txt"</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"bw.txt"</span>));</span><br></pre></td></tr></table></figure><h3 id="5-2-效率测试"><a href="#5-2-效率测试" class="headerlink" title="5.2 效率测试"></a>5.2 效率测试</h3><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1：使用FileInputStream\FileOutputStream实现非文本文件的复制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithFileStream</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1. 造文件-造流</span></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(srcPath));</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(destPath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 复制操作（读、写）</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> len;<span class="comment">//每次读入到buffer中字节的个数</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"复制成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//3. 关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>)</span><br><span class="line">                fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>)</span><br><span class="line">                fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String srcPath = <span class="string">"C:\\Users\\shkstart\\Desktop\\01-复习.mp4"</span>;</span><br><span class="line">    String destPath = <span class="string">"C:\\Users\\shkstart\\Desktop\\01-复习2.mp4"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    copyFileWithFileStream(srcPath,destPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"花费的时间为："</span> + (end - start));<span class="comment">//7677毫秒</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2：使用BufferedInputStream\BufferedOuputStream实现非文本文件的复制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBufferedStream</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1. 造文件</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">        File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">        <span class="comment">//2. 造流</span></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">        bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">        bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 读写操作</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"复制成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//4. 关闭资源(如果有多个流，我们需要先关闭外面的流，再关闭内部的流)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>)</span><br><span class="line">                bos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="keyword">null</span>)</span><br><span class="line">                bis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String srcPath = <span class="string">"C:\\Users\\shkstart\\Desktop\\01-复习.mp4"</span>;</span><br><span class="line">    String destPath = <span class="string">"C:\\Users\\shkstart\\Desktop\\01-复习2.mp4"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    copyFileWithBufferedStream(srcPath,destPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"花费的时间为："</span> + (end - start));<span class="comment">//415毫秒</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-字符缓冲流特有方法"><a href="#5-3-字符缓冲流特有方法" class="headerlink" title="5.3 字符缓冲流特有方法"></a>5.3 字符缓冲流特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedIOLine</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadLine</span><span class="params">()</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line">        <span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNewLine</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        bw.write(<span class="string">"尚"</span>);</span><br><span class="line">        <span class="comment">// 写出换行</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"硅"</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"谷"</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ol><li><p>涉及到嵌套的多个流时，如果都显式关闭的话，需要先关闭外层的流，再关闭内层的流</p></li><li><p>其实在开发中，只需要关闭最外层的流即可，因为在关闭外层流时，内层的流也会被关闭。</p></li></ol></blockquote><h3 id="5-4-练习"><a href="#5-4-练习" class="headerlink" title="5.4 练习"></a>5.4 练习</h3><p><strong>练习1：</strong>分别使用节点流：FileInputStream、FileOutputStream和缓冲流：BufferedInputStream、BufferedOutputStream实现文本文件/图片/视频文件的复制。并比较二者在数据复制方面的效率。</p><p><strong>练习2：</strong></p><p>姓氏统计：一个文本文件中存储着北京所有高校在校生的姓名，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每行一个名字，姓与名以空格分隔：</span><br><span class="line">张 三</span><br><span class="line">李 四</span><br><span class="line">王 小五</span><br></pre></td></tr></table></figure><p>现在想统计所有的姓氏在文件中出现的次数，请描述一下你的解决方案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"e:/name.txt"</span>)));</span><br><span class="line">           String value = <span class="keyword">null</span>; <span class="comment">// 临时接收文件中的字符串变量</span></span><br><span class="line">           StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">           flag:</span><br><span class="line">           <span class="keyword">while</span> ((value = br.readLine()) != <span class="keyword">null</span>) &#123; <span class="comment">// 开始读取文件中的字符</span></span><br><span class="line">               <span class="keyword">char</span>[] c = value.toCharArray();</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (c[i] != <span class="string">' '</span>) &#123;</span><br><span class="line">                       buffer.append(String.valueOf(c[i]));</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (map.containsKey(buffer.toString())) &#123;</span><br><span class="line">                           <span class="keyword">int</span> count = map.get(buffer.toString());</span><br><span class="line">                           map.put(buffer.toString(), count + <span class="number">1</span>);</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           map.put(buffer.toString(), <span class="number">1</span>);</span><br><span class="line">                       &#125;</span><br><span class="line">                       buffer.delete(<span class="number">0</span>, buffer.length());</span><br><span class="line">                       <span class="keyword">continue</span> flag;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   br.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">       Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; it = set.iterator();</span><br><span class="line">       <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">           Map.Entry&lt;String, Integer&gt; end = (Map.Entry&lt;String, Integer&gt;) it.next();</span><br><span class="line">           System.out.println(end);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="6-处理流之二：转换流"><a href="#6-处理流之二：转换流" class="headerlink" title="6. 处理流之二：转换流"></a>6. 处理流之二：转换流</h2><h3 id="6-1-问题引入"><a href="#6-1-问题引入" class="headerlink" title="6.1 问题引入"></a>6.1 问题引入</h3><p><strong>引入情况1：</strong></p><p>使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA设置中针对项目设置了UTF-8编码，当读取Windows系统中创建的文本文件时，如果Windows系统默认的是GBK编码，则读入内存中会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"E:\\File_GBK.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">���</span><br></pre></td></tr></table></figure><p>那么如何读取GBK编码的文件呢？ </p><p><strong>引入情况2：</strong></p><p>针对文本文件，现在使用一个字节流进行数据的读入，希望将数据显示在控制台上。此时针对包含中文的文本数据，可能会出现乱码。</p><h3 id="6-2-转换流的理解"><a href="#6-2-转换流的理解" class="headerlink" title="6.2 转换流的理解"></a>6.2 转换流的理解</h3><p><strong>作用：转换流是字节与字符间的桥梁！</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010939362.jpg" style="zoom: 67%;"><p>具体来说：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010939208.png" alt="image-20220412231533768" style="zoom:85%;"><h3 id="6-3-InputStreamReader-与-OutputStreamWriter"><a href="#6-3-InputStreamReader-与-OutputStreamWriter" class="headerlink" title="6.3 InputStreamReader 与 OutputStreamWriter"></a>6.3 InputStreamReader 与 OutputStreamWriter</h3><ul><li><p><strong>InputStreamReader</strong> </p><ul><li><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p></li><li><p>构造器</p><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul></li><li><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用默认字符集</span></span><br><span class="line">InputStreamReader isr1 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>));</span><br><span class="line"><span class="comment">//使用指定字符集</span></span><br><span class="line">InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.transfer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        String fileName = <span class="string">"E:\\file_gbk.txt"</span>;</span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        InputStreamReader isr1 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(fileName));</span><br><span class="line">        <span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="keyword">int</span> charData;</span><br><span class="line">        <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((charData = isr1.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)charData); <span class="comment">// ��Һ�</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr1.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(fileName) , <span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((charData = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)charData);<span class="comment">// 大家好</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>OutputStreamWriter</strong></p><ul><li><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p></li><li><p>构造器</p><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in,String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul></li><li><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用默认字符集</span></span><br><span class="line">OutputStreamWriter isr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>));</span><br><span class="line"><span class="comment">//使用指定的字符集</span></span><br><span class="line">OutputStreamWriter isr2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.transfer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 定义文件路径</span></span><br><span class="line">        String FileName = <span class="string">"E:\\out_utf8.txt"</span>;</span><br><span class="line">        <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        osw.write(<span class="string">"你好"</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义文件路径</span></span><br><span class="line">        String FileName2 = <span class="string">"E:\\out_gbk.txt"</span>;</span><br><span class="line">        <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span>                     </span><br><span class="line">                                                FileOutputStream(FileName2),<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        osw2.write(<span class="string">"你好"</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-4-字符编码和字符集"><a href="#6-4-字符编码和字符集" class="headerlink" title="6.4 字符编码和字符集"></a>6.4 字符编码和字符集</h3><h4 id="6-4-1-编码与解码"><a href="#6-4-1-编码与解码" class="headerlink" title="6.4.1 编码与解码"></a>6.4.1 编码与解码</h4><p>计算机中储存的信息都是用<code>二进制数</code>表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。</p><p><strong>字符编码（Character Encoding）</strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p><p><strong>编码表</strong>：生活中文字和计算机中二进制的对应规则</p><p><strong>乱码的情况</strong>：按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编码:字符(人能看懂的)--字节(人看不懂的)</span><br><span class="line"></span><br><span class="line">解码:字节(人看不懂的)--&gt;字符(人能看懂的)</span><br></pre></td></tr></table></figure><h4 id="6-4-2-字符集"><a href="#6-4-2-字符集" class="headerlink" title="6.4.2 字符集"></a>6.4.2 字符集</h4><ul><li><strong>字符集Charset</strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><ul><li>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。</li></ul><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><p><strong>ASCII字符集</strong> ：</p><ul><li>ASCII码（American Standard Code for Information Interchange，美国信息交换标准代码）：上个世纪60年代，美国制定了一套字符编码，对<code>英语字符</code>与二进制位之间的关系，做了统一规定。这被称为ASCII码。</li><li>ASCII码用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符（最前面的1位统一规定为0），共<code>128个</code>字符。比如：空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。</li><li>缺点：不能表示所有字符。</li></ul></li><li><p><strong>ISO-8859-1字符集</strong>：</p><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰语、德语、意大利语、葡萄牙语等</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><p><strong>GBxxx字符集</strong>：</p><ul><li>GB就是国标的意思，是为了<code>显示中文</code>而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同，即向下兼容ASCII码。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含<code>7000多个简体汉字</code>，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，这就是常说的”全角”字符，而原来在127号以下的那些符号就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了<code>双字节</code>编码方案，共收录了<code>21003个</code>汉字，完全兼容GB2312标准，同时支持<code>繁体汉字</code>以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字<code>70244个</code>，采用<code>多字节</code>编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><p><strong>Unicode字符集</strong> ：</p><ul><li>Unicode编码为表达<code>任意语言的任意字符</code>而设计，也称为统一码、标准万国码。Unicode 将世界上所有的文字用<code>2个字节</code>统一进行编码，为每个字符设定唯一的二进制编码，以满足跨语言、跨平台进行文本处理的要求。</li></ul><ul><li>Unicode 的缺点：这里有三个问题：<ul><li>第一，英文字母只用一个字节表示就够了，如果用更多的字节存储是<code>极大的浪费</code>。</li><li>第二，如何才能<code>区别Unicode和ASCII</code>？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？</li><li>第三，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，<code>不够表示所有字符</code>。</li></ul></li><li>Unicode在很长一段时间内无法推广，直到互联网的出现，为解决Unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现。具体来说，有三种编码方案，UTF-8、UTF-16和UTF-32。</li></ul></li><li><p><strong>UTF-8字符集</strong>：</p><ul><li>Unicode是字符集，UTF-8、UTF-16、UTF-32是三种<code>将数字转换到程序数据</code>的编码方案。顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。其中，UTF-8 是在互联网上<code>使用最广</code>的一种 Unicode 的实现方式。</li><li>互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。UTF-8 是一种<code>变长的编码方式</code>。它使用1-4个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><ul><li>举例</li></ul><p>Unicode符号范围  | UTF-8编码方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(十六进制)           | （二进制）</span><br><span class="line"></span><br><span class="line">————————————————————|—–—–—–—–—–—–—–—–—–—–—–—–—–—–</span><br><span class="line"></span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx（兼容原来的ASCII）</span><br><span class="line"></span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line"></span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line"></span><br><span class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010940486.png" alt="image-20220525164636164"></p><ul><li>小结</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010940230.jpg" alt="字符集"></p><blockquote><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p></blockquote><h3 id="6-5-练习"><a href="#6-5-练习" class="headerlink" title="6.5 练习"></a>6.5 练习</h3><p>把当前module下的《康师傅的话.txt》字符编码为GBK，复制到电脑桌面目录下的《寄语.txt》，<br>字符编码为UTF-8。</p><p>在当前module下的文本内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">六项精进：</span><br><span class="line">（一）付出不亚于任何人的努力</span><br><span class="line">（二）要谦虚，不要骄傲</span><br><span class="line">（三）要每天反省</span><br><span class="line">（四）活着，就要感谢</span><br><span class="line">（五）积善行、思利他</span><br><span class="line">（六）不要有感性的烦恼</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"康师傅的话.txt"</span>),<span class="string">"gbk"</span>);</span><br><span class="line">            osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"C:\\Users\\shkstart\\Desktop\\寄语.txt"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = isr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                osw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">                osw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"文件复制完成"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isr != <span class="keyword">null</span>)</span><br><span class="line">                    isr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (osw != <span class="keyword">null</span>)</span><br><span class="line">                    osw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-处理流之三-四：数据流、对象流"><a href="#7-处理流之三-四：数据流、对象流" class="headerlink" title="7. 处理流之三/四：数据流、对象流"></a>7. 处理流之三/四：数据流、对象流</h2><h3 id="7-1-数据流与对象流说明"><a href="#7-1-数据流与对象流说明" class="headerlink" title="7.1 数据流与对象流说明"></a>7.1 数据流与对象流说明</h3><p>如果需要将内存中定义的变量（包括基本数据类型或引用数据类型）保存在文件中，那怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">char</span> gender = <span class="string">'男'</span>;</span><br><span class="line"><span class="keyword">int</span> energy = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">double</span> price = <span class="number">75.5</span>;</span><br><span class="line"><span class="keyword">boolean</span> relive = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">String name = <span class="string">"巫师"</span>;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">23</span>,<span class="number">89</span>);</span><br></pre></td></tr></table></figure><p>Java提供了数据流和对象流来处理这些类型的数据：</p><ul><li><p><strong>数据流：DataOutputStream、DataInputStream</strong></p><ul><li><p>DataOutputStream：允许应用程序将基本数据类型、String类型的变量写入输出流中</p></li><li><p>DataInputStream：允许应用程序以与机器无关的方式从底层输入流中读取基本数据类型、String类型的变量。</p></li></ul></li><li><p>对象流DataInputStream中的方法：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">byte</span> <span class="title">readByte</span><span class="params">()</span>                <span class="keyword">short</span> <span class="title">readShort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span>                  <span class="keyword">long</span> <span class="title">readLong</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">readFloat</span><span class="params">()</span>              <span class="keyword">double</span> <span class="title">readDouble</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">readChar</span><span class="params">()</span> <span class="keyword">boolean</span> <span class="title">readBoolean</span><span class="params">()</span></span></span><br><span class="line"><span class="function">String <span class="title">readUTF</span><span class="params">()</span>               <span class="keyword">void</span> <span class="title">readFully</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span></span><br></pre></td></tr></table></figure><ul><li>对象流DataOutputStream中的方法：将上述的方法的read改为相应的write即可。</li><li>数据流的弊端：只支持Java基本数据类型和字符串的读写，而不支持其它Java对象的类型。而ObjectOutputStream和ObjectInputStream既支持Java基本数据类型的数据读写，又支持Java对象的读写，所以重点介绍对象流ObjectOutputStream和ObjectInputStream。</li><li><strong>对象流：ObjectOutputStream、ObjectInputStream</strong><ul><li>ObjectOutputStream：将 Java 基本数据类型和对象写入字节输出流中。通过在流中使用文件可以实现Java各种基本数据类型的数据以及对象的持久存储。</li><li>ObjectInputStream：ObjectInputStream 对以前使用 ObjectOutputStream 写出的基本数据类型的数据和对象进行读入操作，保存在内存中。</li></ul></li></ul><blockquote><p>说明：对象流的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p></blockquote><h3 id="7-2-对象流API"><a href="#7-2-对象流API" class="headerlink" title="7.2 对象流API"></a>7.2 对象流API</h3><p><strong>ObjectOutputStream中的构造器：</strong></p><p><code>public ObjectOutputStream(OutputStream out)</code>： 创建一个指定的ObjectOutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"game.dat"</span>);</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br></pre></td></tr></table></figure><p><strong>ObjectOutputStream中的方法：</strong></p><ul><li>public void writeBoolean(boolean val)：写出一个 boolean 值。</li><li>public void writeByte(int val)：写出一个8位字节</li><li>public void writeShort(int val)：写出一个16位的 short 值</li><li>public void writeChar(int val)：写出一个16位的 char 值</li><li>public void writeInt(int val)：写出一个32位的 int 值</li><li>public void writeLong(long val)：写出一个64位的 long 值</li><li>public void writeFloat(float val)：写出一个32位的 float 值。</li><li>public void writeDouble(double val)：写出一个64位的 double 值</li><li>public void writeUTF(String str)：将表示长度信息的两个字节写入输出流，后跟字符串 s 中每个字符的 UTF-8 修改版表示形式。根据字符的值，将字符串 s 中每个字符转换成一个字节、两个字节或三个字节的字节组。注意，将 String 作为基本数据写入流中与将它作为 Object 写入流中明显不同。 如果 s 为 null，则抛出 NullPointerException。</li><li><code>public void writeObject(Object obj)</code>：写出一个obj对象</li><li>public void close() ：关闭此输出流并释放与此流相关联的任何系统资源</li></ul><p><strong>ObjectInputStream中的构造器：</strong></p><p><code>public ObjectInputStream(InputStream in)</code>： 创建一个指定的ObjectInputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"game.dat"</span>);</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br></pre></td></tr></table></figure><p><strong>ObjectInputStream中的方法：</strong></p><ul><li>public boolean readBoolean()：读取一个 boolean 值</li><li>public byte readByte()：读取一个 8 位的字节</li><li>public short readShort()：读取一个 16 位的 short 值</li><li>public char readChar()：读取一个 16 位的 char 值</li><li>public int readInt()：读取一个 32 位的 int 值</li><li>public long readLong()：读取一个 64 位的 long 值</li><li>public float readFloat()：读取一个 32 位的 float 值</li><li>public double readDouble()：读取一个 64 位的 double 值</li><li>public String readUTF()：读取 UTF-8 修改版格式的 String</li><li><code>public void readObject(Object obj)</code>：读入一个obj对象</li><li>public void close() ：关闭此输入流并释放与此流相关联的任何系统资源</li></ul><h3 id="7-3-认识对象序列化机制"><a href="#7-3-认识对象序列化机制" class="headerlink" title="7.3 认识对象序列化机制"></a>7.3 认识对象序列化机制</h3><p><strong>1、何为对象序列化机制？</strong></p><p><code>对象序列化机制</code>允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。</p><ul><li>序列化过程：用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<code>持久保存</code>了一个对象的信息。 </li></ul><ul><li>反序列化过程：该字节序列还可以从文件中读取回来，重构对象，对它进行<code>反序列化</code>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010940645.png" alt></p><p><strong>2、序列化机制的重要性</strong></p><p>序列化是 RMI（Remote Method Invoke、远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是 JavaEE 平台的基础。</p><p>序列化的好处，在于可将任何实现了Serializable接口的对象转化为<strong>字节数据</strong>，使其在保存和传输时可被还原。</p><p><strong>3、实现原理</strong></p><ul><li><p>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制。方法为：</p><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul></li><li><p>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制。方法为：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010940008.jpg" style="zoom:70%;"><h3 id="7-4-如何实现序列化机制"><a href="#7-4-如何实现序列化机制" class="headerlink" title="7.4 如何实现序列化机制"></a>7.4 如何实现序列化机制</h3><p>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的，为了让某个类是可序列化的，该类必须实现<code>java.io.Serializable</code> 接口。<code>Serializable</code> 是一个<code>标记接口</code>，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</p><ul><li>如果对象的某个属性也是引用数据类型，那么如果该属性也要序列化的话，也要实现<code>Serializable</code> 接口</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li><li><code>静态（static）变量</code>的值不会序列化。因为静态变量的值不属于某个对象。</li></ul><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteDataOfAnyType</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String name = <span class="string">"巫师"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">char</span> gender = <span class="string">'男'</span>;</span><br><span class="line">        <span class="keyword">int</span> energy = <span class="number">5000</span>;</span><br><span class="line">        <span class="keyword">double</span> price = <span class="number">75.5</span>;</span><br><span class="line">        <span class="keyword">boolean</span> relive = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"game.dat"</span>));</span><br><span class="line">        oos.writeUTF(name);</span><br><span class="line">        oos.writeInt(age);</span><br><span class="line">        oos.writeChar(gender);</span><br><span class="line">        oos.writeInt(energy);</span><br><span class="line">        oos.writeDouble(price);</span><br><span class="line">        oos.writeBoolean(relive);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"game.dat"</span>));</span><br><span class="line">        String name = ois.readUTF();</span><br><span class="line">        <span class="keyword">int</span> age = ois.readInt();</span><br><span class="line">        <span class="keyword">char</span> gender = ois.readChar();</span><br><span class="line">        <span class="keyword">int</span> energy = ois.readInt();</span><br><span class="line">        <span class="keyword">double</span> price = ois.readDouble();</span><br><span class="line">        <span class="keyword">boolean</span> relive = ois.readBoolean();</span><br><span class="line"></span><br><span class="line">        System.out.println(name+<span class="string">","</span> + age + <span class="string">","</span> + gender + <span class="string">","</span> + energy + <span class="string">","</span> + price + <span class="string">","</span> + relive);</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//static final long serialVersionUID = 23234234234L;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String company; <span class="comment">//static修饰的类变量，不会被序列化</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String address, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCompany</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span><br><span class="line">        Employee.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", company="</span> + company +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Employee.setCompany(<span class="string">"尚硅谷"</span>);</span><br><span class="line">        Employee e = <span class="keyword">new</span> Employee(<span class="string">"小谷姐姐"</span>, <span class="string">"宏福苑"</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="comment">// 创建序列化流对象</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"employee.dat"</span>));</span><br><span class="line">        <span class="comment">// 写出对象</span></span><br><span class="line">        oos.writeObject(e);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="string">"Serialized data is saved"</span>); <span class="comment">// 姓名，地址被序列化，年龄没有被序列化。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建反序列化流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"employee.dat"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        <span class="comment">// 读取一个对象</span></span><br><span class="line">        Employee e = (Employee) ois.readObject();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例3：如果有多个对象需要序列化，则可以将对象放到集合中，再序列化集合对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteCollection</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ArrayList&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="string">"张三"</span>, <span class="string">"宏福苑"</span>, <span class="number">23</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="string">"李四"</span>, <span class="string">"白庙"</span>, <span class="number">24</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="string">"王五"</span>, <span class="string">"平西府"</span>, <span class="number">25</span>));</span><br><span class="line">        <span class="comment">// 创建序列化流对象</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"employees.dat"</span>));</span><br><span class="line">        <span class="comment">// 写出对象</span></span><br><span class="line">        oos.writeObject(list);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建反序列化流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"employees.dat"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        <span class="comment">// 读取一个对象</span></span><br><span class="line">        ArrayList&lt;Employee&gt; list = (ArrayList&lt;Employee&gt;) ois.readObject();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-反序列化失败问题"><a href="#7-5-反序列化失败问题" class="headerlink" title="7.5 反序列化失败问题"></a>7.5 反序列化失败问题</h3><p><strong>问题1：</strong></p><p>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。  </p><p><strong>问题2：</strong></p><p>当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型  </li></ul><p>解决办法：</p><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号：<code>serialVersionUID</code> 。凡是实现 Serializable接口的类都应该有一个表示序列化版本标识符的静态变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">234242343243L</span>; <span class="comment">//它的值由程序员随意指定即可。</span></span><br></pre></td></tr></table></figure><ul><li>serialVersionUID用来表明类的不同版本间的兼容性。简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常(InvalidCastException)。</li><li>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节<code>自动生成</code>的。若类的实例变量做了修改，serialVersionUID <code>可能发生变化</code>。因此，建议显式声明。</li><li>如果声明了serialVersionUID，即使在序列化完成之后修改了类导致类重新编译，则原来的数据也能正常反序列化，只是新增的字段值是默认值而已。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1324234L</span>; <span class="comment">//增加serialVersionUID</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其它结构：略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-面试题-amp-练习"><a href="#7-6-面试题-amp-练习" class="headerlink" title="7.6 面试题&amp;练习"></a>7.6 面试题&amp;练习</h3><p>面试题：谈谈你对java.io.Serializable接口的理解，我们知道它用于序列化，是空方法接口，还有其它认识吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实现了Serializable接口的对象，可将它们转换成一系列字节，并可在以后完全恢复回原来的样子。这一过程亦可通过网络进行。这意味着序列化机制能自动补偿操作系统间的差异。换句话说，可以先在Windows机器上创建一个对象，对其序列化，然后通过网络发给一台Unix机器，然后在那里准确无误地重新“装配”。不必关心数据在不同机器上如何表示，也不必关心字节的顺序或者其他任何细节。</span><br><span class="line">    </span><br><span class="line">由于大部分作为参数的类如String、Integer等都实现了java.io.Serializable的接口，也可以利用多态的性质，作为参数使接口更灵活。</span><br></pre></td></tr></table></figure><p>练习：</p><ul><li><p>需求说明：</p><ul><li>网上购物时某用户填写订单，订单内容为产品列表，保存在“save.bin”中。</li><li>运行时，如果不存在“save.bin”，则进行新订单录入，如果存在，则显示并计算客户所需付款。</li></ul></li><li><p>分析：</p><ul><li>编写Save()方法保存对象到“save.bin”</li><li>编写Load()方法获得对象，计算客户所需付款</li></ul></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010941076.png" alt="image-20220503123603551" style="zoom:80%;"><h2 id="8-其他流的使用"><a href="#8-其他流的使用" class="headerlink" title="8. 其他流的使用"></a>8. 其他流的使用</h2><h3 id="8-1-标准输入、输出流"><a href="#8-1-标准输入、输出流" class="headerlink" title="8.1 标准输入、输出流"></a>8.1 标准输入、输出流</h3><ul><li>System.in和System.out分别代表了系统标准的输入和输出设备</li><li>默认输入设备是：键盘，输出设备是：显示器</li><li>System.in的类型是InputStream</li><li>System.out的类型是PrintStream，其是OutputStream的子类FilterOutputStream 的子类</li><li>重定向：通过System类的setIn，setOut方法对默认设备进行改变。<ul><li>public static void setIn(InputStream in)</li><li>public static void setOut(PrintStream out)</li></ul></li></ul><p><strong>举例：</strong></p><p>从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"请输入信息(退出输入e或exit):"</span>);</span><br><span class="line"><span class="comment">// 把"标准"输入流(键盘输入)这个字节流包装成字符流,再包装成缓冲流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span>) &#123; <span class="comment">// 读取用户输入的一行数据 --&gt; 阻塞程序</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"e"</span>.equalsIgnoreCase(s) || <span class="string">"exit"</span>.equalsIgnoreCase(s)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"安全退出!!"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将读取到的整行字符串转成大写输出</span></span><br><span class="line">        System.out.println(<span class="string">"--&gt;:"</span> + s.toUpperCase());</span><br><span class="line">        System.out.println(<span class="string">"继续输入信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">            br.close(); <span class="comment">// 关闭过滤流时,会自动关闭它包装的底层节点流</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓展：</strong></p><p>System类中有三个常量对象：System.out、System.in、System.err</p><p>查看System类中这三个常量对象的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> InputStream in = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> PrintStream out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> PrintStream err = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>奇怪的是，</p><ul><li>这三个常量对象有final声明，但是却初始化为null。final声明的常量一旦赋值就不能修改，那么null不会空指针异常吗？</li><li>这三个常量对象为什么要小写？final声明的常量按照命名规范不是应该大写吗？</li><li>这三个常量的对象有set方法？final声明的常量不是不能修改值吗？set方法是如何修改它们的值的？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>声明的常量，表示在Java的语法体系中它们的值是不能修改的，而这三个常量对象的值是由C/C++等系统函数进行初始化和修改值的，所以它们故意没有用大写，也有set方法。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOut</span><span class="params">(PrintStream out)</span> </span>&#123;</span><br><span class="line">    checkIO();</span><br><span class="line">    setOut0(out);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setErr</span><span class="params">(PrintStream err)</span> </span>&#123;</span><br><span class="line">    checkIO();</span><br><span class="line">    setErr0(err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setIn</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">    checkIO();</span><br><span class="line">    setIn0(in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkIO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecurityManager sm = getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sm.checkPermission(<span class="keyword">new</span> RuntimePermission(<span class="string">"setIO"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setIn0</span><span class="params">(InputStream in)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setOut0</span><span class="params">(PrintStream out)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setErr0</span><span class="params">(PrintStream err)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><p>Create a program named MyInput.java: Contain the methods for reading int, double, float, boolean, short, byte and String values from the keyboard.</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010941969.png" alt="image-20220412232254819" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="comment">// MyInput.java: Contain the methods for reading int, double, float, boolean, short, byte and</span></span><br><span class="line"><span class="comment">// string values from the keyboard</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInput</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Read a string from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Declare and initialize the string</span></span><br><span class="line">        String string = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the string from the keyboard</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            string = br.readLine();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            System.out.println(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return the string obtained from the keyboard</span></span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read an int value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a double value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.parseDouble(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a byte value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Byte.parseByte(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a short value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Short.parseShort(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a long value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(readString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read a float value from the keyboard</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readFloat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Float.parseFloat(readString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-打印流"><a href="#8-2-打印流" class="headerlink" title="8.2 打印流"></a>8.2 打印流</h3><ul><li>实现将基本数据类型的数据格式转化为字符串输出。</li></ul><ul><li><p>打印流：<code>PrintStream</code>和<code>PrintWriter</code></p><ul><li><p>提供了一系列重载的print()和println()方法，用于多种数据类型的输出</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010941752.png" alt="image-20220131021502089"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010941994.png" alt="image-20220131021528397"></p></li><li><p>PrintStream和PrintWriter的输出不会抛出IOException异常</p></li><li><p>PrintStream和PrintWriter有自动flush功能</p></li><li><p>PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。</p></li><li><p>System.out返回的是PrintStream的实例</p></li></ul></li><li><p>构造器</p><ul><li>PrintStream(File file) ：创建具有指定文件且不带自动行刷新的新打印流。 </li><li>PrintStream(File file, String csn)：创建具有指定文件名称和字符集且不带自动行刷新的新打印流。 </li><li>PrintStream(OutputStream out) ：创建新的打印流。 </li><li>PrintStream(OutputStream out, boolean autoFlush)：创建新的打印流。 autoFlush如果为 true，则每当写入 byte 数组、调用其中一个 println 方法或写入换行符或字节 (‘\n’) 时都会刷新输出缓冲区。</li><li>PrintStream(OutputStream out, boolean autoFlush, String encoding) ：创建新的打印流。 </li><li>PrintStream(String fileName)：创建具有指定文件名称且不带自动行刷新的新打印流。 </li><li>PrintStream(String fileName, String csn) ：创建具有指定文件名称和字符集且不带自动行刷新的新打印流。</li></ul></li><li><p>代码举例1</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"io.txt"</span>);</span><br><span class="line">        ps.println(<span class="string">"hello"</span>);</span><br><span class="line">        ps.println(<span class="number">1</span>);</span><br><span class="line">        ps.println(<span class="number">1.5</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码举例2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D:\\IO\\text.txt"</span>));</span><br><span class="line">    <span class="comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 '\n' 时都会刷新输出缓冲区)</span></span><br><span class="line">    ps = <span class="keyword">new</span> PrintStream(fos, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;<span class="comment">// 把标准输出流(控制台输出)改成文件</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++) &#123; <span class="comment">// 输出ASCII字符</span></span><br><span class="line">        System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123; <span class="comment">// 每50个数据一行</span></span><br><span class="line">            System.out.println(); <span class="comment">// 换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码举例3：自定义一个日志工具</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">日志工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    记录日志的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 指向一个日志文件</span></span><br><span class="line">            PrintStream out = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"log.txt"</span>, <span class="keyword">true</span>));</span><br><span class="line">            <span class="comment">// 改变输出方向</span></span><br><span class="line">            System.setOut(out);</span><br><span class="line">            <span class="comment">// 日期当前时间</span></span><br><span class="line">            Date nowTime = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span>);</span><br><span class="line">            String strTime = sdf.format(nowTime);</span><br><span class="line"></span><br><span class="line">            System.out.println(strTime + <span class="string">": "</span> + msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试工具类是否好用</span></span><br><span class="line">        Logger.log(<span class="string">"调用了System类的gc()方法，建议启动垃圾回收"</span>);</span><br><span class="line">        Logger.log(<span class="string">"调用了TeamView的addMember()方法"</span>);</span><br><span class="line">        Logger.log(<span class="string">"用户尝试进行登录，验证失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-Scanner类"><a href="#8-3-Scanner类" class="headerlink" title="8.3 Scanner类"></a>8.3 Scanner类</h3><p>构造方法</p><ul><li>Scanner(File source) ：构造一个新的 Scanner，它生成的值是从指定文件扫描的。 </li><li>Scanner(File source, String charsetName) ：构造一个新的 Scanner，它生成的值是从指定文件扫描的。 </li><li>Scanner(InputStream source) ：构造一个新的 Scanner，它生成的值是从指定的输入流扫描的。 </li><li>Scanner(InputStream source, String charsetName) ：构造一个新的 Scanner，它生成的值是从指定的输入流扫描的。</li></ul><p>常用方法：</p><ul><li>boolean hasNextXxx()： 通过nextXxx()，此扫描器输入信息中的下一个标记可以解释为默认基数中的一个 Xxx 值，则返回 true。</li><li>Xxx nextXxx()： 将输入信息的下一个标记扫描为一个Xxx</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScanner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"1.txt"</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">"请输入一个单词："</span>);</span><br><span class="line">            String str = input.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"stop"</span>.equals(str))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ps.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        input.close();</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="string">"1.txt"</span>));</span><br><span class="line">        <span class="keyword">while</span>(input.hasNextLine())&#123;</span><br><span class="line">            String str = input.nextLine();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-apache-common包的使用"><a href="#9-apache-common包的使用" class="headerlink" title="9. apache-common包的使用"></a>9. apache-common包的使用</h2><h3 id="9-1-介绍"><a href="#9-1-介绍" class="headerlink" title="9.1 介绍"></a>9.1 介绍</h3><p>IO技术开发中，代码量很大，而且代码的重复率较高，为此Apache软件基金会，开发了IO技术的工具类<code>commonsIO</code>，大大简化了IO开发。</p><p>Apahce软件基金会属于第三方，（Oracle公司第一方，我们自己第二方，其他都是第三方）我们要使用第三方开发好的工具，需要添加jar包。</p><h3 id="9-2-导包及举例"><a href="#9-2-导包及举例" class="headerlink" title="9.2 导包及举例"></a>9.2 导包及举例</h3><ul><li><p>在导入commons-io-2.5.jar包之后，内部的API都可以使用。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311010942399.png" alt="image-20220416004246436"></p></li><li><p>IOUtils类的使用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 静态方法：IOUtils.copy(InputStream in,OutputStream out)传递字节流，实现文件复制。</span><br><span class="line">- 静态方法：IOUtils.closeQuietly(任意流对象)悄悄的释放资源，自动处理close()方法抛出的异常。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//- 静态方法：IOUtils.copy(InputStream in,OutputStream out)传递字节流，实现文件复制。</span></span><br><span class="line">        IOUtils.copy(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\Idea\\io\\1.jpg"</span>),<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\Idea\\io\\file\\柳岩.jpg"</span>));</span><br><span class="line">        <span class="comment">//- 静态方法：IOUtils.closeQuietly(任意流对象)悄悄的释放资源，自动处理close()方法抛出的异常。</span></span><br><span class="line">       <span class="comment">/* FileWriter fw = null;</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            fw = new FileWriter("day21\\io\\writer.txt");</span></span><br><span class="line"><span class="comment">            fw.write("hahah");</span></span><br><span class="line"><span class="comment">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;finally &#123;</span></span><br><span class="line"><span class="comment">           IOUtils.closeQuietly(fw);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FileUtils类的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 静态方法：<span class="function"><span class="keyword">void</span> <span class="title">copyDirectoryToDirectory</span><span class="params">(File src,File dest)</span>：整个目录的复制，自动进行递归遍历</span></span><br><span class="line"><span class="function">          参数:</span></span><br><span class="line"><span class="function">          src:要复制的文件夹路径</span></span><br><span class="line"><span class="function">          dest:要将文件夹粘贴到哪里去</span></span><br><span class="line"><span class="function">             </span></span><br><span class="line"><span class="function">- 静态方法：<span class="keyword">void</span> <span class="title">writeStringToFile</span><span class="params">(File file,String content)</span>：将内容content写入到file中</span></span><br><span class="line"><span class="function">- 静态方法：String <span class="title">readFileToString</span><span class="params">(File file)</span>：读取文件内容，并返回一个String</span></span><br><span class="line"><span class="function">- 静态方法：<span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File srcFile,File destFile)</span>：文件复制</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//- 静态方法：void copyDirectoryToDirectory(File src,File dest);</span></span><br><span class="line">            FileUtils.copyDirectoryToDirectory(<span class="keyword">new</span> File(<span class="string">"E:\\Idea\\io\\aa"</span>),<span class="keyword">new</span> File(<span class="string">"E:\\Idea\\io\\file"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//- 静态方法：writeStringToFile(File file,String str)</span></span><br><span class="line">            FileUtils.writeStringToFile(<span class="keyword">new</span> File(<span class="string">"day21\\io\\commons.txt"</span>),<span class="string">"柳岩你好"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//- 静态方法：String readFileToString(File file)</span></span><br><span class="line">            String s = FileUtils.readFileToString(<span class="keyword">new</span> File(<span class="string">"day21\\io\\commons.txt"</span>));</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            <span class="comment">//- 静态方法：void copyFile(File srcFile,File destFile)</span></span><br><span class="line">            FileUtils.copyFile(<span class="keyword">new</span> File(<span class="string">"io\\yangm.png"</span>),<span class="keyword">new</span> File(<span class="string">"io\\yangm2.png"</span>));</span><br><span class="line">            System.out.println(<span class="string">"复制成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第15章-File类与IO流&quot;&gt;&lt;a href=&quot;#第15章-File类与IO流&quot; class=&quot;headerlink&quot; title=&quot;第15章_File类与IO流&quot;&gt;&lt;/a&gt;第15章_File类与IO流&lt;/h1&gt;&lt;h2 id=&quot;本章专题与脉络&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-数据结构与集合源码</title>
    <link href="https://larkkkkkkk.github.io/2023/10/30/JAVA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/"/>
    <id>https://larkkkkkkk.github.io/2023/10/30/JAVA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</id>
    <published>2023-10-30T01:59:16.000Z</published>
    <updated>2023-10-31T13:31:58.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第14章-数据结构与集合源码"><a href="#第14章-数据结构与集合源码" class="headerlink" title="第14章_数据结构与集合源码"></a>第14章_数据结构与集合源码</h1><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301642553.png" alt="第3阶段：Java高级应用-第14章"></p><h2 id="1-数据结构剖析"><a href="#1-数据结构剖析" class="headerlink" title="1. 数据结构剖析"></a>1. 数据结构剖析</h2><p>我们举一个形象的例子来理解数据结构的作用：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301650556.png" alt="image-20220412011531879"></p><blockquote><p><strong>战场：</strong>程序运行所需的软件、硬件环境</p><p><strong>敌人：</strong>项目或模块的功能需求</p><p><strong>指挥官：</strong>编写程序的程序员</p><p><strong>士兵和装备：</strong>一行一行的代码</p><p><strong>战术和策略：</strong>数据结构</p></blockquote><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301642664.png" alt="image-20220412011555025"></p><p>上图：没有战术，打仗事倍功半</p><p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301645208.png" alt="image-20220412011600845"></p><p>上图：有战术，打仗事半功倍</p><p> 总结：简单来说，数据结构，就是一种程序设计优化的方法论，研究数据的<code>逻辑结构</code>和<code>物理结构</code>以及它们之间相互关系，并对这种结构定义相应的<code>运算</code>，<strong>目的是加快程序的执行速度、减少内存占用的空间。</strong></p><p>具体研究对象如下：</p><h3 id="1-1-研究对象一：数据间逻辑关系"><a href="#1-1-研究对象一：数据间逻辑关系" class="headerlink" title="1.1 研究对象一：数据间逻辑关系"></a>1.1 研究对象一：数据间逻辑关系</h3><p>数据的逻辑结构指反映数据元素之间的逻辑关系，而与数据的存储无关，是独立于计算机的。</p><ul><li><strong>集合结构</strong>：数据结构中的元素之间除了“<code>同属一个集合</code>” 的相互关系外，别无其他关系。集合元素之间没有逻辑关系。</li><li><strong>线性结构</strong>：数据结构中的元素存在<code>一对一</code>的相互关系。比如：排队。结构中必须存在唯一的首元素和唯一的尾元素。体现为：一维数组、链表、栈、队列</li><li><strong>树形结构</strong>：数据结构中的元素存在<code>一对多</code>的相互关系。比如：家谱、文件系统、组织架构</li><li><strong>图形结构</strong>：数据结构中的元素存在<code>多对多</code>的相互关系。比如：全国铁路网、地铁图</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301642975.png" alt="image-20220824011022664" style="zoom:67%;"><h3 id="1-2-研究对象二：数据的存储结构（或物理结构）"><a href="#1-2-研究对象二：数据的存储结构（或物理结构）" class="headerlink" title="1.2 研究对象二：数据的存储结构（或物理结构）"></a>1.2 研究对象二：数据的存储结构（或物理结构）</h3><p>数据的物理结构/存储结构：包括<code>数据元素的表示</code>和<code>关系的表示</code>。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。</p><p><strong>结构1：顺序结构</strong></p><ul><li><p>顺序结构就是使用一组连续的存储单元依次存储逻辑上相邻的各个元素。</p></li><li><p>优点： 只需要申请存放数据本身的内存空间即可，支持下标访问，也可以实现随机访问。</p></li><li><p>缺点： 必须静态分配连续空间，内存空间的利用率比较低。插入或删除可能需要移动大量元素，效率比较低</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301645811.png" alt="image-20220521100746910"></p><p><strong>结构2：链式结构</strong></p><ul><li>不使用连续的存储空间存放结构的元素，而是为每一个元素构造一个节点。节点中除了存放数据本身以外，还需要存放指向下一个节点的指针。</li><li>优点：不采用连续的存储空间导致内存空间利用率比较高，克服顺序存储结构中预知元素个数的缺点。插入或删除元素时，不需要移动大量的元素。</li><li>缺点：需要额外的空间来表达数据之间的逻辑关系，不支持下标访问和随机访问。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301642610.png" alt="image-20220521103734742"></p><p><strong>结构3：索引结构</strong></p><ul><li><p>除建立存储节点信息外，还建立附加的<code>索引表</code>来记录每个元素节点的地址。索引表由若干索引项组成。索引项的一般形式是：（关键字，地址）。</p></li><li><p>优点：用节点的索引号来确定结点存储地址，检索速度快。</p></li><li><p>缺点： 增加了附加的索引表，会占用较多的存储空间。在增加和删除数据时要修改索引表，因而会花费较多的时间。</p><p>&lt;img src=”F:/JAVA%25E8%25B7%25A<img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301642003.png" alt="image-20220521115200921" style="zoom:67%;"></p></li></ul><p><strong>结构4：散列结构</strong></p><ul><li>根据元素的关键字直接计算出该元素的存储地址，又称为Hash存储。</li><li>优点：检索、增加和删除结点的操作都很快。</li><li>缺点：不支持排序，一般比用线性表存储需要更多的空间，并且记录的关键字不能重复。</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301642883.png" alt="image-20220521115734571" style="zoom:67%;"><h3 id="1-3-研究对象三：运算结构"><a href="#1-3-研究对象三：运算结构" class="headerlink" title="1.3 研究对象三：运算结构"></a>1.3 研究对象三：运算结构</h3><p>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</p><ul><li>分配资源，建立结构，释放资源</li><li>插入和删除</li><li>获取和遍历</li><li>修改和排序</li></ul><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301642641.png" alt="数据结构" style="zoom: 40%;"><h2 id="2-一维数组"><a href="#2-一维数组" class="headerlink" title="2. 一维数组"></a>2. 一维数组</h2><h3 id="2-1-数组的特点"><a href="#2-1-数组的特点" class="headerlink" title="2.1 数组的特点"></a>2.1 数组的特点</h3><ul><li>在Java中，数组是用来存放同一种数据类型的集合，注意只能存放同一种数据类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只声明了类型和长度</span></span><br><span class="line">数据类型[]  数组名称 = <span class="keyword">new</span> 数据类型[数组长度];</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明了类型，初始化赋值，大小由元素个数决定</span></span><br><span class="line">数据类型[] 数组名称 = &#123;数组元素<span class="number">1</span>，数组元素<span class="number">2</span>，......&#125;</span><br></pre></td></tr></table></figure><p>例如：整型数组</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301642171.png" alt="1563432676234" style="zoom: 80%;"><p>例如：对象数组</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643134.png" alt="1563432696340" style="zoom:80%;"><ul><li>物理结构特点：<ul><li>申请内存：一次申请一大段连续的空间，一旦申请到了，内存就固定了。</li><li>不能动态扩展(初始化给大了，浪费；给小了，不够用)，插入快，删除和查找慢。</li><li>存储特点：所有数据存储在这个连续的空间中，数组中的每一个元素都是一个具体的数据（或对象），所有数据都紧密排布，不能有间隔。</li></ul></li><li>具体的，如下图：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643978.png" alt="数据结构-一维数组" style="zoom: 50%;"><h3 id="2-2-自定义数组"><a href="#2-2-自定义数组" class="headerlink" title="2.2 自定义数组"></a>2.2 自定义数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu01.overview.array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 14:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        elementData = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &gt;= elementData.length)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数组已满，不可添加"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[size] = value;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询元素value在数组中的索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(elementData[i].equals(value))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从当前数组中移除首次出现的value元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = find(value);</span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index;i &lt; size - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            elementData[i] = elementData[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数组中首次出现的oldValue替换为newValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Object oldValue,Object newValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = find(oldValue);</span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[index] = newValue;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历数组中所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"&#123;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == size - <span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(elementData[i] + <span class="string">"&#125;"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(elementData[i] + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Array arr = <span class="keyword">new</span> Array(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        arr.add(<span class="number">123</span>);</span><br><span class="line">        arr.add(<span class="string">"AA"</span>);</span><br><span class="line">        arr.add(<span class="number">345</span>);</span><br><span class="line">        arr.add(<span class="number">345</span>);</span><br><span class="line">        arr.add(<span class="string">"BB"</span>);</span><br><span class="line"></span><br><span class="line">        arr.delete(<span class="number">345</span>);</span><br><span class="line"></span><br><span class="line">        arr.update(<span class="number">345</span>,<span class="number">444</span>);</span><br><span class="line"></span><br><span class="line">        arr.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-链表"><a href="#3-链表" class="headerlink" title="3. 链表"></a>3. 链表</h2><h3 id="3-1-链表的特点"><a href="#3-1-链表的特点" class="headerlink" title="3.1 链表的特点"></a>3.1 链表的特点</h3><ul><li>逻辑结构：线性结构</li></ul><ul><li>物理结构：不要求连续的存储空间</li></ul><ul><li>存储特点：链表由一系列结点node（链表中每一个元素称为结点）组成，结点可以在代码执行过程中动态创建。每个结点包括两个部分：一个是存储数据元素的<code>数据域</code>，另一个是存储下一个结点地址的<code>指针域</code>。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301711548.png" alt="image-20220511113744772"></p><ul><li>常见的链表结构有如下的形式：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301712340.png" alt="1563448858180"></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643798.png" alt="数据结构-链表" style="zoom:50%;"><h3 id="3-2-自定义链表"><a href="#3-2-自定义链表" class="headerlink" title="3.2 自定义链表"></a>3.2 自定义链表</h3><h4 id="3-2-1-自定义单向链表"><a href="#3-2-1-自定义单向链表" class="headerlink" title="3.2.1 自定义单向链表"></a>3.2.1 自定义单向链表</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301712869.png" alt="image-20221028195106363"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">单链表中的节点。</span></span><br><span class="line"><span class="comment">节点是单向链表中基本的单元。</span></span><br><span class="line"><span class="comment">每一个节点Node都有两个属性：</span></span><br><span class="line"><span class="comment">    一个属性：是存储的数据。</span></span><br><span class="line"><span class="comment">    另一个属性：是下一个节点的内存地址。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储的数据</span></span><br><span class="line">    Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个节点的内存地址</span></span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">链表类(单向链表)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头节点</span></span><br><span class="line">    Node header;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向链表中添加元素的方法（向末尾添加）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//public void add(Object data)&#123;</span></span><br><span class="line">        <span class="comment">// 创建一个新的节点对象</span></span><br><span class="line">        <span class="comment">// 让之前单链表的末尾节点next指向新节点对象。</span></span><br><span class="line">        <span class="comment">// 有可能这个元素是第一个，也可能是第二个，也可能是第三个。</span></span><br><span class="line">        <span class="keyword">if</span>(header == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 说明还没有节点。</span></span><br><span class="line">            <span class="comment">// new一个新的节点对象，作为头节点对象。</span></span><br><span class="line">            <span class="comment">// 这个时候的头节点既是一个头节点，又是一个末尾节点。</span></span><br><span class="line">            header = <span class="keyword">new</span> Node(data, <span class="keyword">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说明头不是空！</span></span><br><span class="line">            <span class="comment">// 头节点已经存在了！</span></span><br><span class="line">            <span class="comment">// 找出当前末尾节点，让当前末尾节点的next是新节点。</span></span><br><span class="line">            Node currentLastNode = findLast(header);</span><br><span class="line">            currentLastNode.next = <span class="keyword">new</span> Node(data, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 专门查找末尾节点的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">findLast</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果一个节点的next是null</span></span><br><span class="line">            <span class="comment">// 说明这个节点就是末尾节点。</span></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 程序能够到这里说明：node不是末尾节点。</span></span><br><span class="line">        <span class="keyword">return</span> findLast(node.next); <span class="comment">// 递归算法！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*// 删除链表中某个数据的方法</span></span><br><span class="line"><span class="comment">    public void remove(Object obj)&#123;</span></span><br><span class="line"><span class="comment">        //略</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 修改链表中某个数据的方法</span></span><br><span class="line"><span class="comment">    public void modify(Object newObj)&#123;</span></span><br><span class="line"><span class="comment">        //略</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 查找链表中某个元素的方法。</span></span><br><span class="line"><span class="comment">    public int find(Object obj)&#123;</span></span><br><span class="line"><span class="comment">        //略</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-自定义双向链表"><a href="#3-2-2-自定义双向链表" class="headerlink" title="3.2.2 自定义双向链表"></a>3.2.2 自定义双向链表</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643307.png" alt="image-20220514165707977"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">双向链表中的节点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    Node prev;</span><br><span class="line">    E data;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    Node(Node prev, E data, Node next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表类(双向链表)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 15:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first;  <span class="comment">//链表的首元素</span></span><br><span class="line">    <span class="keyword">private</span> Node last;   <span class="comment">//链表的尾元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(last, e, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span>)&#123;</span><br><span class="line">            first = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            last.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        last = newNode;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Node find = findNode(obj);</span><br><span class="line">        <span class="keyword">if</span>(find != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(find.prev != <span class="keyword">null</span>)&#123;</span><br><span class="line">                find.prev.next = find.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                first = find.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(find.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">                find.next.prev = find.prev;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                last = find.prev;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            find.prev = <span class="keyword">null</span>;</span><br><span class="line">            find.next = <span class="keyword">null</span>;</span><br><span class="line">            find.data = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            total--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">findNode</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Node node = first;</span><br><span class="line">        Node find = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.data == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    find = node;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obj.equals(node.data))&#123;</span><br><span class="line">                    find = node;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> find;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findNode(obj) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(E old, E value)</span></span>&#123;</span><br><span class="line">        Node find = findNode(old);</span><br><span class="line">        <span class="keyword">if</span>(find != <span class="keyword">null</span>)&#123;</span><br><span class="line">            find.data = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; node = first;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> node!=<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            E value = node.data;</span><br><span class="line">            node = node.next;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义双链表测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLinkedList&lt;String&gt; my = <span class="keyword">new</span> MyLinkedList&lt;&gt;();</span><br><span class="line">        my.add(<span class="string">"hello"</span>);</span><br><span class="line">        my.add(<span class="string">"world"</span>);</span><br><span class="line">        my.add(<span class="keyword">null</span>);</span><br><span class="line">        my.add(<span class="keyword">null</span>);</span><br><span class="line">        my.add(<span class="string">"java"</span>);</span><br><span class="line">        my.add(<span class="string">"java"</span>);</span><br><span class="line">        my.add(<span class="string">"atguigu"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"一共有："</span> + my.size());</span><br><span class="line">        System.out.println(<span class="string">"所有元素："</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : my) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"查找java,null,haha的结果："</span>);</span><br><span class="line">        System.out.println(my.contains(<span class="string">"java"</span>));</span><br><span class="line">        System.out.println(my.contains(<span class="keyword">null</span>));</span><br><span class="line">        System.out.println(my.contains(<span class="string">"haha"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"替换java,null后："</span>);</span><br><span class="line">        my.update(<span class="string">"java"</span>,<span class="string">"JAVA"</span>);</span><br><span class="line">        my.update(<span class="keyword">null</span>,<span class="string">"songhk"</span>);</span><br><span class="line">        System.out.println(<span class="string">"所有元素："</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : my) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"删除hello，JAVA,null，atguigu后："</span>);</span><br><span class="line">        my.delete(<span class="string">"hello"</span>);</span><br><span class="line">        my.delete(<span class="string">"JAVA"</span>);</span><br><span class="line">        my.delete(<span class="keyword">null</span>);</span><br><span class="line">        my.delete(<span class="string">"atguigu"</span>);</span><br><span class="line">        System.out.println(<span class="string">"所有元素："</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : my) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-栈"><a href="#4-栈" class="headerlink" title="4. 栈"></a>4. 栈</h2><h3 id="4-1-栈的特点"><a href="#4-1-栈的特点" class="headerlink" title="4.1 栈的特点"></a>4.1 栈的特点</h3><ul><li><p>栈（Stack）又称为堆栈或堆叠，是限制仅在表的一端进行插入和删除运算的线性表。</p></li><li><p>栈按照<code>先进后出(FILO,first in last out)</code>的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶。每次删除（退栈）的总是删除当前栈中最后插入（进栈）的元素，而最先插入的是被放在栈的底部，要到最后才能删除。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301713793.png" alt></p></li><li><p>核心类库中的栈结构有Stack和LinkedList。</p><ul><li>Stack就是顺序栈，它是Vector的子类。</li><li>LinkedList是链式栈。</li></ul></li><li><p>体现栈结构的操作方法：</p><ul><li>peek()方法：查看栈顶元素，不弹出</li><li>pop()方法：弹出栈</li><li>push(E e)方法：压入栈 </li></ul></li><li><p>时间复杂度:</p><ul><li>索引: <code>O(n)</code></li><li>搜索: <code>O(n)</code></li><li>插入: <code>O(1)</code></li><li>移除: <code>O(1)</code></li></ul></li><li><p>图示：</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301713801.png" alt="image-20220826010258638" style="zoom:80%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643070.png" alt="数据结构-栈" style="zoom:50%;"><h3 id="4-2-Stack使用举例"><a href="#4-2-Stack使用举例" class="headerlink" title="4.2 Stack使用举例"></a>4.2 Stack使用举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 15:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 测试Stack</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; list = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        list.push(<span class="number">1</span>);</span><br><span class="line">        list.push(<span class="number">2</span>);</span><br><span class="line">        list.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list = "</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list.peek()="</span> + list.peek());</span><br><span class="line">        System.out.println(<span class="string">"list.peek()="</span> + list.peek());</span><br><span class="line">        System.out.println(<span class="string">"list.peek()="</span> + list.peek());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println("list.pop() =" + list.pop());</span></span><br><span class="line"><span class="comment">System.out.println("list.pop() =" + list.pop());</span></span><br><span class="line"><span class="comment">System.out.println("list.pop() =" + list.pop());</span></span><br><span class="line"><span class="comment">System.out.println("list.pop() =" + list.pop());//java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!list.empty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"list.pop() ="</span> + list.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 测试LinkedList</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.push(<span class="number">1</span>);</span><br><span class="line">        list.push(<span class="number">2</span>);</span><br><span class="line">        list.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list = "</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list.peek()="</span> + list.peek());</span><br><span class="line">        System.out.println(<span class="string">"list.peek()="</span> + list.peek());</span><br><span class="line">        System.out.println(<span class="string">"list.peek()="</span> + list.peek());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println("list.pop() =" + list.pop());</span></span><br><span class="line"><span class="comment">System.out.println("list.pop() =" + list.pop());</span></span><br><span class="line"><span class="comment">System.out.println("list.pop() =" + list.pop());</span></span><br><span class="line"><span class="comment">System.out.println("list.pop() =" + list.pop());//java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">while</span>(!list.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"list.pop() ="</span> + list.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-自定义栈"><a href="#4-3-自定义栈" class="headerlink" title="4.3 自定义栈"></a>4.3 自定义栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 向栈当中存储元素，我们这里使用一维数组模拟。存到栈中，就表示存储到数组中。</span></span><br><span class="line">    <span class="comment">// 为什么选择Object类型数组？因为这个栈可以存储java中的任何引用类型的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 栈帧，永远指向栈顶部元素</span></span><br><span class="line">    <span class="comment">// 那么这个默认初始值应该是多少。注意：最初的栈是空的，一个元素都没有。</span></span><br><span class="line">    <span class="comment">//private int index = 0; // 如果index采用0，表示栈帧指向了顶部元素的上方。</span></span><br><span class="line">    <span class="comment">//private int index = -1; // 如果index采用-1，表示栈帧指向了顶部元素。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数构造方法。默认初始化栈容量10.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一维数组动态初始化</span></span><br><span class="line">        <span class="comment">// 默认初始化容量是10.</span></span><br><span class="line">        <span class="keyword">this</span>.elements = <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">// 给index初始化</span></span><br><span class="line">        <span class="keyword">this</span>.index = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压栈的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 被压入的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= elements.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//方式1：</span></span><br><span class="line">            <span class="comment">//System.out.println("压栈失败，栈已满！");</span></span><br><span class="line">            <span class="comment">//return;</span></span><br><span class="line">            <span class="comment">//方式2：</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"压栈失败，栈已满！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 程序能够走到这里，说明栈没满</span></span><br><span class="line">        <span class="comment">// 向栈中加1个元素，栈帧向上移动一个位置。</span></span><br><span class="line">        index++;</span><br><span class="line">        elements[index] = obj;</span><br><span class="line">        System.out.println(<span class="string">"压栈"</span> + obj + <span class="string">"元素成功，栈帧指向"</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹栈的方法，从数组中往外取元素。每取出一个元素，栈帧向下移动一位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//方式1：</span></span><br><span class="line">            <span class="comment">//System.out.println("弹栈失败，栈已空！");</span></span><br><span class="line">            <span class="comment">//return;</span></span><br><span class="line">            <span class="comment">//方式2：</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"弹栈失败，栈已空！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 程序能够执行到此处说明栈没有空。</span></span><br><span class="line">        Object obj = elements[index];</span><br><span class="line">        System.out.print(<span class="string">"弹栈"</span> + obj + <span class="string">"元素成功，"</span>);</span><br><span class="line">        elements[index] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 栈帧向下移动一位。</span></span><br><span class="line">        index--;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set和get也许用不上，但是你必须写上，这是规矩。你使用IDEA生成就行了。</span></span><br><span class="line">    <span class="comment">// 封装：第一步：属性私有化，第二步：对外提供set和get方法。</span></span><br><span class="line">    <span class="keyword">public</span> Object[] getElements() &#123;</span><br><span class="line">        <span class="keyword">return</span> elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setElements</span><span class="params">(Object[] elements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements = elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-队列"><a href="#5-队列" class="headerlink" title="5. 队列"></a>5. 队列</h2><ul><li>队列（Queue）是只允许在一端进行插入，而在另一端进行删除的运算受限的线性表。</li></ul><ul><li>队列是逻辑结构，其物理结构可以是数组，也可以是链表。</li></ul><ul><li><p>队列的修改原则：队列的修改是依<code>先进先出（FIFO）的原则</code>进行的。新来的成员总是加入队尾（即不允许”加塞”），每次离开的成员总是队列头上的（不允许中途离队），即当前”最老的”成员离队。</p></li><li><p>图示：</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301714100.png" alt="image-20220826010241172"></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643371.png" alt="数据结构-队列" style="zoom:50%;"><h2 id="6-树与二叉树"><a href="#6-树与二叉树" class="headerlink" title="6. 树与二叉树"></a>6. 树与二叉树</h2><h3 id="6-1-树的理解"><a href="#6-1-树的理解" class="headerlink" title="6.1 树的理解"></a>6.1 树的理解</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643466.png" alt="image-20220521111904272" style="zoom:67%;"><p><strong>专有名词解释：</strong></p><p><code>结点</code>：树中的数据元素都称之为结点</p><p><code>根节点</code>：最上面的结点称之为根，一颗树只有一个根且由根发展而来，从另外一个角度来说，每个结点都可以认为是其子树的根</p><p><code>父节点</code>：结点的上层结点，如图中，结点K的父节点是E、结点L的父节点是G</p><p><code>子节点</code>：节点的下层结点，如图中，节点E的子节点是K节点、节点G的子节点是L节点</p><p><code>兄弟节点</code>：具有相同父节点的结点称为兄弟节点，图中F、G、H互为兄弟节点</p><p><code>结点的度数</code>：每个结点所拥有的子树的个数称之为结点的度，如结点B的度为3</p><p><code>树叶</code>：度数为0的结点，也叫作终端结点，图中D、K、F、L、H、I、J都是树叶</p><p><code>非终端节点（或分支节点）</code>：树叶以外的节点，或度数不为0的节点。图中根、A、B、C、E、G都是</p><p><code>树的深度（或高度）</code>：树中结点的最大层次数，图中树的深度为4</p><p><code>结点的层数</code>：从根节点到树中某结点所经路径上的分支树称为该结点的层数，根节点的层数规定为1，其余结点的层数等于其父亲结点的层数+1</p><p><code>同代</code>：在同一棵树中具有相同层数的节点</p><h3 id="6-2-二叉树的基本概念"><a href="#6-2-二叉树的基本概念" class="headerlink" title="6.2 二叉树的基本概念"></a>6.2 二叉树的基本概念</h3><p>二叉树（Binary tree）是树形结构的一个重要类型。二叉树特点是每个结点最多只能有两棵子树，且有左右之分。许多实际问题抽象出来的数据结构往往是二叉树形式，二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643352.png" alt="1563449427345"></p><h3 id="6-3-二叉树的遍历"><a href="#6-3-二叉树的遍历" class="headerlink" title="6.3 二叉树的遍历"></a>6.3 二叉树的遍历</h3><ul><li><p><strong>前序遍历：中左右（根左右）</strong></p><p>即先访问根结点，再前序遍历左子树，最后再前序遍历右子 树。前序遍历运算访问二叉树各结点是以根、左、右的顺序进行访问的。</p></li><li><p><strong>中序遍历：左中右（左根右）</strong></p><p>即先中前序遍历左子树，然后再访问根结点，最后再中序遍 历右子树。中序遍历运算访问二叉树各结点是以左、根、右的顺序进行访问的。</p></li><li><p><strong>后序遍历：左右中（左右根）</strong></p><p>即先后序遍历左子树，然后再后序遍历右子树，最后访问根 结点。后序遍历运算访问二叉树各结点是以左、右、根的顺序进行访问的。</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643871.png" alt="1574575739236" style="zoom:80%;"><p>前序遍历：ABDHIECFG</p><p>中序遍历：HDIBEAFCG</p><p>后序遍历：HIDEBFGCA</p><h3 id="6-4-经典二叉树"><a href="#6-4-经典二叉树" class="headerlink" title="6.4 经典二叉树"></a>6.4 经典二叉树</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301643322.png" alt="image-20220521153016348" style="zoom: 67%;"><p>1、<code>满二叉树</code>： 除最后一层无任何子节点外，每一层上的所有结点都有两个子结点的二叉树。 第n层的结点数是2的n-1次方，总的结点个数是2的n次方-1</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301714493.png" alt="1574575163883"></p><p>2、<code>完全二叉树</code>： 叶结点只能出现在最底层的两层，且最底层叶结点均处于次底层叶结点的左侧。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644057.png" alt="1574575180247"></p><p>3、<code>二叉排序/查找/搜索树</code>：即为BST  (binary search/sort tree)。满足如下性质：<br>（1）若它的左子树不为空，则左子树上所有结点的值均小于它的根节点的值；<br>（2）若它的右子树上所有结点的值均大于它的根节点的值；<br>（3）它的左、右子树也分别为二叉排序/查找/搜索树。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644570.png" alt="image-20220521145208018" style="zoom: 67%;"><blockquote><p>对二叉查找树进行中序遍历，得到有序集合。便于检索。</p></blockquote><p>4、<code>平衡二叉树</code>：（Self-balancing binary search tree，AVL）首先是二叉排序树，此外具有以下性质：<br>（1）它是一棵空树或它的左右两个子树的高度差的绝对值不超过1<br>（2）并且左右两个子树也都是一棵平衡二叉树<br>（3）不要求非叶节点都有两个子结点 </p><blockquote><p>平衡二叉树的目的是为了减少二叉查找树的层次，提高查找速度。平衡二叉树的常用实现有红黑树、AVL、替罪羊树、Treap、伸展树等。</p></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644350.png" alt="image-20220521150151219" style="zoom: 50%;"><p>6、<code>红黑树</code>：即Red-Black Tree。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。 </p><p>红黑树是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，它是在 1972 年由 Rudolf Bayer 发明的。红黑树是复杂的，但它的操作有着<code>良好的最坏情况运行时间</code>，并且在<code>实践中是高效的</code>：它可以在 O(log n)时间内做查找，插入和删除， 这里的 n 是树中元素的数目。</p><p>红黑树的特性：</p><ul><li><p>每个节点是红色或者黑色</p></li><li><p>根节点是黑色</p></li><li><p>每个叶子节点（NIL）是黑色。（注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点）</p></li><li><p>每个红色节点的两个子节点都是黑色的。(从每个叶子到根的所有路径上不能有两个连续的红色节点) </p></li><li><p>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点（确保没有一条路径会比其他路径长出2倍）</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301715933.jpeg" alt></p><p>当我们插入或删除节点时，可能会破坏已有的红黑树，使得它不满足以上5个要求，那么此时就需要进行处理，使得它继续满足以上的5个要求：</p><p>1、<code>recolor</code> ：将某个节点变红或变黑</p><p>2、<code>rotation</code> ：将红黑树某些结点分支进行旋转（左旋或右旋）</p><p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301715944.png" alt="image-20221208212053079"></p><blockquote><p>红黑树可以通过红色节点和黑色节点尽可能的保证二叉树的平衡。主要是用它来存储有序的数据，它的时间复杂度是O(logN)，效率非常之高。</p></blockquote><h3 id="6-5-二叉树及其结点的表示"><a href="#6-5-二叉树及其结点的表示" class="headerlink" title="6.5 二叉树及其结点的表示"></a>6.5 二叉树及其结点的表示</h3><p>普通二叉树：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode root; <span class="comment">//二叉树的根结点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total;<span class="comment">//结点总个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">        <span class="comment">//至少有以下几个部分</span></span><br><span class="line">        TreeNode parent;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        E data;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(TreeNode parent, TreeNode left, E data, TreeNode right)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMap红黑树：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; left;</span><br><span class="line">        Entry&lt;K,V&gt; right;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="keyword">boolean</span> color = BLACK;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Make a new cell with given key, value, and parent, and with</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@code</span> null&#125; child links, and BLACK color.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-List接口分析"><a href="#7-List接口分析" class="headerlink" title="7. List接口分析"></a>7. List接口分析</h2><h3 id="7-1-List接口特点"><a href="#7-1-List接口特点" class="headerlink" title="7.1 List接口特点"></a>7.1 List接口特点</h3><ul><li>List集合所有的元素是以一种<code>线性方式</code>进行存储的，例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。</li><li>它是一个元素<code>存取有序</code>的集合。即元素的存入顺序和取出顺序有保证。</li><li>它是一个<code>带有索引</code>的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li><li>集合中可以有<code>重复</code>的元素，通过元素的equals方法，来比较是否为重复的元素。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301715795.png" alt="1563549818689"></p><blockquote><p>注意：</p><p>List集合关心元素是否有序，而不关心是否重复，请大家记住这个原则。例如“张三”可以领取两个号。</p></blockquote><ul><li>List接口的主要实现类<ul><li>ArrayList：动态数组</li><li>Vector：动态数组</li><li>LinkedList：双向链表</li><li>Stack：栈</li></ul></li></ul><h3 id="7-2-动态数组ArrayList与Vector"><a href="#7-2-动态数组ArrayList与Vector" class="headerlink" title="7.2 动态数组ArrayList与Vector"></a>7.2 动态数组ArrayList与Vector</h3><p>Java的List接口的实现类中有两个动态数组的实现：ArrayList 和 Vector。</p><h4 id="7-2-1-ArrayList与Vector的区别"><a href="#7-2-1-ArrayList与Vector的区别" class="headerlink" title="7.2.1 ArrayList与Vector的区别"></a>7.2.1 ArrayList与Vector的区别</h4><p>它们的底层物理结构都是数组，我们称为动态数组。</p><ul><li>ArrayList是新版的动态数组，线程不安全，效率高，Vector是旧版的动态数组，线程安全，效率低。</li><li>动态数组的扩容机制不同，ArrayList默认扩容为原来的1.5倍，Vector默认扩容增加为原来的2倍。</li><li>数组的初始化容量，如果在构建ArrayList与Vector的集合对象时，没有显式指定初始化容量，那么Vector的内部数组的初始容量默认为10，而ArrayList在JDK 6.0 及之前的版本也是10，JDK8.0 之后的版本ArrayList初始化为长度为0的空数组，之后在添加第一个元素时，再创建长度为10的数组。原因：<ul><li>用的时候，再创建数组，避免浪费。因为很多方法的返回值是ArrayList类型，需要返回一个ArrayList的对象，例如：后期从数据库查询对象的方法，返回值很多就是ArrayList。有可能你要查询的数据不存在，要么返回null，要么返回一个没有元素的ArrayList对象。</li></ul></li></ul><h4 id="7-2-2-ArrayList部分源码分析"><a href="#7-2-2-ArrayList部分源码分析" class="headerlink" title="7.2.2 ArrayList部分源码分析"></a>7.2.2 ArrayList部分源码分析</h4><p><strong>JDK1.7.0_07中：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData; <span class="comment">//存储底层数组元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//记录数组中存储的元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">//指定初始容量为10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">//检查初始容量的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+ initialCapacity);</span><br><span class="line">    <span class="comment">//数组初始化为长度为initialCapacity的数组</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：add()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">//查看当前数组是否够多存一个元素</span></span><br><span class="line">    elementData[size++] = e; <span class="comment">//将元素e添加到elementData数组中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 如果if条件满足，则进行数组的扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length; <span class="comment">//当前数组容量</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//新数组容量是旧数组容量的1.5倍</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)  <span class="comment">//判断旧数组的1.5倍是否够</span></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//判断旧数组的1.5倍是否超过最大数组限制</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//复制一个新数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：remove()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//判断index是否在有效的范围内</span></span><br><span class="line"></span><br><span class="line">    modCount++; <span class="comment">//修改次数加1</span></span><br><span class="line">    <span class="comment">//取出[index]位置的元素，[index]位置的元素就是要被删除的元素，用于最后返回被删除的元素</span></span><br><span class="line">    E oldValue = elementData(index); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>; <span class="comment">//确定要移动的次数</span></span><br><span class="line">    <span class="comment">//如果需要移动元素，就用System.arraycopy移动元素</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    <span class="comment">//将elementData[size-1]位置置空，让GC回收空间，元素个数减少</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size) <span class="comment">//index不合法的情况</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">//返回指定位置的元素</span></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：set()方法相关</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//检验index是否合法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//取出[index]位置的元素，[index]位置的元素就是要被替换的元素，用于最后返回被替换的元素</span></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    <span class="comment">//用element替换[index]位置的元素</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：get()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//检验index是否合法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index); <span class="comment">//返回[index]位置的元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：indexOf()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分为o是否为空两种情况</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从前往后找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：lastIndexOf()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分为o是否为空两种情况</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从后往前找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jdk1.8.0_271中：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;  <span class="comment">//初始化为空数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法:add()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查看当前数组是否够多存一个元素</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//存入新元素到[size]位置，然后size自增1</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前数组还是空数组</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="comment">//那么minCapacity取DEFAULT_CAPACITY与minCapacity的最大值</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看是否需要扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;  <span class="comment">//修改次数加1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果需要的最小容量比当前数组的长度大，即当前数组不够存，就扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length; <span class="comment">//当前数组容量</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//新数组容量是旧数组容量的1.5倍</span></span><br><span class="line">    <span class="comment">//看旧数组的1.5倍是否够</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//看旧数组的1.5倍是否超过最大数组限制</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//复制一个新数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-3-ArrayList相关方法图示"><a href="#7-2-3-ArrayList相关方法图示" class="headerlink" title="7.2.3 ArrayList相关方法图示"></a>7.2.3 ArrayList相关方法图示</h4><ul><li><strong>ArrayList采用数组作为底层实现</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644871.png" alt="image-20221029112037297" style="zoom:80%;"><ul><li><strong>ArrayList自动扩容过程</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301716803.png" alt></p><ul><li><strong>ArrayList的add(E e)方法</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301716318.png" alt></p><ul><li><strong>ArrayList的add(int index,E e)方法</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301716896.png" alt="image-20221029112157007" style="zoom:80%;"><h4 id="7-2-4-Vector部分源码分析"><a href="#7-2-4-Vector部分源码分析" class="headerlink" title="7.2.4 Vector部分源码分析"></a>7.2.4 Vector部分源码分析</h4><p><strong>jdk1.8.0_271中：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="number">10</span>); <span class="comment">//指定初始容量initialCapacity为10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(initialCapacity, <span class="number">0</span>); <span class="comment">//指定capacityIncrement增量为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">//判断了形参初始容量initialCapacity的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+ initialCapacity);</span><br><span class="line">    <span class="comment">//创建了一个Object[]类型的数组</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    <span class="comment">//增量，默认是0，如果是0，后面就按照2倍增加，如果不是0，后面就按照你指定的增量进行增量</span></span><br><span class="line">    <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：add()相关方法</span></span><br><span class="line"><span class="comment">//synchronized意味着线程安全的   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//看是否需要扩容</span></span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//把新的元素存入[elementCount]，存入后，elementCount元素的个数增1</span></span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//看是否超过了当前数组的容量</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity); <span class="comment">//扩容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length; <span class="comment">//获取目前数组的长度</span></span><br><span class="line">    <span class="comment">//如果capacityIncrement增量是0，新容量 = oldCapacity的2倍</span></span><br><span class="line">    <span class="comment">//如果capacityIncrement增量是不是0，新容量 = oldCapacity + capacityIncrement增量;</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="comment">//如果按照上面计算的新容量还不够，就按照你指定的需要的最小容量来扩容minCapacity</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//如果新容量超过了最大数组限制，那么单独处理</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//把旧数组中的数据复制到新数组中，新数组的长度为newCapacity</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：remove()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeElement(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeElement</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//查找obj在当前Vector中的下标</span></span><br><span class="line">    <span class="keyword">int</span> i = indexOf(obj);</span><br><span class="line">    <span class="comment">//如果i&gt;=0，说明存在，删除[i]位置的元素</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        removeElementAt(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：indexOf()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;<span class="comment">//要查找的元素是null值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)<span class="comment">//如果是null值，用==null判断</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//要查找的元素是非null值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))<span class="comment">//如果是非null值，用equals判断</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：removeElementAt()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//判断下标的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> +</span><br><span class="line">                                                 elementCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//j是要移动的元素的个数</span></span><br><span class="line">    <span class="keyword">int</span> j = elementCount - index - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果需要移动元素，就调用System.arraycopy进行移动</span></span><br><span class="line">    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//把index+1位置以及后面的元素往前移动</span></span><br><span class="line">        <span class="comment">//index+1的位置的元素移动到index位置，依次类推</span></span><br><span class="line">        <span class="comment">//一共移动j个</span></span><br><span class="line">        System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//元素的总个数减少</span></span><br><span class="line">    elementCount--;</span><br><span class="line">    <span class="comment">//将elementData[elementCount]这个位置置空，用来添加新元素，位置的元素等着被GC回收</span></span><br><span class="line">    elementData[elementCount] = <span class="keyword">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-链表LinkedList"><a href="#7-3-链表LinkedList" class="headerlink" title="7.3 链表LinkedList"></a>7.3 链表LinkedList</h3><p>Java中有双链表的实现：LinkedList，它是List接口的实现类。</p><p>LinkedList是一个<strong>双向链表</strong>，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301717818.png" alt="image-20220514165707977"></p><h4 id="7-3-1-链表与动态数组的区别"><a href="#7-3-1-链表与动态数组的区别" class="headerlink" title="7.3.1 链表与动态数组的区别"></a>7.3.1 链表与动态数组的区别</h4><p>动态数组底层的物理结构是数组，因此根据索引访问的效率 非常高。但是非末尾位置的插入和删除效率不高，因为涉及到移动元素。另外添加操作时涉及到扩容问题，就会增加时空消耗。</p><p>链表底层的物理结构是链表，因此根据索引访问的效率不高，即查找元素慢。但是插入和删除不需要移动元素，只需要修改前后元素的指向关系即可，所以插入、删除元素快。而且链表的添加不会涉及到扩容问题。</p><h4 id="7-3-2-LinkedList源码分析"><a href="#7-3-2-LinkedList源码分析" class="headerlink" title="7.3.2 LinkedList源码分析"></a>7.3.2 LinkedList源码分析</h4><p><strong>jdk1.8.0_271中：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first; <span class="comment">//记录第一个结点的位置</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last; <span class="comment">//记录当前链表的尾元素</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">//记录最后一个结点的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：add()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e); <span class="comment">//默认把新元素链接到链表尾部</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last; <span class="comment">//用 l 记录原来的最后一个结点</span></span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);  <span class="comment">//新节点链接到前一个节点 新节点没有链接到后一个节点</span></span><br><span class="line">    <span class="comment">//现在的新结点是最后一个结点了</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">//如果l==null，说明原来的链表是空的</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//那么新结点同时也是第一个结点</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//否则把新结点链接到原来的最后一个结点的next中</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    <span class="comment">//元素个数增加</span></span><br><span class="line">    size++;</span><br><span class="line">    <span class="comment">//修改次数增加</span></span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中，Node类定义如下</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item; <span class="comment">//元素数据</span></span><br><span class="line">    Node&lt;E&gt; next; <span class="comment">//下一个结点</span></span><br><span class="line">    Node&lt;E&gt; prev; <span class="comment">//前一个结点</span></span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法：获取get()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：插入add()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);<span class="comment">//检查index范围</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)<span class="comment">//如果index==size，连接到当前链表的尾部</span></span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">index &lt; (size &gt;&gt; 1)采用二分思想，先将index与长度size的一半比较，如果index&lt;size/2，就只从位置0</span></span><br><span class="line"><span class="comment">往后遍历到位置index处，而如果index&gt;size/2，就只从位置size往前遍历到位置index处。这样可以减少一部</span></span><br><span class="line"><span class="comment">分不必要的遍历。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//如果index&lt;size/2，就从前往后找目标结点</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则从后往前找目标结点</span></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把新结点插入到[index]位置的结点succ前面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;<span class="comment">//succ是[index]位置对应的结点</span></span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev; <span class="comment">//[index]位置的前一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新结点的prev是原来[index]位置的前一个结点</span></span><br><span class="line">    <span class="comment">//新结点的next是原来[index]位置的结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[index]位置对应的结点的prev指向新结点</span></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果原来[index]位置对应的结点是第一个结点，那么现在新结点是第一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;<span class="comment">//原来[index]位置的前一个结点的next指向新结点</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：remove()相关方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分o是否为空两种情况</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//找到o对应的结点x</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                unlink(x);<span class="comment">//删除x结点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//找到o对应的结点x</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);<span class="comment">//删除x结点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;<span class="comment">//x是要被删除的结点</span></span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;<span class="comment">//被删除结点的数据</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;<span class="comment">//被删除结点的下一个结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;<span class="comment">//被删除结点的上一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果被删除结点的前面没有结点，说明被删除结点是第一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//那么被删除结点的下一个结点变为第一个结点</span></span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//被删除结点不是第一个结点</span></span><br><span class="line">        <span class="comment">//被删除结点的上一个结点的next指向被删除结点的下一个结点</span></span><br><span class="line">        prev.next = next;</span><br><span class="line">        <span class="comment">//断开被删除结点与上一个结点的链接</span></span><br><span class="line">        x.prev = <span class="keyword">null</span>;<span class="comment">//使得GC回收</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果被删除结点的后面没有结点，说明被删除结点是最后一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//那么被删除结点的上一个结点变为最后一个结点</span></span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//被删除结点不是最后一个结点</span></span><br><span class="line">        <span class="comment">//被删除结点的下一个结点的prev执行被删除结点的上一个结点</span></span><br><span class="line">        next.prev = prev;</span><br><span class="line">        <span class="comment">//断开被删除结点与下一个结点的连接</span></span><br><span class="line">        x.next = <span class="keyword">null</span>;<span class="comment">//使得GC回收</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把被删除结点的数据也置空，使得GC回收</span></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//元素个数减少</span></span><br><span class="line">    size--;</span><br><span class="line">    <span class="comment">//修改次数增加</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//返回被删除结点的数据</span></span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">//index是要删除元素的索引位置</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-3-LinkedList相关方法图示"><a href="#7-3-3-LinkedList相关方法图示" class="headerlink" title="7.3.3 LinkedList相关方法图示"></a>7.3.3 LinkedList相关方法图示</h4><ul><li><strong>只有1个元素的LinkedList</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644840.png" alt="image-20221029134437888" style="zoom:80%;"><ul><li><strong>包含4个元素的LinkedList</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644847.png" alt="image-20221029134534198" style="zoom:80%;"><ul><li><strong>add(E e)方法</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644929.png" alt="image-20221029135013377" style="zoom:80%;"><ul><li><strong>add(int index,E e)方法</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301717972.png" alt="image-20221029135045120" style="zoom:80%;"><ul><li><strong>remove(Object obj)方法</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644602.png" alt="image-20221029134721089" style="zoom:80%;"><ul><li><strong>remove(int index)方法</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301718657.png" alt="image-20221029134807613" style="zoom:80%;"><h2 id="8-Map接口分析"><a href="#8-Map接口分析" class="headerlink" title="8. Map接口分析"></a>8. Map接口分析</h2><h3 id="8-1-哈希表的物理结构"><a href="#8-1-哈希表的物理结构" class="headerlink" title="8.1 哈希表的物理结构"></a>8.1 哈希表的物理结构</h3><p>HashMap和Hashtable底层都是哈希表（也称散列表），其中维护了一个长度为<strong>2^幂次方</strong>的Entry类型的数组table，数组的每一个索引位置被称为一个桶(bucket)，你添加的映射关系(key,value)最终都被封装为一个Map.Entry类型的对象，放到某个table[index]桶中。</p><p>使用数组的目的是查询和添加的效率高，可以根据索引直接定位到某个table[index]。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644546.png" alt="image-20221029144811305" style="zoom:80%;"><h3 id="8-2-HashMap中数据添加过程"><a href="#8-2-HashMap中数据添加过程" class="headerlink" title="8.2 HashMap中数据添加过程"></a>8.2 HashMap中数据添加过程</h3><h4 id="8-2-1-JDK7中过程分析"><a href="#8-2-1-JDK7中过程分析" class="headerlink" title="8.2.1 JDK7中过程分析"></a>8.2.1 JDK7中过程分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在底层创建了长度为16的Entry[] table的数组</span></span><br><span class="line">HashMap map = <span class="keyword">new</span> HashMap(); </span><br><span class="line">map.put(key1,value1);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析过程如下：</span></span><br><span class="line"><span class="comment">将(key1,value1)添加到当前hashmap的对象中。首先会调用key1所在类的hashCode()方法，计算key1的哈希值1，</span></span><br><span class="line"><span class="comment">此哈希值1再经过某种运算(hash())，得到哈希值2。此哈希值2再经过某种运算(indexFor())，确定在底层table数组中的索引位置i。</span></span><br><span class="line"><span class="comment">   （1）如果数组索引为i上的数据为空，则(key1,value1)直接添加成功   ------位置1</span></span><br><span class="line"><span class="comment">   （2）如果数组索引为i上的数据不为空，有(key2,value2)，则需要进一步判断：</span></span><br><span class="line"><span class="comment">       判断key1的哈希值2与key2的哈希值是否相同：</span></span><br><span class="line"><span class="comment">         （3） 如果哈希值不同，则(key1,value1)直接添加成功   ------位置2</span></span><br><span class="line"><span class="comment">              如果哈希值相同，则需要继续调用key1所在类的equals()方法，将key2放入equals()形参进行判断</span></span><br><span class="line"><span class="comment">                （4） equals方法返回false : 则(key1,value1)直接添加成功   ------位置3</span></span><br><span class="line"><span class="comment">                      equals方法返回true : 默认情况下，value1会覆盖value2。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">位置1：直接将(key1,value1)以Entry对象的方式存放到table数组索引i的位置。</span></span><br><span class="line"><span class="comment">位置2、位置3：(key1,value1) 与现有的元素以链表的方式存储在table数组索引i的位置，新添加的元素指向旧添加的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">在不断的添加的情况下，满足如下条件的情况下，会进行扩容:</span></span><br><span class="line"><span class="comment">if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) :</span></span><br><span class="line"><span class="comment">默认情况下，当要添加的元素个数超过12(即：数组的长度 * loadFactor得到的结果)时，就要考虑扩容。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">补充：jdk7源码中定义的：</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">map</span>.<span class="title">get</span>(<span class="title">key1</span>)</span>;</span><br><span class="line">① 计算key1的hash值，用这个方法hash(key1)</span><br><span class="line">② 找index = table.length-<span class="number">1</span> &amp; hash;</span><br><span class="line">③ 如果table[index]不为空，那么就挨个比较哪个Entry的key与它相同，就返回它的value</span><br><span class="line">map.remove(key1);</span><br><span class="line">① 计算key1的hash值，用这个方法hash(key1)</span><br><span class="line">② 找index = table.length-<span class="number">1</span> &amp; hash;</span><br><span class="line">③ 如果table[index]不为空，那么就挨个比较哪个Entry的key与它相同，就删除它，把它前面的Entry的next的值修改为被删除Entry的next</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310311950091.png" alt="image-20231031195051986"></p><h4 id="8-2-2-JDK8中过程分析"><a href="#8-2-2-JDK8中过程分析" class="headerlink" title="8.2.2 JDK8中过程分析"></a>8.2.2 JDK8中过程分析</h4><p>下面说明是JDK8相较于JDK7的不同之处：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">①使用HashMap()的构造器创建对象时，并没有在底层初始化长度为<span class="number">16</span>的table数组。</span><br><span class="line">②jdk8中添加的key,value封装到了HashMap.Node类的对象中。而非jdk7中的HashMap.Entry。</span><br><span class="line">③jdk8中新增的元素所在的索引位置如果有其他元素。在经过一系列判断后，如果能添加，则是旧的元素指向新的元素。而非jdk7中的新的元素指向旧的元素。“七上八下”</span><br><span class="line">④jdk7时底层的数据结构是：数组+单向链表。 而jdk8时，底层的数据结构是：数组+单向链表+红黑树。</span><br><span class="line">红黑树出现的时机：当某个索引位置i上的链表的长度达到<span class="number">8</span>，且数组的长度超过<span class="number">64</span>时，此索引位置上的元素要从单向链表改为红黑树。</span><br><span class="line">如果索引i位置是红黑树的结构，当不断删除元素的情况下，当前索引i位置上的元素的个数低于<span class="number">6</span>时，要从红黑树改为单向链表。</span><br></pre></td></tr></table></figure><h3 id="8-3-HashMap源码剖析"><a href="#8-3-HashMap源码剖析" class="headerlink" title="8.3 HashMap源码剖析"></a>8.3 HashMap源码剖析</h3><h4 id="8-3-1-JDK1-7-0-07中源码"><a href="#8-3-1-JDK1-7-0-07中源码" class="headerlink" title="8.3.1 JDK1.7.0_07中源码"></a>8.3.1 JDK1.7.0_07中源码</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644235.png" alt="image-20220514190849626"></p><h5 id="1、Entry"><a href="#1、Entry" class="headerlink" title="1、Entry"></a><strong>1、Entry</strong></h5><p>key-value被封装为HashMap.Entry类型，而这个类型实现了Map.Entry接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="keyword">int</span> hash;    <span class="comment">//使用key得到的哈希值2进行赋值。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates new entry.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a><strong>2、属性</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//table数组的默认初始化长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;  <span class="comment">// default_initial_capacity=16</span></span><br><span class="line"><span class="comment">//哈希表</span></span><br><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table; <span class="comment">//table数组默认大小为16</span></span><br><span class="line"><span class="comment">//哈希表中key-value的个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">//临界值、阈值（扩容的临界值）</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">//加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"><span class="comment">//默认加载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;   <span class="comment">// default_load_factor=0.75</span></span><br></pre></td></tr></table></figure><h5 id="3、构造器"><a href="#3、构造器" class="headerlink" title="3、构造器"></a><strong>3、构造器</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//DEFAULT_INITIAL_CAPACITY：默认初始容量16</span></span><br><span class="line">  <span class="comment">//DEFAULT_LOAD_FACTOR：默认加载因子0.75</span></span><br><span class="line">    <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//校验initialCapacity合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> + initialCapacity);</span><br><span class="line">    <span class="comment">//校验initialCapacity合法性 </span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">//校验loadFactor合法性</span></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> + loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算得到table数组的长度（保证capacity是2的整次幂）</span></span><br><span class="line">    <span class="keyword">int</span> capacity = <span class="number">1</span>;</span><br><span class="line">     <span class="comment">//通过此循环，得到capacity的最终值，此最终值决定了Entry数组的长度。此时的capacity一定是2的整数倍</span></span><br><span class="line">    <span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">        <span class="comment">//保证数组长度一致是2的整次幂</span></span><br><span class="line">        capacity &lt;&lt;= <span class="number">1</span>;  <span class="comment">//通过不停的左移相当于放大2倍 --直到capacity=16</span></span><br><span class="line"><span class="comment">//加载因子，初始化为0.75</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">// threshold 初始为默认容量</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//初始化table数组</span></span><br><span class="line">    table = <span class="keyword">new</span> Entry[capacity];  <span class="comment">//初始化table大小为16</span></span><br><span class="line">    useAltHashing = sun.misc.VM.isBooted() &amp;&amp;</span><br><span class="line">                                       (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、put-方法"><a href="#4、put-方法" class="headerlink" title="4、put()方法"></a><strong>4、put()方法</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果key是null，单独处理，存储到table[0]中，如果有另一个key为null，value覆盖</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">//对key的hashCode进行干扰，算出一个hash值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      hashCode值        xxxxxxxxxx</span></span><br><span class="line"><span class="comment">      table.length-1    000001111</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">      hashCode值 xxxxxxxxxx  无符号右移几位和原来的hashCode值做^运算，使得hashCode高位二进制值参与计算，</span></span><br><span class="line"><span class="comment">                            也发挥作用，降低index冲突的概率。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">//计算新的映射关系应该存到table[i]位置，</span></span><br><span class="line">    <span class="comment">//i = hash &amp; table.length-1，可以保证i在[0,table.length-1]范围内</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">//检查table[i]下面有没有key与我新的映射关系的key重复，如果重复替换value</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">//如果hash不相同，就不进入if语句，那样就一直e=e.next然后调用addEntry()最终使用头插法  --情况2</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  <span class="comment">//左边false那就情况2  左边true就判断后面的就是情况3</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;  <span class="comment">//如果put是修改操作，会返回原有旧的value值。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//如果当前索引位置i没有元素 e==null   --情况1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//添加新的映射关系 </span></span><br><span class="line">    addEntry(hash, key, value, i); <span class="comment">//将key,value封装为一个Entry对象，并将此对象保存在索引i位置。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;   <span class="comment">//如果put是添加操作，会返回null.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果key是null，直接存入[0]的位置</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否有重复的key，如果有重复的，就替换value</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//把新的映射关系存入[0]的位置，而且key的hash值用0表示</span></span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (useAltHashing) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line">        h = hashSeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>); <span class="comment">//相当于用哈希值2&amp;15 那只考虑最低四位&amp;1111 效率要比整体取模要高很多  --&gt;得到0-15的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否需要库容</span></span><br><span class="line">    <span class="comment">//扩容：（1）size达到阈值（2）table[i]正好非空</span></span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        <span class="comment">//table扩容为原来的2倍，并且扩容后，会重新调整所有key-value的存储位置</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length); </span><br><span class="line">        <span class="comment">//新的key-value的hash和index也会重新计算</span></span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>; </span><br><span class="line">        bucketIndex = indexFor(hash, table.length);  <span class="comment">//重新计算索引位置</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//存入table中</span></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];   <span class="comment">//将现有位置的元素取出来给e</span></span><br><span class="line">    <span class="comment">//原来table[i]下面的映射关系作为新的映射关系next</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e); <span class="comment">//现有位置存放新元素 新的元素指向原来的元素e 【头插法】</span></span><br><span class="line">    <span class="comment">//个数增加</span></span><br><span class="line">    size++; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-2-JDK1-8-0-271中源码"><a href="#8-3-2-JDK1-8-0-271中源码" class="headerlink" title="8.3.2 JDK1.8.0_271中源码"></a>8.3.2 JDK1.8.0_271中源码</h4><h5 id="1、Node"><a href="#1、Node" class="headerlink" title="1、Node"></a><strong>1、Node</strong></h5><p>key-value被封装为HashMap.Node类型或HashMap.TreeNode类型，它俩都直接或间接的实现了Map.Entry接口。</p><p>存储到table数组的可能是Node结点对象，也可能是TreeNode结点对象，它们也是Map.Entry接口的实现类。即table[index]下的映射关系可能串起来一个链表或一棵红黑树。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644865.png" alt="image-20220514190904009"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Node类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其它结构：略</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//TreeNode类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;</span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;</span><br><span class="line">        <span class="keyword">boolean</span> red; <span class="comment">//是红结点还是黑结点</span></span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、属性-1"><a href="#2、属性-1" class="headerlink" title="2、属性"></a><strong>2、属性</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// 默认的初始容量 16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>; <span class="comment">//最大容量  1 &lt;&lt; 30</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;  <span class="comment">//默认加载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>; <span class="comment">//默认树化阈值8，当链表的长度达到这个值后，要考虑树化</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;<span class="comment">//默认反树化阈值6，当树中结点的个数达到此阈值后，要考虑变为链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当单个的链表的结点个数达到8，并且table的长度达到64，才会树化。</span></span><br><span class="line"><span class="comment">//当单个的链表的结点个数达到8，但是table的长度未达到64，会先扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>; <span class="comment">//最小树化容量64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table; <span class="comment">//数组</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;  <span class="comment">//记录有效映射关系的对数，也是Entry对象的个数</span></span><br><span class="line"><span class="keyword">int</span> threshold; <span class="comment">//阈值，当size达到阈值时，考虑扩容</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor; <span class="comment">//加载因子，影响扩容的频率</span></span><br></pre></td></tr></table></figure><h5 id="3、构造器-1"><a href="#3、构造器-1" class="headerlink" title="3、构造器"></a><strong>3、构造器</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted (其他字段都是默认值)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、put-方法-1"><a href="#4、put-方法-1" class="headerlink" title="4、put()方法"></a><strong>4、put()方法</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">//如果key是null，hash是0</span></span><br><span class="line"><span class="comment">//如果key非null，用key的hashCode值 与 key的hashCode值高16进行异或</span></span><br><span class="line"><span class="comment">//即就是用key的hashCode值高16位与低16位进行了异或的干扰运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">index = hash &amp; table.length-1</span></span><br><span class="line"><span class="comment">如果用key的原始的hashCode值  与 table.length-1 进行按位与，那么基本上高16没机会用上。</span></span><br><span class="line"><span class="comment">这样就会增加冲突的概率，为了降低冲突的概率，把高16位加入到hash信息中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,<span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="comment">//数组</span></span><br><span class="line">    Node&lt;K,V&gt; p;  <span class="comment">//一个结点</span></span><br><span class="line">    <span class="keyword">int</span> n, i; <span class="comment">//n是数组的长度   i是下标</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//tab和table等价</span></span><br><span class="line"><span class="comment">//如果table是空的</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)&#123;</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">tab = resize();</span></span><br><span class="line"><span class="comment">n = tab.length;*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果table是空的，resize()完成了①创建了一个长度为16的数组②threshold = 12</span></span><br><span class="line"><span class="comment">n = 16</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//i = (n - 1) &amp; hash ，下标 = 数组长度-1 &amp; hash</span></span><br><span class="line"><span class="comment">//p = tab[i] 第1个结点</span></span><br><span class="line"><span class="comment">//if(p==null) 条件满足的话说明 table[i]还没有元素</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//把新的映射关系直接放入table[i]</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//newNode（）方法就创建了一个Node类型的新结点，新结点的next是null</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//p是table[i]中第一个结点</span></span><br><span class="line"><span class="comment">//if(table[i]的第一个结点与新的映射关系的key重复)</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;<span class="comment">//用e记录这个table[i]的第一个结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)&#123; <span class="comment">//如果table[i]第一个结点是一个树结点</span></span><br><span class="line">            <span class="comment">//单独处理树结点</span></span><br><span class="line">            <span class="comment">//如果树结点中，有key重复的，就返回那个重复的结点用e接收，即e!=null</span></span><br><span class="line">            <span class="comment">//如果树结点中，没有key重复的，就把新结点放到树中，并且返回null，即e=null</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//table[i]的第一个结点不是树结点，也与新的映射关系的key不重复</span></span><br><span class="line"><span class="comment">//binCount记录了table[i]下面的结点的个数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//如果p的下一个结点是空的，说明当前的p是最后一个结点</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//把新的结点连接到table[i]的最后</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//如果binCount&gt;=8-1，达到7个时</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">//要么扩容，要么树化</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果key重复了，就跳出for循环，此时e结点记录的就是那个key重复的结点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;<span class="comment">//下一次循环，e=p.next，就类似于e=e.next，往链表下移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果这个e不是null，说明有key重复，就考虑替换原来的value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e); <span class="comment">//什么也没干</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//元素个数增加</span></span><br><span class="line"><span class="comment">//size达到阈值</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize(); <span class="comment">//一旦扩容，重新调整所有映射关系的位置</span></span><br><span class="line">    afterNodeInsertion(evict); <span class="comment">//什么也没干</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table; <span class="comment">//oldTab原来的table</span></span><br><span class="line">    <span class="comment">//oldCap：原来数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//oldThr：原来的阈值</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;<span class="comment">//最开始threshold是0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//newCap，新容量</span></span><br><span class="line"><span class="comment">//newThr：新阈值</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; <span class="comment">//说明原来不是空数组</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123; <span class="comment">//是否达到数组最大限制</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">//newCap = 旧的容量*2 ，新容量&lt;最大数组容量限制</span></span><br><span class="line"><span class="comment">//新容量：32,64，...</span></span><br><span class="line"><span class="comment">//oldCap &gt;= 初始容量16</span></span><br><span class="line"><span class="comment">//新阈值重新算 = 24，48 ....</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY; <span class="comment">//新容量是默认初始化容量16</span></span><br><span class="line">        <span class="comment">//新阈值= 默认的加载因子 * 默认的初始化容量 = 0.75*16 = 12</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr; <span class="comment">//阈值赋值为新阈值12，24.。。。</span></span><br><span class="line">    <span class="comment">//创建了一个新数组，长度为newCap，16，32,64.。。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123; <span class="comment">//原来不是空数组</span></span><br><span class="line">        <span class="comment">//把原来的table中映射关系，倒腾到新的table中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;<span class="comment">//e是table下面的结点</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>; <span class="comment">//把旧的table[j]位置清空</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>) <span class="comment">//如果是最后一个结点</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e; <span class="comment">//重新计算e的在新table中的存储位置，然后放入</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode) <span class="comment">//如果e是树结点</span></span><br><span class="line">                    <span class="comment">//把原来的树拆解，放到新的table</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">//把原来table[i]下面的整个链表，重新挪到了新的table中</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个新结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(hash, key, value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; </span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">//MIN_TREEIFY_CAPACITY：最小树化容量64</span></span><br><span class="line">    <span class="comment">//如果table是空的，或者  table的长度没有达到64</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();<span class="comment">//先扩容</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//用e记录table[index]的结点的地址</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">do...while，把table[index]链表的Node结点变为TreeNode类型的结点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;<span class="comment">//hd记录根结点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果table[index]下面不是空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            hd.treeify(tab);<span class="comment">//将table[index]下面的链表进行树化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301721742.png" alt="image-20220524142524796"></p><h3 id="8-4-LinkedHashMap源码剖析"><a href="#8-4-LinkedHashMap源码剖析" class="headerlink" title="8.4 LinkedHashMap源码剖析"></a>8.4 LinkedHashMap源码剖析</h3><h4 id="8-4-1-源码"><a href="#8-4-1-源码" class="headerlink" title="8.4.1 源码"></a>8.4.1 源码</h4><p>内部定义的Entry如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">Entry&lt;K,V&gt; before, after;</span><br><span class="line"></span><br><span class="line">Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line"><span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedHashMap重写了HashMap中的newNode()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">        <span class="keyword">new</span> LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    linkNodeLast(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">newTreeNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(hash, key, value, next);</span><br><span class="line">    linkNodeLast(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-2-图示"><a href="#8-4-2-图示" class="headerlink" title="8.4.2 图示"></a>8.4.2 图示</h4><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644479.png" alt="image-20221029145708224" style="zoom:80%;"><h2 id="9-Set接口分析"><a href="#9-Set接口分析" class="headerlink" title="9. Set接口分析"></a>9. Set接口分析</h2><h3 id="9-1-Set集合与Map集合的关系"><a href="#9-1-Set集合与Map集合的关系" class="headerlink" title="9.1 Set集合与Map集合的关系"></a>9.1 Set集合与Map集合的关系</h3><p>Set的内部实现其实是一个Map，Set中的元素，存储在HashMap的key中。即HashSet的内部实现是一个HashMap，TreeSet的内部实现是一个TreeMap，LinkedHashSet的内部实现是一个LinkedHashMap。</p><h3 id="9-2-源码剖析"><a href="#9-2-源码剖析" class="headerlink" title="9.2 源码剖析"></a>9.2 源码剖析</h3><p><strong>HashSet源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个构造器是给子类LinkedHashSet调用的</span></span><br><span class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add()方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中，</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">//iterator()方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkedHashSet源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, .<span class="number">75f</span>, <span class="keyword">true</span>);<span class="comment">//调用HashSet的某个构造器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor, <span class="keyword">true</span>);<span class="comment">//调用HashSet的某个构造器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TreeSet源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">    <span class="keyword">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中，</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add()方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中，</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h2 id="10-【拓展】HashMap的相关问题"><a href="#10-【拓展】HashMap的相关问题" class="headerlink" title="10. 【拓展】HashMap的相关问题"></a>10. 【拓展】HashMap的相关问题</h2><h4 id="1、说说你理解的哈希算法"><a href="#1、说说你理解的哈希算法" class="headerlink" title="1、说说你理解的哈希算法"></a>1、说说你理解的哈希算法</h4><p>hash算法是一种可以从任何数据中提取出其“指纹”的数据摘要算法，它将任意大小的数据映射到一个固定大小的序列上，这个序列被称为hash code、数据摘要或者指纹。比较出名的hash算法有MD5、SHA。hash是具有唯一性且不可逆的，唯一性是指相同的“对象”产生的hash code永远是一样的。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301722818.png" alt="1563797150134"></p><h4 id="2、Entry中的hash属性为什么不直接使用key的hashCode-返回值呢？"><a href="#2、Entry中的hash属性为什么不直接使用key的hashCode-返回值呢？" class="headerlink" title="2、Entry中的hash属性为什么不直接使用key的hashCode()返回值呢？"></a>2、Entry中的hash属性为什么不直接使用key的hashCode()返回值呢？</h4><p>不管是JDK1.7还是JDK1.8中，都不是直接用key的hashCode值直接与table.length-1计算求下标的，而是先对key的hashCode值进行了一个运算，JDK1.7和JDK1.8关于hash()的实现代码不一样，但是不管怎么样都是为了提高hash code值与 (table.length-1)的按位与完的结果，尽量的均匀分布。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301644916.png" alt="image-20220514190454633"></p><p>JDK1.7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>虽然算法不同，但是思路都是将hashCode值的高位二进制与低位二进制值进行了异或，然高位二进制参与到index的计算中。</p><p>为什么要hashCode值的二进制的高位参与到index计算呢？</p><p>因为一个HashMap的table数组一般不会特别大，至少在不断扩容之前，那么table.length-1的大部分高位都是0，直接用hashCode和table.length-1进行&amp;运算的话，就会导致总是只有最低的几位是有效的，那么就算你的hashCode()实现的再好也难以避免发生碰撞，这时让高位参与进来的意义就体现出来了。它对hashcode的低位添加了随机性并且混合了高位的部分特征，显著减少了碰撞冲突的发生。</p><h4 id="3、HashMap是如何决定某个key-value存在哪个桶的呢？"><a href="#3、HashMap是如何决定某个key-value存在哪个桶的呢？" class="headerlink" title="3、HashMap是如何决定某个key-value存在哪个桶的呢？"></a>3、HashMap是如何决定某个key-value存在哪个桶的呢？</h4><p>因为hash值是一个整数，而数组的长度也是一个整数，有两种思路：</p><p>①hash 值 % table.length会得到一个[0,table.length-1]范围的值，正好是下标范围，但是用%运算效率没有位运算符&amp;高。</p><p>②hash 值 &amp; (table.length-1)，任何数 &amp; (table.length-1)的结果也一定在[0, table.length-1]范围。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301645978.png" alt="1563800372286"></p><p>JDK1.7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>); <span class="comment">//此处h就是hash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)  <span class="comment">// i = (n - 1) &amp; hash</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//....省略大量代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、为什么要保持table数组一直是2的n次幂呢？"><a href="#4、为什么要保持table数组一直是2的n次幂呢？" class="headerlink" title="4、为什么要保持table数组一直是2的n次幂呢？"></a>4、为什么要保持table数组一直是2的n次幂呢？</h4><p>因为如果数组的长度为2的n次幂，那么table.length-1的二进制就是一个高位全是0，低位全是1的数字，这样才能保证每一个下标位置都有机会被用到。</p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hashCode值是   ？</span><br><span class="line">table.length是<span class="number">10</span></span><br><span class="line">table.length-<span class="number">1</span>是<span class="number">9</span></span><br><span class="line"></span><br><span class="line">？   ????????</span><br><span class="line"><span class="number">9</span> <span class="number">00001001</span></span><br><span class="line">&amp;_____________</span><br><span class="line"> <span class="number">00000000</span>[<span class="number">0</span>]</span><br><span class="line"> <span class="number">00000001</span>[<span class="number">1</span>]</span><br><span class="line"> <span class="number">00001000</span>[<span class="number">8</span>]</span><br><span class="line"> <span class="number">00001001</span>[<span class="number">9</span>]</span><br><span class="line"> 一定[<span class="number">0</span>]~[<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hashCode值是   ？</span><br><span class="line">table.length是<span class="number">16</span></span><br><span class="line">table.length-<span class="number">1</span>是<span class="number">15</span></span><br><span class="line"></span><br><span class="line">？   ????????</span><br><span class="line"><span class="number">15</span> <span class="number">00001111</span></span><br><span class="line">&amp;_____________</span><br><span class="line"> <span class="number">00000000</span>[<span class="number">0</span>]</span><br><span class="line"> <span class="number">00000001</span>[<span class="number">1</span>]</span><br><span class="line"> <span class="number">00000010</span>[<span class="number">2</span>]</span><br><span class="line"> <span class="number">00000011</span>[<span class="number">3</span>]</span><br><span class="line"> ...</span><br><span class="line"> <span class="number">00001111</span>    [<span class="number">15</span>]</span><br><span class="line"> 范围是[<span class="number">0</span>,<span class="number">15</span>]，一定在[<span class="number">0</span>,table.length-<span class="number">1</span>]范围内</span><br></pre></td></tr></table></figure><h4 id="5、解决-index-冲突问题"><a href="#5、解决-index-冲突问题" class="headerlink" title="5、解决[index]冲突问题"></a>5、解决[index]冲突问题</h4><p>虽然从设计hashCode()到上面HashMap的hash()函数，都尽量减少冲突，但是仍然存在两个不同的对象返回的hashCode值相同，或者hashCode值就算不同，通过hash()函数计算后，得到的index也会存在大量的相同，因此key分布完全均匀的情况是不存在的。那么发生碰撞冲突时怎么办？</p><p>JDK1.8之间使用：数组+链表的结构。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301645506.png" alt="1563802656661"></p><p>JDK1.8之后使用：数组+链表/红黑树的结构。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301645806.png" alt="1563802665708"></p><p>即hash相同或hash&amp;(table.lengt-1)的值相同，那么就存入同一个“桶”table[index]中，使用链表或红黑树连接起来。</p><h4 id="6、为什么JDK1-8会出现红黑树和链表共存呢？"><a href="#6、为什么JDK1-8会出现红黑树和链表共存呢？" class="headerlink" title="6、为什么JDK1.8会出现红黑树和链表共存呢？"></a>6、为什么JDK1.8会出现红黑树和链表共存呢？</h4><p>因为当冲突比较严重时，table[index]下面的链表就会很长，那么会导致查找效率大大降低，而如果此时选用二叉树可以大大提高查询效率。</p><p>但是二叉树的结构又过于复杂，占用内存也较多，如果结点个数比较少的时候，那么选择链表反而更简单。所以会出现红黑树和链表共存。</p><h4 id="7、加载因子的值大小有什么关系？"><a href="#7、加载因子的值大小有什么关系？" class="headerlink" title="7、加载因子的值大小有什么关系？"></a>7、加载因子的值大小有什么关系？</h4><p>如果太大，threshold就会很大，那么如果冲突比较严重的话，就会导致table[index]下面的结点个数很多，影响效率。</p><p>如果太小，threshold就会很小，那么数组扩容的频率就会提高，数组的使用率也会降低，那么会造成空间的浪费。</p><h4 id="8、什么时候树化？什么时候反树化？"><a href="#8、什么时候树化？什么时候反树化？" class="headerlink" title="8、什么时候树化？什么时候反树化？"></a>8、什么时候树化？什么时候反树化？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;<span class="comment">//树化阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;<span class="comment">//反树化阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;<span class="comment">//最小树化容量</span></span><br></pre></td></tr></table></figure><ul><li><p>当某table[index]下的链表的结点个数达到8，并且table.length&gt;=64，那么如果新Entry对象还添加到该table[index]中，那么就会将table[index]的链表进行树化。</p></li><li><p>当某table[index]下的红黑树结点个数少于6个，此时，</p><ul><li>当继续删除table[index]下的树结点，最后这个根结点的左右结点有null，或根结点的左结点的左结点为null，会反树化</li><li>当重新添加新的映射关系到map中，导致了map重新扩容了，这个时候如果table[index]下面还是小于等于6的个数，那么会反树化</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKey</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyKey</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line">            <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">            result = prime * result + num;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        MyKey other = (MyKey) obj;</span><br><span class="line">        <span class="keyword">if</span> (num != other.num)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashMapMyKey</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//这里为了演示的效果，我们造一个特殊的类，这个类的hashCode（）方法返回固定值1</span></span><br><span class="line">        <span class="comment">//因为这样就可以造成冲突问题，使得它们都存到table[1]中</span></span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> MyKey(i), <span class="string">"value"</span>+i);<span class="comment">//树化演示</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> MyKey(i), <span class="string">"value"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.remove(<span class="keyword">new</span> MyKey(i));<span class="comment">//反树化演示</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> MyKey(i), <span class="string">"value"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">            map.remove(<span class="keyword">new</span> MyKey(i));</span><br><span class="line">        &#125;<span class="comment">//table[1]下剩余6个结点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">21</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> MyKey(i), <span class="string">"value"</span>+i);<span class="comment">//添加到扩容时，反树化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、key-value中的key是否可以修改？"><a href="#9、key-value中的key是否可以修改？" class="headerlink" title="9、key-value中的key是否可以修改？"></a>9、key-value中的key是否可以修改？</h4><p>key-value存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的key-value，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</p><p>这个规则也同样适用于LinkedHashMap、HashSet、LinkedHashSet、Hashtable等所有散列存储结构的集合。</p><h4 id="10、JDK1-7中HashMap的循环链表是怎么回事？如何解决？"><a href="#10、JDK1-7中HashMap的循环链表是怎么回事？如何解决？" class="headerlink" title="10、JDK1.7中HashMap的循环链表是怎么回事？如何解决？"></a>10、JDK1.7中HashMap的循环链表是怎么回事？如何解决？</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310301645092.jpg" alt="HashMap的循环引用问题"></p><p>避免HashMap发生死循环的常用解决方案：</p><ul><li>多线程环境下，使用线程安全的ConcurrentHashMap替代HashMap，推荐</li><li>多线程环境下，使用synchronized或Lock加锁，但会影响性能，不推荐</li><li>多线程环境下，使用线程安全的Hashtable替代，性能低，不推荐</li></ul><p>HashMap死循环只会发生在JDK1.7版本中，主要原因：头插法+链表+多线程并发+扩容。</p><p>在JDK1.8中，HashMap改用尾插法，解决了链表死循环的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第14章-数据结构与集合源码&quot;&gt;&lt;a href=&quot;#第14章-数据结构与集合源码&quot; class=&quot;headerlink&quot; title=&quot;第14章_数据结构与集合源码&quot;&gt;&lt;/a&gt;第14章_数据结构与集合源码&lt;/h1&gt;&lt;h2 id=&quot;本章专题与脉络&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-泛型</title>
    <link href="https://larkkkkkkk.github.io/2023/10/28/JAVA-%E6%B3%9B%E5%9E%8B/"/>
    <id>https://larkkkkkkk.github.io/2023/10/28/JAVA-%E6%B3%9B%E5%9E%8B/</id>
    <published>2023-10-28T03:11:22.000Z</published>
    <updated>2023-10-30T01:55:37.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第13章-泛型-Generic"><a href="#第13章-泛型-Generic" class="headerlink" title="第13章_泛型(Generic)"></a>第13章_泛型(Generic)</h1><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281103653.png" alt="第3阶段：Java高级应用-第13章" style="zoom: 67%;"><hr><h2 id="1-泛型概述"><a href="#1-泛型概述" class="headerlink" title="1. 泛型概述"></a>1. 泛型概述</h2><h3 id="1-1-生活中的例子"><a href="#1-1-生活中的例子" class="headerlink" title="1.1 生活中的例子"></a>1.1 生活中的例子</h3><ul><li>举例1：中药店，每个抽屉外面贴着标签</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281116606.png" alt="image-20220411000757577"></p><ul><li>举例2：超市购物架上很多瓶子，每个瓶子装的是什么，有标签</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281103898.png" alt="image-20220918230534965" style="zoom:67%;"><ul><li>举例3：家庭厨房中：<strong>就像垃圾分类一样，只有对应的垃圾才能扔进去</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281103846.png" alt="image-20220514191533296" style="zoom:67%;"><blockquote><p>Java中的泛型，就类似于上述场景中的<strong>标签</strong></p></blockquote><h3 id="1-2-泛型的引入"><a href="#1-2-泛型的引入" class="headerlink" title="1.2 泛型的引入"></a>1.2 泛型的引入</h3><p>在Java中，在声明方法时如果有<code>未知的数据</code>参与，这些未知数据在调用方法时才能确定，那么我们把这样的数据通过<strong>形参</strong>表示。</p><p>在方法体中，用这个形参名来代表那个未知的数据，而调用者在调用时，对应的传入<code>实参</code>就可以了。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281116071.png" alt="1563414367674"></p><p>因此，<strong>JDK1.5</strong>设计了<strong>泛型</strong>概念，<strong>泛型 == 类型参数</strong>，这个类型参数在<strong>声明</strong>它的类、接口或方法中，代表未知的某种通用类型。</p><p><strong>举例1：</strong></p><p>集合类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以<strong>在JDK5.0之前只能把元素类型设计为Object，JDK5.0时Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时指定集合元素的类型</strong>。比如：<code>List&lt;String&gt;</code>，这表明该List只能保存字符串类型的对象。</p><p>使用集合存储数据时，除了元素的类型不确定，其他部分是确定的（例如关于这个元素如何保存，如何管理等）。</p><p><strong>举例2：</strong></p><p><code>java.lang.Comparable</code>接口和<code>java.util.Comparator</code>接口，是用于比较对象大小的接口。这两个接口只是限定了当一个对象大于另一个对象时返回正整数，小于返回负整数，等于返回0，但是并不确定是什么类型的对象比较大小。JDK5.0之前只能用Object类型表示，使用时既麻烦又不安全，因此 JDK5.0 给它们增加了泛型。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281112490.png" alt="image-20220923154058074"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281116856.png" alt="image-20220923154426871"></p><p>其中<code>&lt;T&gt;</code>就是类型参数，即泛型。</p><blockquote><p>所谓泛型，就是允许在定义类、接口时通过一个<code>标识</code>表示类中某个<code>属性的类型</code>或者是某个方法的<code>返回值或参数的类型</code>。这个类型参数将在使用时（例如，继承或实现这个接口、创建对象或调用方法时）确定（即传入实际的类型参数，也称为类型实参）。</p></blockquote><h2 id="2-使用泛型举例"><a href="#2-使用泛型举例" class="headerlink" title="2. 使用泛型举例"></a>2. 使用泛型举例</h2><p>自从JDK5.0引入泛型的概念之后，对之前核心类库中的API做了很大的修改，例如：JDK5.0改写了集合框架中的全部接口和类、java.lang.Comparable接口、java.util.Comparator接口、Class类等。为这些接口、类增加了泛型支持，从而可以<strong>在声明变量、创建对象时传入类型实参</strong>。</p><h3 id="2-1-集合中使用泛型"><a href="#2-1-集合中使用泛型" class="headerlink" title="2.1 集合中使用泛型"></a>2.1 集合中使用泛型</h3><h4 id="2-1-1-举例"><a href="#2-1-1-举例" class="headerlink" title="2.1.1 举例"></a>2.1.1 举例</h4><p><strong>集合中没有使用泛型时：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281112084.png" alt="image-20220411001522636" style="zoom:80%;"><p><strong>集合中使用泛型时：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281103489.png" alt="image-20220411001549747" style="zoom:80%;"><blockquote><p>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。即，把不安全的因素在编译期间就排除了，而不是运行期；既然通过了编译，那么类型一定是符合要求的，就避免了类型转换。</p><p>同时，代码更加简洁、健壮。</p><p><strong>把一个集合中的内容限制为一个特定的数据类型，这就是generic背后的核心思想。</strong></p></blockquote><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型在List中的使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//举例：将学生成绩保存在ArrayList中</span></span><br><span class="line">    <span class="comment">//标准写法：</span></span><br><span class="line">    <span class="comment">//ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">    <span class="comment">//jdk7的新特性：类型推断</span></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="number">56</span>); <span class="comment">//自动装箱</span></span><br><span class="line">    list.add(<span class="number">76</span>);</span><br><span class="line">    list.add(<span class="number">88</span>);</span><br><span class="line">    list.add(<span class="number">89</span>);</span><br><span class="line">    <span class="comment">//当添加非Integer类型数据时，编译不通过</span></span><br><span class="line">    <span class="comment">//list.add("Tom");//编译报错</span></span><br><span class="line">    Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        <span class="comment">//不需要强转，直接可以获取添加时的元素的数据类型</span></span><br><span class="line">        Integer score = iterator.next();</span><br><span class="line">        System.out.println(score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型在Map中的使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">"Tom"</span>,<span class="number">67</span>);</span><br><span class="line">    map.put(<span class="string">"Jim"</span>,<span class="number">56</span>);</span><br><span class="line">    map.put(<span class="string">"Rose"</span>,<span class="number">88</span>);</span><br><span class="line">    <span class="comment">//编译不通过</span></span><br><span class="line">    <span class="comment">//        map.put(67,"Jack");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历key集</span></span><br><span class="line">    Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String str:keySet)&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历value集</span></span><br><span class="line">    Collection&lt;Integer&gt; values = map.values();</span><br><span class="line">    Iterator&lt;Integer&gt; iterator = values.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        Integer value = iterator.next();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历entry集</span></span><br><span class="line">    Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator1 = entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator1.hasNext())&#123;</span><br><span class="line">        Map.Entry&lt;String, Integer&gt; entry = iterator1.next();</span><br><span class="line">        String key = entry.getKey();</span><br><span class="line">        Integer value = entry.getValue();</span><br><span class="line">        System.out.println(key + <span class="string">":"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-练习"><a href="#2-1-2-练习" class="headerlink" title="2.1.2 练习"></a>2.1.2 练习</h4><p>练习1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）创建一个ArrayList集合对象，并指定泛型为&lt;Integer&gt;</span><br><span class="line">（2）添加5个[0,100)以内的整数到集合中</span><br><span class="line">（3）使用foreach遍历输出5个整数</span><br><span class="line">（4）使用集合的removeIf方法删除偶数，为Predicate接口指定泛型&lt;Ineteger&gt;</span><br><span class="line">（5）再使用Iterator迭代器输出剩下的元素，为Iterator接口指定泛型&lt;Integer&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//（1）创建一个ArrayList集合对象，并指定泛型为&lt;Integer&gt;</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//（2）添加5个[0,100)以内的随机整数到集合中</span></span><br><span class="line">        Random r=<span class="keyword">new</span> Random();</span><br><span class="line">        list.add(r.nextInt(<span class="number">100</span>));</span><br><span class="line">        list.add(r.nextInt(<span class="number">100</span>));</span><br><span class="line">        list.add(r.nextInt(<span class="number">100</span>));</span><br><span class="line">        list.add(r.nextInt(<span class="number">100</span>));</span><br><span class="line">        list.add(r.nextInt(<span class="number">100</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//（3）使用foreach遍历输出5个整数</span></span><br><span class="line">        <span class="keyword">for</span>(Integer temp:list)&#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//（4）使用集合的removeIf方法删除偶数，为Predicate接口指定泛型&lt;Ineteger&gt;</span></span><br><span class="line">        list.removeIf(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(integer%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"删除偶数之后的list:"</span>+list);</span><br><span class="line">        <span class="comment">//（5）再使用Iterator迭代器输出剩下的元素，为Iterator接口指定泛型&lt;Integer&gt;</span></span><br><span class="line">        Iterator iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310291502888.png" alt="image-20231029145834736"></p><p>练习2：编写一个简单的同学通迅录</p><p>需求说明：</p><ul><li>查询所有通讯录的同学信息。</li><li>输入姓名，根据姓名查询指定同学信息。如果该姓名不存在，输出提示信息。</li><li>添加同学，姓名重复的不能添加。</li><li>根据学员姓名删除学员。</li><li>按姓名排序查询学员。</li></ul><p>分析：</p><ul><li>使用HashMap&lt;K,V&gt;存储同学信息，使用同学姓名做key，同学对象做value。</li><li>同学对象包含的属性有：姓名、年龄、住址、爱好等。</li></ul><h3 id="2-2-比较器中使用泛型"><a href="#2-2-比较器中使用泛型" class="headerlink" title="2.2 比较器中使用泛型"></a>2.2 比较器中使用泛型</h3><h4 id="2-2-1-举例"><a href="#2-2-1-举例" class="headerlink" title="2.2.1 举例"></a>2.2.1 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Circle [radius="</span> + radius + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型之前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//强制类型转换</span></span><br><span class="line">        Circle c1 = (Circle) o1;</span><br><span class="line">        Circle c2 = (Circle) o2;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(c1.getRadius(), c2.getRadius());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNoGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CircleComparator com = <span class="keyword">new</span> CircleComparator();</span><br><span class="line">        System.out.println(com.compare(<span class="keyword">new</span> Circle(<span class="number">1</span>), <span class="keyword">new</span> Circle(<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(com.compare(<span class="string">"圆1"</span>, <span class="string">"圆2"</span>));<span class="comment">//运行时异常：ClassCastException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型之后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleComparator1</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Circle</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Circle o1, Circle o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不再需要强制类型转换，代码更简洁</span></span><br><span class="line">        <span class="keyword">return</span> Double.compare(o1.getRadius(), o2.getRadius());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHasGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CircleComparator1 com = <span class="keyword">new</span> CircleComparator1();</span><br><span class="line">        System.out.println(com.compare(<span class="keyword">new</span> Circle(<span class="number">1</span>), <span class="keyword">new</span> Circle(<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(com.compare("圆1", "圆2"));</span></span><br><span class="line">        <span class="comment">//编译错误，因为"圆1", "圆2"不是Circle类型，是String类型，编译器提前报错，</span></span><br><span class="line">        <span class="comment">//而不是冒着风险在运行时再报错。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-练习"><a href="#2-2-2-练习" class="headerlink" title="2.2.2 练习"></a>2.2.2 练习</h4><p>（1）声明矩形类Rectangle，包含属性长和宽，属性私有化，提供有参构造、get/set方法、重写toString方法，提供求面积和周长的方法。</p><p>（2）矩形类Rectangle实现java.lang.Comparable<T>接口，并指定泛型为<Rectangle>，重写int compareTo(T t)方法，按照矩形面积比较大小，面积相等的，按照周长比较大小。</Rectangle></T></p><p>（3）在测试类中，创建Rectangle数组，并创建5个矩形对象</p><p>（4）调用Arrays的sort方法，给矩形数组排序，并显示排序前后的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.genericclass.use;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Rectangle</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> length, <span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//获取面积</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length * width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取周长</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">perimeter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (length + width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Rectangle&#123;"</span> +</span><br><span class="line">                <span class="string">"length="</span> + length +</span><br><span class="line">                <span class="string">", width="</span> + width +</span><br><span class="line">                <span class="string">",area ="</span> + area() +</span><br><span class="line">                <span class="string">",perimeter = "</span> + perimeter() +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Rectangle o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> compare = Double.compare(area(), o.area());</span><br><span class="line">        <span class="keyword">return</span> compare != <span class="number">0</span> ? compare : Double.compare(perimeter(),o.perimeter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.genericclass.use;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRectangle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rectangle[] arr = <span class="keyword">new</span> Rectangle[<span class="number">4</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> Rectangle(<span class="number">6</span>,<span class="number">2</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> Rectangle(<span class="number">4</span>,<span class="number">3</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> Rectangle(<span class="number">12</span>,<span class="number">1</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> Rectangle(<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"排序之前："</span>);</span><br><span class="line">        <span class="keyword">for</span> (Rectangle rectangle : arr) &#123;</span><br><span class="line">            System.out.println(rectangle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"排序之后："</span>);</span><br><span class="line">        <span class="keyword">for</span> (Rectangle rectangle : arr) &#123;</span><br><span class="line">            System.out.println(rectangle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-相关使用说明"><a href="#2-3-相关使用说明" class="headerlink" title="2.3 相关使用说明"></a>2.3 相关使用说明</h3><ul><li><p>在创建集合对象的时候，可以指明泛型的类型。</p><p>具体格式为：List<Integer> list = new ArrayList<Integer>();</Integer></Integer></p></li><li><p>JDK7.0时，有新特性，可以简写为：</p><p>List<Integer> list = new ArrayList&lt;&gt;(); //类型推断</Integer></p></li><li><p>泛型，也称为泛型参数，即参数的类型，只能使用引用数据类型进行赋值。（不能使用基本数据类型，可以使用包装类替换）</p></li><li><p>集合声明时，声明泛型参数。在使用集合时，可以具体指明泛型的类型。一旦指明，类或接口内部，凡是使用泛型参数的位置，都指定为具体的参数类型。如果没有指明的话，看做是Object类型。</p></li></ul><h2 id="3-自定义泛型结构"><a href="#3-自定义泛型结构" class="headerlink" title="3. 自定义泛型结构"></a>3. 自定义泛型结构</h2><h3 id="3-1-泛型的基础说明"><a href="#3-1-泛型的基础说明" class="headerlink" title="3.1 泛型的基础说明"></a>3.1 泛型的基础说明</h3><p><strong>1、&lt;类型&gt;这种语法形式就叫泛型。</strong></p><ul><li><p><strong>&lt;类型&gt;</strong>的形式我们称为<strong>类型参数</strong>，这里的”类型”习惯上使用T表示，是Type的缩写。即：<T>。</T></p></li><li><p><T>：代表未知的数据类型，我们可以指定为<String>，<Integer>，<Circle>等。</Circle></Integer></String></T></p><ul><li>类比方法的参数的概念，我们把<T>，称为类型形参，将<Circle>称为类型实参，有助于我们理解泛型</Circle></T></li></ul></li><li><p>这里的T，可以替换成K，V等任意字母。</p></li></ul><p><strong>2、在哪里可以声明类型变量&lt;T&gt;</strong></p><ul><li>声明类或接口时，在类名或接口名后面声明泛型类型，我们把这样的类或接口称为<code>泛型类</code>或<code>泛型接口</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 <span class="class"><span class="keyword">class</span> 类名&lt;类型变量列表&gt; 【<span class="keyword">extends</span> 父类】 【<span class="keyword">implements</span> 接口们】</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">【修饰符】 <span class="class"><span class="keyword">interface</span> 接口名&lt;类型变量列表&gt; 【<span class="keyword">implements</span> 接口们】</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;    </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明方法时，在【修饰符】与返回值类型之间声明类型变量，我们把声明了类型变量的方法，称为泛型方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] &lt;类型变量列表&gt; 返回值类型 方法名([形参列表])[<span class="keyword">throws</span> 异常列表]&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：java.util.Arrays类中的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-自定义泛型类或泛型接口"><a href="#3-2-自定义泛型类或泛型接口" class="headerlink" title="3.2 自定义泛型类或泛型接口"></a>3.2 自定义泛型类或泛型接口</h3><p>当我们在类或接口中定义某个成员时，该成员的相关类型是不确定的，而这个类型需要在使用这个类或接口时才可以确定，那么我们可以使用泛型类、泛型接口。</p><h4 id="3-2-1-说明"><a href="#3-2-1-说明" class="headerlink" title="3.2.1 说明"></a>3.2.1 说明</h4><p>① 我们在声明完自定义泛型类以后，可以在类的内部（比如：属性、方法、构造器中）使用类的泛型。</p><p>② 我们在创建自定义泛型类的对象时，可以指明泛型参数类型。一旦指明，内部凡是使用类的泛型参数的位置，都具体化为指定的类的泛型类型。</p><p>③ 如果在创建自定义泛型类的对象时，没有指明泛型参数类型，那么泛型将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。</p><ul><li>经验：泛型要使用一路都用。要不用，一路都不要用。</li></ul><p>④ 泛型的指定中必须使用引用数据类型。不能使用基本数据类型，此时只能使用包装类替换。</p><p>⑤ 除创建泛型类对象外，子类继承泛型类时、实现类实现泛型接口时，也可以确定泛型结构中的泛型参数。</p><p>如果我们在给泛型类提供子类时，子类也不确定泛型的类型，则可以继续使用泛型参数。</p><p>我们还可以在现有的父类的泛型参数的基础上，新增泛型参数。</p><h4 id="3-2-2-注意"><a href="#3-2-2-注意" class="headerlink" title="3.2.2 注意"></a>3.2.2 注意</h4><p>① 泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。比如：&lt;E1,E2,E3&gt;</p><p>② JDK7.0 开始，泛型的简化操作：ArrayList<Fruit> flist = new ArrayList&lt;&gt;();</Fruit></p><p>③ 如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象。</p><p>④ 不能使用new E[]。但是可以：E[] elements = (E[])new Object[capacity];</p><p>​        参考：ArrayList源码中声明：Object[] elementData，而非泛型参数类型数组。</p><p>⑤ 在类/接口上声明的泛型，在本类或本接口中即代表某种类型，但不可以在静态方法中使用类的泛型。</p><p>⑥ 异常类不能是带泛型的。</p><h4 id="3-2-2-举例"><a href="#3-2-2-举例" class="headerlink" title="3.2.2 举例"></a>3.2.2 举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 使用T类型定义变量</span></span><br><span class="line">    <span class="keyword">private</span> T info;</span><br><span class="line">    <span class="comment">// 使用T类型定义一般方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(T info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用T类型定义构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(T info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)没有类型 擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;<span class="comment">// 等价于class Son extends Father&lt;Object,Object&gt;&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)没有类型 擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;<span class="comment">//等价于class Son extends Father&lt;Object,Object&gt;&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>, <span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>, <span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-练习"><a href="#3-2-3-练习" class="headerlink" title="3.2.3 练习"></a>3.2.3 练习</h4><p><strong>练习1：</strong></p><p>声明一个学生类，该学生包含姓名、成绩，而此时学生的成绩类型不确定，为什么呢，因为，语文老师希望成绩是“优秀”、“良好”、“及格”、“不及格”，数学老师希望成绩是89.5, 65.0，英语老师希望成绩是’A’,’B’,’C’,’D’,’E’。那么我们在设计这个学生类时，就可以使用泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>&lt;<span class="title">E</span>&gt; </span>&#123;  <span class="comment">//其实把E当做一个真实的类思考的话 其实和普通类一样!!</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> E grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, E grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(E grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +<span class="string">"name='"</span> + name + <span class="string">'\''</span> +<span class="string">", grade="</span> + grade +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//语文老师</span></span><br><span class="line">        Student&lt;String&gt; s1=<span class="keyword">new</span> Student&lt;String&gt;(<span class="string">"宋亚翔"</span>,<span class="string">"优秀"</span>);  <span class="comment">//其实可以Student s1=new Student("xx","xx");</span></span><br><span class="line">        Student s2=<span class="keyword">new</span> Student&lt;&gt;(<span class="string">"宋亚翔"</span>,<span class="string">"优秀"</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student&lt;&gt;(<span class="string">"宋亚翔"</span>,<span class="string">"优秀"</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">        <span class="comment">//数学老师</span></span><br><span class="line">        Student&lt;Double&gt; s11=<span class="keyword">new</span> Student&lt;Double&gt;(<span class="string">"李四"</span>,<span class="number">88.8</span>);</span><br><span class="line">        Student&lt;Double&gt; s12=<span class="keyword">new</span> Student&lt;Double&gt;(<span class="string">"李四"</span>,<span class="number">68.5</span>);</span><br><span class="line">        Student&lt;Double&gt; s13=<span class="keyword">new</span> Student&lt;Double&gt;(<span class="string">"李四"</span>,<span class="number">65.0</span>);</span><br><span class="line">        System.out.println(s11);</span><br><span class="line">        System.out.println(s12);</span><br><span class="line">        System.out.println(s13);</span><br><span class="line">        <span class="comment">//英语老师</span></span><br><span class="line">        Student&lt;Character&gt; s21=<span class="keyword">new</span> Student&lt;Character&gt;(<span class="string">"李四"</span>,<span class="string">'A'</span>);</span><br><span class="line">        Student&lt;Character&gt; s22=<span class="keyword">new</span> Student&lt;Character&gt;(<span class="string">"李四"</span>,<span class="string">'B'</span>);</span><br><span class="line">        Student&lt;Character&gt; s23=<span class="keyword">new</span> Student&lt;Character&gt;(<span class="string">"李四"</span>,<span class="string">'C'</span>);</span><br><span class="line">        System.out.println(s21);</span><br><span class="line">        System.out.println(s22);</span><br><span class="line">        System.out.println(s23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">Student&#123;name=<span class="string">'宋亚翔'</span>, grade=优秀&#125;</span><br><span class="line">Student&#123;name=<span class="string">'宋亚翔'</span>, grade=优秀&#125;</span><br><span class="line">Student&#123;name=<span class="string">'宋亚翔'</span>, grade=优秀&#125;</span><br><span class="line">Student&#123;name=<span class="string">'李四'</span>, grade=<span class="number">88.8</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'李四'</span>, grade=<span class="number">68.5</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'李四'</span>, grade=<span class="number">65.0</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">'李四'</span>, grade=A&#125;</span><br><span class="line">Student&#123;name=<span class="string">'李四'</span>, grade=B&#125;</span><br><span class="line">Student&#123;name=<span class="string">'李四'</span>, grade=C&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">定义个泛型类 DAO&lt;T&gt;，在其中定义一个Map 成员变量，Map 的键为 String 类型，值为 T 类型。</span><br><span class="line"></span><br><span class="line">分别创建以下方法：</span><br><span class="line">public void save(String id,T entity)： 保存 T 类型的对象到 Map 成员变量中</span><br><span class="line">public T get(String id)：从 map 中获取 id 对应的对象</span><br><span class="line">public void update(String id,T entity)：替换 map 中key为id的内容,改为 entity 对象</span><br><span class="line">public List&lt;T&gt; list()：返回 map 中存放的所有 T 对象</span><br><span class="line">public void delete(String id)：删除指定 id 对象</span><br><span class="line"></span><br><span class="line">定义一个 User 类：</span><br><span class="line">该类包含：private成员变量（int类型） id，age；（String 类型）name。</span><br><span class="line"></span><br><span class="line">定义一个测试类：</span><br><span class="line">创建 DAO 类的对象， 分别调用其 save、get、update、list、delete 方法来操作 User 对象，</span><br><span class="line">使用 Junit 单元测试类进行测试。</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,T&gt; map=<span class="keyword">new</span> HashMap&lt;String,T&gt;();;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存 T 类型的对象到 Map 成员变量中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String id,T entity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(id))&#123;</span><br><span class="line">            map.put(id,entity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从 map 中获取 id 对应的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//替换 map 中key为id的内容,改为 entity 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String id,T entity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(id))&#123;</span><br><span class="line">            map.put(id,entity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回 map 中存放的所有 T 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection&lt;T&gt; values = map.values();</span><br><span class="line">        ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(values);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除指定 id 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +<span class="string">"id="</span> + id +<span class="string">", age="</span> + age +<span class="string">", name='"</span> + name + <span class="string">'\''</span> +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> id == user.id &amp;&amp; age == user.age &amp;&amp; Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, age, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//DAO传入的是一个User类</span></span><br><span class="line">        DAO&lt;User&gt; dao = <span class="keyword">new</span> DAO&lt;&gt;();</span><br><span class="line"><span class="comment">//set方法  new User传入</span></span><br><span class="line">        dao.save(<span class="string">"1001"</span>,<span class="keyword">new</span> User(<span class="number">1</span>,<span class="number">34</span>,<span class="string">"曹操"</span>));</span><br><span class="line">        dao.save(<span class="string">"1002"</span>,<span class="keyword">new</span> User(<span class="number">2</span>,<span class="number">33</span>,<span class="string">"刘备"</span>));</span><br><span class="line">        dao.save(<span class="string">"1003"</span>,<span class="keyword">new</span> User(<span class="number">3</span>,<span class="number">24</span>,<span class="string">"孙权"</span>));</span><br><span class="line"></span><br><span class="line">        dao.update(<span class="string">"1002"</span>,<span class="keyword">new</span> User(<span class="number">2</span>,<span class="number">23</span>,<span class="string">"刘禅"</span>));</span><br><span class="line"></span><br><span class="line">        dao.delete(<span class="string">"1003"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = dao.list();</span><br><span class="line">        <span class="keyword">for</span>(User u : list)&#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310292011398.png" alt="image-20231029201142321"></p><h3 id="3-3-自定义泛型方法"><a href="#3-3-自定义泛型方法" class="headerlink" title="3.3 自定义泛型方法"></a>3.3 自定义泛型方法</h3><p>如果我们定义类、接口时没有使用&lt;泛型参数&gt;，但是某个方法形参类型不确定时，这个方法可以单独定义&lt;泛型参数&gt;。</p><h4 id="3-3-1-说明"><a href="#3-3-1-说明" class="headerlink" title="3.3.1 说明"></a>3.3.1 说明</h4><ul><li>泛型方法的格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[访问权限]  &lt;泛型&gt;  返回值类型  方法名([泛型标识 参数名称])  [抛出的异常]&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法，也可以被泛型化，与其所在的类是否是泛型类没有关系。</li><li>泛型方法中的泛型参数在方法被调用时确定。</li><li>泛型方法可以根据需要，声明为static的。</li></ul><h4 id="3-3-2-举例"><a href="#3-3-2-举例" class="headerlink" title="3.3.2 举例"></a>3.3.2 举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> id, E e)</span> </span>&#123;</span><br><span class="line">        E result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fromArrayToCollection</span><span class="params">(T[] a, Collection&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (T o : a) &#123;</span><br><span class="line">        c.add(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Object[] ao = <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">    Collection&lt;Object&gt; co = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    fromArrayToCollection(ao, co);</span><br><span class="line"></span><br><span class="line">    String[] sa = <span class="keyword">new</span> String[<span class="number">20</span>];</span><br><span class="line">    Collection&lt;String&gt; cs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fromArrayToCollection(sa, cs);</span><br><span class="line"></span><br><span class="line">    Collection&lt;Double&gt; cd = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 下面代码中T是Double类，但sa是String类型，编译错误。</span></span><br><span class="line">    <span class="comment">// fromArrayToCollection(sa, cd);</span></span><br><span class="line">    <span class="comment">// 下面代码中T是Object类型，sa是String类型，可以赋值成功。</span></span><br><span class="line">    fromArrayToCollection(sa, co);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArrays</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(((Comparable&lt;T&gt;)arr[j]).compareTo(arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    T temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArraysTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">//MyArrays.sort(arr);//错误的，因为int[]不是对象数组</span></span><br><span class="line"></span><br><span class="line">        String[] strings = &#123;<span class="string">"hello"</span>,<span class="string">"java"</span>,<span class="string">"song"</span>&#125;;</span><br><span class="line">        MyArrays.sort(strings);</span><br><span class="line">        System.out.println(Arrays.toString(strings));</span><br><span class="line"></span><br><span class="line">        Circle[] circles = &#123;<span class="keyword">new</span> Circle(<span class="number">2.0</span>),<span class="keyword">new</span> Circle(<span class="number">1.2</span>),<span class="keyword">new</span> Circle(<span class="number">3.0</span>)&#125;;</span><br><span class="line">        MyArrays.sort(circles); <span class="comment">//编译通过，运行报错，因为Circle没有实现Comparable接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-练习"><a href="#3-3-3-练习" class="headerlink" title="3.3.3 练习"></a>3.3.3 练习</h4><p>练习1: 泛型方法</p><p>编写一个泛型方法，实现任意引用类型数组指定位置元素交换。</p><p>public static <E> void method1( E[] e,int a,int b)</E></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] arr,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        T temp=arr[a];</span><br><span class="line">        arr[a]=arr[b];</span><br><span class="line">        arr[b]=temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Integer[] arr=<span class="keyword">new</span> Integer[]&#123;<span class="number">123</span>,<span class="number">423</span>,<span class="number">54</span>,<span class="number">7655</span>,<span class="number">3132</span>,<span class="number">234</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">32</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"交换前:"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Integer temp:arr)&#123;</span><br><span class="line">            System.out.print(temp+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        swap(arr,<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"交换后:"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Integer temp:arr)&#123;</span><br><span class="line">            System.out.print(temp+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310292017032.png" alt="image-20231029201755987"></p><p>练习2: 泛型方法</p><p>编写一个泛型方法，接收一个任意引用类型的数组，并反转数组中的所有元素</p><p>public static <E> void method2( E[] e)</E></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">swapAll</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            T temp=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Integer[] arr=<span class="keyword">new</span> Integer[]&#123;<span class="number">123</span>,<span class="number">423</span>,<span class="number">54</span>,<span class="number">7655</span>,<span class="number">3132</span>,<span class="number">234</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">32</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"交换前:"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Integer temp:arr)&#123;</span><br><span class="line">            System.out.print(temp+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        swapAll(arr);</span><br><span class="line">        System.out.println(<span class="string">"反转所有元素:"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Integer temp:arr)&#123;</span><br><span class="line">            System.out.print(temp+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310292022650.png" alt="image-20231029202242605"></p><h2 id="4-泛型在继承上的体现"><a href="#4-泛型在继承上的体现" class="headerlink" title="4. 泛型在继承上的体现"></a>4. 泛型在继承上的体现</h2><p>如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<B>并不是G<A>的子类型！</A></B></p><p>比如：String是Object的子类，但是List<String>并不是List<Object>的子类。</Object></String></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281103640.png" alt="image-20220411003422259" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenericAndSubClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person[] persons = <span class="keyword">null</span>;</span><br><span class="line">    Man[] mans = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//Person[] 是 Man[] 的父类</span></span><br><span class="line">    persons = mans;</span><br><span class="line"></span><br><span class="line">    Person p = mans[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在泛型的集合上</span></span><br><span class="line">    List&lt;Person&gt; personList = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;Man&gt; manList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//personList = manList;(报错)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思考：对比如下两段代码有何不同：</strong></p><p>片段1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCollection</span><span class="params">(Collection c)</span> </span>&#123;</span><br><span class="line">    Iterator i = c.iterator();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; c.size(); k++) &#123;</span><br><span class="line">        System.out.println(i.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>片段2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCollection</span><span class="params">(Collection&lt;Object&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object e : c) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-通配符的使用"><a href="#5-通配符的使用" class="headerlink" title="5. 通配符的使用"></a>5. 通配符的使用</h2><p>当我们声明一个变量/形参时，这个变量/形参的类型是一个泛型类或泛型接口，例如：Comparator<T>类型，但是我们仍然无法确定这个泛型类或泛型接口的类型变量<T>的具体类型，此时我们考虑使用类型通配符 ? 。</T></T></p><h3 id="5-1-通配符的理解"><a href="#5-1-通配符的理解" class="headerlink" title="5.1 通配符的理解"></a>5.1 通配符的理解</h3><p>使用类型通配符：？ </p><p>比如：<code>List&lt;?&gt;</code>，<code>Map&lt;?,?&gt;</code></p><p>​            <code>List&lt;?&gt;</code>是<code>List&lt;String&gt;</code>、<code>List&lt;Object&gt;</code>等各种泛型List的父类。</p><h3 id="5-2-通配符的读与写"><a href="#5-2-通配符的读与写" class="headerlink" title="5.2 通配符的读与写"></a>5.2 通配符的读与写</h3><p><strong>写操作：</strong></p><p>将任意元素加入到其中不是类型安全的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;?&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">c.add(<span class="keyword">new</span> Object()); <span class="comment">// 编译时错误</span></span><br></pre></td></tr></table></figure><p>因为我们不知道c的元素类型，我们不能向其中添加对象。add方法有类型参数E作为集合的元素类型。我们传给add的任何参数都必须是一个未知类型的子类。因为我们不知道那是什么类型，所以我们无法传任何东西进去。</p><p>唯一可以插入的元素是null，因为它是所有引用类型的默认值。</p><p><strong>读操作：</strong></p><p>另一方面，读取List&lt;?&gt;的对象list中的元素时，永远是安全的，因为不管 list 的真实类型是什么，它包含的都是Object。</p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWildcard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">(Collection&lt;?&gt; coll)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Object o : coll) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    list = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line">    <span class="comment">// list.add(3);//编译不通过</span></span><br><span class="line">    list.add(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; l1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;Integer&gt; l2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    l1.add(<span class="string">"尚硅谷"</span>);</span><br><span class="line">    l2.add(<span class="number">15</span>);</span><br><span class="line">    read(l1);</span><br><span class="line">    read(l2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-使用注意点"><a href="#5-3-使用注意点" class="headerlink" title="5.3 使用注意点"></a>5.3 使用注意点</h3><p>注意点1：编译错误：不能用在泛型方法声明上，返回值类型前面&lt;&gt;不能使用?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;?&gt; <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点2：编译错误：不能用在泛型类的声明上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericTypeClass</span>&lt;?&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点3：编译错误：不能用在创建对象上，右边属于创建集合对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;?&gt; list2 = <span class="keyword">new</span> ArrayList&lt;?&gt;();</span><br></pre></td></tr></table></figure><h3 id="5-4-有限制的通配符"><a href="#5-4-有限制的通配符" class="headerlink" title="5.4 有限制的通配符"></a>5.4 有限制的通配符</h3><ul><li><p><code>&lt;?&gt;</code></p><ul><li>允许所有泛型的引用调用</li></ul></li><li><p>通配符指定上限：<code>&lt;? extends 类/接口 &gt;</code></p><ul><li>使用时指定的类型必须是继承某个类，或者实现某个接口，即&lt;= </li></ul></li><li><p>通配符指定下限：<code>&lt;? super 类/接口 &gt;</code></p><ul><li>使用时指定的类型必须是操作的类或接口，或者是操作的类的父类或接口的父接口，即&gt;=</li></ul></li><li><p>说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;? extends Number&gt;     <span class="comment">//(无穷小 , Number]</span></span><br><span class="line"><span class="comment">//只允许泛型为Number及Number子类的引用调用</span></span><br><span class="line"></span><br><span class="line">&lt;? <span class="keyword">super</span> Number&gt;      <span class="comment">//[Number , 无穷大)</span></span><br><span class="line"><span class="comment">//只允许泛型为Number及Number父类的引用调用</span></span><br><span class="line"></span><br><span class="line">&lt;? extends Comparable&gt;</span><br><span class="line"><span class="comment">//只允许泛型为实现Comparable接口的实现类的引用调用</span></span><br></pre></td></tr></table></figure></li><li><p>举例1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;? extends Father&gt; list=<span class="keyword">null</span>;    <span class="comment">// ？≤ Father</span></span><br><span class="line">       List&lt;Object&gt; list1=<span class="keyword">null</span>;</span><br><span class="line">       List&lt;Father&gt; list2=<span class="keyword">null</span>;</span><br><span class="line">       List&lt;Son&gt; list3=<span class="keyword">null</span>;</span><br><span class="line">       <span class="comment">//list=list1;</span></span><br><span class="line">       list=list2;</span><br><span class="line">       list=list3;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;? extends Father&gt; list=<span class="keyword">null</span>;    <span class="comment">// ？≤ Father</span></span><br><span class="line">       List&lt;Father&gt; list1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list1.add(<span class="keyword">new</span> Father());</span><br><span class="line">       list=list1;</span><br><span class="line">       <span class="comment">//读取数据</span></span><br><span class="line">       Father father = list.get(<span class="number">0</span>);  <span class="comment">//最大是Father  那我就赋值Father</span></span><br><span class="line">       <span class="comment">//写入数据</span></span><br><span class="line">       list.add(<span class="keyword">null</span>);</span><br><span class="line">       list.add(<span class="keyword">new</span> Father());  <span class="comment">//属于是有上限，但是还是不知道？是谁   有可能总有左边的类型比你当前类型的小，那就跟强制类型一样，但是不知道强制类型给谁</span></span><br><span class="line">       list.add(<span class="keyword">new</span> Son());  <span class="comment">//属于是有上限，但是还是不知道？是谁  有可能总有左边的类型比你当前类型的小，那就跟强制类型一样，但是不知道强制类型给谁</span></span><br><span class="line">  </span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;? <span class="keyword">super</span> Father&gt; list=<span class="keyword">null</span>;  <span class="comment">// ？≥ Father</span></span><br><span class="line">       List&lt;Object&gt; list1=<span class="keyword">null</span>;</span><br><span class="line">       List&lt;Father&gt; list2=<span class="keyword">null</span>;</span><br><span class="line">       List&lt;Son&gt; list3=<span class="keyword">null</span>;</span><br><span class="line">       list=list1;</span><br><span class="line">       list=list2;</span><br><span class="line">       <span class="comment">//list=list3;</span></span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;? <span class="keyword">super</span> Father&gt; list=<span class="keyword">null</span>;  <span class="comment">// ？≥ Father</span></span><br><span class="line">       List&lt;Father&gt; list1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list1.add(<span class="keyword">new</span> Father());</span><br><span class="line">       list=list1;</span><br><span class="line">       <span class="comment">//读取数据</span></span><br><span class="line">       Object object = list.get(<span class="number">0</span>);  <span class="comment">//最大是Object  那我就赋值Object</span></span><br><span class="line">       <span class="comment">//写入数据</span></span><br><span class="line">       list.add(<span class="keyword">null</span>);</span><br><span class="line">       list.add(<span class="keyword">new</span> Object());  <span class="comment">//属于有下限 但是如果你写Object 永远可能有左边比你小的，那么就跟强制类型一样，但是不知道强制类型给谁</span></span><br><span class="line">       list.add(<span class="keyword">new</span> Father());  <span class="comment">//属于是有下限  最高就写自己，可以让左边的所有子类写他(多态)</span></span><br><span class="line">       list.add(<span class="keyword">new</span> Son());  <span class="comment">//属于是有下限  子类可以写进父类(儿子可以跟父亲借钱，父亲不可以跟儿子借钱)</span></span><br><span class="line">  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310300933858.png" alt="image-20231030093305716"></p></li><li><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">    Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    </span><br><span class="line">    getElement1(list1);</span><br><span class="line">    getElement1(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement1(list3);</span><br><span class="line">    getElement1(list4);<span class="comment">//报错</span></span><br><span class="line">  </span><br><span class="line">    getElement2(list1);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list3);</span><br><span class="line">    getElement2(list4);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection1</span><span class="params">(Collection&lt;? extends Person&gt; coll)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Iterator只能用Iterator&lt;?&gt;或Iterator&lt;? extends Person&gt;.why?</span></span><br><span class="line">    Iterator&lt;?&gt; iterator = coll.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        Person per = iterator.next();</span><br><span class="line">        System.out.println(per);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Person&gt; coll)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Iterator只能用Iterator&lt;?&gt;或Iterator&lt;? super Person&gt;.why?</span></span><br><span class="line">    Iterator&lt;?&gt; iterator = coll.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        Object obj = iterator.next();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>举例4:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//List&lt;Object&gt; list1 = null;</span></span><br><span class="line">    List&lt;Person&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    <span class="comment">//List&lt;Student&gt; list3 = null;</span></span><br><span class="line"></span><br><span class="line">    List&lt;? extends Person&gt; list4 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    list2.add(<span class="keyword">new</span> Person());</span><br><span class="line">    list4 = list2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取：可以读</span></span><br><span class="line">    Person p1 = list4.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入：除了null之外，不能写入</span></span><br><span class="line">    list4.add(<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//        list4.add(new Person());</span></span><br><span class="line">    <span class="comment">//        list4.add(new Student());</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//List&lt;Object&gt; list1 = null;</span></span><br><span class="line">    List&lt;Person&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    <span class="comment">//List&lt;Student&gt; list3 = null;</span></span><br><span class="line"></span><br><span class="line">    List&lt;? <span class="keyword">super</span> Person&gt; list5 = <span class="keyword">null</span>;</span><br><span class="line">    list2.add(<span class="keyword">new</span> Person());</span><br><span class="line"></span><br><span class="line">    list5 = list2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取：可以实现</span></span><br><span class="line">    Object obj = list5.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入:可以写入Person及Person子类的对象</span></span><br><span class="line">    list5.add(<span class="keyword">new</span> Person());</span><br><span class="line">    list5.add(<span class="keyword">new</span> Student());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-泛型应用举例"><a href="#5-5-泛型应用举例" class="headerlink" title="5.5 泛型应用举例"></a>5.5 泛型应用举例</h3><p><strong>举例1：泛型嵌套</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Citizen&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, ArrayList&lt;Citizen&gt;&gt;();</span><br><span class="line">    ArrayList&lt;Citizen&gt; list = <span class="keyword">new</span> ArrayList&lt;Citizen&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Citizen(<span class="string">"赵又廷"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Citizen(<span class="string">"高圆圆"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Citizen(<span class="string">"瑞亚"</span>));</span><br><span class="line">    map.put(<span class="string">"赵又廷"</span>, list);</span><br><span class="line"><span class="comment">//对map的entrySet集合进行迭代器遍历</span></span><br><span class="line">    Set&lt;Entry&lt;String, ArrayList&lt;Citizen&gt;&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">    Iterator&lt;Entry&lt;String, ArrayList&lt;Citizen&gt;&gt;&gt; iterator = entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        Entry&lt;String, ArrayList&lt;Citizen&gt;&gt; entry = iterator.next();</span><br><span class="line">        String key = entry.getKey();</span><br><span class="line">        ArrayList&lt;Citizen&gt; value = entry.getValue();</span><br><span class="line">        System.out.println(<span class="string">"户主："</span> + key);</span><br><span class="line">        System.out.println(<span class="string">"家庭成员："</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例2：个人信息设计</strong></p><p>用户在设计类的时候往往会使用类的关联关系，例如，一个人中可以定义一个信息的属性，但是一个人可能有各种各样的信息（如联系方式、基本信息等），所以此信息属性的类型就可以通过泛型进行声明，然后只要设计相应的信息类即可。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281104400.png" alt="image-20220411004301224" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;<span class="comment">// 只有此接口的子类才是表示人的信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> <span class="keyword">implements</span> <span class="title">Info</span></span>&#123;<span class="comment">// 表示联系方式</span></span><br><span class="line"><span class="keyword">private</span> String address ;<span class="comment">// 联系地址</span></span><br><span class="line"><span class="keyword">private</span> String telephone ;<span class="comment">// 联系方式</span></span><br><span class="line"><span class="keyword">private</span> String zipcode ;<span class="comment">// 邮政编码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Contact</span><span class="params">(String address,String telephone,String zipcode)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line"><span class="keyword">this</span>.telephone = telephone;</span><br><span class="line"><span class="keyword">this</span>.zipcode = zipcode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTelephone</span><span class="params">(String telephone)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.telephone = telephone ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZipcode</span><span class="params">(String zipcode)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.zipcode = zipcode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.address ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTelephone</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.telephone ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getZipcode</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.zipcode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Contact [address="</span> + address + <span class="string">", telephone="</span> + telephone</span><br><span class="line">+ <span class="string">", zipcode="</span> + zipcode + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现Info接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Introduction</span> <span class="keyword">implements</span> <span class="title">Info</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name ;<span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> String sex ;<span class="comment">// 性别</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age ;<span class="comment">// 年龄</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Introduction</span><span class="params">(String name,String sex,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.sex ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.age ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Introduction [name="</span> + name + <span class="string">", sex="</span> + sex + <span class="string">", age="</span> + age</span><br><span class="line">+ <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Info</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> T info ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(T info)</span></span>&#123;<span class="comment">// 通过构造器设置信息属性内容</span></span><br><span class="line"><span class="keyword">this</span>.info = info;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(T info)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.info = info ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> info ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [info="</span> + info + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericPerson</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Person&lt;Contact&gt; per = <span class="keyword">null</span> ;<span class="comment">// 声明Person对象</span></span><br><span class="line">per = <span class="keyword">new</span> Person&lt;Contact&gt;(<span class="keyword">new</span> Contact(<span class="string">"北京市"</span>,<span class="string">"01088888888"</span>,<span class="string">"102206"</span>)) ;</span><br><span class="line">System.out.println(per);</span><br><span class="line"></span><br><span class="line">Person&lt;Introduction&gt; per2 = <span class="keyword">null</span> ;<span class="comment">// 声明Person对象</span></span><br><span class="line">per2 = <span class="keyword">new</span> Person&lt;Introduction&gt;(<span class="keyword">new</span> Introduction(<span class="string">"李雷"</span>,<span class="string">"男"</span>,<span class="number">24</span>));</span><br><span class="line">System.out.println(per2) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第13章-泛型-Generic&quot;&gt;&lt;a href=&quot;#第13章-泛型-Generic&quot; class=&quot;headerlink&quot; title=&quot;第13章_泛型(Generic)&quot;&gt;&lt;/a&gt;第13章_泛型(Generic)&lt;/h1&gt;&lt;h2 id=&quot;本章专题与脉络&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-集合框架</title>
    <link href="https://larkkkkkkk.github.io/2023/10/24/JAVA-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>https://larkkkkkkk.github.io/2023/10/24/JAVA-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</id>
    <published>2023-10-24T11:33:56.000Z</published>
    <updated>2023-10-28T03:01:55.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第12章-集合框架"><a href="#第12章-集合框架" class="headerlink" title="第12章_集合框架"></a>第12章_集合框架</h1><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241947159.png" alt="第3阶段：Java高级应用-第12章" style="zoom:50%;"><hr><h2 id="1-集合框架概述"><a href="#1-集合框架概述" class="headerlink" title="1. 集合框架概述"></a>1. 集合框架概述</h2><h3 id="1-1-生活中的容器"><a href="#1-1-生活中的容器" class="headerlink" title="1.1 生活中的容器"></a>1.1 生活中的容器</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241946184.png" alt="image-20220523190743146" style="zoom: 67%;"><h3 id="1-2-数组的特点与弊端"><a href="#1-2-数组的特点与弊端" class="headerlink" title="1.2 数组的特点与弊端"></a>1.2 数组的特点与弊端</h3><ul><li>一方面，面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。</li><li>另一方面，使用数组存储对象方面具有<code>一些弊端</code>，而Java 集合就像一种容器，可以<code>动态地</code>把多个对象的引用放入容器中。</li><li>数组在内存存储方面的<code>特点</code>：<ul><li>数组初始化以后，长度就确定了。</li><li>数组中的添加的元素是依次紧密排列的，有序的，可以重复的。</li><li>数组声明的类型，就决定了进行元素初始化时的类型。不是此类型的变量，就不能添加。</li><li>可以存储基本数据类型值，也可以存储引用数据类型的变量</li></ul></li><li>数组在存储数据方面的<code>弊端</code>：<ul><li>数组初始化以后，长度就不可变了，不便于扩展</li><li>数组中提供的属性和方法少，不便于进行添加、删除、插入、获取元素个数等操作，且效率不高。</li><li>数组存储数据的特点单一，只能存储有序的、可以重复的数据</li></ul></li><li>Java 集合框架中的类可以用于存储多个<code>对象</code>，还可用于保存具有<code>映射关系</code>的关联数组。</li></ul><h3 id="1-3-Java集合框架体系"><a href="#1-3-Java集合框架体系" class="headerlink" title="1.3 Java集合框架体系"></a>1.3 Java集合框架体系</h3><p>Java 集合可分为 Collection 和 Map 两大体系：</p><ul><li><p>Collection接口：用于存储一个一个的数据，也称<code>单列数据集合</code>。</p><ul><li>List子接口：用来存储有序的、可以重复的数据（主要用来替换数组，”动态”数组）<ul><li>实现类：ArrayList(主要实现类)、LinkedList、Vector</li></ul></li></ul></li><li><p>Set子接口：用来存储无序的、不可重复的数据（类似于高中讲的”集合”）</p><ul><li>实现类：HashSet(主要实现类)、LinkedHashSet、TreeSet</li></ul></li><li><p>Map接口：用于存储具有映射关系“key-value对”的集合，即一对一对的数据，也称<code>双列数据集合</code>。(类似于高中的函数、映射。(x1,y1),(x2,y2) —&gt; y = f(x) )</p><ul><li>HashMap(主要实现类)、LinkedHashMap、TreeMap、Hashtable、Properties</li></ul></li><li><p>JDK提供的集合API位于java.util包内</p></li><li><p>图示：集合框架全图</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242028899.png" alt></p><ul><li>简图1：<strong>Collection接口继承树</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242028810.png" alt="image-20220407203244029" style="zoom: 67%;"><ul><li>简图2：<strong>Map接口继承树</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242028693.png" alt="image-20220407203412665" style="zoom: 67%;"><h3 id="1-4-集合的使用场景"><a href="#1-4-集合的使用场景" class="headerlink" title="1.4 集合的使用场景"></a>1.4 集合的使用场景</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242028236.png" alt=" "></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242028495.png" alt="第12章_集合的使用场景"></p><h2 id="2-Collection接口及方法"><a href="#2-Collection接口及方法" class="headerlink" title="2. Collection接口及方法"></a>2. Collection接口及方法</h2><ul><li>JDK不提供此接口的任何直接实现，而是提供更具体的子接口（如：Set和List）去实现。</li><li>Collection 接口是 List和Set接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 集合。方法如下：</li></ul><h3 id="2-1-添加"><a href="#2-1-添加" class="headerlink" title="2.1 添加"></a>2.1 添加</h3><p>（1）add(E obj)：添加元素对象到当前集合中<br>（2）addAll(Collection other)：添加other集合中的所有元素对象到当前集合中，即this = this ∪ other</p><p>注意：add和addAll的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Collection coll=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">   <span class="comment">//1.add()</span></span><br><span class="line">   coll.add(<span class="string">"AA"</span>);</span><br><span class="line">   coll.add(<span class="number">123</span>); <span class="comment">//自动装箱为包装类</span></span><br><span class="line">   coll.add(<span class="string">"桑鬼谷"</span>);</span><br><span class="line">   coll.add(<span class="string">"尚硅谷"</span>);</span><br><span class="line">   coll.add(<span class="keyword">new</span> Object());</span><br><span class="line">   System.out.println(coll);  <span class="comment">//[AA, 123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1]</span></span><br><span class="line">   <span class="comment">//2.addAll(Collection x)</span></span><br><span class="line">   Collection coll1=<span class="keyword">new</span> ArrayList();</span><br><span class="line">   coll1.add(<span class="string">"BB"</span>);</span><br><span class="line">   coll1.add(<span class="number">456</span>);</span><br><span class="line">   <span class="comment">//将coll1里面的所有元素一次性加入到coll</span></span><br><span class="line">   coll.addAll(coll1);</span><br><span class="line">   System.out.println(coll);  <span class="comment">//[AA, 123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1, BB, 456]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：coll.addAll(other);与coll.add(other);</p></blockquote><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242028973.png" alt></p><h3 id="2-2-判断"><a href="#2-2-判断" class="headerlink" title="2.2 判断"></a>2.2 判断</h3><p>（3）int size()：获取当前集合中实际存储的元素个数<br>（4）boolean isEmpty()：判断当前集合是否为空集合<br>（5）boolean contains(Object obj)：判断当前集合中是否存在一个与obj对象equals返回true的元素<br>（6）boolean containsAll(Collection coll)：判断coll集合中的元素是否在当前集合中都存在。即coll集合是否是当前集合的“子集”<br>（7）boolean equals(Object obj)：判断当前集合与obj是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collection coll=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    coll.add(<span class="string">"AA"</span>);</span><br><span class="line">    coll.add(<span class="number">123</span>); <span class="comment">//自动装箱为包装类</span></span><br><span class="line">    coll.add(<span class="string">"桑鬼谷"</span>);</span><br><span class="line">    coll.add(<span class="string">"尚硅谷"</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> Object());</span><br><span class="line">    System.out.println(coll);  <span class="comment">//[AA, 123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1]</span></span><br><span class="line">    Collection coll1=<span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll1.add(<span class="string">"AA"</span>);</span><br><span class="line">    coll1.add(<span class="number">123</span>);</span><br><span class="line">    System.out.println(coll1);</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line">    <span class="comment">//（3）int size()：获取当前集合中实际存储的元素个数</span></span><br><span class="line">    System.out.println(coll.size()); <span class="comment">//5</span></span><br><span class="line">    <span class="comment">//（4）boolean isEmpty()：判断当前集合是否为空集合</span></span><br><span class="line">    System.out.println(coll.isEmpty()); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较的是值是否相等!!!!!</span></span><br><span class="line">    <span class="comment">//（5）boolean contains(Object obj)：判断当前集合中是否存在一个与obj对象equals返回true的元素</span></span><br><span class="line">    System.out.println(coll.contains(coll1)); <span class="comment">//false  就是coll1把两个元素当成一个元素了 所以匹配不到</span></span><br><span class="line">    System.out.println(coll.contains(<span class="string">"AA"</span>)); <span class="comment">//true</span></span><br><span class="line">    <span class="comment">//（6）boolean containsAll(Collection coll1)：判断coll1集合中的元素是否在当前集合中都存在。即coll1集合是否是当前集合coll的“子集”</span></span><br><span class="line">    System.out.println(coll.containsAll(coll1));  <span class="comment">//true</span></span><br><span class="line">    <span class="comment">//（7）boolean equals(Object obj)：判断当前集合与obj是否相等</span></span><br><span class="line">     System.out.println(coll.equals(coll1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-删除"><a href="#2-3-删除" class="headerlink" title="2.3 删除"></a>2.3 删除</h3><p>（8）void clear()：清空集合元素<br>（9） boolean remove(Object obj) ：从当前集合中删除第一个找到的与obj对象equals返回true的元素。<br>（10）boolean removeAll(Collection coll)：从当前集合中删除所有与coll集合中相同的元素。即this = this - this ∩ coll<br>（11）boolean retainAll(Collection coll)：从当前集合中删除两个集合中不同的元素，使得当前集合仅保留与coll集合中的元素相同的元素，即当前集合中仅保留两个集合的交集，即this  = this ∩ coll；</p><p>注意几种删除方法的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collection coll=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    coll.add(<span class="string">"AA"</span>);</span><br><span class="line">    coll.add(<span class="number">123</span>); <span class="comment">//自动装箱为包装类</span></span><br><span class="line">    coll.add(<span class="string">"桑鬼谷"</span>);</span><br><span class="line">    coll.add(<span class="string">"尚硅谷"</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> Object());</span><br><span class="line">    System.out.println(coll);  <span class="comment">//[AA, 123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1]</span></span><br><span class="line">    Collection coll1=<span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll1.add(<span class="string">"AA"</span>);</span><br><span class="line">    coll1.add(<span class="number">123</span>);</span><br><span class="line">    coll1.add(<span class="string">"尚硅谷"</span>);</span><br><span class="line">    System.out.println(coll1); <span class="comment">//[AA, 123]</span></span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">    <span class="comment">//（9） boolean remove(Object obj) ：从当前集合中删除第一个找到的与obj对象equals返回true的元素。</span></span><br><span class="line">    System.out.println(coll.remove(<span class="string">"AAA"</span>)); <span class="comment">//false</span></span><br><span class="line">    System.out.println(coll.remove(<span class="string">"AA"</span>));  <span class="comment">//true</span></span><br><span class="line">    System.out.println(coll); <span class="comment">//[123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1]</span></span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">    <span class="comment">//（10）boolean removeAll(Collection coll1)：从当前集合中删除所有与coll1集合中相同的元素。即this = this - this ∩ coll1  ---删除两个集合的交集</span></span><br><span class="line">    System.out.println(coll.removeAll(coll1)); <span class="comment">//true</span></span><br><span class="line">    System.out.println(coll); <span class="comment">//[桑鬼谷, java.lang.Object@77f03bb1]</span></span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">    <span class="comment">//（11）boolean retainAll(Collection coll1)：从当前集合中删除两个集合中不同的元素，使得当前集合仅保留与coll1集合中的元素相同的元素，即当前集合中仅保留两个集合的交集，即this  = this ∩ coll1；  ---保留两个集合的交集</span></span><br><span class="line">    System.out.println(coll.retainAll(coll1)); <span class="comment">//true</span></span><br><span class="line">    System.out.println(coll); <span class="comment">//[]</span></span><br><span class="line">    <span class="comment">//（8）void clear()：清空集合元素  ---底层一个一个=null清空</span></span><br><span class="line">    coll1.clear(); </span><br><span class="line">    System.out.println(coll1.size()); <span class="comment">//0</span></span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-其它"><a href="#2-4-其它" class="headerlink" title="2.4 其它"></a>2.4 其它</h3><p>（12）Object[] toArray()：返回包含当前集合中所有元素的数组<br>（13）hashCode()：获取集合对象的哈希值<br>（14）iterator()：返回迭代器对象，用于集合遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collection coll=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    coll.add(<span class="string">"AA"</span>);</span><br><span class="line">    coll.add(<span class="number">123</span>); <span class="comment">//自动装箱为包装类</span></span><br><span class="line">    coll.add(<span class="string">"桑鬼谷"</span>);</span><br><span class="line">    coll.add(<span class="string">"尚硅谷"</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> Object());</span><br><span class="line">    System.out.println(coll);  <span class="comment">//[AA, 123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1]</span></span><br><span class="line">    Collection coll1=<span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll1.add(<span class="string">"AA"</span>);</span><br><span class="line">    coll1.add(<span class="number">123</span>);</span><br><span class="line">    System.out.println(coll1);</span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line"><span class="comment">//其他</span></span><br><span class="line">    <span class="comment">//（12）Object[] toArray()：返回包含当前集合中所有元素的数组</span></span><br><span class="line">    System.out.println(Arrays.toString(coll.toArray())); <span class="comment">//[AA, 123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1]</span></span><br><span class="line">    <span class="comment">//（13）hashCode()：获取集合对象的哈希值</span></span><br><span class="line">    System.out.println(coll.hashCode()); <span class="comment">//514809589</span></span><br><span class="line">    <span class="comment">//（14）iterator()：返回迭代器对象，用于集合遍历</span></span><br><span class="line">    System.out.println(coll.iterator()); <span class="comment">//java.util.ArrayList$Itr@326de728</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-数组和集合的转换"><a href="#2-5-数组和集合的转换" class="headerlink" title="2.5 数组和集合的转换"></a>2.5 数组和集合的转换</h3><p>（15）toArray()：集合 —&gt; 数组<br>（16）Arrays.asList(Object …objs)：数组 —&gt; 集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void test4()&#123;</span><br><span class="line">    Collection coll&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">    coll.add(&quot;AA&quot;);</span><br><span class="line">    coll.add(123); &#x2F;&#x2F;自动装箱为包装类</span><br><span class="line">    coll.add(&quot;桑鬼谷&quot;);</span><br><span class="line">    coll.add(&quot;尚硅谷&quot;);</span><br><span class="line">    coll.add(new Object());</span><br><span class="line">    System.out.println(coll);  &#x2F;&#x2F;[AA, 123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1]</span><br><span class="line">&#x2F;&#x2F;集合 ---&gt; 数组</span><br><span class="line">    Object[] arr1&#x3D;coll.toArray();</span><br><span class="line">    &#x2F;&#x2F;1.Arrays.toString()输出</span><br><span class="line">    System.out.println(Arrays.toString(arr1)); &#x2F;&#x2F;[AA, 123, 桑鬼谷, 尚硅谷, java.lang.Object@77f03bb1]</span><br><span class="line">    &#x2F;&#x2F;2.for循环遍历输出</span><br><span class="line">    for (int i &#x3D; 0; i &lt; arr1.length; i++) &#123;</span><br><span class="line">        System.out.print(arr1[i]+&quot; &quot;);  &#x2F;&#x2F;AA 123 桑鬼谷 尚硅谷 java.lang.Object@77f03bb1</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#x2F;&#x2F;数组 ---&gt; 集合</span><br><span class="line">    Integer[] arr &#x3D; new Integer[]&#123;1,2,3&#125;;</span><br><span class="line">    List list&#x3D; Arrays.asList(arr);</span><br><span class="line">    System.out.println(list); &#x2F;&#x2F;[1, 2, 3]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Iterator-迭代器-接口"><a href="#3-Iterator-迭代器-接口" class="headerlink" title="3. Iterator(迭代器)接口"></a>3. Iterator(迭代器)接口</h2><h3 id="3-1-Iterator接口"><a href="#3-1-Iterator接口" class="headerlink" title="3.1 Iterator接口"></a>3.1 Iterator接口</h3><ul><li>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口<code>java.util.Iterator</code>。<code>Iterator</code>接口也是Java集合中的一员，但它与<code>Collection</code>、<code>Map</code>接口有所不同。<ul><li>Collection接口与Map接口主要用于<code>存储</code>元素</li><li><code>Iterator</code>，被称为迭代器接口，本身并不提供存储对象的能力，主要用于<code>遍历</code>Collection中的元素</li></ul></li></ul><ul><li><p>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</p><ul><li><code>public Iterator iterator()</code>: 获取集合对应的迭代器，用来遍历集合中的元素的。</li><li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</li></ul></li><li><p>Iterator接口的常用方法如下：</p><ul><li><code>public E next()</code>:返回迭代的下一个元素。</li><li><code>public boolean hasNext()</code>:如果仍有元素可以迭代，则返回 true。</li></ul></li><li><p>注意：在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出<code>NoSuchElementException异常</code>。</p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIterator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">"小李广"</span>);</span><br><span class="line">        coll.add(<span class="string">"扫地僧"</span>);</span><br><span class="line">        coll.add(<span class="string">"石破天"</span>);</span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next()); <span class="comment">//报NoSuchElementException异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">"小李广"</span>);</span><br><span class="line">        coll.add(<span class="string">"扫地僧"</span>);</span><br><span class="line">        coll.add(<span class="string">"石破天"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正确方法</span></span><br><span class="line">        Iterator iterator = coll.iterator();<span class="comment">//获取迭代器对象</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;<span class="comment">//判断是否还有元素可迭代</span></span><br><span class="line">            System.out.println(iterator.next());<span class="comment">//取出下一个元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-迭代器的执行原理"><a href="#3-2-迭代器的执行原理" class="headerlink" title="3.2 迭代器的执行原理"></a>3.2 迭代器的执行原理</h3><p>Iterator迭代器对象在遍历集合时，内部采用指针的方式来跟踪集合中的元素，接下来通过一个图例来演示Iterator对象迭代元素的过程：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029138.png" alt="image-20220407235130988"></p><p>使用Iterator迭代器删除元素：java.util.Iterator迭代器中有一个方法：void remove() ;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator iter = coll.iterator();<span class="comment">//回到起点</span></span><br><span class="line"><span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">    Object obj = iter.next();</span><br><span class="line">    <span class="keyword">if</span>(obj.equals(<span class="string">"Tom"</span>))&#123;</span><br><span class="line">        iter.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>Iterator可以删除集合的元素，但是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法。</p></li><li><p>如果还未调用next()或在上一次调用 next() 方法之后已经调用了 remove() 方法，再调用remove()都会报IllegalStateException。</p></li><li><p>Collection已经有remove(xx)方法了，为什么Iterator迭代器还要提供删除方法呢？因为迭代器的remove()可以按指定的条件进行删除。</p></li></ul><p>例如：要删除以下集合元素中的偶数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIteratorRemove</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">1</span>);</span><br><span class="line">        coll.add(<span class="number">2</span>);</span><br><span class="line">        coll.add(<span class="number">3</span>);</span><br><span class="line">        coll.add(<span class="number">4</span>);</span><br><span class="line">        coll.add(<span class="number">5</span>);</span><br><span class="line">        coll.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Integer element = (Integer) iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(element % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JDK8.0时，Collection接口有了removeIf 方法，即可以根据条件删除。（第18章中再讲）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollectionRemoveIf</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">"小李广"</span>);</span><br><span class="line">        coll.add(<span class="string">"扫地僧"</span>);</span><br><span class="line">        coll.add(<span class="string">"石破天"</span>);</span><br><span class="line">        coll.add(<span class="string">"佛地魔"</span>);</span><br><span class="line">        System.out.println(<span class="string">"coll = "</span> + coll);</span><br><span class="line"></span><br><span class="line">        coll.removeIf(<span class="keyword">new</span> Predicate() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                String str = (String) o;</span><br><span class="line">                <span class="keyword">return</span> str.contains(<span class="string">"地"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"删除包含\"地\"字的元素之后coll = "</span> + coll);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-foreach循环"><a href="#3-3-foreach循环" class="headerlink" title="3.3 foreach循环"></a>3.3 foreach循环</h3><ul><li>foreach循环（也称增强for循环）是 JDK5.0 中定义的一个高级for循环，专门用来<code>遍历数组和集合</code>的。</li></ul><ul><li>foreach循环的语法格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型 局部变量 : Collection集合或数组)&#123; </span><br><span class="line">  <span class="comment">//操作局部变量的输出操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里局部变量就是一个临时变量，自己命名就可以</span></span><br></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestForeach</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">"小李广"</span>);</span><br><span class="line">        coll.add(<span class="string">"扫地僧"</span>);</span><br><span class="line">        coll.add(<span class="string">"石破天"</span>);</span><br><span class="line"><span class="comment">//foreach循环其实就是使用Iterator迭代器来完成元素的遍历的。</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : coll) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">        String[] names = &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于集合的遍历，增强for的内部原理其实是个Iterator迭代器。如下图。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029705.png" alt="image-20220128010114124"></p><ul><li>它用于遍历Collection和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作。<ul><li>练习：判断输出结果为何？</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] str = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (String myStr : str) &#123;</span><br><span class="line">            myStr = <span class="string">"atguigu"</span>;</span><br><span class="line">            System.out.println(myStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            System.out.println(str[i]);  <span class="comment">//str没变化都是null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">atguigu</span><br><span class="line">atguigu</span><br><span class="line">atguigu</span><br><span class="line">atguigu</span><br><span class="line">atguigu</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure><h2 id="4-Collection子接口1：List"><a href="#4-Collection子接口1：List" class="headerlink" title="4. Collection子接口1：List"></a>4. Collection子接口1：List</h2><h3 id="4-1-List接口特点"><a href="#4-1-List接口特点" class="headerlink" title="4.1 List接口特点"></a>4.1 List接口特点</h3><ul><li><p>鉴于Java中数组用来存储数据的局限性，我们通常使用<code>java.util.List</code>替代数组</p></li><li><p>List集合类中<code>元素有序</code>、且<code>可重复</code>，集合中的每个元素都有其对应的顺序索引。</p><ul><li>举例：List集合存储数据，就像银行门口客服，给每一个来办理业务的客户分配序号：第一个来的是“张三”，客服给他分配的是0；第二个来的是“李四”，客服给他分配的1；以此类推，最后一个序号应该是“总人数-1”。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029838.png" alt="1563549818689"></p><ul><li>JDK API中List接口的实现类常用的有：<code>ArrayList</code>、<code>LinkedList</code>和<code>Vector</code>。</li></ul><h3 id="4-2-List接口方法"><a href="#4-2-List接口方法" class="headerlink" title="4.2 List接口方法"></a>4.2 List接口方法</h3><p>List除了从Collection集合继承的方法外，List 集合里添加了一些<code>根据索引</code>来操作集合元素的方法。</p><ul><li><p>插入元素</p><ul><li><code>void add(int index, Object ele)</code>:在index位置插入ele元素</li><li>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</li></ul></li><li><p>获取元素</p><ul><li><code>Object get(int index)</code>:获取指定index位置的元素</li><li>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</li></ul></li><li><p>获取元素索引</p><ul><li>int indexOf(Object obj):返回obj在集合中首次出现的位置</li><li>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</li></ul></li><li><p>删除和替换元素</p><ul><li><p><code>Object remove(int index)</code>:移除指定index位置的元素，并返回此元素</p></li><li><p><code>Object set(int index, Object ele)</code>:设置指定index位置的元素为ele</p></li></ul></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建List集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 往 尾部添加 指定元素</span></span><br><span class="line">        list.add(<span class="string">"图图"</span>);</span><br><span class="line">        list.add(<span class="string">"小美"</span>);</span><br><span class="line">        list.add(<span class="string">"不高兴"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// add(int index,String s) 往指定位置添加</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">"没头脑"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// String remove(int index) 删除指定位置元素  返回被删除元素</span></span><br><span class="line">        <span class="comment">// 删除索引位置为2的元素</span></span><br><span class="line">        System.out.println(<span class="string">"删除索引位置为2的元素"</span>);</span><br><span class="line">        System.out.println(list.remove(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String set(int index,String s)</span></span><br><span class="line">        <span class="comment">// 在指定位置 进行 元素替代（改）</span></span><br><span class="line">        <span class="comment">// 修改指定位置元素</span></span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">"三毛"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String get(int index)  获取指定位置元素</span></span><br><span class="line">        <span class="comment">// 跟size() 方法一起用  来 遍历的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//还可以使用增强for</span></span><br><span class="line">        <span class="keyword">for</span> (String string : list) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在JavaSE中List名称的类型有两个，一个是java.util.List集合接口，一个是java.awt.List图形界面的组件，别导错包了。</p></blockquote><h3 id="4-3-List接口主要实现类：ArrayList"><a href="#4-3-List接口主要实现类：ArrayList" class="headerlink" title="4.3 List接口主要实现类：ArrayList"></a>4.3 List接口主要实现类：ArrayList</h3><ul><li><p>ArrayList 是 List 接口的<code>主要实现类</code></p></li><li><p>本质上，ArrayList是对象引用的一个”变长”数组</p></li><li><p>Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不是 Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029135.png" alt="image-20220408210743342"></p></li></ul><h3 id="4-4-List的实现类之二：LinkedList"><a href="#4-4-List的实现类之二：LinkedList" class="headerlink" title="4.4 List的实现类之二：LinkedList"></a>4.4 List的实现类之二：LinkedList</h3><ul><li>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高。这是由底层采用链表（双向链表）结构存储数据决定的。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029543.png" alt="image-20220408225615829"></p><ul><li>特有方法：<ul><li>void addFirst(Object obj)</li><li>void addLast(Object obj)    </li><li>Object getFirst()</li><li>Object getLast()</li><li>Object removeFirst()</li><li>Object removeLast()</li></ul></li></ul><h3 id="4-5-List的实现类之三：Vector"><a href="#4-5-List的实现类之三：Vector" class="headerlink" title="4.5 List的实现类之三：Vector"></a>4.5 List的实现类之三：Vector</h3><ul><li>Vector 是一个<code>古老</code>的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是<code>线程安全</code>的。</li><li>在各种List中，最好把<code>ArrayList作为默认选择</code>。当插入、删除频繁时，使用LinkedList；Vector总是比ArrayList慢，所以尽量避免使用。</li><li>特有方法：<ul><li>void addElement(Object obj)</li><li>void insertElementAt(Object obj,int index)</li><li>void setElementAt(Object obj,int index)</li><li>void removeElement(Object obj)</li><li>void removeAllElements()</li></ul></li></ul><h3 id="4-6-练习"><a href="#4-6-练习" class="headerlink" title="4.6 练习"></a>4.6 练习</h3><p><strong>面试题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个arraylist实现类对象</span></span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//添加集合元素</span></span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(list); <span class="comment">//[1,2,3]</span></span><br><span class="line">        updateList(list);  <span class="comment">//调用updateList方法</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[1,2]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//移除下标为2的值</span></span><br><span class="line">        list.remove(<span class="number">2</span>); <span class="comment">//list=[1,2]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习1：</strong></p><ul><li>定义学生类，属性为姓名、年龄，提供必要的getter、setter方法，构造器，toString()，equals()方法。</li><li>使用ArrayList集合，保存录入的多个学生对象。</li><li>循环录入的方式，1：继续录入，0：结束录入。</li><li>录入结束后，用foreach遍历集合。</li></ul><ul><li><p>代码实现，效果如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029861.png" alt="1559890098509"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"宋亚翔"</span>,<span class="number">12</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"宋亚翔2"</span>,<span class="number">121</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"宋亚翔3"</span>,<span class="number">11222</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"宋亚翔4"</span>,<span class="number">13122</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"宋亚翔5"</span>,<span class="number">112</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"宋亚翔6"</span>,<span class="number">1122</span>));</span><br><span class="line">        <span class="comment">//增强for循环</span></span><br><span class="line">        <span class="keyword">for</span>(Object stu:list)&#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//迭代器</span></span><br><span class="line">        Iterator iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Objects;</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (!(o instanceof Student student)) return false;</span><br><span class="line">        return getAge() &#x3D;&#x3D; student.getAge() &amp;&amp; Objects.equals(getName(), student.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +&quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +&quot;, age&#x3D;&quot; + age +&#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310251529194.png" alt="image-20231025152940101"></p><p><strong>练习2：</strong></p><p>​    1、请定义方法public static int listTest(Collection list,String s)统计集合中指定元素出现的次数</p><p>​    2、创建集合，集合存放随机生成的30个小写字母</p><p>​    3、用listTest统计，a、b、c、x元素的出现次数</p><p>​    4、效果如下</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029370.png" alt="1559896150606"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        Random random=<span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp= random.nextInt(<span class="number">26</span>);  <span class="comment">//获取0-26范围的整数</span></span><br><span class="line">            <span class="keyword">char</span> tempchar= (<span class="keyword">char</span>) (<span class="string">'a'</span>+temp); <span class="comment">//在a基础上加0-26 因为char会自动类型转换为int，要char就要强转</span></span><br><span class="line">            list.add(tempchar);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"随机小写字母为:"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"a"</span>+<span class="string">":"</span>+listTest(list,<span class="string">"a"</span>));</span><br><span class="line">        System.out.println(<span class="string">"b"</span>+<span class="string">":"</span>+listTest(list,<span class="string">"b"</span>));</span><br><span class="line">        System.out.println(<span class="string">"c"</span>+<span class="string">":"</span>+listTest(list,<span class="string">"c"</span>));</span><br><span class="line">        System.out.println(<span class="string">"x"</span>+<span class="string">":"</span>+listTest(list,<span class="string">"x"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//统计集合中指定元素出现的次数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">listTest</span><span class="params">(Collection list,String s)</span></span>&#123;</span><br><span class="line">        <span class="comment">//s转为字符</span></span><br><span class="line">        <span class="keyword">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Object temp:list)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[<span class="number">0</span>]==(<span class="keyword">char</span>)temp)&#123;  <span class="comment">//arr[0]就是要判断的字符 依次和list元素匹配</span></span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310251548428.png" alt="image-20231025154852384"></p><p><strong>练习3：KTV点歌系统</strong></p><p><strong>描述</strong></p><p>分别使用ArrayList和LinkedList集合，编写一个<strong><code>KTV点歌系统</code></strong>的程序。在程序中：</p><ul><li>指令1代表添加歌曲</li><li>指令2代表将所选歌曲置顶</li><li>指令3代表将所选歌曲提前一位</li><li>指令4代表退出该系统</li></ul><p>要求根据用户输入的指令和歌曲名展现歌曲列表。例如输入指令1，输入歌曲名”爱你一万年”，则输出“当前歌曲列表：[爱你一万年]”。</p><p><strong>提示</strong></p><ul><li><p>为了指引用户操作，首先要将各个指令所表示的含义打印到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"-------------欢迎来到点歌系统------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"1.添加歌曲至列表"</span>);</span><br><span class="line">System.out.println(<span class="string">"2.将歌曲置顶"</span>);</span><br><span class="line">System.out.println(<span class="string">"3.将歌曲前移一位"</span>);</span><br><span class="line">System.out.println(<span class="string">"4.退出"</span>);</span><br></pre></td></tr></table></figure></li><li><p>程序中需要创建一个集合作为歌曲列表，并向其添加一部分歌曲</p></li><li><p>通过ArrayList或LinkedList集合定义的方法操作歌曲列表</p></li></ul><p><strong>代码</strong></p><ul><li><p>使用ArrayList集合模拟点歌系统的实现代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 20:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KTVByArrayList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList musicList = <span class="keyword">new</span> ArrayList();<span class="comment">// 创建歌曲列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        addMusicList();<span class="comment">// 添加一部分歌曲至歌曲列表</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">"当前歌曲列表："</span> + musicList);</span><br><span class="line">            System.out.println(<span class="string">"-------------欢迎来到点歌系统------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"1.添加歌曲至列表"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2.将歌曲置顶"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3.将歌曲前移一位"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4.退出"</span>);</span><br><span class="line">            System.out.print(<span class="string">"请输入操作序号："</span>);</span><br><span class="line">            <span class="keyword">int</span> key = sc.nextInt();<span class="comment">// //接收键盘输入的功能选项序号</span></span><br><span class="line">            <span class="comment">// 执行序号对应的功能</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">// 添加歌曲至列表</span></span><br><span class="line">                    addMusic();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">// 将歌曲置顶</span></span><br><span class="line">                    setTop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">// 将歌曲前移一位</span></span><br><span class="line">                    setBefore();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">// 退出</span></span><br><span class="line">                    System.out.println(<span class="string">"----------------退出---------------"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"您已退出系统"</span>);</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"功能选择有误，请输入正确的功能序号!"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始时添加歌曲名称</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addMusicList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        musicList.add(<span class="string">"本草纲目"</span>);</span><br><span class="line">        musicList.add(<span class="string">"你是我的眼"</span>);</span><br><span class="line">        musicList.add(<span class="string">"老男孩"</span>);</span><br><span class="line">        musicList.add(<span class="string">"白月光与朱砂痣"</span>);</span><br><span class="line">        musicList.add(<span class="string">"不谓侠"</span>);</span><br><span class="line">        musicList.add(<span class="string">"爱你"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行添加歌曲</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addMusic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"请输入要添加的歌曲名称："</span>);</span><br><span class="line">        String musicName = sc.next();<span class="comment">// 获取键盘输入内容</span></span><br><span class="line">        musicList.add(musicName);<span class="comment">// 添加歌曲到列表的最后</span></span><br><span class="line">        System.out.println(<span class="string">"已添加歌曲："</span> + musicName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行将歌曲置顶</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"请输入要置顶的歌曲名称："</span>);</span><br><span class="line">        String musicName = sc.next();<span class="comment">// 获取键盘输入内容</span></span><br><span class="line">        <span class="keyword">int</span> musicIndex = musicList.indexOf(musicName);<span class="comment">// 查找指定歌曲位置</span></span><br><span class="line">        <span class="keyword">if</span> (musicIndex &lt; <span class="number">0</span>) &#123;<span class="comment">// 判断输入歌曲是否存在</span></span><br><span class="line">            System.out.println(<span class="string">"当前列表中没有输入的歌曲！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(musicIndex == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"当前歌曲默认已置顶！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            musicList.remove(musicName);<span class="comment">// 移除指定的歌曲</span></span><br><span class="line">            musicList.add(<span class="number">0</span>, musicName);<span class="comment">// 将指定的歌曲放到第一位</span></span><br><span class="line">            System.out.println(<span class="string">"已将歌曲《"</span> + musicName + <span class="string">"》置顶"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行将歌曲置前一位</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"请输入要置前的歌曲名称："</span>);</span><br><span class="line">        String musicName = sc.next();<span class="comment">// 获取键盘输入内容</span></span><br><span class="line">        <span class="keyword">int</span> musicIndex = musicList.indexOf(musicName);<span class="comment">// 查找指定歌曲位置</span></span><br><span class="line">        <span class="keyword">if</span> (musicIndex &lt; <span class="number">0</span>) &#123;<span class="comment">// 判断输入歌曲是否存在</span></span><br><span class="line">            System.out.println(<span class="string">"当前列表中没有输入的歌曲！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (musicIndex == <span class="number">0</span>) &#123;<span class="comment">// 判断歌曲是否已在第一位</span></span><br><span class="line">            System.out.println(<span class="string">"当前歌曲已在最顶部！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            musicList.remove(musicName);<span class="comment">// 移除指定的歌曲</span></span><br><span class="line">            musicList.add(musicIndex - <span class="number">1</span>, musicName);<span class="comment">// 将指定的歌曲放到前一位</span></span><br><span class="line">            System.out.println(<span class="string">"已将歌曲《"</span> + musicName + <span class="string">"》置前一位"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-Collection子接口2：Set"><a href="#5-Collection子接口2：Set" class="headerlink" title="5. Collection子接口2：Set"></a>5. Collection子接口2：Set</h2><h3 id="5-1-Set接口概述"><a href="#5-1-Set接口概述" class="headerlink" title="5.1 Set接口概述"></a>5.1 Set接口概述</h3><ul><li>Set接口是Collection的子接口，Set接口相较于Collection接口<strong>没有提供额外的方法</strong>【list接口有自己的增删查改】</li><li>Set 集合存储<strong>不相同的元素</strong>，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。</li><li>Set集合支持的遍历方式和Collection集合一样：foreach和Iterator。</li><li>Set的常用实现类有：HashSet、TreeSet、LinkedHashSet。</li></ul><h3 id="5-2-Set主要实现类：HashSet"><a href="#5-2-Set主要实现类：HashSet" class="headerlink" title="5.2 Set主要实现类：HashSet"></a>5.2 Set主要实现类：HashSet</h3><h4 id="5-2-1-HashSet概述"><a href="#5-2-1-HashSet概述" class="headerlink" title="5.2.1 HashSet概述"></a>5.2.1 HashSet概述</h4><ul><li><p>HashSet 是 Set 接口的主要实现类，大多数时候使用 Set 集合时都使用这个实现类。</p></li><li><p>HashSet 按 <strong>Hash 算法</strong>来存储集合中的元素，因此具有很好的存储、查找、删除性能。</p></li><li><p>HashSet 具有以下<code>特点</code>：</p><ul><li>不能保证元素的排列顺序【假设用取余法，那本身存放位置相同(都是放在下标为1)，如果冲突的话可能存放在其他位置，】</li><li>HashSet 不是线程安全的</li><li>集合元素可以是 null</li></ul></li><li><p>HashSet 集合<code>判断两个元素相等的标准</code>：两个对象通过 <code>hashCode()</code> 方法得到的哈希值相等，并且两个对象的 <code>equals()</code>方法返回值为true。</p></li><li><p>对于存放在Set容器中的对象，<strong>对应的类一定要重写hashCode()和equals(Object obj)方法</strong>，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。</p></li><li><p>HashSet集合中元素的无序性，不等同于随机性。这里的无序性与元素的添加位置有关。具体来说：我们在添加每一个元素到数组中时，具体的存储位置是由元素的hashCode()调用后返回的hash值决定的。导致在数组中每个元素不是依次紧密存放的，表现出一定的无序性。</p></li></ul><h4 id="5-2-2-HashSet中添加元素的过程："><a href="#5-2-2-HashSet中添加元素的过程：" class="headerlink" title="5.2.2 HashSet中添加元素的过程："></a>5.2.2 HashSet中添加元素的过程：</h4><ul><li><p>第1步：当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法得到该对象的 hashCode值，然后根据 hashCode值，通过某个散列函数决定该对象在 HashSet 底层数组中的存储位置。</p></li><li><p>第2步：如果要在数组中存储的位置上没有元素，则直接添加成功。</p></li><li><p>第3步：如果要在数组中存储的位置上有元素，则继续比较：</p><ul><li>如果两个元素的hashCode值不相等，则添加成功；</li><li>如果两个元素的hashCode()值相等，则会继续调用equals()方法：<ul><li>如果equals()方法结果为false，则添加成功。</li><li>如果equals()方法结果为true，则添加失败。</li></ul></li></ul><blockquote><p>第2步添加成功，元素会保存在底层数组中。</p><p>第3步两种添加成功的操作，由于该底层数组的位置已经有元素了，则会通过<code>链表</code>的方式继续链接，存储。</p></blockquote></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDate</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        MyDate myDate = (MyDate) o;</span><br><span class="line">        <span class="keyword">return</span> year == myDate.year &amp;&amp;</span><br><span class="line">                month == myDate.month &amp;&amp;</span><br><span class="line">                day == myDate.day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(year, month, day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyDate&#123;"</span> +</span><br><span class="line">                <span class="string">"year="</span> + year +</span><br><span class="line">                <span class="string">", month="</span> + month +</span><br><span class="line">                <span class="string">", day="</span> + day +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashSet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="string">"张三"</span>);</span><br><span class="line">        set.add(<span class="string">"张三"</span>);</span><br><span class="line">        set.add(<span class="string">"李四"</span>);</span><br><span class="line">        set.add(<span class="string">"王五"</span>);</span><br><span class="line">        set.add(<span class="string">"王五"</span>);</span><br><span class="line">        set.add(<span class="string">"赵六"</span>);</span><br><span class="line">        System.out.println(<span class="string">"set = "</span> + set);<span class="comment">//不允许重复，无序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="keyword">new</span> MyDate(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> MyDate(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> MyDate(<span class="number">2022</span>,<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> MyDate(<span class="number">2022</span>,<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">"set = "</span> + set);<span class="comment">//不允许重复，无序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-重写-hashCode-方法的基本原则"><a href="#5-2-3-重写-hashCode-方法的基本原则" class="headerlink" title="5.2.3 重写 hashCode() 方法的基本原则"></a>5.2.3 重写 hashCode() 方法的基本原则</h4><ul><li>在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值。</li><li>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode() 方法的返回值也应相等。</li><li>对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</li></ul><blockquote><p>注意：如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p></blockquote><h4 id="5-2-4-重写equals-方法的基本原则"><a href="#5-2-4-重写equals-方法的基本原则" class="headerlink" title="5.2.4 重写equals()方法的基本原则"></a>5.2.4 重写equals()方法的基本原则</h4><ul><li><p>重写equals方法的时候一般都需要同时复写hashCode方法。通常参与计算hashCode的对象的属性也应该参与到equals()中进行计算。</p></li><li><p>推荐：开发中直接调用Eclipse/IDEA里的快捷键自动重写equals()和hashCode()方法即可。</p><ul><li>为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首先，选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突）</span><br><span class="line"></span><br><span class="line">其次，31只占用5bits,相乘造成数据溢出的概率较小。</span><br><span class="line"></span><br><span class="line">再次，31可以 由i*31&#x3D;&#x3D; (i&lt;&lt;5)-1来表示,现在很多虚拟机里面都有做相关优化。（提高算法效率）</span><br><span class="line"></span><br><span class="line">最后，31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数本身和被乘数还有1来整除！(减少冲突)</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2-5-练习"><a href="#5-2-5-练习" class="headerlink" title="5.2.5 练习"></a>5.2.5 练习</h4><p><strong>练习1：</strong>在List内去除重复数字值，要求尽量简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">1234234</span>);</span><br><span class="line">        list=delete(list);</span><br><span class="line">        System.out.println(list); <span class="comment">//[123,1234234]</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//去重方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">delete</span><span class="params">(List list)</span></span>&#123;</span><br><span class="line">        ArrayList arrayList=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        HashSet set=<span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="comment">//增强for循环</span></span><br><span class="line">        <span class="keyword">for</span>(Object temp:list)&#123;</span><br><span class="line">            set.add(temp); <span class="comment">//set自带不能存储相同元素的功能</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(set); <span class="comment">//使用ArrayList构造器创建</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong>获取随机数</p><p>编写一个程序，获取10个1至20的随机数，要求随机数不能重复。并把最终的随机数输出到控制台。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果使用ArrayList的话就用for循环</span></span><br><span class="line">        <span class="comment">//如果使用HashSet的话就要考虑每次的不一定存进去，就要使用while</span></span><br><span class="line">        HashSet set=<span class="keyword">new</span> HashSet();</span><br><span class="line">        Random random=<span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//生成10个</span></span><br><span class="line">        <span class="keyword">while</span>(set.size()&lt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=random.nextInt(<span class="number">20</span>); <span class="comment">//生成随机数</span></span><br><span class="line">            set.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(set);  <span class="comment">//[17, 1, 3, 19, 8, 10, 12, 13, 14, 15]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习3：</strong>去重</p><p>使用Scanner从键盘读取一行输入，去掉其中重复字符，打印出不同的那些字符。比如：aaaabbbcccddd</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//输入一行字符串</span></span><br><span class="line">        String str=input.next();</span><br><span class="line">        <span class="comment">//转为字符数组(一位一位判断)</span></span><br><span class="line">        <span class="keyword">char</span>[] arr=str.toCharArray();</span><br><span class="line">        <span class="comment">//去重</span></span><br><span class="line">        HashSet set=<span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="comment">//增强for循环进行添加</span></span><br><span class="line">        <span class="keyword">for</span>(Object temp:arr)&#123;</span><br><span class="line">            set.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习4：</strong>面试题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存储不重复的元素</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"AA"</span>, <span class="number">1001</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"BB"</span>, <span class="number">1002</span>);  <span class="comment">//其中Person类中重写了hashCode()和equal()方法  --&gt;啥都相同也可添加！</span></span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        System.out.println(<span class="string">"set里的元素:"</span>+set);</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//将元素p1更改姓名</span></span><br><span class="line">        p1.name = <span class="string">"CC"</span>;</span><br><span class="line">        System.out.println(<span class="string">"set里的元素更改信息之后:"</span>+set);</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//移除元素</span></span><br><span class="line">        set.remove(p1);</span><br><span class="line">        System.out.println(<span class="string">"set移除完元素如下:"</span>+set);</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="string">"CC"</span>, <span class="number">1001</span>));</span><br><span class="line">        System.out.println(<span class="string">"set里添加元素:"</span>+set);</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="string">"AA"</span>, <span class="number">1001</span>));</span><br><span class="line">        System.out.println(<span class="string">"set里添加元素:"</span>+set);</span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">set里的元素:[Person&#123;name=<span class="string">'BB'</span>, age=<span class="number">1002</span>&#125;, Person&#123;name=<span class="string">'AA'</span>, age=<span class="number">1001</span>&#125;]</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">set里的元素更改信息之后:[Person&#123;name=<span class="string">'BB'</span>, age=<span class="number">1002</span>&#125;, Person&#123;name=<span class="string">'CC'</span>, age=<span class="number">1001</span>&#125;]</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">set移除完元素如下:[Person&#123;name=<span class="string">'BB'</span>, age=<span class="number">1002</span>&#125;, Person&#123;name=<span class="string">'CC'</span>, age=<span class="number">1001</span>&#125;]</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">set里添加元素:[Person&#123;name=<span class="string">'BB'</span>, age=<span class="number">1002</span>&#125;, Person&#123;name=<span class="string">'CC'</span>, age=<span class="number">1001</span>&#125;, Person&#123;name=<span class="string">'CC'</span>, age=<span class="number">1001</span>&#125;]</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line"><span class="function">Person <span class="title">equals</span><span class="params">()</span>...</span></span><br><span class="line"><span class="function">set里添加元素:[Person</span>&#123;name=<span class="string">'BB'</span>, age=<span class="number">1002</span>&#125;, Person&#123;name=<span class="string">'CC'</span>, age=<span class="number">1001</span>&#125;, Person&#123;name=<span class="string">'CC'</span>, age=<span class="number">1001</span>&#125;, Person&#123;name=<span class="string">'AA'</span>, age=<span class="number">1001</span>&#125;]</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="5-3-Set实现类之二：LinkedHashSet"><a href="#5-3-Set实现类之二：LinkedHashSet" class="headerlink" title="5.3 Set实现类之二：LinkedHashSet"></a>5.3 Set实现类之二：LinkedHashSet</h3><ul><li><p>LinkedHashSet 是 HashSet 的子类，不允许集合元素重复。</p></li><li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用<code>双向链表</code>维护元素的次序，这使得元素看起来是以<code>添加顺序</code>保存的。</p></li><li><p>LinkedHashSet<code>插入性能略低</code>于 HashSet，但在<code>迭代访问</code> Set 里的全部元素时有很好的性能。</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029222.png" alt="image-20220408235936404" style="zoom:67%;"> <p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLinkedHashSet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkedHashSet set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        set.add(<span class="string">"张三"</span>);</span><br><span class="line">        set.add(<span class="string">"张三"</span>);</span><br><span class="line">        set.add(<span class="string">"李四"</span>);</span><br><span class="line">        set.add(<span class="string">"王五"</span>);</span><br><span class="line">        set.add(<span class="string">"王五"</span>);</span><br><span class="line">        set.add(<span class="string">"赵六"</span>);</span><br><span class="line">        System.out.println(<span class="string">"set = "</span> + set);<span class="comment">//不允许重复，体现添加顺序  set = [张三, 李四, 王五, 赵六]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-Set实现类之三：TreeSet"><a href="#5-4-Set实现类之三：TreeSet" class="headerlink" title="5.4 Set实现类之三：TreeSet"></a>5.4 Set实现类之三：TreeSet</h3><h4 id="5-4-1-TreeSet概述"><a href="#5-4-1-TreeSet概述" class="headerlink" title="5.4.1 TreeSet概述"></a>5.4.1 TreeSet概述</h4><ul><li>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以按照添加的元素的指定的属性的大小<strong>顺序进行遍历</strong>。</li><li>TreeSet底层使用<code>红黑树</code>结构存储数据</li><li>新增的方法如下： (了解)<ul><li>Comparator comparator()</li><li>Object first()</li><li>Object last()</li><li>Object lower(Object e)</li><li>Object higher(Object e)</li><li>SortedSet subSet(fromElement, toElement)</li><li>SortedSet headSet(toElement)</li><li>SortedSet tailSet(fromElement)</li></ul></li><li>TreeSet特点：不允许重复、实现排序（自然排序或定制排序）</li><li>TreeSet 两种排序方法：<code>自然排序</code>和<code>定制排序</code>。默认情况下，TreeSet 采用自然排序。<ul><li><code>自然排序</code>：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列。<ul><li>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable 接口。</li><li>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。</li></ul></li><li><code>定制排序</code>：如果元素所属的类没有实现Comparable接口，或不希望按照升序(默认情况)的方式排列元素或希望按照其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来实现。需要重写compare(T o1,T o2)方法。<ul><li>利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器。</li></ul></li></ul></li><li>因为只有相同类的两个实例才会比较大小，所以向 TreeSet 中添加的应该是<code>同一个类的对象</code>。</li><li>对于 TreeSet 集合而言，它判断<code>两个对象是否相等的唯一标准</code>是：两个对象通过 <code>compareTo(Object obj) 或compare(Object o1,Object o2)</code>方法比较返回值。返回值为0，则认为两个对象相等。</li></ul><h4 id="5-4-2-举例"><a href="#5-4-2-举例" class="headerlink" title="5.4.2 举例"></a>5.4.2 举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 自然排序：针对String类的对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line"></span><br><span class="line">        set.add(<span class="string">"MM"</span>);</span><br><span class="line">        set.add(<span class="string">"CC"</span>);</span><br><span class="line">        set.add(<span class="string">"AA"</span>);</span><br><span class="line">        set.add(<span class="string">"DD"</span>);</span><br><span class="line">        set.add(<span class="string">"ZZ"</span>);</span><br><span class="line">        <span class="comment">//set.add(123);  //报ClassCastException的异常</span></span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 自然排序：针对User类的对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Rose"</span>,<span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Eric"</span>,<span class="number">18</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Tommy"</span>,<span class="number">44</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jim"</span>,<span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Maria"</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="comment">//set.add("Tom");</span></span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(set.contains(<span class="keyword">new</span> User(<span class="string">"Jack"</span>, <span class="number">23</span>))); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，User类定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    举例：按照age从小到大的顺序排列，如果age相同，则按照name从大到小的顺序排列</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == o)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line">            <span class="keyword">int</span> value = <span class="keyword">this</span>.age - user.age;</span><br><span class="line">            <span class="keyword">if</span>(value != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定制排序</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//按照User的姓名的从小到大的顺序排列</span></span><br><span class="line">    Comparator comparator = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                User u1 = (User)o1;</span><br><span class="line">                User u2 = (User)o2;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> u1.name.compareTo(u2.name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    TreeSet set = <span class="keyword">new</span> TreeSet(comparator);</span><br><span class="line"></span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">"Rose"</span>,<span class="number">23</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">2</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">"Eric"</span>,<span class="number">18</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">"Tommy"</span>,<span class="number">44</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">"Jim"</span>,<span class="number">23</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">"Maria"</span>,<span class="number">18</span>));</span><br><span class="line">    <span class="comment">//set.add(new User("Maria",28));</span></span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-3-练习"><a href="#5-4-3-练习" class="headerlink" title="5.4.3 练习"></a>5.4.3 练习</h4><p><strong>练习1：</strong>在一个List集合中存储了多个无大小顺序并且有重复的字符串，定义一个方法，让其有序(从小到大排序)，并且不能去除重复元素。</p><p>提示：考查ArrayList、TreeSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"ccc"</span>);</span><br><span class="line">        list.add(<span class="string">"ccc"</span>);</span><br><span class="line">        list.add(<span class="string">"aaa"</span>);</span><br><span class="line">        list.add(<span class="string">"aaa"</span>);</span><br><span class="line">        list.add(<span class="string">"bbb"</span>);</span><br><span class="line">        list.add(<span class="string">"ddd"</span>);</span><br><span class="line">        list.add(<span class="string">"ddd"</span>);</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span>+list);</span><br><span class="line">        sort(list);</span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span>+list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(ArrayList list)</span></span>&#123;</span><br><span class="line">        TreeSet set=<span class="keyword">new</span> TreeSet(<span class="keyword">new</span> Comparator() &#123;  <span class="comment">//实现Comparator接口，重写compare方法，然后传入构造器内</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                String s1 = (String)o1;</span><br><span class="line">                String s2 = (String)o2;</span><br><span class="line">                <span class="keyword">int</span> num = s1.compareTo(s2); <span class="comment">// 调用字符串重写的compareTo()方法</span></span><br><span class="line">                <span class="keyword">return</span> num == <span class="number">0</span> ? <span class="number">1</span> : num; <span class="comment">// 如果内容一样返回一个不为0的数字即可</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        set.addAll(list); <span class="comment">// 将list集合中的所有元素添加到set中</span></span><br><span class="line">        list.clear(); <span class="comment">// 清空list</span></span><br><span class="line">        list.addAll(set); <span class="comment">// 将set中排序并保留重复的结果返回到list中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">排序前:[ccc, ccc, aaa, aaa, bbb, ddd, ddd]</span><br><span class="line">排序后:[aaa, aaa, bbb, ccc, ccc, ddd, ddd]</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong>TreeSet的自然排序和定制排序</p><ol><li><p>定义一个Employee类。<br>该类包含：private成员变量name,age,birthday，其中 birthday 为 MyDate 类的对象；<br>并为每一个属性定义 getter, setter 方法；<br>并重写 toString 方法输出 name, age, birthday</p></li><li><p>MyDate类包含:<br>private成员变量year,month,day；并为每一个属性定义 getter, setter 方法；</p></li><li><p>创建该类的 5 个对象，并把这些对象放入 TreeSet 集合中（下一章：TreeSet 需使用泛型来定义）</p></li><li><p>分别按以下两种方式对集合中的元素进行排序，并遍历输出：</p><p>1). 使Employee 实现 Comparable 接口，并按 name 排序[Employee类就要实现Comparable接口]<br>2). 创建 TreeSet 时传入 Comparator对象，按生日日期的先后排序。[MyDate类就要实现Comparable接口]</p></li></ol><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;  <span class="comment">//实现自然排序  必须实现Comparable接口</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> age, MyDate birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;"</span> +<span class="string">"name='"</span> + name + <span class="string">'\''</span> +<span class="string">", age="</span> + age +<span class="string">", birthday="</span> + birthday +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyDate <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(MyDate birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o==<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Employee)&#123;</span><br><span class="line">            Employee temp=(Employee) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getName().compareTo(temp.getName());  <span class="comment">//根据年龄排序</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"传入的类型不匹配"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;  <span class="comment">//实现自然排序  必须实现Comparable接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDate</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDay</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyDate&#123;"</span> +<span class="string">"year="</span> + year +<span class="string">", month="</span> + month +<span class="string">", day="</span> + day +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == o)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> MyDate)&#123;</span><br><span class="line">            MyDate myDate = (MyDate) o;</span><br><span class="line">            <span class="keyword">int</span> yearDistance = <span class="keyword">this</span>.getYear() - myDate.getYear();</span><br><span class="line">            <span class="keyword">if</span>(yearDistance != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> yearDistance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> monthDistance = <span class="keyword">this</span>.getMonth() - myDate.getMonth();</span><br><span class="line">            <span class="keyword">if</span>(monthDistance != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> monthDistance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getDay() - myDate.getDay();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自然排序  --Employee实现Comparable接口 重写CompareTo方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="string">"Tom"</span>, <span class="number">23</span>, <span class="keyword">new</span> MyDate(<span class="number">1999</span>, <span class="number">7</span>, <span class="number">9</span>));</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="string">"Rose"</span>, <span class="number">43</span>, <span class="keyword">new</span> MyDate(<span class="number">1999</span>, <span class="number">7</span>, <span class="number">19</span>));</span><br><span class="line">        Employee e3 = <span class="keyword">new</span> Employee(<span class="string">"Jack"</span>, <span class="number">54</span>, <span class="keyword">new</span> MyDate(<span class="number">1998</span>, <span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">        Employee e4 = <span class="keyword">new</span> Employee(<span class="string">"Jerry"</span>, <span class="number">12</span>, <span class="keyword">new</span> MyDate(<span class="number">2002</span>, <span class="number">4</span>, <span class="number">21</span>));</span><br><span class="line">        Employee e5 = <span class="keyword">new</span> Employee(<span class="string">"Tony"</span>, <span class="number">22</span>, <span class="keyword">new</span> MyDate(<span class="number">2001</span>, <span class="number">9</span>, <span class="number">12</span>));</span><br><span class="line">        set.add(e1);</span><br><span class="line">        set.add(e2);</span><br><span class="line">        set.add(e3);</span><br><span class="line">        set.add(e4);</span><br><span class="line">        set.add(e5);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出: 根据名字</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Jack', age=54, birthday=MyDate&#123;year=1998, month=12, day=21&#125;&#125;</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Jerry', age=12, birthday=MyDate&#123;year=2002, month=4, day=21&#125;&#125;</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Rose', age=43, birthday=MyDate&#123;year=1999, month=7, day=19&#125;&#125;</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Tom', age=23, birthday=MyDate&#123;year=1999, month=7, day=9&#125;&#125;</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Tony', age=22, birthday=MyDate&#123;year=2001, month=9, day=12&#125;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定制排序  --匿名内部类方式实现Comparator接口 重写compare方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Employee &amp;&amp; o2 <span class="keyword">instanceof</span> Employee)&#123;</span><br><span class="line">                    Employee e1 = (Employee) o1;</span><br><span class="line">                    Employee e2 = (Employee) o2;</span><br><span class="line">                    <span class="comment">//对比两个employee的生日的大小</span></span><br><span class="line">                    MyDate birth1 = e1.getBirthday();</span><br><span class="line">                    MyDate birth2 = e2.getBirthday();</span><br><span class="line">                    <span class="comment">//方式2：</span></span><br><span class="line">                    <span class="keyword">return</span> birth1.compareTo(birth2);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="string">"Tom"</span>, <span class="number">23</span>, <span class="keyword">new</span> MyDate(<span class="number">1999</span>, <span class="number">7</span>, <span class="number">9</span>));</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="string">"Rose"</span>, <span class="number">43</span>, <span class="keyword">new</span> MyDate(<span class="number">1999</span>, <span class="number">7</span>, <span class="number">19</span>));</span><br><span class="line">        Employee e3 = <span class="keyword">new</span> Employee(<span class="string">"Jack"</span>, <span class="number">54</span>, <span class="keyword">new</span> MyDate(<span class="number">1998</span>, <span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">        Employee e4 = <span class="keyword">new</span> Employee(<span class="string">"Jerry"</span>, <span class="number">12</span>, <span class="keyword">new</span> MyDate(<span class="number">2002</span>, <span class="number">4</span>, <span class="number">21</span>));</span><br><span class="line">        Employee e5 = <span class="keyword">new</span> Employee(<span class="string">"Tony"</span>, <span class="number">22</span>, <span class="keyword">new</span> MyDate(<span class="number">2001</span>, <span class="number">9</span>, <span class="number">12</span>));</span><br><span class="line">        set.add(e1);</span><br><span class="line">        set.add(e2);</span><br><span class="line">        set.add(e3);</span><br><span class="line">        set.add(e4);</span><br><span class="line">        set.add(e5);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出: 根据生日</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Jack', age=54, birthday=MyDate&#123;year=1998, month=12, day=21&#125;&#125;</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Tom', age=23, birthday=MyDate&#123;year=1999, month=7, day=9&#125;&#125;</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Rose', age=43, birthday=MyDate&#123;year=1999, month=7, day=19&#125;&#125;</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Tony', age=22, birthday=MyDate&#123;year=2001, month=9, day=12&#125;&#125;</span></span><br><span class="line">        <span class="comment">//Employee&#123;name='Jerry', age=12, birthday=MyDate&#123;year=2002, month=4, day=21&#125;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Map接口"><a href="#6-Map接口" class="headerlink" title="6. Map接口"></a>6. Map接口</h2><p>现实生活与开发中，我们常会看到这样的一类集合：用户ID与账户信息、学生姓名与考试成绩、IP地址与主机名等，这种一一对应的关系，就称作<strong>映射</strong><br>Java提供了专门的集合框架用来存储这种映射关系的对象，即<strong>java.util.Map接口</strong></p><h3 id="6-1-Map接口概述"><a href="#6-1-Map接口概述" class="headerlink" title="6.1 Map接口概述"></a>6.1 Map接口概述</h3><ul><li><p>Map与Collection并列存在。用于保存具有<code>映射关系</code>的数据：<strong>key-value</strong></p><ul><li><code>Collection</code>集合称为单列集合，元素是孤立存在的（理解为<strong>单身</strong>）</li><li><code>Map</code>集合称为双列集合，元素是成对存在的(理解为<strong>夫妻</strong>)</li></ul></li><li><p>Map 中的 key 和  value 可以是任何引用类型的数据。但常用String类作为Map的“键”。</p></li><li><p>Map接口的常用实现类：<code>HashMap</code>、<code>LinkedHashMap</code>、<code>TreeMap</code>和``Properties<code>。其中，HashMap是 Map 接口使用</code>频率最高`的实现类。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029518.png" alt="image-20220409001015034" style="zoom:67%;"></li></ul><h3 id="6-2-Map中key-value特点"><a href="#6-2-Map中key-value特点" class="headerlink" title="6.2 Map中key-value特点"></a>6.2 Map中key-value特点</h3><p>这里主要以HashMap为例说明。HashMap中存储的key、value的特点如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029142.png" alt="image-20220409001213720" style="zoom:67%;"><ul><li><p>Map 中的 <code>key用Set来存放</code>，<code>不允许重复</code>，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242029512.png" alt="image-20220514190412763" style="zoom:67%;"></li><li><p>key 和 value 之间存在单向一对一关系，通过指定 key 总能找到唯一的、确定的 value【<strong>根据key存放value</strong>】，不同key对应的<code>value可以重复</code>。value所在的类要重写equals()方法。</p></li><li><p>key和value构成一个entry。所有的entry彼此之间是<code>无序的</code>、<code>不可重复的</code>。</p></li><li><p><strong>总结</strong>:<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310271033778.png" alt="image-20231027103310700"></p></li></ul><h3 id="6-2-Map接口的常用方法"><a href="#6-2-Map接口的常用方法" class="headerlink" title="6.2 Map接口的常用方法"></a>6.2 Map接口的常用方法</h3><ul><li><strong>添加、修改操作：</strong><ul><li>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</li><li>void putAll(Map m):将m中的所有key-value对存放到当前map中</li></ul></li><li><strong>删除操作：</strong><ul><li>Object remove(Object key)：移除指定key的key-value对，并返回value</li><li>void clear()：清空当前map中的所有数据</li></ul></li><li><strong>元素查询的操作：</strong><ul><li>Object get(Object key)：获取指定key对应的value</li><li>boolean containsKey(Object key)：是否包含指定的key</li><li>boolean containsValue(Object value)：是否包含指定的value</li><li>int size()：返回map中key-value对的个数</li><li>boolean isEmpty()：判断当前map是否为空</li><li>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li></ul></li><li><strong>元视图操作的方法：</strong><ul><li>Set keySet()：返回所有key构成的Set集合</li><li>Collection values()：返回所有value构成的Collection集合</li><li>Set entrySet()：返回所有key-value对构成的Set集合</li></ul></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMapMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 map对象</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素到集合</span></span><br><span class="line">        map.put(<span class="string">"黄晓明"</span>, <span class="string">"杨颖"</span>);</span><br><span class="line">        map.put(<span class="string">"李晨"</span>, <span class="string">"李小璐"</span>);</span><br><span class="line">        map.put(<span class="string">"李晨"</span>, <span class="string">"范冰冰"</span>);</span><br><span class="line">        map.put(<span class="string">"邓超"</span>, <span class="string">"孙俪"</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除指定的key-value</span></span><br><span class="line">        System.out.println(map.remove(<span class="string">"黄晓明"</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询指定key对应的value</span></span><br><span class="line">        System.out.println(map.get(<span class="string">"邓超"</span>));</span><br><span class="line">        System.out.println(map.get(<span class="string">"黄晓明"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">"许仙"</span>, <span class="string">"白娘子"</span>);</span><br><span class="line">    map.put(<span class="string">"董永"</span>, <span class="string">"七仙女"</span>);</span><br><span class="line">    map.put(<span class="string">"牛郎"</span>, <span class="string">"织女"</span>);</span><br><span class="line">    map.put(<span class="string">"许仙"</span>, <span class="string">"小青"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"所有的key:"</span>);</span><br><span class="line">    Set keySet = map.keySet();</span><br><span class="line">    <span class="keyword">for</span> (Object key : keySet) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"所有的value:"</span>);</span><br><span class="line">    Collection values = map.values();</span><br><span class="line">    <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"所有的映射关系:"</span>);</span><br><span class="line">    Set entrySet = map.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Object mapping : entrySet) &#123;</span><br><span class="line">        <span class="comment">//System.out.println(entry);</span></span><br><span class="line">        Map.Entry entry = (Map.Entry) mapping;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">"-&gt;"</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-Map的主要实现类：HashMap"><a href="#6-3-Map的主要实现类：HashMap" class="headerlink" title="6.3 Map的主要实现类：HashMap"></a>6.3 Map的主要实现类：HashMap</h3><h4 id="6-3-1-HashMap概述"><a href="#6-3-1-HashMap概述" class="headerlink" title="6.3.1 HashMap概述"></a>6.3.1 HashMap概述</h4><ul><li>HashMap是 Map 接口<code>使用频率最高</code>的实现类。</li><li>HashMap是线程不安全的。允许添加 null 键和 null 值。</li><li>存储数据采用的哈希表结构，底层使用<code>一维数组</code>+<code>单向链表</code>+<code>红黑树</code>进行key-value数据的存储。与HashSet一样，元素的存取顺序不能保证一致。</li><li>HashMap <code>判断两个key相等的标准</code>是：两个 key 的hashCode值相等，通过 equals() 方法返回 true。</li><li>HashMap <code>判断两个value相等的标准</code>是：两个 value 通过 equals() 方法返回 true。</li></ul><h4 id="6-3-2-练习"><a href="#6-3-2-练习" class="headerlink" title="6.3.2 练习"></a>6.3.2 练习</h4><p><strong>练习1：</strong>添加你喜欢的歌手以及你喜欢他唱过的歌曲</p><p>例如：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242030279.png" alt="image-20220914190805362"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingerTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个HashMap用于保存歌手和其歌曲集</span></span><br><span class="line">        HashMap singers = <span class="keyword">new</span> HashMap();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//声明一组key,value</span></span><br><span class="line">        String singer1 = <span class="string">"周杰伦"</span>;</span><br><span class="line">        ArrayList songs1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        songs1.add(<span class="string">"双节棍"</span>);</span><br><span class="line">        songs1.add(<span class="string">"本草纲目"</span>);</span><br><span class="line">        songs1.add(<span class="string">"夜曲"</span>);</span><br><span class="line">        songs1.add(<span class="string">"稻香"</span>);</span><br><span class="line">        <span class="comment">//添加到map中</span></span><br><span class="line">        singers.put(singer1,songs1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//声明一组key,value</span></span><br><span class="line">        String singer2 = <span class="string">"陈奕迅"</span>;</span><br><span class="line">        List songs2 = Arrays.asList(<span class="string">"浮夸"</span>, <span class="string">"十年"</span>, <span class="string">"红玫瑰"</span>, <span class="string">"好久不见"</span>, <span class="string">"孤勇者"</span>);</span><br><span class="line">        <span class="comment">//添加到map中</span></span><br><span class="line">        singers.put(singer2,songs2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历map</span></span><br><span class="line">        Set entrySet = singers.entrySet();</span><br><span class="line">        <span class="keyword">for</span>(Object obj : entrySet)&#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)obj;</span><br><span class="line">            String singer = (String) entry.getKey();</span><br><span class="line">            List songs = (List) entry.getValue();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"歌手："</span> + singer);</span><br><span class="line">            System.out.println(<span class="string">"歌曲有："</span> + songs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式2：改为HashSet实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingerTest2</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Singer singer1 = <span class="keyword">new</span> Singer(<span class="string">"周杰伦"</span>);</span><br><span class="line">Singer singer2 = <span class="keyword">new</span> Singer(<span class="string">"陈奕迅"</span>);</span><br><span class="line"></span><br><span class="line">Song song1 = <span class="keyword">new</span> Song(<span class="string">"双节棍"</span>);</span><br><span class="line">Song song2 = <span class="keyword">new</span> Song(<span class="string">"本草纲目"</span>);</span><br><span class="line">Song song3 = <span class="keyword">new</span> Song(<span class="string">"夜曲"</span>);</span><br><span class="line">Song song4 = <span class="keyword">new</span> Song(<span class="string">"浮夸"</span>);</span><br><span class="line">Song song5 = <span class="keyword">new</span> Song(<span class="string">"十年"</span>);</span><br><span class="line">Song song6 = <span class="keyword">new</span> Song(<span class="string">"孤勇者"</span>);</span><br><span class="line"></span><br><span class="line">HashSet h1 = <span class="keyword">new</span> HashSet();<span class="comment">// 放歌手一的歌曲</span></span><br><span class="line">h1.add(song1);</span><br><span class="line">h1.add(song2);</span><br><span class="line">h1.add(song3);</span><br><span class="line"></span><br><span class="line">HashSet h2 = <span class="keyword">new</span> HashSet();<span class="comment">// 放歌手二的歌曲</span></span><br><span class="line">h2.add(song4);</span><br><span class="line">h2.add(song5);</span><br><span class="line">h2.add(song6);</span><br><span class="line"></span><br><span class="line">HashMap hashMap = <span class="keyword">new</span> HashMap();<span class="comment">// 放歌手和他对应的歌曲</span></span><br><span class="line">hashMap.put(singer1, h1);</span><br><span class="line">hashMap.put(singer2, h2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Object obj : hashMap.keySet()) &#123;</span><br><span class="line">System.out.println(obj + <span class="string">"="</span> + hashMap.get(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//歌曲</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Song</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String songName;<span class="comment">//歌名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Song</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Song</span><span class="params">(String songName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.songName = songName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSongName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> songName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSongName</span><span class="params">(String songName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.songName = songName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"《"</span> + songName + <span class="string">"》"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="keyword">this</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> Song)&#123;</span><br><span class="line">Song song = (Song)o;</span><br><span class="line"><span class="keyword">return</span> songName.compareTo(song.getSongName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//歌手</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singer</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Song song;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Singer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Singer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Song <span class="title">getSong</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> song;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSong</span><span class="params">(Song song)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.song = song;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="keyword">this</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> Singer)&#123;</span><br><span class="line">Singer singer = (Singer)o;</span><br><span class="line"><span class="keyword">return</span> name.compareTo(singer.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2</strong>：二级联动</p><p>将省份和城市的名称保存在集合中，当用户选择省份以后，二级联动，显示对应省份的地级市供用户选择。</p><p>效果演示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242030003.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CityMap</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map model = <span class="keyword">new</span> HashMap();   <span class="comment">//使用HashMap()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">model.put(<span class="string">"北京"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"北京"</span>&#125;);</span><br><span class="line">model.put(<span class="string">"上海"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"上海"</span>&#125;);</span><br><span class="line">model.put(<span class="string">"天津"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"天津"</span>&#125;);</span><br><span class="line">model.put(<span class="string">"重庆"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"重庆"</span>&#125;);</span><br><span class="line">model.put(<span class="string">"黑龙江"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"哈尔滨"</span>,<span class="string">"齐齐哈尔"</span>,<span class="string">"牡丹江"</span>,<span class="string">"大庆"</span>,<span class="string">"伊春"</span>,<span class="string">"双鸭山"</span>,<span class="string">"绥化"</span>&#125;);</span><br><span class="line">model.put(<span class="string">"吉林"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"长春"</span>,<span class="string">"延边"</span>,<span class="string">"吉林"</span>,<span class="string">"白山"</span>,<span class="string">"白城"</span>,<span class="string">"四平"</span>,<span class="string">"松原"</span>&#125;);</span><br><span class="line">model.put(<span class="string">"河北"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"石家庄"</span>,<span class="string">"张家口"</span>,<span class="string">"邯郸"</span>,<span class="string">"邢台"</span>,<span class="string">"唐山"</span>,<span class="string">"保定"</span>,<span class="string">"秦皇岛"</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Set keySet = CityMap.model.keySet();</span><br><span class="line"><span class="keyword">for</span>(Object s : keySet) &#123;</span><br><span class="line">System.out.print(s + <span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"请选择你所在的省份："</span>);</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String province = scan.next();</span><br><span class="line"></span><br><span class="line">String[] citys = (String[])CityMap.model.get(province);</span><br><span class="line"><span class="keyword">for</span>(String city : citys) &#123;</span><br><span class="line">System.out.print(city + <span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"请选择你所在的城市："</span>);</span><br><span class="line">String city = scan.next();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"信息登记完毕"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习3</strong>：WordCount统计</p><p>需求：统计字符串中每个字符出现的次数</p><p>String str = “aaaabbbcccccccccc”;</p><p>提示：</p><p>char[] arr = str.toCharArray();   //将字符串转换成字符数组</p><p>HashMap hm = new HashMap();   //创建双列集合存储键和值，键放字符，值放次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"aaaabbbcccccccccc"</span>;</span><br><span class="line">        <span class="comment">//统计每个字符串出现的次数 最终结果是类似于:a:0 b:1 c:2</span></span><br><span class="line">        <span class="comment">//因为有映射关系 ---&gt; 使用HashMap类</span></span><br><span class="line">        HashMap map=<span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//字符串转为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] arr=str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(Object temp:arr)&#123;</span><br><span class="line">            <span class="comment">//如果不存在就key设置为temp，value设置1</span></span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(temp))&#123;</span><br><span class="line">                map.put(temp,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如何获取oldvalue</span></span><br><span class="line">                <span class="comment">//方法一: 通过map.put返回原有value</span></span><br><span class="line">                <span class="comment">//方法二: 通过get(KEY)获取对应的值  map.put(temp,map.get(temp));</span></span><br><span class="line">                <span class="keyword">int</span> oldvalue= (<span class="keyword">int</span>) map.put(temp,<span class="number">1</span>);   <span class="comment">//只能通过先设置一次获取到原来的value 然后下一次是认真的+1</span></span><br><span class="line">                map.put(temp,oldvalue+<span class="number">1</span>); <span class="comment">//如果存在就value+1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-Map实现类之二：LinkedHashMap"><a href="#6-4-Map实现类之二：LinkedHashMap" class="headerlink" title="6.4 Map实现类之二：LinkedHashMap"></a>6.4 Map实现类之二：LinkedHashMap</h3><ul><li>LinkedHashMap 是 HashMap 的子类</li><li>存储数据采用的哈希表结构+链表结构，在HashMap存储结构的基础上，使用了一对<code>双向链表</code>来<code>记录添加元素的先后顺序</code>，可以保证遍历元素时，与添加的顺序一致。</li><li>通过哈希表结构可以保证键的唯一、不重复，需要键所在类重写hashCode()方法、equals()方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLinkedHashMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap map = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">        map.put(<span class="string">"王五"</span>, <span class="number">13000.0</span>);</span><br><span class="line">        map.put(<span class="string">"张三"</span>, <span class="number">10000.0</span>);</span><br><span class="line">        <span class="comment">//key相同，新的value会覆盖原来的value</span></span><br><span class="line">        <span class="comment">//因为String重写了hashCode和equals方法</span></span><br><span class="line">        map.put(<span class="string">"张三"</span>, <span class="number">12000.0</span>);</span><br><span class="line">        map.put(<span class="string">"李四"</span>, <span class="number">14000.0</span>);</span><br><span class="line">        <span class="comment">//HashMap支持key和value为null值</span></span><br><span class="line">        String name = <span class="keyword">null</span>;</span><br><span class="line">        Double salary = <span class="keyword">null</span>;</span><br><span class="line">        map.put(name, salary);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : entrySet) &#123;</span><br><span class="line">        Map.Entry entry = (Map.Entry)obj;</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-Map实现类之三：TreeMap"><a href="#6-5-Map实现类之三：TreeMap" class="headerlink" title="6.5 Map实现类之三：TreeMap"></a>6.5 Map实现类之三：TreeMap</h3><ul><li>TreeMap存储 key-value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 key-value 对处于<code>有序状态</code>。</li><li>TreeSet底层使用<code>红黑树</code>结构存储数据</li><li>TreeMap 的 Key 的排序：<ul><li><code>自然排序</code>：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li><li><code>定制排序</code>：创建 TreeMap 时，构造器传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</li></ul></li><li>TreeMap判断<code>两个key相等的标准</code>：两个key通过compareTo()方法或者compare()方法返回0。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeMap</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 自然排序举例</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"CC"</span>,<span class="number">45</span>);</span><br><span class="line">        map.put(<span class="string">"MM"</span>,<span class="number">78</span>);</span><br><span class="line">        map.put(<span class="string">"DD"</span>,<span class="number">56</span>);</span><br><span class="line">        map.put(<span class="string">"GG"</span>,<span class="number">89</span>);</span><br><span class="line">        map.put(<span class="string">"JJ"</span>,<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span>(Object entry : entrySet)&#123;</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 定制排序</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//按照User的姓名的从小到大的顺序排列</span></span><br><span class="line"></span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> u1.name.compareTo(u2.name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>),<span class="number">67</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> User(<span class="string">"Rose"</span>,<span class="number">23</span>),<span class="string">"87"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">2</span>),<span class="number">88</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> User(<span class="string">"Eric"</span>,<span class="number">18</span>),<span class="number">45</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> User(<span class="string">"Tommy"</span>,<span class="number">44</span>),<span class="number">77</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> User(<span class="string">"Jim"</span>,<span class="number">23</span>),<span class="number">88</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> User(<span class="string">"Maria"</span>,<span class="number">18</span>),<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span>(Object entry : entrySet)&#123;</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    举例：按照age从小到大的顺序排列，如果age相同，则按照name从大到小的顺序排列</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == o)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line">            <span class="keyword">int</span> value = <span class="keyword">this</span>.age - user.age;</span><br><span class="line">            <span class="keyword">if</span>(value != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-Map实现类之四：Hashtable"><a href="#6-6-Map实现类之四：Hashtable" class="headerlink" title="6.6 Map实现类之四：Hashtable"></a>6.6 Map实现类之四：Hashtable</h3><ul><li>Hashtable是Map接口的<code>古老实现类</code>，JDK1.0就提供了。不同于HashMap，Hashtable是线程安全的。</li><li>Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构（数组+单向链表），查询速度快。</li><li>与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序</li><li>Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。</li><li>与HashMap不同，Hashtable 不允许使用 null 作为 key 或 value。</li></ul><p>面试题：Hashtable和HashMap的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HashMap:底层是一个哈希表（jdk7:数组+链表;jdk8:数组+链表+红黑树）,是一个线程不安全的集合,执行效率高</span><br><span class="line">Hashtable:底层也是一个哈希表（数组+链表）,是一个线程安全的集合,执行效率低</span><br><span class="line"></span><br><span class="line">HashMap集合:可以存储null的键、null的值</span><br><span class="line">Hashtable集合,不能存储null的键、null的值</span><br><span class="line"></span><br><span class="line">Hashtable和Vector集合一样,在jdk1.2版本之后被更先进的集合(HashMap,ArrayList)取代了。所以HashMap是Map的主要实现类，Hashtable是Map的古老实现类。</span><br><span class="line"></span><br><span class="line">Hashtable的子类Properties（配置文件）依然活跃在历史舞台</span><br><span class="line">Properties集合是一个唯一和IO流相结合的集合</span><br></pre></td></tr></table></figure><h3 id="6-7-Map实现类之五：Properties"><a href="#6-7-Map实现类之五：Properties" class="headerlink" title="6.7 Map实现类之五：Properties"></a>6.7 Map实现类之五：Properties</h3><ul><li><p>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</p></li><li><p>由于属性文件里的 key、value 都是字符串类型，所以 Properties 中要求 key 和 value 都是字符串类型</p></li><li><p>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Properties properties = System.getProperties();</span><br><span class="line">    String fileEncoding = properties.getProperty(<span class="string">"file.encoding"</span>);<span class="comment">//当前源文件字符编码</span></span><br><span class="line">    System.out.println(<span class="string">"fileEncoding = "</span> + fileEncoding);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">"user"</span>,<span class="string">"songhk"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    System.out.println(properties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">    pros.load(<span class="keyword">new</span> FileInputStream(<span class="string">"jdbc.properties"</span>));</span><br><span class="line">    String user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Collections工具类"><a href="#7-Collections工具类" class="headerlink" title="7. Collections工具类"></a>7. Collections工具类</h2><p>Arrays是一个操作<strong>数组</strong>的工具类</p><p>Collections 是一个操作 Set、List 和 Map 等<strong>集合</strong>的工具类。</p><h3 id="7-1-常用方法-static方法"><a href="#7-1-常用方法-static方法" class="headerlink" title="7.1 常用方法(static方法 )"></a>7.1 常用方法(static方法 )</h3><p>Collections 中提供了一系列<strong>静态方法</strong>对集合元素进行<strong>排序</strong>、<strong>查询</strong>和<strong>修改</strong>等操作，还提供了对<strong>集合对象设置不可变</strong>、对<strong>集合对象实现同步控制</strong>等方法（均为static方法）：</p><p><strong>- 排序</strong></p><ul><li>reverse(List)：反转 List 中元素的顺序</li><li>shuffle(List)：对 List 集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    ArrayList list&#x3D;new ArrayList();</span><br><span class="line">    list.add(123);</span><br><span class="line">    list.add(12);</span><br><span class="line">    list.add(2);</span><br><span class="line">    list.add(4414);</span><br><span class="line">    System.out.println(&quot;初始的list:&quot;+list); &#x2F;&#x2F;初始的list:[123, 12, 2, 4414]</span><br><span class="line">    Collections.reverse(list);</span><br><span class="line">    System.out.println(&quot;reverse之后:&quot;+list);  &#x2F;&#x2F; 反转顺序 ---- reverse之后:[4414, 2, 12, 123]</span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    System.out.println(&quot;shuffle之后:&quot;+list);  &#x2F;&#x2F;很随机 ---- shuffle之后:[2, 4414, 12, 123]</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    System.out.println(&quot;sort之后:&quot;+list);  &#x2F;&#x2F; 自然顺序(升序) ---- sort之后:[2, 12, 123, 4414]</span><br><span class="line">    Collections.sort(list, new Comparator() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public int compare(Object o1, Object o2) &#123;</span><br><span class="line">            int temp1&#x3D;(int)o1;</span><br><span class="line">            int temp2&#x3D;(int)o2;</span><br><span class="line">            return -(temp1-temp2);  &#x2F;&#x2F;实现倒序</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(&quot;定制排序之后:&quot;+list); &#x2F;&#x2F;定制排序之后:[2, 12, 123, 4414]</span><br><span class="line">    Collections.swap(list,0,2);</span><br><span class="line">    System.out.println(&quot;将0和2位置的元素互换位置:&quot;+list); &#x2F;&#x2F; 将0和2位置的元素互换位置:  ---- swap之后:[12, 123, 4414, 2]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>- 查找</strong></p><ul><li>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)：根据元素的自然顺序，返回给定集合中的最小元素</li><li>Object min(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最小元素</li><li>int binarySearch(List list,T key)在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。</li><li>int binarySearch(List list,T key,Comparator c)在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。</li><li>int frequency(Collection c，Object o)：返回指定集合中指定元素的出现次数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    ArrayList list&#x3D;new ArrayList();</span><br><span class="line">    list.add(123);</span><br><span class="line">    list.add(12);</span><br><span class="line">    list.add(2);</span><br><span class="line">    list.add(4414);</span><br><span class="line">    System.out.println(&quot;初始的list:&quot;+list); &#x2F;&#x2F;初始的list:[123, 12, 2, 4414]</span><br><span class="line">    &#x2F;&#x2F;寻找最大值</span><br><span class="line">    System.out.println(&quot;max(list)得出的最大值:&quot;+Collections.max(list)); &#x2F;&#x2F;max(list)得出的最大值:4414</span><br><span class="line">    System.out.println(&quot;max(list,Comparator)得出的最大值:&quot;+Collections.max(list, new Comparator() &#123;  &#x2F;&#x2F;max(list,Comparator)得出的最大值:4414</span><br><span class="line">        @Override</span><br><span class="line">        public int compare(Object o1, Object o2) &#123;</span><br><span class="line">            int temp1&#x3D;(int)o1;</span><br><span class="line">            int temp2&#x3D;(int)o2;</span><br><span class="line">            return (temp1-temp2);  &#x2F;&#x2F;实现倒序</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    &#x2F;&#x2F;寻找最小值</span><br><span class="line">    System.out.println(&quot;min(list)得出的最小值:&quot;+Collections.min(list)); &#x2F;&#x2F;min(list)得出的最小值:2</span><br><span class="line">    System.out.println(&quot;min(list,Comparator)得出的最小值:&quot;+Collections.min(list, new Comparator() &#123; &#x2F;&#x2F;min(list,Comparator)得出的最小值:2</span><br><span class="line">        @Override</span><br><span class="line">        public int compare(Object o1, Object o2) &#123;</span><br><span class="line">            int temp1&#x3D;(int)o1;</span><br><span class="line">            int temp2&#x3D;(int)o2;</span><br><span class="line">            return (temp1-temp2);  &#x2F;&#x2F;实现倒序</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    &#x2F;&#x2F;查找某个元素的下标</span><br><span class="line">    &#x2F;&#x2F;1.自然排序</span><br><span class="line">    Collections.sort(list);</span><br><span class="line">    System.out.println(&quot;排序之后的list:&quot;+list);  &#x2F;&#x2F; 排序之后的list:[2, 12, 123, 4414]</span><br><span class="line">    &#x2F;&#x2F;查找某个元素的下标</span><br><span class="line">    System.out.println(Collections.binarySearch(list,12));   &#x2F;&#x2F;下标为1</span><br><span class="line">    &#x2F;&#x2F;2.定制排序</span><br><span class="line">    System.out.println(Collections.binarySearch(list,12, new Comparator() &#123;    &#x2F;&#x2F;下标为1</span><br><span class="line">        @Override</span><br><span class="line">        public int compare(Object o1, Object o2) &#123;</span><br><span class="line">            int temp1&#x3D;(int)o1;</span><br><span class="line">            int temp2&#x3D;(int)o2;</span><br><span class="line">            return -(temp1-temp2);  &#x2F;&#x2F;实现倒序</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    &#x2F;&#x2F;查找指定元素的出现次数</span><br><span class="line">    System.out.println(Collections.frequency(list,412)); &#x2F;&#x2F;412元素出现的次数为0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>- 复制、替换</strong></p><ul><li>void copy(List dest,List src)：将src中的内容复制到dest中</li><li>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</li><li>提供了多个unmodifiableXxx()方法，该方法返回指定 Xxx的不可修改的视图。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test3()&#123;</span><br><span class="line">    ArrayList list&#x3D;new ArrayList();</span><br><span class="line">    list.add(123);</span><br><span class="line">    list.add(12);</span><br><span class="line">    list.add(2);</span><br><span class="line">    list.add(4414);</span><br><span class="line">    System.out.println(&quot;初始的list:&quot;+list); &#x2F;&#x2F;初始的list:[123, 12, 2, 4414]</span><br><span class="line">    &#x2F;&#x2F;复制</span><br><span class="line">    ArrayList list1&#x3D;new ArrayList();</span><br><span class="line">    list1.add(&quot;AA&quot;);</span><br><span class="line">    list1.add(&quot;BA&quot;);</span><br><span class="line">    list1.add(&quot;CCC&quot;);</span><br><span class="line">    Collections.copy(list,list1);</span><br><span class="line">    System.out.println(&quot;复制之后的list:&quot;+list); &#x2F;&#x2F;复制之后的list:[AA, BA, CCC, 4414]</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br><span class="line">@Test</span><br><span class="line">public void test4()&#123;</span><br><span class="line">    ArrayList list&#x3D;new ArrayList();</span><br><span class="line">    list.add(123);</span><br><span class="line">    list.add(123);</span><br><span class="line">    list.add(2);</span><br><span class="line">    list.add(4414);</span><br><span class="line">    System.out.println(&quot;初始的list:&quot;+list); &#x2F;&#x2F;初始的list:[123, 123, 2, 4414]</span><br><span class="line">    &#x2F;&#x2F;替换</span><br><span class="line">    Collections.replaceAll(list,123,&quot;CC&quot;); &#x2F;&#x2F;替换之后的list:[CC, CC, 2, 4414]</span><br><span class="line">    System.out.println(&quot;替换之后的list:&quot;+list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>- 添加</strong></p><ul><li>boolean addAll(Collection  c,T… elements)将所有指定元素添加到指定 collection 中。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test5()&#123;</span><br><span class="line">    ArrayList list&#x3D;new ArrayList();</span><br><span class="line">    list.add(123);</span><br><span class="line">    list.add(12);</span><br><span class="line">    list.add(2);</span><br><span class="line">    list.add(4414);</span><br><span class="line">    System.out.println(&quot;初始的list:&quot;+list); &#x2F;&#x2F;初始的list:[123, 12, 2, 4414]</span><br><span class="line">    &#x2F;&#x2F;添加</span><br><span class="line">    Collections.addAll(list,&quot;CC&quot;,&quot;asd&quot;,&quot;ewr&quot;);</span><br><span class="line">    System.out.println(&quot;添加之后的list:&quot;+list); &#x2F;&#x2F;添加之后的list:[123, 12, 2, 4414, CC, asd, ewr]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>- 同步</strong></p><ul><li>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281041831.png" alt="image-20220409003002526"></p><h3 id="7-2-练习"><a href="#7-2-练习" class="headerlink" title="7.2 练习"></a>7.2 练习</h3><p><strong>练习1：</strong></p><p>请从键盘随机输入10个整数保存到List中，并按倒序、从大到小的顺序显示出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">public class CollectionTest1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ArrayList list&#x3D;new ArrayList();</span><br><span class="line">        list.add(12);</span><br><span class="line">        list.add(345);</span><br><span class="line">        list.add(323);</span><br><span class="line">        list.add(1233);</span><br><span class="line">        list.add(3);</span><br><span class="line">        list.add(123);</span><br><span class="line">        list.add(232);</span><br><span class="line">        list.add(122);</span><br><span class="line">        list.add(167);</span><br><span class="line">        list.add(789);</span><br><span class="line">        System.out.println(&quot;初始的list:&quot;+list); &#x2F;&#x2F; 初始的list:[12, 345, 323, 1233, 3, 123, 232, 122, 167, 789]</span><br><span class="line">        &#x2F;&#x2F;排序的话 -- 默认排序(升序不可以) 那就只能实现Comparator接口进行定制排序</span><br><span class="line">        Collections.sort(list, new Comparator&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(Object o1, Object o2) &#123;</span><br><span class="line">                int temp1&#x3D;(int)o1;</span><br><span class="line">                int temp2&#x3D;(int)o2;</span><br><span class="line">                return -(temp1-temp2);  &#x2F;&#x2F;倒序</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(&quot;倒序之后的list:&quot;+list); &#x2F;&#x2F; 倒序之后的list:[1233, 789, 345, 323, 232, 167, 123, 122, 12, 3]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281053007.png" alt="image-20231028105328967"></p><p><strong>练习2：</strong>模拟斗地主洗牌和发牌，牌没有排序</p><p>效果演示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242030648.png" alt="image-20220409011625061"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MapTest;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] num = &#123;<span class="string">"A"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>&#125;;</span><br><span class="line">        String[] color = &#123;<span class="string">"方片"</span>,<span class="string">"梅花"</span>,<span class="string">"红桃"</span>,<span class="string">"黑桃"</span>&#125;;</span><br><span class="line">        ArrayList&lt;String&gt; poker = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//1. 生成54张扑克牌</span></span><br><span class="line">        <span class="keyword">for</span> (String s1 : color) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s2 : num) &#123;</span><br><span class="line">                poker.add(s1.concat(<span class="string">" "</span> + s2));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        poker.add(<span class="string">"小王"</span>);</span><br><span class="line">        poker.add(<span class="string">"大王"</span>);</span><br><span class="line">        <span class="comment">//2.洗牌</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        <span class="comment">//3.发牌</span></span><br><span class="line">        ArrayList tomCards = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ArrayList jerryCards = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ArrayList meCards = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ArrayList lastCards = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">17</span>;i++)&#123;</span><br><span class="line">            tomCards.add(poker.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">18</span>;i&lt;<span class="number">34</span>;i++)&#123;</span><br><span class="line">            jerryCards.add(poker.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">35</span>;i&lt;<span class="number">51</span>;i++)&#123;</span><br><span class="line">            meCards.add(poker.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">51</span>;i&lt;<span class="number">54</span>;i++)&#123;</span><br><span class="line">            lastCards.add(poker.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 看牌</span></span><br><span class="line">        System.out.println(<span class="string">"Tom:\n"</span> + tomCards);</span><br><span class="line">        System.out.println(<span class="string">"Jerry:\n"</span> + jerryCards);</span><br><span class="line">        System.out.println(<span class="string">"me:\n"</span> + meCards);</span><br><span class="line">        System.out.println(<span class="string">"底牌:\n"</span> + lastCards);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310281101500.png" alt="image-20231028110109452"></p><p><strong>练习3：</strong>模拟斗地主洗牌和发牌并对牌进行排序的代码实现。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310242030895.png" alt="image-20220915002714578"></p><p>提示：考查HashMap、TreeSet、ArrayList、Collections</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokerTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] num = &#123;<span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>, <span class="string">"10"</span>, <span class="string">"J"</span>, <span class="string">"Q"</span>, <span class="string">"K"</span>, <span class="string">"A"</span>, <span class="string">"2"</span>&#125;;</span><br><span class="line">        String[] color = &#123;<span class="string">"方片"</span>, <span class="string">"梅花"</span>, <span class="string">"红桃"</span>, <span class="string">"黑桃"</span>&#125;;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap(); <span class="comment">// 存储索引和扑克牌</span></span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList(); <span class="comment">// 存储索引</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>; <span class="comment">// 索引的开始值</span></span><br><span class="line">        <span class="keyword">for</span> (String s1 : num) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s2 : color) &#123;</span><br><span class="line">                map.put(index, s2.concat(s1)); <span class="comment">// 将索引和扑克牌添加到HashMap中</span></span><br><span class="line">                list.add(index); <span class="comment">// 将索引添加到ArrayList集合中</span></span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(index, <span class="string">"小王"</span>);</span><br><span class="line">        list.add(index);</span><br><span class="line">        index++;</span><br><span class="line">        map.put(index, <span class="string">"大王"</span>);</span><br><span class="line">        list.add(index);</span><br><span class="line">        <span class="comment">// 洗牌</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        <span class="comment">// 发牌  ---保证每个人是TreeSet就行</span></span><br><span class="line">        TreeSet Tom = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        TreeSet Jerry = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        TreeSet me = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        TreeSet lastCards = <span class="keyword">new</span> TreeSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= list.size() - <span class="number">3</span>) &#123;</span><br><span class="line">                lastCards.add(list.get(i)); <span class="comment">// 将list集合中的索引添加到TreeSet集合中会自动排序</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                Tom.add(list.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                Jerry.add(list.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                me.add(list.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 看牌</span></span><br><span class="line">        lookPoker(<span class="string">"Tom"</span>, Tom, map);</span><br><span class="line">        lookPoker(<span class="string">"Jerry"</span>, Jerry, map);</span><br><span class="line">        lookPoker(<span class="string">"康师傅"</span>, me, map);</span><br><span class="line">        lookPoker(<span class="string">"底牌"</span>, lastCards, map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookPoker</span><span class="params">(String name, TreeSet ts, HashMap map)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"的牌是:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object index : ts) &#123;</span><br><span class="line">            System.out.print(map.get(index) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第12章-集合框架&quot;&gt;&lt;a href=&quot;#第12章-集合框架&quot; class=&quot;headerlink&quot; title=&quot;第12章_集合框架&quot;&gt;&lt;/a&gt;第12章_集合框架&lt;/h1&gt;&lt;h2 id=&quot;本章专题与脉络&quot;&gt;&lt;a href=&quot;#本章专题与脉络&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>picgo</title>
    <link href="https://larkkkkkkk.github.io/2023/10/21/picgo/"/>
    <id>https://larkkkkkkk.github.io/2023/10/21/picgo/</id>
    <published>2023-10-21T12:52:36.000Z</published>
    <updated>2023-10-22T11:12:32.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入前提"><a href="#引入前提" class="headerlink" title="引入前提"></a>引入前提</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.之前传入博客经常因为图片本地可见，但是上传之后不可见</span><br><span class="line">2.因为路径导致经常更改图片位置</span><br><span class="line">---》 因此网上搜索可以使用picgo软件将图片上传到github仓库实现</span><br></pre></td></tr></table></figure><h1 id="1-配置Github仓库"><a href="#1-配置Github仓库" class="headerlink" title="1.配置Github仓库"></a>1.配置Github仓库</h1><h2 id="1-1-创建仓库"><a href="#1-1-创建仓库" class="headerlink" title="1.1 创建仓库"></a>1.1 创建仓库</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212058070.png" alt="image-20231021205806036"></p><ul><li><strong>其他步骤看参考步骤5里面的就行</strong></li></ul><h1 id="2-配置picgo软件"><a href="#2-配置picgo软件" class="headerlink" title="2.配置picgo软件"></a>2.配置picgo软件</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212101591.png" alt="image-20231021210145557"></p><h1 id="3-配置typora"><a href="#3-配置typora" class="headerlink" title="3.配置typora"></a>3.配置typora</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212100941.png" alt="image-20231021210037894"></p><h1 id="4-如何上传"><a href="#4-如何上传" class="headerlink" title="4.如何上传"></a>4.如何上传</h1><p>直接复制图片只是他会自动上传，然后就可以看到地址直接是github仓库的路径</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212102930.png" alt="image-20231021210202896"></p><h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5.参考链接"></a>5.参考链接</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引入前提&quot;&gt;&lt;a href=&quot;#引入前提&quot; class=&quot;headerlink&quot; title=&quot;引入前提&quot;&gt;&lt;/a&gt;引入前提&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="picture" scheme="https://Larkkkkkkk.github.io/tags/picture/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录</title>
    <link href="https://larkkkkkkk.github.io/2023/10/20/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-JAVA/"/>
    <id>https://larkkkkkkk.github.io/2023/10/20/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-JAVA/</id>
    <published>2023-10-20T06:35:36.000Z</published>
    <updated>2023-10-20T06:35:36.844Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JAVA-常用类和基础API</title>
    <link href="https://larkkkkkkk.github.io/2023/10/20/JAVA-%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/"/>
    <id>https://larkkkkkkk.github.io/2023/10/20/JAVA-%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/</id>
    <published>2023-10-20T06:31:45.000Z</published>
    <updated>2023-10-24T11:25:41.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第11章-常用类和基础API"><a href="#第11章-常用类和基础API" class="headerlink" title="第11章_常用类和基础API"></a>第11章_常用类和基础API</h1><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310221924469.png" alt="第3阶段：Java高级应用-第11章" style="zoom:50%;"><h2 id="1-字符串相关类之不可变字符序列：String"><a href="#1-字符串相关类之不可变字符序列：String" class="headerlink" title="1. 字符串相关类之不可变字符序列：String"></a>1. 字符串相关类之不可变字符序列：String</h2><h3 id="1-1-String的特性"><a href="#1-1-String的特性" class="headerlink" title="1.1 String的特性"></a>1.1 String的特性</h3><ul><li><p><code>java.lang.String</code> 类代表字符串。Java程序中所有的字符串文字（例如<code>&quot;hello&quot;</code> ）都可以看作是实现此类的实例。</p></li><li><p>字符串是常量，用双引号引起来表示。它们的值在创建之后不能更改。</p></li><li><p>字符串String类型本身是final声明的，意味着我们不能继承String。</p></li><li><p>String对象的字符内容是存储在一个字符数组value[]中的。<code>&quot;abc&quot;</code> 等效于 <code>char[] data={&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;}</code>。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310221924899.png" alt="image-20220514184404024" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk8中的String源码：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[]; <span class="comment">//String对象的字符内容是存储在此数组中</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><ul><li><p>private意味着外面无法直接获取字符数组，而且String没有提供value的get和set方法。</p></li><li><p>final意味着字符数组的引用不可改变，而且String也没有提供方法来修改value数组某个元素值</p></li><li><p>因此字符串的字符数组内容也不可变的，即String代表着不可变的字符序列。即，一旦对字符串进行修改，就会产生新对象。</p></li><li><p>JDK9只有，底层使用byte[]数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Stable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//官方说明：... that most String objects contain only Latin-1 characters. Such characters require only one byte of storage, hence half of the space in the internal char arrays of such String objects is going unused.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节：... The new String class will store characters encoded either as ISO-8859-1/Latin-1 (one byte per character), or as UTF-16 (two bytes per character), based upon the contents of the string. The encoding flag will indicate which encoding is used.</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持（toString()方法）。</p></li></ul><h3 id="1-2-String的内存结构"><a href="#1-2-String的内存结构" class="headerlink" title="1.2 String的内存结构"></a>1.2 String的内存结构</h3><h4 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h4><p>因为字符串对象设计为不可变，所以字符串有常量池来保存很多常量对象。</p><p>JDK6中，字符串常量池在方法区。</p><p>JDK7开始，就移到堆空间。</p><p>举例内存结构分配：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310221924399.png" alt="image-20220405160036240"></p><h4 id="1-2-2-练习类型1：拼接"><a href="#1-2-2-练习类型1：拼接" class="headerlink" title="1.2.2 练习类型1：拼接"></a>1.2.2 练习类型1：拼接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">String s2 = <span class="string">"hello"</span>;  <span class="comment">//字符串常量池不允许存放两个相同的字符串常量</span></span><br><span class="line"><span class="comment">//因此s1和s2其实指向是统一位置</span></span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line"><span class="comment">// 内存中只有一个"hello"对象被创建，同时被s1和s2共享。</span></span><br></pre></td></tr></table></figure><p>对应内存结构为：（以下内存结构以<code>JDK6为例</code>绘制）：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310221925656.png" alt="image-20220405152839525" style="zoom:67%;"><p>进一步：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310221925319.png" alt="image-20220405152941599" style="zoom:67%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;新建一个对象，name是自己特有的</span><br><span class="line">Person p1 &#x3D; new Person();</span><br><span class="line">p1.name &#x3D; “Tom&quot;;</span><br><span class="line">&#x2F;&#x2F;新建一个对象 name是自己特有的</span><br><span class="line">Person p2 &#x3D; new Person();</span><br><span class="line">p2.name &#x3D; “Tom&quot;;</span><br><span class="line">System.out.println(p1.name.equals( p2.name)); &#x2F;&#x2F;true</span><br><span class="line">System.out.println(p1.name &#x3D;&#x3D; p2.name); &#x2F;&#x2F;true</span><br><span class="line">System.out.println(p1.name &#x3D;&#x3D; &quot;Tom&quot;); &#x2F;&#x2F;true</span><br><span class="line">p1.name&#x3D;&quot;Jerry&quot;;</span><br><span class="line">System.out.println(p2.name); &#x2F;&#x2F;Tom  因为改变p1不影响p2</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310221926450.png" alt="image-20220405153027693" style="zoom:67%;"><h4 id="1-2-3-练习类型2：new"><a href="#1-2-3-练习类型2：new" class="headerlink" title="1.2.3 练习类型2：new"></a>1.2.3 练习类型2：new</h4><p>String str1 = “abc”; 与 String str2 = new String(“abc”);的区别？</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310221926927.png" alt="image-20220405160149200" style="zoom:67%;"><p>str2 首先指向堆中的一个字符串对象，然后堆中字符串的value数组指向常量池中常量对象的value数组。</p><blockquote><ul><li><p>字符串常量存储在字符串常量池，目的是共享。</p></li><li><p>字符串非常量对象存储在堆中。</p></li></ul></blockquote><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"javaEE"</span>;</span><br><span class="line">String s2 = <span class="string">"javaEE"</span>;</span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"javaEE"</span>);</span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">"javaEE"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//true  s1和s2直接指向同一位置</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false s3相当于创建对象之后再指向</span></span><br><span class="line">System.out.println(s1 == s4);<span class="comment">//false s4相当于创建对象之后再指向</span></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//false s3和s4只想内容一样 但是堆地址不同</span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310221926902.png" alt="image-20220405160321172" style="zoom:67%;"><p>练习：String str2 = new String(“hello”); 在内存中创建了几个对象？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两个</span><br></pre></td></tr></table></figure><h4 id="1-2-4-练习类型3：intern"><a href="#1-2-4-练习类型3：intern" class="headerlink" title="1.2.4 练习类型3：intern()"></a>1.2.4 练习类型3：intern()</h4><ul><li><strong>String s1 = “a”;</strong> </li></ul><p>说明：在字符串常量池中创建了一个字面量为”a”的字符串。</p><ul><li><strong>s1 = s1 + “b”;</strong> </li></ul><p>说明：实际上原来的“a”字符串对象已经丢弃了，现在在堆空间中产生了一个字符串s1+”b”（也就是”ab”)。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能。</p><ul><li><strong>String s2 = “ab”;</strong></li></ul><p>说明：直接在字符串常量池中创建一个字面量为”ab”的字符串。</p><ul><li><strong>String s3 = “a” + “b”;</strong></li></ul><p>说明：s3指向字符串常量池中已经创建的”ab”的字符串。</p><ul><li><strong>String s4 = s1.intern();</strong></li></ul><p>说明：堆空间的s1对象在调用intern()之后，会将常量池中已经存在的”ab”字符串赋值给s4。</p><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">String s2 = <span class="string">"world"</span>;</span><br><span class="line">String s3 = <span class="string">"hello"</span> + <span class="string">"world"</span>;</span><br><span class="line">String s4 = s1 + <span class="string">"world"</span>;</span><br><span class="line">String s5 = s1 + s2;</span><br><span class="line">String s6 = (s1 + s2).intern();</span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s5); <span class="comment">//false</span></span><br><span class="line">System.out.println(s4 == s5); <span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s6); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>结论：</strong></p><p>（1）常量+常量：结果是常量池。且常量池中不会存在相同内容的常量。</p><p>（2）常量与变量 或 变量与变量：结果在堆中</p><p>（3）拼接后调用intern方法：返回值在常量池中</p></blockquote><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">String s2 = <span class="string">"world"</span>;</span><br><span class="line">String s3 = <span class="string">"helloworld"</span>;</span><br><span class="line"></span><br><span class="line">String s4 = s1 + <span class="string">"world"</span>;<span class="comment">//s4字符串内容也helloworld，s1是变量，"world"常量，变量 + 常量的结果在堆中</span></span><br><span class="line">String s5 = s1 + s2;<span class="comment">//s5字符串内容也helloworld，s1和s2都是变量，变量 + 变量的结果在堆中</span></span><br><span class="line">String s6 = <span class="string">"hello"</span> + <span class="string">"world"</span>;<span class="comment">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span></span><br><span class="line">System.out.println(s3 == s6);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s6);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">final</span> String s1 = <span class="string">"hello"</span>;  <span class="comment">//加了final 就成为常量+常量情况</span></span><br><span class="line"><span class="keyword">final</span> String s2 = <span class="string">"world"</span>; <span class="comment">//加了final 就成为常量+常量情况</span></span><br><span class="line">String s3 = <span class="string">"helloworld"</span>;</span><br><span class="line"></span><br><span class="line">String s4 = s1 + <span class="string">"world"</span>;<span class="comment">//s4字符串内容也helloworld，s1是常量，"world"常量，常量+常量结果在常量池中</span></span><br><span class="line">String s5 = s1 + s2;<span class="comment">//s5字符串内容也helloworld，s1和s2都是常量，常量+ 常量 结果在常量池中</span></span><br><span class="line">String s6 = <span class="string">"hello"</span> + <span class="string">"world"</span>;<span class="comment">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s5);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s6);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">String s2 = <span class="string">"world"</span>;</span><br><span class="line">String s3 = <span class="string">"helloworld"</span>;</span><br><span class="line"></span><br><span class="line">String s4 = (s1 + <span class="string">"world"</span>).intern(); <span class="comment">//把拼接的结果放到常量池中</span></span><br><span class="line">String s5 = (s1 + s2).intern();  <span class="comment">//把拼接的结果放到常量池中</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s5);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：下列程序运行的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line">String str2 = <span class="string">"world"</span>;</span><br><span class="line">String str3 =<span class="string">"helloworld"</span>;</span><br><span class="line"></span><br><span class="line">String str4 = <span class="string">"hello"</span>.concat(<span class="string">"world"</span>);</span><br><span class="line">String str5 = <span class="string">"hello"</span>+<span class="string">"world"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>concat方法拼接，哪怕是两个常量对象拼接，结果也是在堆。</p></blockquote><p>练习：下列程序运行的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">"good"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] ch = &#123; <span class="string">'t'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'t'</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span> ch[])</span> </span>&#123;</span><br><span class="line">        str = <span class="string">"test ok"</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">'b'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringTest ex = <span class="keyword">new</span> StringTest();</span><br><span class="line">        ex.change(ex.str, ex.ch);</span><br><span class="line">        System.out.print(ex.str + <span class="string">" and "</span>);<span class="comment">//</span></span><br><span class="line">        System.out.println(ex.ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-String的常用API-1"><a href="#1-3-String的常用API-1" class="headerlink" title="1.3 String的常用API-1"></a>1.3 String的常用API-1</h3><h4 id="1-3-1-构造器"><a href="#1-3-1-构造器" class="headerlink" title="1.3.1 构造器"></a>1.3.1 构造器</h4><ul><li><code>public String()</code> ：初始化新创建的 String对象，以使其表示空字符序列。</li><li><code>publc String(String original)</code>： 初始化一个新创建的 <code>String</code> 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。</li><li><code>public String(char[] value)</code> ：通过当前参数中的字符数组来构造新的String。</li><li><code>public String(char[] value,int offset, int count)</code> ：通过字符数组的一部分来构造新的String。</li><li><code>public String(byte[] bytes)</code> ：通过使用平台的<strong>默认字符集</strong>解码当前参数中的字节数组来构造新的String。</li><li><code>public String(byte[] bytes,String charsetName)</code> ：通过使用指定的字符集解码当前参数中的字节数组来构造新的String。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字面量定义方式：字符串常量对象</span></span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器定义方式：无参构造</span></span><br><span class="line">String str1 = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器定义方式：创建"hello"字符串常量的副本</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器定义方式：通过字符数组构造</span></span><br><span class="line"><span class="keyword">char</span> chars[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;;     </span><br><span class="line">String str3 = <span class="keyword">new</span> String(chars);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(chars,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器定义方式：通过字节数组构造</span></span><br><span class="line"><span class="keyword">byte</span> bytes[] = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span> &#125;;     </span><br><span class="line">String str5 = <span class="keyword">new</span> String(bytes);</span><br><span class="line">String str6 = <span class="keyword">new</span> String(bytes,<span class="string">"GBK"</span>);  <span class="comment">//指定默认字符集类型</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] data = &#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">'j'</span>,<span class="string">'a'</span>,<span class="string">'v'</span>,<span class="string">'a'</span>&#125;;</span><br><span class="line">String s1 = String.copyValueOf(data);</span><br><span class="line">String s2 = String.copyValueOf(data,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">123456</span>;</span><br><span class="line">String s3 = String.valueOf(num);</span><br><span class="line"></span><br><span class="line">    System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line">System.out.println(s3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-String与其他结构间的转换"><a href="#1-3-2-String与其他结构间的转换" class="headerlink" title="1.3.2 String与其他结构间的转换"></a>1.3.2 String与其他结构间的转换</h4><p><strong>字符串 –&gt; 基本数据类型、包装类：</strong></p><ul><li>Integer包装类的public static int parseInt(String s)：可以将由“数字”字符组成的字符串转换为整型。</li><li>类似地，使用java.lang包中的Byte、Short、Long、Float、Double类调相应的类方法可以将由“数字”字符组成的字符串，转化为相应的基本数据类型。</li></ul><p><strong>基本数据类型、包装类 –&gt; 字符串：</strong></p><ul><li><p>调用String类的public String valueOf(int n)可将int型转换为字符串</p></li><li><p>相应的valueOf(byte b)、valueOf(long l)、valueOf(float f)、valueOf(double d)、valueOf(boolean b)可由参数的相应类型到字符串的转换。</p><p><strong>字符数组 –&gt;  字符串：</strong></p></li><li><p>String 类的构造器：String(char[]) 和 String(char[]，int offset，int length) 分别用字符数组中的全部字符和部分字符创建字符串对象。 </p><p><strong>字符串 –&gt;  字符数组：</strong></p></li><li><p>public char[] toCharArray()：将字符串中的全部字符存放在一个字符数组中的方法。</p></li><li><p>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)：提供了将指定索引范围内的字符串存放到数组中的方法。</p></li></ul><p><strong>字符串 –&gt; 字节数组：（编码）</strong></p><ul><li><p>public byte[] getBytes() ：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</p></li><li><p>public byte[] getBytes(String charsetName) ：使用指定的字符集将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</p><p><strong>字节数组 –&gt; 字符串：（解码）</strong></p></li><li><p>String(byte[])：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。</p></li><li><p>String(byte[]，int offset，int length) ：用指定的字节数组的一部分，即从数组起始位置offset开始取length个字节构造一个字符串对象。</p></li><li><p>String(byte[], String charsetName ) 或 new String(byte[], int, int,String charsetName )：解码，按照指定的编码方式进行解码。</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String str = <span class="string">"中国"</span>;</span><br><span class="line">    System.out.println(str.getBytes(<span class="string">"ISO8859-1"</span>).length);<span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// ISO8859-1把所有的字符都当做一个byte处理，处理不了多个字节</span></span><br><span class="line">    System.out.println(str.getBytes(<span class="string">"GBK"</span>).length);<span class="comment">// 4 每一个中文都是对应2个字节</span></span><br><span class="line">    System.out.println(str.getBytes(<span class="string">"UTF-8"</span>).length);<span class="comment">// 6 常规的中文都是3个字节</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 不乱码：（1）保证编码与解码的字符集名称一样（2）不缺字节</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(str.getBytes(<span class="string">"ISO8859-1"</span>), <span class="string">"ISO8859-1"</span>));<span class="comment">// 乱码</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(str.getBytes(<span class="string">"GBK"</span>), <span class="string">"GBK"</span>));<span class="comment">// 中国</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(str.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"UTF-8"</span>));<span class="comment">// 中国</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-String的常用API-2"><a href="#1-4-String的常用API-2" class="headerlink" title="1.4 String的常用API-2"></a>1.4 String的常用API-2</h3><p><code>String</code> 类包括的方法可用于检查序列的单个字符、比较字符串、搜索字符串、提取子字符串、创建字符串副本并将所有字符全部转换为大写或小写。 </p><h4 id="1-4-1-系列1：常用方法"><a href="#1-4-1-系列1：常用方法" class="headerlink" title="1.4.1 系列1：常用方法"></a>1.4.1 系列1：常用方法</h4><p>（1）boolean <strong>isEmpty()</strong>：字符串是否为空<br>（2）int <strong>length()</strong>：返回字符串的长度<br>（3）String <strong>concat</strong>(xx)：拼接<br>（4）boolean <strong>equals</strong>(Object obj)：比较字符串是否相等，区分大小写<br>（5）boolean <strong>equalsIgnoreCase</strong>(Object obj)：比较字符串是否相等，不区分大小写<br>（6）int <strong>compareTo</strong>(String other)：比较字符串大小，区分大小写，按照Unicode编码值比较大小<br>（7）int <strong>compareToIgnoreCase</strong>(String other)：比较字符串大小，不区分大小写<br>（8）String <strong>toLowerCase</strong>()：将字符串中大写字母转为小写<br>（9）String <strong>toUpperCase</strong>()：将字符串中小写字母转为大写<br>（10）String <strong>trim</strong>()：去掉字符串前后空白符<br>（11）public String <strong>intern</strong>()：结果在常量池中共享</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"abcdef"</span>;</span><br><span class="line">        String str1=<span class="string">"ABCDEF"</span>;</span><br><span class="line">        String str11=<span class="string">"abCdef"</span>;</span><br><span class="line">        String str111=<span class="string">"  afs asd "</span>;</span><br><span class="line">        <span class="comment">//1.判断字符串是否为空 --isEmpty()</span></span><br><span class="line">        System.out.println(str.isEmpty());  <span class="comment">//false</span></span><br><span class="line">        <span class="comment">//2.返回字符串长度 --length()</span></span><br><span class="line">        System.out.println(str.length());  <span class="comment">//6</span></span><br><span class="line">        <span class="comment">//3.拼接两个字符串 返回拼接的字符串 --concat(XX)</span></span><br><span class="line">        String str2=<span class="string">"中国"</span>;</span><br><span class="line">        System.out.println(str.concat(str2)); <span class="comment">//abcdef中国</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.比较字符串是否相等【区分大小写】</span></span><br><span class="line">        System.out.println(str.equals(str1)); <span class="comment">//false</span></span><br><span class="line">        <span class="comment">//5.比较字符串是否相等【不区分大小写】</span></span><br><span class="line">        System.out.println(str.equalsIgnoreCase(str1)); <span class="comment">//true 不区分大小写就是一个字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.比较字符串大小【区分大小写】</span></span><br><span class="line">        System.out.println(str.compareTo(str11));  <span class="comment">//c和C差32 c比C大32</span></span><br><span class="line">        <span class="comment">//7.比较字符串大小【不区分大小写】</span></span><br><span class="line">        System.out.println(str.compareToIgnoreCase(str11)); <span class="comment">//0  不区分大小写就是一个字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.将字符串的大写字母转为小写</span></span><br><span class="line">        System.out.println(str1.toLowerCase()); <span class="comment">// ABCDEF --&gt; abcdef</span></span><br><span class="line">        <span class="comment">//9.将字符串的小写字母转为大写</span></span><br><span class="line">        System.out.println(str.toUpperCase());  <span class="comment">// abcdef --&gt; ABCDEF</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//10.去掉字符串前后空白符</span></span><br><span class="line">        System.out.println(str111.trim()); <span class="comment">//afs asd</span></span><br><span class="line">        <span class="comment">//11.结果在常量池中共享</span></span><br><span class="line">        System.out.println(str.concat(str1));<span class="comment">//abcdefABCDEF 存储在字符串常量池</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-系列2：查找"><a href="#1-4-2-系列2：查找" class="headerlink" title="1.4.2 系列2：查找"></a>1.4.2 系列2：查找</h4><p>（11）boolean <strong>contains(xx)</strong>：是否包含xx<br>（12）int <strong>indexOf</strong>(xx)：从前往后找当前字符串中xx，即如果有返回第一次出现的下标，要是没有返回-1<br>（13）int <strong>indexOf(</strong>String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<br>（14）int <strong>lastIndexOf</strong>(xx)：从后往前找当前字符串中xx，即如果有返回最后一次出现的下标，要是没有返回-1<br>（15）int <strong>lastIndexOf</strong>(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现的索引，从指定的索引开始反向搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"afasfawfqrasf"</span>;</span><br><span class="line">        String str1=<span class="string">"fqr"</span>; <span class="comment">//包含的</span></span><br><span class="line">        String str11=<span class="string">"asf"</span>; <span class="comment">//包含的</span></span><br><span class="line">        String str2=<span class="string">"fqa"</span>; <span class="comment">//不包含的</span></span><br><span class="line">        <span class="comment">//11.是否包含xx</span></span><br><span class="line">        System.out.println(str.contains(str1));  <span class="comment">//包含了str1 true</span></span><br><span class="line">        System.out.println(str.contains(<span class="string">"aaa"</span>)); <span class="comment">//不包含aaa false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从前往后</span></span><br><span class="line">        <span class="comment">//12.查找xx在此字符串中第一次出现的索引【可以从指定索引开始】</span></span><br><span class="line">        System.out.println(str.indexOf(str11)); <span class="comment">//找到了 2 [第一次出现]</span></span><br><span class="line">        <span class="comment">//13.查找xx在此字符串中第一次出现的索引【从指定索引开始】</span></span><br><span class="line">        System.out.println(str.indexOf(str11,<span class="number">8</span>));  <span class="comment">//找到了 10 [第一次出现]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从后往前</span></span><br><span class="line">        <span class="comment">//14.查找xx在此字符串中最后一次出现的索引</span></span><br><span class="line">        System.out.println(str.lastIndexOf(str11)); <span class="comment">//找到了 10  [从后往前的最后一次 == 第一次出现]</span></span><br><span class="line">        <span class="comment">//15.查找xx在此字符串中最后一次出现的下标【从指定索引反向搜索】</span></span><br><span class="line">        System.out.println(str.lastIndexOf(str11,<span class="number">9</span>)); <span class="comment">//找到了 2 [从后往前的最后一次 == 第一次出现]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-3-系列3：字符串截取"><a href="#1-4-3-系列3：字符串截取" class="headerlink" title="1.4.3 系列3：字符串截取"></a>1.4.3 系列3：字符串截取</h4><p>（16）String <strong>substring</strong>(int beginIndex) ：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。<br>（17）String <strong>substring</strong>(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"asdasfdewrthfdg中国asda北京"</span>;</span><br><span class="line">        <span class="comment">//16.截取从（beginIndex-字符串结尾）的部分</span></span><br><span class="line">        System.out.println(str.substring(<span class="number">5</span>)); <span class="comment">//fdewrthfdg中国asda北京</span></span><br><span class="line">        <span class="comment">//17.截取从（beginIndex-endIndex）部分</span></span><br><span class="line">        System.out.println(str.substring(<span class="number">5</span>,<span class="number">16</span>)); <span class="comment">//fdewrthfdg中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-4-系列4：和字符-字符数组相关"><a href="#1-4-4-系列4：和字符-字符数组相关" class="headerlink" title="1.4.4 系列4：和字符/字符数组相关"></a>1.4.4 系列4：和字符/字符数组相关</h4><p>（18）char <strong>charAt</strong>(index)：返回[index]位置的字符<br>（19）char[] <strong>toCharArray</strong>()： 将此字符串转换为一个新的字符数组返回<br>（20）static String <strong>valueOf</strong>(char[] data)  ：返回指定数组中表示该字符序列的 String<br>（21）static String <strong>valueOf</strong>(char[] data, int offset, int count) ： 返回指定数组中表示该字符序列的 String<br>（22）static String <strong>copyValueOf</strong>(char[] data)： 返回指定数组中表示该字符序列的 String<br>（23）static String <strong>copyValueOf</strong>(char[] data, int offset, int count)：返回指定数组中表示该字符序列的 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"asfegewgsx北京中萨芬sasdafe"</span>;</span><br><span class="line">        <span class="comment">//18.返回指定index位置的字符</span></span><br><span class="line">        System.out.println(str.charAt(<span class="number">11</span>)); <span class="comment">//京</span></span><br><span class="line">        <span class="comment">//19.字符串 --&gt; char[]</span></span><br><span class="line">        <span class="keyword">char</span>[] arr=str.toCharArray();  <span class="comment">//转为一个char数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>); <span class="comment">//a s f e g e w g s x 北 京 中 萨 芬 s a s d a f e</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下四个为静态方法  使用String类调用   --都是将字符数组/字符数组的一部分转为字符串</span></span><br><span class="line">        <span class="comment">//20.char[] --&gt; 字符串   [取所有字符转为字符串]</span></span><br><span class="line">        System.out.println(String.valueOf(arr));  <span class="comment">//asfegewgsx北京中萨芬sasdafe</span></span><br><span class="line">        <span class="comment">//21.char[] --&gt; 字符串   [取指定范围的字符转为字符串]</span></span><br><span class="line">        System.out.println(String.valueOf(arr,<span class="number">2</span>,<span class="number">15</span>)); <span class="comment">//fegewgsx北京中萨芬sa</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//22.char[] --&gt; 字符串</span></span><br><span class="line">        System.out.println(String.copyValueOf(arr));  <span class="comment">//asfegewgsx北京中萨芬sasdafe</span></span><br><span class="line">        <span class="comment">//23.char[] --&gt; 字符串</span></span><br><span class="line">        System.out.println(String.copyValueOf(arr,<span class="number">2</span>,<span class="number">15</span>)); <span class="comment">//fegewgsx北京中萨芬sa</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-5-系列5：开头与结尾"><a href="#1-4-5-系列5：开头与结尾" class="headerlink" title="1.4.5 系列5：开头与结尾"></a>1.4.5 系列5：开头与结尾</h4><p>（24）boolean <strong>startsWith</strong>(xx)：测试此字符串是否以指定的前缀开始<br>（25）boolean <strong>startsWith</strong>(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始<br>（26）boolean <strong>endsWith</strong>(xx)：测试此字符串是否以指定的后缀结束 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"1231sdfsdt34t中国按时发放qrqasd"</span>;</span><br><span class="line">        <span class="comment">//24.测试此字符串是否以指定前缀开始</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"123"</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"124"</span>)); <span class="comment">//false</span></span><br><span class="line">        <span class="comment">//25.测试此字符串是否以【指定下标开始的】前缀开始</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"123"</span>,<span class="number">1</span>));  <span class="comment">//false</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"中国"</span>,<span class="number">13</span>)); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//26.测试此字符串是否以指定的后缀结束</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"asd"</span>)); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-6-系列6：替换"><a href="#1-4-6-系列6：替换" class="headerlink" title="1.4.6 系列6：替换"></a>1.4.6 系列6：替换</h4><p>（27）String replace(char oldChar, char newChar)：通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 不支持正则。<br>（28）String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。<br>（29）String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。<br>（30）String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"asfdewwegsdn 中国阿三大王负数saqwerqfsddds"</span>;</span><br><span class="line">        <span class="comment">//不可以使用正则表达式!!!!!!!!</span></span><br><span class="line">            <span class="comment">//替换字符</span></span><br><span class="line">            <span class="comment">//27.将字符串中所有d字符用*字符替换</span></span><br><span class="line">        System.out.println(str.replace(<span class="string">'d'</span>,<span class="string">'*'</span>));  <span class="comment">//asf*ewwegs*n 中国阿三大王负数saqwerqfs***s</span></span><br><span class="line">            <span class="comment">//替换一部分字符串</span></span><br><span class="line">            <span class="comment">//28.将字符串中所有的ddd子字符串用哈哈哈替换</span></span><br><span class="line">        System.out.println(str.replace(<span class="string">"ddd"</span>,<span class="string">"哈哈哈"</span>));  <span class="comment">//asfdewwegsdn 中国阿三大王负数saqwerqfs哈哈哈s</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以使用正则表达式!!!!!!!!!!</span></span><br><span class="line">            <span class="comment">//29.字符串每一位都按照正则表达式匹配一下，不符合的用*替换掉</span></span><br><span class="line">        System.out.println(str.replaceAll(<span class="string">"[^a-zA-Z]"</span>,<span class="string">"*"</span>));  <span class="comment">//asfdewwegsdn*********saqwerqfsddds</span></span><br><span class="line">            <span class="comment">//30.字符串每一位都按照正则表达式匹配一下，只是把不符合的第一位用%替换</span></span><br><span class="line">        System.out.println(str.replaceFirst(<span class="string">"[^a-zA-Z]"</span>,<span class="string">"%"</span>));  <span class="comment">//asfdewwegsdn%中国阿三大王负数saqwerqfsddds</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-常见算法题目"><a href="#1-5-常见算法题目" class="headerlink" title="1.5 常见算法题目"></a>1.5 常见算法题目</h3><p><strong>题目1：</strong>模拟一个trim方法，去除字符串两端的空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"   asdasrqwe 中国1234019*（*）（8  "</span>;</span><br><span class="line">        System.out.println(<span class="string">"原样为:"</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法一：使用trim()</span></span><br><span class="line">        System.out.println(<span class="string">"方法一之后:"</span>);</span><br><span class="line">        System.out.println(str.trim());</span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//方法二:找到开头和结尾不是空格的位置，然后使用subString()截取字符串</span></span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end=str.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//找到首部第一个不为空格的下标</span></span><br><span class="line">        <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(start)==<span class="string">' '</span>)&#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//找到了就break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到尾部第一个不为空格的下标</span></span><br><span class="line">        <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(end)==<span class="string">' '</span>)&#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//找到了就break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"方法二之后:"</span>);</span><br><span class="line">        System.out.println(str.substring(start,end+<span class="number">1</span>));  <span class="comment">//截取[start，end+1]部分的字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">原样为:</span><br><span class="line">   asdasrqwe 中国<span class="number">1234019</span>*（*）（<span class="number">8</span>  </span><br><span class="line">------------------</span><br><span class="line">方法一之后:</span><br><span class="line">asdasrqwe 中国<span class="number">1234019</span>*（*）（<span class="number">8</span></span><br><span class="line">------------------</span><br><span class="line">方法二之后:</span><br><span class="line">asdasrqwe 中国<span class="number">1234019</span>*（*）（<span class="number">8</span></span><br></pre></td></tr></table></figure><p><strong>题目2：</strong>将一个字符串进行反转。将字符串中指定部分进行反转。比如“ab<code>cdef</code>g”反转为”ab<code>fedc</code>g”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">"abcdefg"</span>;</span><br><span class="line">        StringMethod6 m6=<span class="keyword">new</span> StringMethod6();</span><br><span class="line">        System.out.println(<span class="string">"原始字符串为:"</span>+str);</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line">        <span class="comment">//反转整个字符串</span></span><br><span class="line">        System.out.println(<span class="string">"反转整个字符串:"</span>);</span><br><span class="line">        System.out.println(m6.reverseAll(str));</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line">        <span class="comment">//反转字符串中指定部分</span></span><br><span class="line">        System.out.println(<span class="string">"反转字符串中指定部分:"</span>);</span><br><span class="line">        System.out.println(m6.reversePart(str,<span class="number">2</span>,<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转整个字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseAll</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        String str1=<span class="string">""</span>;</span><br><span class="line">        <span class="comment">//字符串转为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] arr=str.toCharArray();</span><br><span class="line">        <span class="comment">//设置首部和尾部以及中间位置</span></span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//替换</span></span><br><span class="line">            <span class="keyword">char</span> temp=<span class="string">' '</span>;</span><br><span class="line">            temp=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=temp;</span><br><span class="line">            <span class="comment">//前后指针更新</span></span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(arr);  <span class="comment">//char[]数组转为String字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转字符串中指定部分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reversePart</span><span class="params">(String str,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="comment">//截取出来要反转的部分</span></span><br><span class="line">        String str1=str.substring(start,end+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//反转之后的结果 </span></span><br><span class="line">        String str2=reverseAll(str1); <span class="comment">//调用反转字符串的方法</span></span><br><span class="line">        <span class="comment">//添加不用反转的部分</span></span><br><span class="line">        String str3=str.substring(<span class="number">0</span>,start)+str2+str.substring(end+<span class="number">1</span>,str.length());  <span class="comment">//拼接一下</span></span><br><span class="line">        <span class="keyword">return</span> str3;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">原始字符串为:abcdefg</span><br><span class="line">-------------------------------</span><br><span class="line">反转整个字符串:</span><br><span class="line">gfedcba</span><br><span class="line">-------------------------------</span><br><span class="line">反转字符串中指定部分:</span><br><span class="line">abfedcg</span><br></pre></td></tr></table></figure><p><strong>题目3：</strong>获取一个字符串在另一个字符串中出现的次数。<br>              比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"cdabkkcadkabkebfkabkskab"</span>;</span><br><span class="line">        String str2 = <span class="string">"ab"</span>;</span><br><span class="line">        System.out.println(<span class="string">"出现的次数是:"</span>+getCount(str1, str2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键点就是根据indexOf(String s,int index)方法找到第一次出现的位置 这样方便index进行更替!!!!</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取出现次数</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//下标</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找到一次就把判断的范围缩小一点</span></span><br><span class="line">        <span class="comment">//str1.indexOf(str2,index) 返回str1从(index,str1.length())范围内第一次出现str2的下标</span></span><br><span class="line">        <span class="keyword">while</span>((index=str1.indexOf(str2,index))!=-<span class="number">1</span>)&#123;  <span class="comment">//返回str2第一次出现的位置</span></span><br><span class="line">            index+=str2.length(); <span class="comment">//判断范围缩小 Index下标往后挪动str2的长度这么多</span></span><br><span class="line">            System.out.println(<span class="string">"下一轮的寻找范围从下标"</span>+index+<span class="string">"开始判断"</span>);</span><br><span class="line">            num++; <span class="comment">//while成功一次说明范围内还有 也就是这次while已经算一次</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">下一轮的寻找范围从下标<span class="number">4</span>开始判断b</span><br><span class="line">下一轮的寻找范围从下标<span class="number">12</span>开始判断b</span><br><span class="line">下一轮的寻找范围从下标<span class="number">19</span>开始判断b</span><br><span class="line">下一轮的寻找范围从下标<span class="number">24</span>开始判断b</span><br><span class="line">出现的次数是:<span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>题目4：</strong>获取两个字符串中最大相同子串。比如：<br>              str1 = “abcwerthelloyuiodef“;str2 = “cvhellobnm”<br>              <strong>提示：将短的那个串进行长度依次递减的子串与较长的串比较。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第4题</span></span><br><span class="line"><span class="comment">// 如果只存在一个最大长度的相同子串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMaxSameSubString</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (str1 != <span class="keyword">null</span> &amp;&amp; str2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">String maxStr = (str1.length() &gt; str2.length()) ? str1 : str2;</span><br><span class="line">String minStr = (str1.length() &gt; str2.length()) ? str2 : str1;</span><br><span class="line"><span class="keyword">int</span> len = minStr.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;<span class="comment">// 0 1 2 3 4 此层循环决定要去几个字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y = len - i; y &lt;= len; x++, y++) &#123;</span><br><span class="line"><span class="keyword">if</span> (maxStr.contains(minStr.substring(x, y))) &#123;  <span class="comment">//看看str长是否有str短</span></span><br><span class="line"><span class="keyword">return</span> minStr.substring(x, y);  <span class="comment">//如果有的话就返回str短的具体长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在多个长度相同的最大相同子串</span></span><br><span class="line"><span class="comment">// 此时先返回String[]，后面可以用集合中的ArrayList替换，较方便</span></span><br><span class="line"><span class="keyword">public</span> String[] getMaxSameSubString1(String str1, String str2) &#123;</span><br><span class="line"><span class="keyword">if</span> (str1 != <span class="keyword">null</span> &amp;&amp; str2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">StringBuffer sBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">String maxString = (str1.length() &gt; str2.length()) ? str1 : str2;</span><br><span class="line">String minString = (str1.length() &gt; str2.length()) ? str2 : str1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = minString.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y = len - i; y &lt;= len; x++, y++) &#123;</span><br><span class="line">String subString = minString.substring(x, y);</span><br><span class="line"><span class="keyword">if</span> (maxString.contains(subString)) &#123;</span><br><span class="line">sBuffer.append(subString + <span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sBuffer);</span><br><span class="line"><span class="keyword">if</span> (sBuffer.length() != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">String[] split = sBuffer.toString().replaceAll(<span class="string">",$"</span>, <span class="string">""</span>).split(<span class="string">"\\,"</span>);</span><br><span class="line"><span class="keyword">return</span> split;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果存在多个长度相同的最大相同子串：使用ArrayList</span></span><br><span class="line"><span class="comment">//public List&lt;String&gt; getMaxSameSubString1(String str1, String str2) &#123;</span></span><br><span class="line"><span class="comment">//if (str1 != null &amp;&amp; str2 != null) &#123;</span></span><br><span class="line"><span class="comment">//List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment">//String maxString = (str1.length() &gt; str2.length()) ? str1 : str2;</span></span><br><span class="line"><span class="comment">//String minString = (str1.length() &gt; str2.length()) ? str2 : str1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int len = minString.length();</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="comment">//for (int x = 0, y = len - i; y &lt;= len; x++, y++) &#123;</span></span><br><span class="line"><span class="comment">//String subString = minString.substring(x, y);</span></span><br><span class="line"><span class="comment">//if (maxString.contains(subString)) &#123;</span></span><br><span class="line"><span class="comment">//list.add(subString);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (list.size() != 0) &#123;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return list;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return null;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetMaxSameSubString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String str1 = <span class="string">"abcwerthelloyuiodef"</span>;</span><br><span class="line">String str2 = <span class="string">"cvhellobnmiodef"</span>;</span><br><span class="line">String[] strs = getMaxSameSubString1(str1, str2);</span><br><span class="line">System.out.println(Arrays.toString(strs));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>题目5：</strong>对字符串中字符进行自然顺序排序。<br>提示：<br>1）字符串变成字符数组。   —使用toCharArray()方法<br>2）对数组排序，选择，冒泡，Arrays.sort();  —使用Arrays.sort()方法<br>3）将排序后的数组变成字符串。 —使用new String()构造器方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethod6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"cdabkkcadkabkebfkabkskab"</span>;</span><br><span class="line">        System.out.println(<span class="string">"排序前:"</span>+str1);</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//1.字符串转为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] arr=str1.toCharArray();</span><br><span class="line">        System.out.println(<span class="string">"转为char数组:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//2.进行排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">"排序后:"</span>+<span class="keyword">new</span> String(arr));</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//3.转回字符串</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(arr));</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-字符串相关类之可变字符序列：StringBuffer、StringBuilder"><a href="#2-字符串相关类之可变字符序列：StringBuffer、StringBuilder" class="headerlink" title="2. 字符串相关类之可变字符序列：StringBuffer、StringBuilder"></a>2. 字符串相关类之可变字符序列：StringBuffer、StringBuilder</h2><p>因为String对象是不可变对象，虽然可以共享常量对象，但是对于频繁字符串的修改和拼接操作，效率极低，空间消耗也比较高。因此，JDK又在java.lang包提供了可变字符序列StringBuffer和StringBuilder类型。</p><h3 id="2-1-StringBuffer与StringBuilder的理解"><a href="#2-1-StringBuffer与StringBuilder的理解" class="headerlink" title="2.1 StringBuffer与StringBuilder的理解"></a>2.1 StringBuffer与StringBuilder的理解</h3><ul><li><p>java.lang.StringBuffer代表<code>可变的字符序列</code>，JDK1.0中声明，可以对字符串内容进行增删，此时不会产生新的对象。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况1:</span></span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"我喜欢学习"</span>); </span><br><span class="line"><span class="comment">//情况2：</span></span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">"我喜欢学习"</span>); </span><br><span class="line">buffer.append(<span class="string">"数学"</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310232037677.png" alt="image-20220405221714261"></p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310232037777.png" alt="image-20220228153030902" style="zoom:80%;"><ul><li>继承结构：</li></ul><p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310232037040.png" alt="image-20220405174233055"></p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310232037714.png" alt="image-20220405174414780" style="zoom:67%;"><ul><li><p>StringBuilder 和 StringBuffer 非常类似，均代表可变的字符序列，而且提供相关功能的方法也一样。</p></li><li><p>区分String、StringBuffer、StringBuilder</p><ul><li>String:不可变的字符序列； 底层使用char[]数组存储(JDK8.0中)</li><li>StringBuffer:可变的字符序列；线程安全（方法有synchronized修饰），效率低；底层使用char[]数组存储 (JDK8.0中)</li><li>StringBuilder:可变的字符序列； jdk1.5引入，线程不安全的，效率高；底层使用char[]数组存储(JDK8.0中)</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310232045394.png" alt="image-20231023204515338"></p></li></ul><h3 id="2-2-StringBuilder、StringBuffer的API"><a href="#2-2-StringBuilder、StringBuffer的API" class="headerlink" title="2.2 StringBuilder、StringBuffer的API"></a>2.2 StringBuilder、StringBuffer的API</h3><p>StringBuilder、StringBuffer的API是完全一致的，并且很多方法与String相同。</p><p><strong>1、常用API</strong></p><p>（1）StringBuffer <strong>append(xx)</strong>：提供了很多的append()方法，用于进行字符串追加的方式拼接<br>（2）StringBuffer <strong>delete(int start, int end)</strong>：删除[start,end)之间字符<br>（3）StringBuffer <strong>deleteCharAt(int index)</strong>：删除[index]位置字符<br>（4）StringBuffer <strong>replace(int start, int end, String str)</strong>：替换[start,end)范围的字符序列为str<br>（5）void <strong>setCharAt(int index, char c)</strong>：替换[index]位置字符<br>（6）char <strong>charAt(int index)</strong>：查找指定index位置上的字符<br>（7）StringBuffer <strong>insert(int index, xx)</strong>：在[index]位置插入xx<br>（8）int <strong>length()</strong>：返回存储的字符数据的长度<br>（9）StringBuffer <strong>reverse()</strong>：反转</p><blockquote><ul><li><p>当append和insert时，如果原来value数组长度不够，可扩容。</p></li><li><p>如上(1)(2)(3)(4)(9)这些方法支持<code>方法链操作</code>。原理：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241015514.png" alt="image-20220405223542750"></p></li></ul></blockquote><p><strong>2、其它API</strong></p><p>（1）int indexOf(String str)：在当前字符序列中查询str的第一次出现下标<br>（2）int indexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的第一次出现下标<br>（3）int lastIndexOf(String str)：在当前字符序列中查询str的最后一次出现下标<br>（4）int lastIndexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的最后一次出现下标<br>（5）String substring(int start)：截取当前字符序列[start,最后]<br>（6）String substring(int start, int end)：截取当前字符序列[start,end)<br>（7）String toString()：返回此序列中数据的字符串表示形式<br>（8）void setLength(int newLength) ：设置当前字符序列长度为newLength</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    s.append(<span class="string">"hello"</span>).append(<span class="keyword">true</span>).append(<span class="string">'a'</span>).append(<span class="number">12</span>).append(<span class="string">"atguigu"</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    System.out.println(s.length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder s = <span class="keyword">new</span> StringBuilder(<span class="string">"helloworld"</span>);</span><br><span class="line">    s.insert(<span class="number">5</span>, <span class="string">"java"</span>);</span><br><span class="line">    s.insert(<span class="number">5</span>, <span class="string">"chailinyan"</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder s = <span class="keyword">new</span> StringBuilder(<span class="string">"helloworld"</span>);</span><br><span class="line">    s.delete(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    s.deleteCharAt(<span class="number">4</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder s = <span class="keyword">new</span> StringBuilder(<span class="string">"helloworld"</span>);</span><br><span class="line">    s.reverse();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder s = <span class="keyword">new</span> StringBuilder(<span class="string">"helloworld"</span>);</span><br><span class="line">    s.setCharAt(<span class="number">2</span>, <span class="string">'a'</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuilder s = <span class="keyword">new</span> StringBuilder(<span class="string">"helloworld"</span>);</span><br><span class="line">    s.setLength(<span class="number">30</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-效率测试"><a href="#2-3-效率测试" class="headerlink" title="2.3 效率测试"></a>2.3 效率测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始设置</span></span><br><span class="line"><span class="keyword">long</span> startTime = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">long</span> endTime = <span class="number">0L</span>;</span><br><span class="line">String text = <span class="string">""</span>;</span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始对比</span></span><br><span class="line">startTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">    buffer.append(String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"StringBuffer的执行时间："</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">startTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">    builder.append(String.valueOf(i));</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"StringBuilder的执行时间："</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">startTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">    text = text + i;</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"String的执行时间："</span> + (endTime - startTime));</span><br></pre></td></tr></table></figure><h3 id="2-4-练习"><a href="#2-4-练习" class="headerlink" title="2.4 练习"></a>2.4 练习</h3><p>笔试题：程序输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(str);</span><br><span class="line">System.out.println(sb.length());<span class="comment">//输出4</span></span><br><span class="line">System.out.println(sb);<span class="comment">//输出null</span></span><br><span class="line">StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(str);  <span class="comment">//线程安全  Cannot invoke "String.length()" because "str" is null</span></span><br><span class="line">System.out.println(sb1);<span class="comment">//输出null</span></span><br></pre></td></tr></table></figure><h2 id="3-JDK8之前：日期时间API"><a href="#3-JDK8之前：日期时间API" class="headerlink" title="3. JDK8之前：日期时间API"></a>3. JDK8之前：日期时间API</h2><h3 id="3-1-java-lang-System类的方法"><a href="#3-1-java-lang-System类的方法" class="headerlink" title="3.1 java.lang.System类的方法"></a>3.1 java.lang.System类的方法</h3><ul><li><p>System类提供的public static long currentTimeMillis()：用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</p><ul><li>此方法适于计算时间差。</li></ul></li><li><p>计算世界时间的主要标准有：</p><ul><li>UTC(Coordinated Universal Time)</li><li>GMT(Greenwich Mean Time)</li><li>CST(Central Standard Time)</li></ul><blockquote><p>在国际无线电通信场合，为了统一起见，使用一个统一的时间，称为通用协调时(UTC, Universal Time Coordinated)。UTC与格林尼治平均时(GMT, Greenwich Mean Time)一样，都与英国伦敦的本地时相同。这里，UTC与GMT含义完全相同。 </p></blockquote></li></ul><h3 id="3-2-java-util-Date"><a href="#3-2-java-util-Date" class="headerlink" title="3.2 java.util.Date"></a>3.2 java.util.Date</h3><p>表示特定的瞬间，精确到毫秒。</p><ul><li>构造器：<ul><li>Date()：使用无参构造器创建的对象可以获取本地当前时间。</li><li>Date(long 毫秒数)：把该毫秒值换算成日期时间对象</li></ul></li><li>常用方法<ul><li><strong>getTime():</strong> 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li><li><strong>toString()</strong>: 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。</li><li>其它很多方法都过时了。</li></ul></li><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//创建一个基于当前系统时间的Date实例</span></span><br><span class="line">   Date date=<span class="keyword">new</span> Date();</span><br><span class="line">   System.out.println(date.toString()); <span class="comment">//Tue Oct 24 10:25:37 CST 2023</span></span><br><span class="line">   System.out.println(date.getTime()); <span class="comment">//对应的毫秒数:1698114337721</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个基于自定义时间的Date实例</span></span><br><span class="line">    <span class="comment">//或者写成 java.sql.Date date=new java.sql.Date(date.getTime());</span></span><br><span class="line">    java.sql.Date date=<span class="keyword">new</span> java.sql.Date(<span class="number">1698114337721L</span>);  </span><br><span class="line">    System.out.println(date.toString()); <span class="comment">//2023-10-24</span></span><br><span class="line">    System.out.println(date.getTime()); <span class="comment">//对应的毫秒数:1698114337721</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-java-text-SimpleDateFormat"><a href="#3-3-java-text-SimpleDateFormat" class="headerlink" title="3.3 java.text.SimpleDateFormat"></a>3.3 java.text.SimpleDateFormat</h3><ul><li>java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类。</li><li>可以进行格式化：日期 –&gt; 文本</li><li>可以进行解析：文本 –&gt; 日期</li><li><strong>构造器：</strong><ul><li>SimpleDateFormat() ：默认的模式和语言环境创建对象</li><li>public SimpleDateFormat(String pattern)：该构造方法可以用参数pattern指定的格式创建一个对象</li></ul></li><li><strong>格式化：</strong><ul><li>public String format(Date date)：方法格式化时间对象date</li></ul></li><li><strong>解析：</strong><ul><li>public Date parse(String source)：从给定字符串的开始解析文本，以生成一个日期。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241719633.png" alt="1572599023197"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用SimpleDateFormat类</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    <span class="comment">//1.没设置需要的格式</span></span><br><span class="line">        SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">        <span class="comment">//格式化: 日期date ---&gt; String</span></span><br><span class="line">        Date date=<span class="keyword">new</span> Date();</span><br><span class="line">        String str=sdf.format(date); <span class="comment">//2023/10/24 上午10:42</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//解析:  String ---&gt; 日期date</span></span><br><span class="line">        Date date1=sdf.parse(<span class="string">"2023/10/24 上午10:42"</span>);</span><br><span class="line">        System.out.println(date1.toString());  <span class="comment">//Tue Oct 24 10:42:00 CST 2023</span></span><br><span class="line">    <span class="comment">//2.设置需要的格式</span></span><br><span class="line">        SimpleDateFormat sdf1=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        String str1=sdf1.format(date);  <span class="comment">//2023-10-24 10:46:37</span></span><br><span class="line">        System.out.println(str1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-java-util-Calendar-日历"><a href="#3-4-java-util-Calendar-日历" class="headerlink" title="3.4 java.util.Calendar(日历)"></a>3.4 java.util.Calendar(日历)</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241719774.png" alt="image-20220511105252261" style="zoom:67%;"><ul><li><p>Date类的API大部分被废弃了，替换为Calendar。</p></li><li><p><code>Calendar</code> 类是一个抽象类，主用用于完成日期字段之间相互操作的功能。</p></li><li><p>获取Calendar实例的方法</p><ul><li><p>使用<code>Calendar.getInstance()</code>方法</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241719741.png" alt="image-20220123184906903"></p></li><li><p>调用它的子类GregorianCalendar（公历）的构造器。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241719362.png" alt="image-20220405225828816"></p></li></ul></li><li><p>一个Calendar的实例是系统时间的抽象表示，可以修改或获取 YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、MINUTE、SECOND等 <code>日历字段</code>对应的时间值。</p><ul><li>public int get(int field)：返回给定日历字段的值</li><li>public void set(int field,int value) ：将给定的日历字段设置为指定的值</li><li>public void add(int field,int amount)：根据日历的规则，为给定的日历字段添加或者减去指定的时间量</li><li>public final Date getTime()：将Calendar转成Date对象</li><li>public final void setTime(Date date)：使用指定的Date对象重置Calendar的时间</li></ul></li><li><p>常用字段</p><p><img src=".images/1620277709044.png" alt="1620277709044"></p></li><li><p>注意：</p><ul><li>获取月份时：一月是0，二月是1，以此类推，12月是11</li><li>获取星期时：周日是1，周二是2 ， 。。。。周六是7</li></ul></li><li><p>示例代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalendar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> day = c.get(Calendar.DATE);</span><br><span class="line">        <span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        <span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</span><br><span class="line"></span><br><span class="line">        System.out.println(year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + day + <span class="string">" "</span> + hour + <span class="string">":"</span> + minute);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TimeZone t = TimeZone.getTimeZone(<span class="string">"America/Los_Angeles"</span>);</span><br><span class="line">        Calendar c = Calendar.getInstance(t);</span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> day = c.get(Calendar.DATE);</span><br><span class="line">        <span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        <span class="keyword">int</span> minute = c.get(Calendar.MINUTE);</span><br><span class="line"></span><br><span class="line">        System.out.println(year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + day + <span class="string">" "</span> + hour + <span class="string">":"</span> + minute);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 从一个 Calendar 对象中获取 Date 对象</span></span><br><span class="line">Date date = calendar.getTime();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 使用给定的 Date 设置此 Calendar 的时间</span></span><br><span class="line">date = <span class="keyword">new</span> Date(<span class="number">234234235235L</span>);</span><br><span class="line">calendar.setTime(date);</span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH, <span class="number">8</span>);</span><br><span class="line">System.out.println(<span class="string">"当前时间日设置为8后,时间是:"</span> + calendar.getTime());</span><br><span class="line">        </span><br><span class="line">calendar.add(Calendar.HOUR, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"当前时间加2小时后,时间是:"</span> + calendar.getTime());</span><br><span class="line">        </span><br><span class="line">calendar.add(Calendar.MONTH, -<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"当前日期减2个月后,时间是:"</span> + calendar.getTime());  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-练习"><a href="#3-5-练习" class="headerlink" title="3.5 练习"></a>3.5 练习</h3><p>输入年份和月份，输出该月日历。</p><p>闰年计算公式：年份可以被4整除但不能被100整除，或者可以被400整除。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241720705.png" alt="image-20220503120722810" style="zoom:67%;"><h2 id="4-JDK8：新的日期时间API"><a href="#4-JDK8：新的日期时间API" class="headerlink" title="4. JDK8：新的日期时间API"></a>4. JDK8：新的日期时间API</h2><p>如果我们可以跟别人说：“我们在1502643933071见面，别晚了！”那么就再简单不过了。但是我们希望时间与昼夜和四季有关，于是事情就变复杂了。JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：</p><ul><li><p>可变性：像日期和时间这样的类应该是不可变的。【Calendar类的set方法可以更改时间和日期】</p></li><li><p>偏移性：Date中的年份是从1900开始的，而月份都从0开始。【具有偏移量，不能直接写2023就是2023】</p></li><li><p>格式化：格式化只对Date有用，Calendar则不行。【】</p></li><li><p>此外，它们也不是线程安全的；不能处理闰秒等。【】</p><blockquote><p>闰秒，是指为保持协调世界时接近于世界时时刻，由国际计量局统一规定在年底或年中（也可能在季末）对协调世界时增加或减少1秒的调整。由于地球自转的不均匀性和长期变慢性（主要由潮汐摩擦引起的），会使世界时（民用时）和原子时之间相差超过到±0.9秒时，就把协调世界时向前拨1秒（负闰秒，最后一分钟为59秒）或向后拨1秒（正闰秒，最后一分钟为61秒）； 闰秒一般加在公历年末或公历六月末。</p><p>目前，全球已经进行了27次闰秒，均为正闰秒。</p></blockquote></li></ul><p>总结：<code>对日期和时间的操作一直是Java程序员最痛苦的地方之一</code>。</p><p>第三次引入的API是成功的，并且Java 8中引入的<strong>java.time</strong> 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。</p><p>Java 8 以一个新的开始为 Java 创建优秀的 API。新的日期时间API包含：</p><ul><li><code>java.time</code> – 包含值对象的基础包</li><li><code>java.time.chrono</code> – 提供对不同的日历系统的访问。</li><li><code>java.time.format</code> – 格式化和解析时间和日期</li><li><code>java.time.temporal</code> – 包括底层框架和扩展特性</li><li><code>java.time.zone</code> – 包含时区支持的类</li></ul><p>说明：新的 java.time 中包含了所有关于时钟（Clock），本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。</p><p>尽管有68个新的公开类型，但是大多数开发者只会用到基础包和format包，大概占总数的三分之一。</p><h3 id="4-1-本地日期时间：LocalDate、LocalTime、LocalDateTime"><a href="#4-1-本地日期时间：LocalDate、LocalTime、LocalDateTime" class="headerlink" title="4.1 本地日期时间：LocalDate、LocalTime、LocalDateTime"></a>4.1 本地日期时间：LocalDate、LocalTime、LocalDateTime</h3><table><thead><tr><th>方法</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>now()</code>/<br>now(ZoneId zone)</td><td><strong>静态方法</strong>，根据当前时间创建对象/指定时区的对象</td></tr><tr><td><code>of(xx,xx,xx,xx,xx,xxx)</code></td><td><strong>静态方法</strong>，根据指定日期/时间创建对象</td></tr><tr><td>getDayOfMonth()/<br>getDayOfYear()</td><td>获得月份天数(1-31) /获得年份天数(1-366)</td></tr><tr><td>getDayOfWeek()</td><td>获得星期几(返回一个 DayOfWeek 枚举值)</td></tr><tr><td>getMonth()</td><td>获得月份, 返回一个 Month 枚举值</td></tr><tr><td>getMonthValue() / <br>getYear()</td><td>获得月份(1-12) /获得年份</td></tr><tr><td>getHours()/<br>getMinute()/<br>getSecond()</td><td>获得当前对象对应的小时、分钟、秒</td></tr><tr><td>withDayOfMonth()/<br>withDayOfYear()/<br>withMonth()/<br>withYear()</td><td>将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</td></tr><tr><td>with(TemporalAdjuster  t)</td><td>将当前日期时间设置为校对器指定的日期时间</td></tr><tr><td>plusDays(), <br>plusWeeks(),<br>plusMonths(), <br>plusYears(),<br>plusHours()</td><td>向当前对象添加几天、几周、几个月、几年、几小时</td></tr><tr><td>minusMonths() / <br>minusWeeks()/<br>minusDays()/<br>minusYears()/<br>minusHours()</td><td>从当前对象减去几月、几周、几天、几年、几小时</td></tr><tr><td>plus(TemporalAmount t)/<br>minus(TemporalAmount t)</td><td>添加或减少一个 Duration 或 Period</td></tr><tr><td>isBefore()/<br>isAfter()</td><td>比较两个 LocalDate</td></tr><tr><td>isLeapYear()</td><td>判断是否是闰年（在LocalDate类中声明）</td></tr><tr><td>format(DateTimeFormatter  t)</td><td>格式化本地日期、时间，返回一个字符串</td></tr><tr><td>parse(Charsequence text)</td><td>将指定格式的字符串解析为日期、时间</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//now() 获取当前日期和时间</span></span><br><span class="line">    LocalDate localDate=LocalDate.now();</span><br><span class="line">    System.out.println(localDate);  <span class="comment">//2023-10-24</span></span><br><span class="line"></span><br><span class="line">    LocalTime localTime= LocalTime.now();</span><br><span class="line">    System.out.println(localTime);  <span class="comment">//11:08:04.703426700</span></span><br><span class="line"></span><br><span class="line">    LocalDateTime localDateTime=LocalDateTime.now();</span><br><span class="line">    System.out.println(localDateTime); <span class="comment">//2023-10-24T11:08:04.703426700</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//of() 获取指定日期和时间 【没有偏移量，指定哪天就是哪天】</span></span><br><span class="line">    LocalDate localDate1=LocalDate.of(<span class="number">2023</span>,<span class="number">10</span>,<span class="number">13</span>);</span><br><span class="line">    System.out.println(localDate1); <span class="comment">//2023-10-13</span></span><br><span class="line"></span><br><span class="line">    LocalTime localTime1=LocalTime.of(<span class="number">12</span>,<span class="number">10</span>,<span class="number">24</span>);</span><br><span class="line">    System.out.println(localTime1); <span class="comment">//12:10:24</span></span><br><span class="line"></span><br><span class="line">    LocalDateTime localDateTime1=LocalDateTime.of(<span class="number">2023</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">1</span>);</span><br><span class="line">    System.out.println(localDateTime1); <span class="comment">//2023-10-01T12:13:01</span></span><br></pre></td></tr></table></figure><h3 id="4-2-瞬时：Instant"><a href="#4-2-瞬时：Instant" class="headerlink" title="4.2 瞬时：Instant"></a>4.2 瞬时：Instant</h3><ul><li>Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件<strong>时间戳</strong>。[购物平台的购买记录，类似于订单号每个人只有一个]<ul><li>时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</li></ul></li><li><code>java.time.Instant</code>表示时间线上的一点，而不需要任何上下文信息，例如，时区。概念上讲，<code>它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。</code></li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>now()</code></td><td><strong>静态方法</strong>，返回默认UTC时区的Instant类的对象</td></tr><tr><td><code>ofEpochMilli(long epochMilli)</code></td><td><strong>静态方法</strong>，返回在1970-01-01 00:00:00基础上加上指定毫秒数之后的Instant类的对象</td></tr><tr><td>atOffset(ZoneOffset offset)</td><td>结合即时的偏移来创建一个 OffsetDateTime</td></tr><tr><td><code>toEpochMilli()</code></td><td>返回1970-01-01 00:00:00到当前时间的毫秒数，即为时间戳</td></tr></tbody></table><blockquote><p>中国大陆、中国香港、中国澳门、中国台湾、蒙古国、新加坡、马来西亚、菲律宾、西澳大利亚州的时间与UTC的时差均为+8，也就是UTC+8。</p><p>instant.atOffset(ZoneOffset.ofHours(8));</p></blockquote><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241720689.png" alt="image-20220406000442908"></p><blockquote><p>整个地球分为二十四时区，每个时区都有自己的本地时间。北京时区是东八区，领先UTC八个小时，在电子邮件信头的Date域记为+0800。如果在电子邮件的信头中有这么一行： </p><p>Date: Fri, 08 Nov 2002 09:42:22 +0800 </p><p>说明信件的发送地的地方时间是二○○二年十一月八号，星期五，早上九点四十二分（二十二秒），这个地方的本地时领先UTC八个小时(+0800， 就是东八区时间)。电子邮件信头的Date域使用二十四小时的时钟，而不使用AM和PM来标记上下午。 </p></blockquote><h3 id="4-3-日期时间格式化：DateTimeFormatter"><a href="#4-3-日期时间格式化：DateTimeFormatter" class="headerlink" title="4.3 日期时间格式化：DateTimeFormatter"></a>4.3 日期时间格式化：DateTimeFormatter</h3><p>该类提供了三种格式化方法：</p><ul><li>(了解)预定义的标准格式。如：ISO_LOCAL_DATE_TIME、ISO_LOCAL_DATE、ISO_LOCAL_TIME</li></ul><ul><li><p>(了解)本地化相关的格式。如：ofLocalizedDate(FormatStyle.LONG)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地化相关的格式。如：ofLocalizedDateTime()</span></span><br><span class="line"><span class="comment">// FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地化相关的格式。如：ofLocalizedDate()</span></span><br><span class="line"><span class="comment">// FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span></span><br></pre></td></tr></table></figure></li><li><p>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p></li></ul><table><thead><tr><th><strong>方</strong>   <strong>法</strong></th><th><strong>描</strong>   <strong>述</strong></th></tr></thead><tbody><tr><td><strong>ofPattern(String</strong>  <strong>pattern)</strong></td><td><strong>静态方法</strong>，返回一个指定字符串格式的DateTimeFormatter</td></tr><tr><td><strong>format(TemporalAccessor</strong> <strong>t)</strong></td><td><strong>格式化</strong>一个日期、时间，返回字符串</td></tr><tr><td><strong>parse(CharSequence</strong>  <strong>text)</strong></td><td>将指定格式的字符序列<strong>解析</strong>为一个日期、时间</td></tr></tbody></table><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.format.FormatStyle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDatetimeFormatter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span></span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line">        <span class="comment">// 格式化:日期--&gt;字符串</span></span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        String str1 = formatter.format(localDateTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(str1);<span class="comment">//2022-12-04T21:02:14.808</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析：字符串 --&gt;日期</span></span><br><span class="line">        TemporalAccessor parse = formatter.parse(<span class="string">"2022-12-04T21:02:14.808"</span>);</span><br><span class="line">        LocalDateTime dateTime = LocalDateTime.from(parse);</span><br><span class="line">        System.out.println(dateTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 方式二：</span></span><br><span class="line">        <span class="comment">// 本地化相关的格式。如：ofLocalizedDateTime()</span></span><br><span class="line">        <span class="comment">// FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span></span><br><span class="line">        DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 格式化</span></span><br><span class="line">        String str2 = formatter1.format(localDateTime);</span><br><span class="line">        System.out.println(str2);<span class="comment">// 2022年12月4日 下午09时03分55秒</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地化相关的格式。如：ofLocalizedDate()</span></span><br><span class="line">        <span class="comment">// FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span></span><br><span class="line">        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);</span><br><span class="line">        <span class="comment">// 格式化</span></span><br><span class="line">        String str3 = formatter2.format(LocalDate.now());</span><br><span class="line">        System.out.println(str3);<span class="comment">// 2022年12月4日 星期日</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式三：自定义的方式（关注、重点）</span></span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String strDateTime = dateTimeFormatter.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(strDateTime); <span class="comment">//2022/12/04 21:05:42</span></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        TemporalAccessor accessor = dateTimeFormatter.parse(<span class="string">"2022/12/04 21:05:42"</span>);</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.from(accessor);</span><br><span class="line">        System.out.println(localDateTime); <span class="comment">//2022-12-04T21:05:42</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-其它API"><a href="#4-4-其它API" class="headerlink" title="4.4 其它API"></a>4.4 其它API</h3><p><strong>1、指定时区日期时间：ZondId和ZonedDateTime</strong></p><ul><li><p>ZoneId：该类中包含了所有的时区信息，一个时区的ID，如 Europe/Paris</p></li><li><p>ZonedDateTime：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10:15:30+01:00 Europe/Paris。</p><ul><li>其中每个时区都对应着ID，地区ID都为“{区域}/{城市}”的格式，例如：Asia/Shanghai等</li></ul></li><li><p>常见时区ID：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Asia/Shanghai</span><br><span class="line">UTC</span><br><span class="line">America/New_York</span><br></pre></td></tr></table></figure><ul><li>可以通过ZondId获取所有可用的时区ID：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestZone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要知道一些时区的id</span></span><br><span class="line">        <span class="comment">//Set&lt;String&gt;是一个集合，容器</span></span><br><span class="line">        Set&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">        <span class="comment">//快捷模板iter</span></span><br><span class="line">        <span class="keyword">for</span> (String availableZoneId : availableZoneIds) &#123;</span><br><span class="line">            System.out.println(availableZoneId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ZonedDateTime t1 = ZonedDateTime.now();</span><br><span class="line">        System.out.println(t1);</span><br><span class="line"></span><br><span class="line">        ZonedDateTime t2 = ZonedDateTime.now(ZoneId.of(<span class="string">"America/New_York"</span>));</span><br><span class="line">        System.out.println(t2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、持续日期/时间：Period和Duration</strong></p><ul><li>持续时间：Duration，用于计算两个“时间”间隔</li><li>日期间隔：Period，用于计算两个“日期”间隔</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPeriodDuration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocalDate t1 = LocalDate.now();</span><br><span class="line">        LocalDate t2 = LocalDate.of(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>);</span><br><span class="line">        Period between = Period.between(t1, t2);</span><br><span class="line">        System.out.println(between);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"相差的年数："</span>+between.getYears());</span><br><span class="line">        System.out.println(<span class="string">"相差的月数："</span>+between.getMonths());</span><br><span class="line">        System.out.println(<span class="string">"相差的天数："</span>+between.getDays());</span><br><span class="line">        System.out.println(<span class="string">"相差的总数："</span>+between.toTotalMonths());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocalDateTime t1 = LocalDateTime.now();</span><br><span class="line">        LocalDateTime t2 = LocalDateTime.of(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Duration between = Duration.between(t1, t2);</span><br><span class="line">        System.out.println(between);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"相差的总天数："</span>+between.toDays());</span><br><span class="line">        System.out.println(<span class="string">"相差的总小时数："</span>+between.toHours());</span><br><span class="line">        System.out.println(<span class="string">"相差的总分钟数："</span>+between.toMinutes());</span><br><span class="line">        System.out.println(<span class="string">"相差的总秒数："</span>+between.getSeconds());</span><br><span class="line">        System.out.println(<span class="string">"相差的总毫秒数："</span>+between.toMillis());</span><br><span class="line">        System.out.println(<span class="string">"相差的总纳秒数："</span>+between.toNanos());</span><br><span class="line">        System.out.println(<span class="string">"不够一秒的纳秒数："</span>+between.getNano());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Duration:用于计算两个“时间”间隔，以秒和纳秒为基准</span></span><br><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">LocalTime localTime1 = LocalTime.of(<span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line"><span class="comment">//between():静态方法，返回Duration对象，表示两个时间的间隔</span></span><br><span class="line">Duration duration = Duration.between(localTime1, localTime);</span><br><span class="line">System.out.println(duration);</span><br><span class="line"></span><br><span class="line">System.out.println(duration.getSeconds());</span><br><span class="line">System.out.println(duration.getNano());</span><br><span class="line"></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">Duration duration1 = Duration.between(localDateTime1, localDateTime);</span><br><span class="line">System.out.println(duration1.toDays());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Period:用于计算两个“日期”间隔，以年、月、日衡量</span></span><br><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">LocalDate localDate1 = LocalDate.of(<span class="number">2028</span>, <span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">Period period = Period.between(localDate, localDate1);</span><br><span class="line">System.out.println(period);</span><br><span class="line"></span><br><span class="line">System.out.println(period.getYears());</span><br><span class="line">System.out.println(period.getMonths());</span><br><span class="line">System.out.println(period.getDays());</span><br><span class="line"></span><br><span class="line">Period period1 = period.withYears(<span class="number">2</span>);</span><br><span class="line">System.out.println(period1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、Clock：使用时区提供对当前即时、日期和时间的访问的时钟。</p><p>4、TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。<br>TemporalAdjusters : 该类通过静态方法(firstDayOfXxx()/lastDayOfXxx()/nextXxx())提供了大量的常用 TemporalAdjuster 的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// TemporalAdjuster:时间校正器</span></span><br><span class="line"><span class="comment">// 获取当前日期的下一个周日是哪天？</span></span><br><span class="line">TemporalAdjuster temporalAdjuster = TemporalAdjusters.next(DayOfWeek.SUNDAY);</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now().with(temporalAdjuster);</span><br><span class="line">System.out.println(localDateTime);</span><br><span class="line"><span class="comment">// 获取下一个工作日是哪天？</span></span><br><span class="line">LocalDate localDate = LocalDate.now().with(<span class="keyword">new</span> TemporalAdjuster() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Temporal <span class="title">adjustInto</span><span class="params">(Temporal temporal)</span> </span>&#123;</span><br><span class="line">        LocalDate date = (LocalDate) temporal;</span><br><span class="line">       <span class="keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.FRIDAY)) &#123;</span><br><span class="line">           <span class="keyword">return</span> date.plusDays(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.SATURDAY)) &#123;</span><br><span class="line">            <span class="keyword">return</span> date.plusDays(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> date.plusDays(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">"下一个工作日是："</span> + localDate);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-与传统日期处理的转换"><a href="#4-5-与传统日期处理的转换" class="headerlink" title="4.5 与传统日期处理的转换"></a>4.5 与传统日期处理的转换</h3><table><thead><tr><th><strong>类</strong></th><th><strong>To</strong> <strong>遗留类</strong></th><th><strong>From</strong> <strong>遗留类</strong></th></tr></thead><tbody><tr><td><strong>java.time.Instant与java.util.Date</strong></td><td>Date.from(instant)</td><td>date.toInstant()</td></tr><tr><td><strong>java.time.Instant与java.sql.Timestamp</strong></td><td>Timestamp.from(instant)</td><td>timestamp.toInstant()</td></tr><tr><td><strong>java.time.ZonedDateTime与java.util.GregorianCalendar</strong></td><td>GregorianCalendar.from(zonedDateTime)</td><td>cal.toZonedDateTime()</td></tr><tr><td><strong>java.time.LocalDate与java.sql.Time</strong></td><td>Date.valueOf(localDate)</td><td>date.toLocalDate()</td></tr><tr><td><strong>java.time.LocalTime与java.sql.Time</strong></td><td>Date.valueOf(localDate)</td><td>date.toLocalTime()</td></tr><tr><td><strong>java.time.LocalDateTime与java.sql.Timestamp</strong></td><td>Timestamp.valueOf(localDateTime)</td><td>timestamp.toLocalDateTime()</td></tr><tr><td><strong>java.time.ZoneId与java.util.TimeZone</strong></td><td>Timezone.getTimeZone(id)</td><td>timeZone.toZoneId()</td></tr><tr><td><strong>java.time.format.DateTimeFormatter与java.text.DateFormat</strong></td><td>formatter.toFormat()</td><td>无</td></tr></tbody></table><h2 id="5-Java比较器"><a href="#5-Java比较器" class="headerlink" title="5. Java比较器"></a>5. Java比较器</h2><p>我们知道基本数据类型的数据（除boolean类型外）需要比较大小的话，之间使用比较运算符即可，但是引用数据类型是不能直接使用比较运算符来比较大小的。那么，如何解决这个问题呢？</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241720048.png" alt="image-20220406001726285"></p><ul><li>在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。</li></ul><ul><li>Java实现对象排序的方式有两种：<ul><li>自然排序：java.lang.Comparable</li><li>定制排序：java.util.Comparator</li></ul></li></ul><h3 id="5-1-自然排序：java-lang-Comparable"><a href="#5-1-自然排序：java-lang-Comparable" class="headerlink" title="5.1 自然排序：java.lang.Comparable"></a>5.1 自然排序：java.lang.Comparable</h3><ul><li>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。</li><li>实现 Comparable 的类必须实现 <code>compareTo(Object obj)</code>方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。如果当前对象this大于形参对象obj，则返回正整数，如果当前对象this小于形参对象obj，则返回负整数，如果当前对象this等于形参对象obj，则返回零。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span></span>;  <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或 Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p></li><li><p>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) == 0 与 e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals 一致。建议（虽然不是必需的）<code>最好使自然排序与 equals 一致</code>。</p></li><li><p>Comparable 的典型实现：(<code>默认都是从小到大排列的</code>)</p><ul><li>String：按照字符串中字符的Unicode值进行比较</li><li>Character：按照字符的Unicode值来进行比较</li><li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>Date、Time等：后面的日期时间比前面的日期时间大</li></ul></li><li><p>代码示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> score, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +<span class="string">"id="</span> + id +<span class="string">", name='"</span> + name + <span class="string">'\''</span> +<span class="string">", score="</span> + score +<span class="string">", age="</span> + age +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写compareTo方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这些需要强制，将o对象向下转型为Student类型的变量，才能调用Student类中的属性</span></span><br><span class="line">        <span class="comment">//默认按照学号比较大小</span></span><br><span class="line">        Student stu = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id - stu.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student[] arr = <span class="keyword">new</span> Student[<span class="number">5</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> Student(<span class="number">3</span>,<span class="string">"张三"</span>,<span class="number">90</span>,<span class="number">23</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"熊大"</span>,<span class="number">100</span>,<span class="number">22</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="number">5</span>,<span class="string">"王五"</span>,<span class="number">75</span>,<span class="number">25</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> Student(<span class="number">4</span>,<span class="string">"李四"</span>,<span class="number">85</span>,<span class="number">24</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> Student(<span class="number">2</span>,<span class="string">"熊二"</span>,<span class="number">85</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单独比较两个对象</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>].compareTo(arr[<span class="number">1</span>]));  <span class="comment">//调用Person重写的方法</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>].compareTo(arr[<span class="number">2</span>]));  <span class="comment">//调用Person重写的方法</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>].compareTo(arr[<span class="number">2</span>]));  <span class="comment">//调用Person重写的方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"所有学生："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"按照学号排序："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j].compareTo(arr[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;   <span class="comment">//调用Person重写的方法</span></span><br><span class="line">                    Student temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历数组所有元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241544774.png" alt="image-20231024154426685"></p><h3 id="5-2-定制排序：java-util-Comparator"><a href="#5-2-定制排序：java-util-Comparator" class="headerlink" title="5.2 定制排序：java.util.Comparator"></a>5.2 定制排序：java.util.Comparator</h3><ul><li>思考<ul><li>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码（例如：一些第三方的类，你只有.class文件，没有源文件）</li><li>如果一个类，实现了Comparable接口，也指定了两个对象的比较大小的规则，但是此时此刻我不想按照它预定义的方法比较大小，但是我又不能随意修改，因为会影响其他地方的使用，怎么办？</li></ul></li><li>JDK在设计类库之初，也考虑到这种情况，所以又增加了一个java.util.Comparator接口。强行对多个对象进行整体排序的比较。<ul><li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1,Object o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="comment">//定义定制比较器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentScoreComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        Student s1 = (Student) o1;</span><br><span class="line">        Student s2 = (Student) o2;</span><br><span class="line">        <span class="keyword">int</span> result = s1.getScore() - s2.getScore();</span><br><span class="line">        <span class="keyword">return</span> result != <span class="number">0</span> ? result : s1.getId() - s2.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student[] arr = <span class="keyword">new</span> Student[<span class="number">5</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">"张三"</span>, <span class="number">90</span>, <span class="number">23</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">"熊大"</span>, <span class="number">100</span>, <span class="number">22</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="number">5</span>, <span class="string">"王五"</span>, <span class="number">75</span>, <span class="number">25</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> Student(<span class="number">4</span>, <span class="string">"李四"</span>, <span class="number">85</span>, <span class="number">24</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">"熊二"</span>, <span class="number">85</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"所有学生："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"按照成绩排序"</span>);</span><br><span class="line">        StudentScoreComparator sc = <span class="keyword">new</span> StudentScoreComparator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sc.compare(arr[j], arr[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Student temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student[] students = <span class="keyword">new</span> Student[<span class="number">5</span>];</span><br><span class="line">    students[<span class="number">0</span>] = <span class="keyword">new</span> Student(<span class="number">3</span>, <span class="string">"张三"</span>, <span class="number">90</span>, <span class="number">23</span>);</span><br><span class="line">    students[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">"熊大"</span>, <span class="number">100</span>, <span class="number">22</span>);</span><br><span class="line">    students[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="number">5</span>, <span class="string">"王五"</span>, <span class="number">75</span>, <span class="number">25</span>);</span><br><span class="line">    students[<span class="number">3</span>] = <span class="keyword">new</span> Student(<span class="number">4</span>, <span class="string">"李四"</span>, <span class="number">85</span>, <span class="number">24</span>);</span><br><span class="line">    students[<span class="number">4</span>] = <span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">"熊二"</span>, <span class="number">85</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(Arrays.toString(students));</span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    StudentScoreComparator sc = <span class="keyword">new</span> StudentScoreComparator();</span><br><span class="line">    Arrays.sort(students, sc);</span><br><span class="line">    System.out.println(<span class="string">"排序之后："</span>);</span><br><span class="line">    System.out.println(Arrays.toString(students));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Goods[] all = <span class="keyword">new</span> Goods[<span class="number">4</span>];</span><br><span class="line">all[<span class="number">0</span>] = <span class="keyword">new</span> Goods(<span class="string">"War and Peace"</span>, <span class="number">100</span>);</span><br><span class="line">all[<span class="number">1</span>] = <span class="keyword">new</span> Goods(<span class="string">"Childhood"</span>, <span class="number">80</span>);</span><br><span class="line">all[<span class="number">2</span>] = <span class="keyword">new</span> Goods(<span class="string">"Scarlet and Black"</span>, <span class="number">140</span>);</span><br><span class="line">all[<span class="number">3</span>] = <span class="keyword">new</span> Goods(<span class="string">"Notre Dame de Paris"</span>, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">Arrays.sort(all, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        Goods g1 = (Goods) o1;</span><br><span class="line">        Goods g2 = (Goods) o2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> g1.getName().compareTo(g2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(Arrays.toString(all));</span><br></pre></td></tr></table></figure><h2 id="6-系统相关类"><a href="#6-系统相关类" class="headerlink" title="6. 系统相关类"></a>6. 系统相关类</h2><h3 id="6-1-java-lang-System类"><a href="#6-1-java-lang-System类" class="headerlink" title="6.1 java.lang.System类"></a>6.1 java.lang.System类</h3><ul><li><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于<code>java.lang包</code>。</p></li><li><p>由于该类的构造器是private的，所以无法创建该类的对象。其内部的成员变量和成员方法都是<code>static的</code>，所以也可以很方便的进行调用。</p></li><li><p>成员变量   Scanner scan = new Scanner(System.in);</p><ul><li>System类内部包含<code>in</code>、<code>out</code>和<code>err</code>三个成员变量，分别代表标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</li></ul></li><li><p>成员方法</p><ul><li><p><code>native long currentTimeMillis()</code>：<br>该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。</p></li><li><p><code>void exit(int status)</code>：<br>该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。</p></li><li><p><code>void gc()</code>：<br>该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。</p></li><li><p><code>String getProperty(String key)</code>：<br>该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见的属性名以及属性的作用如下表所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310241720367.png" alt="image-20220406003340258"></p></li></ul></li><li><p>举例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSystem</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"现在的系统时间距离1970年1月1日凌晨："</span> + time + <span class="string">"毫秒"</span>);</span><br><span class="line"></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"over"</span>);<span class="comment">//不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String javaVersion = System.getProperty(<span class="string">"java.version"</span>);</span><br><span class="line">System.out.println(<span class="string">"java的version:"</span> + javaVersion);</span><br><span class="line"></span><br><span class="line">String javaHome = System.getProperty(<span class="string">"java.home"</span>);</span><br><span class="line">System.out.println(<span class="string">"java的home:"</span> + javaHome);</span><br><span class="line"></span><br><span class="line">String osName = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">System.out.println(<span class="string">"os的name:"</span> + osName);</span><br><span class="line"></span><br><span class="line">String osVersion = System.getProperty(<span class="string">"os.version"</span>);</span><br><span class="line">System.out.println(<span class="string">"os的version:"</span> + osVersion);</span><br><span class="line"></span><br><span class="line">String userName = System.getProperty(<span class="string">"user.name"</span>);</span><br><span class="line">System.out.println(<span class="string">"user的name:"</span> + userName);</span><br><span class="line"></span><br><span class="line">String userHome = System.getProperty(<span class="string">"user.home"</span>);</span><br><span class="line">System.out.println(<span class="string">"user的home:"</span> + userHome);</span><br><span class="line"></span><br><span class="line">String userDir = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">System.out.println(<span class="string">"user的dir:"</span> + userDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">            MyDemo my = <span class="keyword">new</span> MyDemo(i);</span><br><span class="line">            <span class="comment">//每一次循环my就会指向新的对象，那么上次的对象就没有变量引用它了，就成垃圾对象</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了看到垃圾回收器工作，我要加下面的代码，让main方法不那么快结束，因为main结束就会导致JVM退出，GC也会跟着结束。</span></span><br><span class="line">        System.gc();<span class="comment">//如果不调用这句代码，GC可能不工作，因为当前内存很充足，GC就觉得不着急回收垃圾对象。</span></span><br><span class="line">        <span class="comment">//调用这句代码，会让GC尽快来工作。</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDemo</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyDemo&#123;"</span> + <span class="string">"value="</span> + value + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写finalize方法，让大家看一下它的调用效果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//        正常重写，这里是编写清理系统内存的代码</span></span><br><span class="line"><span class="comment">//        这里写输出语句是为了看到finalize()方法被调用的效果</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>+ <span class="string">"轻轻的我走了，不带走一段代码...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>： </p><p>从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。常用于数组的插入和删除</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSystemArrayCopy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.arraycopy(arr1,<span class="number">0</span>,arr2,<span class="number">3</span>,arr1.length);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.arraycopy(arr,<span class="number">0</span>,arr,<span class="number">1</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.arraycopy(arr,<span class="number">1</span>,arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-java-lang-Runtime类"><a href="#6-2-java-lang-Runtime类" class="headerlink" title="6.2 java.lang.Runtime类"></a>6.2 java.lang.Runtime类</h3><p>每个 Java 应用程序都有一个 <code>Runtime</code> 类实例，使应用程序能够与其运行的环境相连接。</p><p><code>public static Runtime getRuntime()</code>： 返回与当前 Java 应用程序相关的运行时对象。应用程序不能创建自己的 Runtime 类实例。</p><p><code>public long totalMemory()</code>：返回 Java 虚拟机中初始化时的内存总量。此方法返回的值可能随时间的推移而变化，这取决于主机环境。默认为物理电脑内存的1/64。</p><p><code>public long maxMemory()</code>：返回 Java 虚拟机中最大程度能使用的内存总量。默认为物理电脑内存的1/4。</p><p><code>public long freeMemory()</code>：回 Java 虚拟机中的空闲内存量。调用 gc 方法可能导致 freeMemory 返回值的增加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRuntime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">long</span> initialMemory = runtime.totalMemory(); <span class="comment">//获取虚拟机初始化时堆内存总量</span></span><br><span class="line">        <span class="keyword">long</span> maxMemory = runtime.maxMemory(); <span class="comment">//获取虚拟机最大堆内存总量</span></span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">//模拟占用内存</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            str += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> freeMemory = runtime.freeMemory(); <span class="comment">//获取空闲堆内存总量</span></span><br><span class="line">        System.out.println(<span class="string">"总内存："</span> + initialMemory / <span class="number">1024</span> / <span class="number">1024</span> * <span class="number">64</span> + <span class="string">"MB"</span>);</span><br><span class="line">        System.out.println(<span class="string">"总内存："</span> + maxMemory / <span class="number">1024</span> / <span class="number">1024</span> * <span class="number">4</span> + <span class="string">"MB"</span>);</span><br><span class="line">        System.out.println(<span class="string">"空闲内存："</span> + freeMemory / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">"MB"</span>) ;</span><br><span class="line">        System.out.println(<span class="string">"已用内存："</span> + (initialMemory-freeMemory) / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">"MB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-和数学相关的类"><a href="#7-和数学相关的类" class="headerlink" title="7. 和数学相关的类"></a>7. 和数学相关的类</h2><h3 id="7-1-java-lang-Math"><a href="#7-1-java-lang-Math" class="headerlink" title="7.1 java.lang.Math"></a>7.1 java.lang.Math</h3><p><code>java.lang.Math</code> 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单。</p><ul><li><code>public static double abs(double a)</code> ：返回 double 值的绝对值。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = Math.abs(-<span class="number">5</span>); <span class="comment">//d1的值为5</span></span><br><span class="line"><span class="keyword">double</span> d2 = Math.abs(<span class="number">5</span>); <span class="comment">//d2的值为5</span></span><br></pre></td></tr></table></figure><ul><li><code>public static double ceil(double a)</code> ：返回大于等于参数的最小的整数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = Math.ceil(<span class="number">3.3</span>); <span class="comment">//d1的值为 4.0</span></span><br><span class="line"><span class="keyword">double</span> d2 = Math.ceil(-<span class="number">3.3</span>); <span class="comment">//d2的值为 -3.0</span></span><br><span class="line"><span class="keyword">double</span> d3 = Math.ceil(<span class="number">5.1</span>); <span class="comment">//d3的值为 6.0</span></span><br></pre></td></tr></table></figure><ul><li><code>public static double floor(double a)</code> ：返回小于等于参数最大的整数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = Math.floor(<span class="number">3.3</span>); <span class="comment">//d1的值为3.0</span></span><br><span class="line"><span class="keyword">double</span> d2 = Math.floor(-<span class="number">3.3</span>); <span class="comment">//d2的值为-4.0</span></span><br><span class="line"><span class="keyword">double</span> d3 = Math.floor(<span class="number">5.1</span>); <span class="comment">//d3的值为 5.0</span></span><br></pre></td></tr></table></figure><ul><li><code>public static long round(double a)</code> ：返回最接近参数的 long。(相当于四舍五入方法)  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> d1 = Math.round(<span class="number">5.5</span>); <span class="comment">//d1的值为6</span></span><br><span class="line"><span class="keyword">long</span> d2 = Math.round(<span class="number">5.4</span>); <span class="comment">//d2的值为5</span></span><br><span class="line"><span class="keyword">long</span> d3 = Math.round(-<span class="number">3.3</span>); <span class="comment">//d3的值为-3</span></span><br><span class="line"><span class="keyword">long</span> d4 = Math.round(-<span class="number">3.8</span>); <span class="comment">//d4的值为-4</span></span><br></pre></td></tr></table></figure><ul><li>public static double pow(double a,double b)：返回a的b幂次方法</li><li>public static double sqrt(double a)：返回a的平方根</li><li><code>public static double random()</code>：返回[0,1)的随机值</li><li>public static final double PI：返回圆周率</li><li>public static double max(double x, double y)：返回x,y中的最大值</li><li>public static double min(double x, double y)：返回x,y中的最小值</li><li>其它：acos,asin,atan,cos,sin,tan 三角函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> result = Math.pow(<span class="number">2</span>,<span class="number">31</span>);</span><br><span class="line"><span class="keyword">double</span> sqrt = Math.sqrt(<span class="number">256</span>);</span><br><span class="line"><span class="keyword">double</span> rand = Math.random();</span><br><span class="line"><span class="keyword">double</span> pi = Math.PI;</span><br></pre></td></tr></table></figure><h3 id="7-2-java-math包"><a href="#7-2-java-math包" class="headerlink" title="7.2 java.math包"></a>7.2 java.math包</h3><h4 id="7-2-1-BigInteger"><a href="#7-2-1-BigInteger" class="headerlink" title="7.2.1 BigInteger"></a>7.2.1 BigInteger</h4><ul><li>Integer类作为int的包装类，能存储的最大整型值为2^31-1，Long类也是有限的，最大为2^63-1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。</li></ul><ul><li>java.math包的BigInteger可以表示<code>不可变的任意精度的整数</code>。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。 </li></ul><ul><li><p>构造器</p><ul><li>BigInteger(String val)：根据字符串构建BigInteger对象</li></ul></li><li><p>方法</p><ul><li>public BigInteger <code>abs</code>()：返回此 BigInteger 的绝对值的 BigInteger。</li><li>BigInteger <code>add</code>(BigInteger val) ：返回其值为 (this + val) 的 BigInteger</li><li>BigInteger <code>subtract</code>(BigInteger val) ：返回其值为 (this - val) 的 BigInteger</li><li>BigInteger <code>multiply</code>(BigInteger val) ：返回其值为 (this * val) 的 BigInteger</li><li>BigInteger <code>divide</code>(BigInteger val) ：返回其值为 (this / val) 的 BigInteger。整数相除只保留整数部分。</li><li>BigInteger <code>remainder</code>(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。</li><li>BigInteger[] <code>divideAndRemainder</code>(BigInteger val)：返回包含 (this / val) 后跟 (this % val) 的两个 BigInteger 的数组。</li><li>BigInteger <code>pow</code>(int exponent) ：返回其值为 (this^exponent) 的 BigInteger。 </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigIntegerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigInteger big1=<span class="keyword">new</span> BigInteger(<span class="string">"-112314124"</span>);</span><br><span class="line">        BigInteger big2=<span class="keyword">new</span> BigInteger(<span class="string">"1112414"</span>);</span><br><span class="line">        <span class="comment">//1.abs() BigInteger对象取绝对值</span></span><br><span class="line">        System.out.println(big1.abs());  <span class="comment">//112314124</span></span><br><span class="line">        <span class="comment">//2.add(big2) 两个BigInteger对象相加</span></span><br><span class="line">        System.out.println(big1.add(big2));  <span class="comment">//-111201710</span></span><br><span class="line">        <span class="comment">//3.subtract(big2) 两个BigInteger对象相减</span></span><br><span class="line">        System.out.println(big1.subtract(big2)); <span class="comment">//-11342653</span></span><br><span class="line">        <span class="comment">//4.multiply(big2) 两个BigInteger对象相乘</span></span><br><span class="line">        System.out.println(big1.multiply(big2)); <span class="comment">//-124939803935336</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.divide(big2) 两个BigInteger对象相除 [只保留整数部分]</span></span><br><span class="line">        System.out.println(big1.divide(big2)); <span class="comment">//-100</span></span><br><span class="line">        <span class="comment">//6.remainder(big2) 两个BigInteger对象相除 [取余数]</span></span><br><span class="line">        System.out.println(big1.remainder(big2)); <span class="comment">//-1072724</span></span><br><span class="line">        <span class="comment">//7.divideAndremainder(big2) 两个BigInteger对象相除 将5和6方法的结果放在数组</span></span><br><span class="line">        BigInteger[] arr=big1.divideAndRemainder(big2);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]); <span class="comment">//-100</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);  <span class="comment">//-1072724</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.pow(x) 将BigInteger对象^X</span></span><br><span class="line">        System.out.println(big1.pow(<span class="number">2</span>)); <span class="comment">//12614462449887376</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line"><span class="number">112314124</span></span><br><span class="line">-<span class="number">111201710</span></span><br><span class="line">-<span class="number">113426538</span></span><br><span class="line">-<span class="number">124939803935336</span></span><br><span class="line">-<span class="number">100</span></span><br><span class="line">-<span class="number">1072724</span></span><br><span class="line">-<span class="number">100</span></span><br><span class="line">-<span class="number">1072724</span></span><br><span class="line"><span class="number">12614462449887376</span></span><br></pre></td></tr></table></figure><h4 id="7-2-2-BigDecimal"><a href="#7-2-2-BigDecimal" class="headerlink" title="7.2.2 BigDecimal"></a>7.2.2 BigDecimal</h4><ul><li><p>一般的Float类和Double类可以用来做科学计算或工程计算，但在<strong>商业计算中，要求数字精度比较高，故用到java.math.BigDecimal类。</strong></p></li><li><p>BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</p></li><li><p>构造器</p><ul><li>public BigDecimal(double val)</li><li>public BigDecimal(String val) –&gt; 推荐</li></ul></li><li><p>常用方法</p><ul><li>public BigDecimal <code>add</code>(BigDecimal augend)</li><li>public BigDecimal <code>subtract</code>(BigDecimal subtrahend)</li><li>public BigDecimal <code>multiply</code>(BigDecimal multiplicand)</li><li>public BigDecimal <code>divide</code>(BigDecimal divisor, int scale, int roundingMode)：divisor是除数，scale指明保留几位小数，roundingMode指明舍入模式（ROUND_UP :向上加1、ROUND_DOWN :直接舍去、ROUND_HALF_UP:四舍五入）</li></ul></li></ul><ul><li>举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal big1=<span class="keyword">new</span> BigDecimal(<span class="string">"123132"</span>);</span><br><span class="line">        BigDecimal big2=<span class="keyword">new</span> BigDecimal(<span class="string">"100"</span>);</span><br><span class="line">        <span class="comment">//1.add(big2) 两个BigDecimal类对象相加</span></span><br><span class="line">        System.out.println(big1.add(big2));  <span class="comment">//123232</span></span><br><span class="line">        <span class="comment">//2.subtract(big2) 两个BigDecimal类对象相加</span></span><br><span class="line">        System.out.println(big1.subtract(big2));  <span class="comment">//123032</span></span><br><span class="line">        <span class="comment">//3.multiply(big2) 两个BigDecimal类对象相乘</span></span><br><span class="line">        System.out.println(big1.multiply(big2));  <span class="comment">//12313200</span></span><br><span class="line">        <span class="comment">//4.divide(big2,3,ROUND_UP) 两个BigDecimal类对象相乘，结果保留3位，四舍五入的模式设定为向上加1</span></span><br><span class="line">        System.out.println(big1.divide(big2,<span class="number">3</span>,BigDecimal.ROUND_UP));  <span class="comment">//1231.320</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-java-util-Random"><a href="#7-3-java-util-Random" class="headerlink" title="7.3 java.util.Random"></a>7.3 java.util.Random</h3><p>用于产生随机数</p><ul><li><p><code>boolean nextBoolean()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 boolean 值。 </p></li><li><p><code>void nextBytes(byte[] bytes)</code>:生成随机字节并将其置于用户提供的 byte 数组中。 </p></li><li><p><code>double nextDouble()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 double 值。 </p></li><li><p><code>float nextFloat()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 float 值。 </p></li><li><p><code>double nextGaussian()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的、呈高斯（“正态”）分布的 double 值，其平均值是 0.0，标准差是 1.0。 </p></li><li><p><code>int nextInt()</code>:返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。 </p></li><li><p><code>int nextInt(int n)</code>:返回一个伪随机数，它是取自此随机数生成器序列的、在 0（包括）和指定值（不包括）之间均匀分布的 int 值。 </p></li><li><p><code>long nextLong()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 long 值。 </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r=<span class="keyword">new</span> Random();</span><br><span class="line">        System.out.println(<span class="string">"随机整数："</span> + r.nextInt());</span><br><span class="line">        System.out.println(<span class="string">"随机小数："</span> + r.nextDouble());</span><br><span class="line">        System.out.println(<span class="string">"随机布尔值："</span> + r.nextBoolean());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">随机整数：-<span class="number">270071674</span></span><br><span class="line">随机小数：<span class="number">0.195118491954403</span></span><br><span class="line">随机布尔值：<span class="keyword">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第11章-常用类和基础API&quot;&gt;&lt;a href=&quot;#第11章-常用类和基础API&quot; class=&quot;headerlink&quot; title=&quot;第11章_常用类和基础API&quot;&gt;&lt;/a&gt;第11章_常用类和基础API&lt;/h1&gt;&lt;h2 id=&quot;本章专题与脉络&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-异常处理</title>
    <link href="https://larkkkkkkk.github.io/2023/10/20/JAVA-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://larkkkkkkk.github.io/2023/10/20/JAVA-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2023-10-20T06:31:27.000Z</published>
    <updated>2023-10-21T13:46:34.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第09章-异常处理"><a href="#第09章-异常处理" class="headerlink" title="第09章_异常处理"></a>第09章_异常处理</h1><hr><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145299.png" alt="第3阶段：Java高级应用-第09章" style="zoom: 50%;"><h2 id="1-异常概述"><a href="#1-异常概述" class="headerlink" title="1. 异常概述"></a>1. 异常概述</h2><h3 id="1-1-什么是生活的异常"><a href="#1-1-什么是生活的异常" class="headerlink" title="1.1 什么是生活的异常"></a>1.1 什么是生活的异常</h3><p>男主角小明每天开车上班，正常车程1小时。但是，不出意外的话，可能会出现意外。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145306.png" alt="image-20220814203918560"></p><p>出现意外，即为异常情况。我们会做相应的处理。如果不处理，到不了公司。处理完了，就可以正常开车去公司。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145047.png" alt="image-20220520210320301" style="zoom:70%;"><h3 id="1-2-什么是程序的异常"><a href="#1-2-什么是程序的异常" class="headerlink" title="1.2 什么是程序的异常"></a>1.2 什么是程序的异常</h3><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得<code>尽善尽美</code>，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：<code>客户输入数据的格式问题</code>，<code>读取文件是否存在</code>，<code>网络是否始终保持通畅</code>等等。</p><ul><li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常情况，如果不处理最终会导致JVM的非正常停止。</li></ul><blockquote><p>异常指的并不是语法错误和逻辑错误。<br>1.1 语法错误，编译不通过，不会产生字节码文件，根本不能运行。</p><p>1.2 代码逻辑错误，只是没有得到想要的结果，例如：求a与b的和，你写成了a-b</p></blockquote><h3 id="1-3-异常的抛出机制"><a href="#1-3-异常的抛出机制" class="headerlink" title="1.3 异常的抛出机制"></a>1.3 异常的抛出机制</h3><p>Java中是如何表示不同的异常情况，又是如何让程序员得知，并处理异常的呢？</p><p>Java中把不同的异常用不同的类表示<strong>，一旦发生某种异常，就<code>创建该异常类型的对象</code>，并且抛出（throw）</strong>。</p><p>1.1 然后程序员可以捕获(catch)到这个异常对象，并处理；<br>1.2 如果没有捕获(catch)这个异常对象，那么这个异常对象将会导致程序终止。</p><p>举例：</p><p>运行下面的程序，程序会产生一个数组角标越界异常<code>ArrayIndexOfBoundsException</code>。我们通过图解来解析下异常产生和抛出的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTools</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对给定的数组通过给定的角标获取元素。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> element = arr[index];</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">34</span>, <span class="number">12</span>, <span class="number">67</span> &#125;;</span><br><span class="line">        intnum = ArrayTools.getElement(arr, <span class="number">4</span>)</span><br><span class="line">        System.out.println(<span class="string">"num="</span> + num);</span><br><span class="line">        System.out.println(<span class="string">"over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序执行过程图解：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145800.png" alt></p><h3 id="1-4-如何对待异常"><a href="#1-4-如何对待异常" class="headerlink" title="1.4 如何对待异常"></a>1.4 如何对待异常</h3><p> 对于程序出现的异常，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是程序员在编写程序时，就充分考虑到各种可能发生的异常和错误，极力预防和避免。实在无法避免的，要编写相应的代码进行异常的检测、以及<code>异常的处理</code>，保证代码的<code>健壮性</code>。</p><h2 id="2-Java异常体系"><a href="#2-Java异常体系" class="headerlink" title="2. Java异常体系"></a>2. Java异常体系</h2><h3 id="2-1-Throwable"><a href="#2-1-Throwable" class="headerlink" title="2.1 Throwable"></a>2.1 Throwable</h3><p><code>java.lang.Throwable</code> 类是Java程序执行过程中发生的异常事件对应的类的根父类。</p><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>：打印异常的详细信息。</p><p>包含了异常的类型、异常的原因、异常出现的位置、在开发和调试阶段都得使用printStackTrace。</p></li><li><p><code>public String getMessage()</code>：获取发生异常的原因。</p></li></ul><h3 id="2-2-Error-和-Exception"><a href="#2-2-Error-和-Exception" class="headerlink" title="2.2 Error 和 Exception"></a>2.2 Error 和 Exception</h3><p>Throwable可分为两类：Error和Exception。分别对应着<code>java.lang.Error</code>与<code>java.lang.Exception</code>两个类。</p><p><strong>Error：</strong>Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。一般不编写针对性的代码进行处理。</p><ul><li>例如：StackOverflowError（栈内存溢出）和OutOfMemoryError（堆内存溢出，简称OOM）。</li></ul><p><strong>Exception:</strong> 其它因编程错误或偶然的外在因素导致的一般性问题，需要使用针对性的代码进行处理，使程序继续运行。否则一旦发生异常，程序也会挂掉。例如：</p><ul><li>空指针访问</li><li>试图读取不存在的文件</li><li>网络连接中断</li><li>数组角标越界</li></ul><blockquote><p>说明：</p><ol><li>无论是Error还是Exception，还有很多子类，异常的类型非常丰富。当代码运行出现异常时，特别是我们不熟悉的异常时，不要紧张，把异常的简单类名，拷贝到API中去查去认识它即可。</li><li>我们本章讲的异常处理，其实针对的就是Exception。</li></ol></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145981.png" alt="image-20220511161910951" style="zoom:67%;"><h3 id="2-3-编译时异常和运行时异常"><a href="#2-3-编译时异常和运行时异常" class="headerlink" title="2.3 编译时异常和运行时异常"></a>2.3 编译时异常和运行时异常</h3><p>Java程序的执行分为编译时过程和运行时过程。有的错误只有在<code>运行时</code>才会发生。比如：除数为0，数组下标越界等。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145046.png" alt="image-20220330002449526" style="zoom:80%;"><p>因此，根据异常可能出现的阶段，可以将异常分为：</p><ul><li><strong>编译时期异常</strong>（即checked异常、受检异常）：在代码编译阶段，编译器就能明确<code>警示</code>当前代码<code>可能发生（不是一定发生）</code>xx异常，并<code>明确督促</code>程序员提前编写处理它的代码。如果程序员<code>没有编写</code>对应的异常处理代码，则编译器就会直接判定编译失败，从而不能生成字节码文件。通常，这类异常的发生不是由程序员的代码引起的，或者不是靠加简单判断就可以避免的，例如：FileNotFoundException（文件找不到异常）。</li><li><strong>运行时期异常</strong>（即runtime异常、unchecked异常、非受检异常）：在代码编译阶段，编译器完全不做任何检查，无论该异常是否会发生，编译器都不给出任何提示。只有等代码运行起来并确实发生了xx异常，它才能被发现。通常，这类异常是由程序员的代码编写不当引起的，只要稍加判断，或者细心检查就可以避免。<ul><li><strong>java.lang.RuntimeException</strong>类及它的子类都是运行时异常。比如：ArrayIndexOutOfBoundsException数组下标越界异常，ClassCastException类型转换异常。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145864.png" alt="1562771528807"></p><h2 id="3-常见的错误和异常"><a href="#3-常见的错误和异常" class="headerlink" title="3. 常见的错误和异常"></a>3. 常见的错误和异常</h2><h3 id="3-1-Error"><a href="#3-1-Error" class="headerlink" title="3.1 Error"></a>3.1 Error</h3><p>最常见的就是VirtualMachineError，它有两个经典的子类：StackOverflowError、OutOfMemoryError。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStackOverflowError</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//StackOverflowError</span></span><br><span class="line">        recursion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">()</span></span>&#123; <span class="comment">//递归方法</span></span><br><span class="line">        recursion(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOutOfMemoryError</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//OutOfMemoryError</span></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[Integer.MAX_VALUE];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//OutOfMemoryError</span></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            s.append(<span class="string">"atguigu"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-运行时异常"><a href="#3-2-运行时异常" class="headerlink" title="3.2 运行时异常"></a>3.2 运行时异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//NullPointerException</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>].length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//ClassCastException</span></span><br><span class="line">        Object obj = <span class="number">15</span>;</span><br><span class="line">        String str = (String) obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//InputMismatchException</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入一个整数："</span>);<span class="comment">//输入非整数</span></span><br><span class="line">        <span class="keyword">int</span> num = input.nextInt();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//ArithmeticException</span></span><br><span class="line">        System.out.println(a/b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-编译时异常"><a href="#3-3-编译时异常" class="headerlink" title="3.3 编译时异常"></a>3.3 编译时异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCheckedException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1秒  InterruptedException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class c = Class.forName(<span class="string">"java.lang.String"</span>);<span class="comment">//ClassNotFoundException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"...."</span>);  <span class="comment">//SQLException</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"尚硅谷Java秘籍.txt"</span>); <span class="comment">//FileNotFoundException</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"尚硅谷Java秘籍.txt"</span>);</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);<span class="comment">//FileNotFoundException</span></span><br><span class="line"><span class="keyword">int</span> b = fis.read();<span class="comment">//IOException</span></span><br><span class="line"><span class="keyword">while</span>(b != -<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>)b);</span><br><span class="line">b = fis.read();<span class="comment">//IOException</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();<span class="comment">//IOException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-异常的处理"><a href="#4-异常的处理" class="headerlink" title="4. 异常的处理"></a>4. 异常的处理</h2><h3 id="4-1-异常处理概述"><a href="#4-1-异常处理概述" class="headerlink" title="4.1 异常处理概述"></a>4.1 异常处理概述</h3><p>在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x/y运算时，要<code>检测分母为0</code>，<code>数据为空</code>，<code>输入的不是数据而是字符</code>等。过多的if-else分支会导致程序的<code>代码加长</code>、<code>臃肿</code>，<code>可读性差</code>，程序员需要花很大的精力“<code>堵漏洞</code>”。因此采用异常处理机制。</p><p><strong>Java异常处理</strong></p><p>Java采用的异常处理机制，是<code>将异常处理的程序代码集中在一起</code>，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</p><p><strong>Java异常处理的方式：</strong></p><p>方式一：try-catch-finally</p><p>方式二：throws + 异常类型</p><h3 id="4-2-方式1：捕获异常（try-catch-finally）"><a href="#4-2-方式1：捕获异常（try-catch-finally）" class="headerlink" title="4.2 方式1：捕获异常（try-catch-finally）"></a>4.2 方式1：捕获异常（try-catch-finally）</h3><p>Java提供了异常处理的<strong>抓抛模型</strong>。</p><ul><li>前面提到，Java程序的执行过程中如出现异常，会生成一个异常类对象，该异常对象将被提交给Java运行时系统，这个过程称为<code>抛出(throw)异常</code>。</li><li>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为<code>捕获(catch)异常</code>。</li><li>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li></ul><h4 id="4-2-1-try-catch-finally基本格式"><a href="#4-2-1-try-catch-finally基本格式" class="headerlink" title="4.2.1 try-catch-finally基本格式"></a>4.2.1 try-catch-finally基本格式</h4><p>捕获异常语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">......<span class="comment">//可能产生异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( 异常类型<span class="number">1</span> e )&#123;</span><br><span class="line">......<span class="comment">//当产生异常类型1型异常时的处置措施</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( 异常类型<span class="number">2</span> e )&#123;</span><br><span class="line">...... <span class="comment">//当产生异常类型2型异常时的处置措施</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">...... <span class="comment">//无论是否发生异常，都无条件执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1、整体执行过程：</strong></p><p>当某段代码可能发生异常，不管这个异常是编译时异常（受检异常）还是运行时异常（非受检异常），我们都可以使用try块将它括起来，并在try块下面编写catch分支尝试捕获对应的异常对象。</p><ul><li>如果在程序运行时，try块中的代码没有发生异常，那么catch所有的分支都不执行。</li><li>如果在程序运行时，try块中的代码发生了异常，根据异常对象的类型，将从上到下选择第一个匹配的catch分支执行。此时try中发生异常的语句下面的代码将不执行，而整个try…catch之后的代码可以继续运行。</li><li>如果在程序运行时，try块中的代码发生了异常，但是所有catch分支都无法匹配（捕获）这个异常，那么JVM将会终止当前方法的执行，并把异常对象“抛”给调用者。如果调用者不处理，程序就挂了。</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145413.png" alt="image-20220503122722605" style="zoom:67%;"><p><strong>2、try</strong></p><ul><li>捕获异常的第一步是用<code>try{…}语句块</code>选定捕获异常的范围，将可能出现异常的业务逻辑代码放在try语句块中。</li></ul><p><strong>3、catch (Exceptiontype e)</strong></p><ul><li><p>catch分支，分为两个部分，catch()中编写异常类型和异常参数名，{}中编写如果发生了这个异常，要做什么处理的代码。</p></li><li><p>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。</p><p>比如：可以用ArithmeticException类作为参数的地方，就可以用RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。但不能是与ArithmeticException类无关的异常，如NullPointerException（catch中的语句将不会执行）。</p></li><li><p>每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</p></li><li><p>如果有多个catch分支，并且多个异常类型有父子类关系，必须保证小的子异常类型在上，大的父异常类型在下。否则，报错。</p></li><li><p>catch中常用异常处理的方式</p><ul><li><p><code>public String getMessage()</code>：获取异常的描述信息，返回字符串</p></li><li><p><code>public void printStackTrace()</code>：打印异常的跟踪栈信息并输出到控制台。包含了异常的类型、异常的原因、还包括异常出现的位置，在开发和调试阶段，都得使用printStackTrace()。</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145052.png" alt="image-20220331180736381" style="zoom:80%;"></li></ul><h4 id="4-2-2-使用举例"><a href="#4-2-2-使用举例" class="headerlink" title="4.2.2 使用举例"></a>4.2.2 使用举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexOutExp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String friends[] = &#123;<span class="string">"lisa"</span>, <span class="string">"bily"</span>, <span class="string">"kessy"</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  <span class="comment">// i只能从0-2</span></span><br><span class="line">                System.out.println(friends[i]);  <span class="comment">// 可能出现数组下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"index err"</span>);   <span class="comment">//前面三个正常输出 第四个就会被异常catch捕捉</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\nthis is the end"</span>);  <span class="comment">//记得前面有一个换行符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">lisa</span><br><span class="line">bily</span><br><span class="line">kessy</span><br><span class="line">index err</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> is the end</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivideZero1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;  <span class="comment">//全局变量x</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y;  <span class="comment">//局部变量y</span></span><br><span class="line">        DivideZero1 c = <span class="keyword">new</span> DivideZero1();  <span class="comment">//创建类的对象</span></span><br><span class="line">        System.out.println(<span class="string">"当前对象的属性x值为:"</span>+c.x);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            y = <span class="number">3</span> / c.x;  <span class="comment">//会出现下标异常</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"divide by zero error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"program ends ok!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">当前对象的属性x值为:<span class="number">0</span></span><br><span class="line">divide by zero error!</span><br><span class="line">program ends ok!</span><br></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">String str1 = <span class="string">"atguigu.com"</span>;</span><br><span class="line">str1 = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(str1.charAt(<span class="number">0</span>));</span><br><span class="line">&#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line"><span class="comment">//异常的处理方式1</span></span><br><span class="line">System.out.println(<span class="string">"不好意思，亲~出现了小问题，正在加紧解决..."</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassCastException e)&#123;</span><br><span class="line"><span class="comment">//异常的处理方式2</span></span><br><span class="line">System.out.println(<span class="string">"出现了类型转换的异常"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(RuntimeException e)&#123;</span><br><span class="line"><span class="comment">//异常的处理方式3</span></span><br><span class="line">System.out.println(<span class="string">"出现了运行时异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此处的代码，在异常被处理了以后，是可以正常执行的</span></span><br><span class="line">System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">不好意思，亲~出现了小问题，正在加紧解决...</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h4 id="4-2-3-finally使用及举例"><a href="#4-2-3-finally使用及举例" class="headerlink" title="4.2.3 finally使用及举例"></a>4.2.3 finally使用及举例</h4><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212145506.png" alt="image-20220331215517077" style="zoom: 80%;"><ul><li><p>因为异常会引发程序跳转，从而会导致有些语句执行不到。而程序中有一些特定的代码无论异常是否发生，都<code>需要执行</code>。例如，数据库连接、输入流输出流、Socket连接、Lock锁的关闭等，这样的代码通常就会放到finally块中。所以，我们通常将一定要被执行的代码声明在finally中。</p><ul><li>唯一的例外，使用 System.exit(0) 来终止当前正在运行的 Java 虚拟机。</li></ul></li><li><p>不论在try代码块中是否发生了异常事件，catch语句是否执行，catch语句是否有异常，catch语句中是否有return，finally块中的语句都会被执行。</p></li><li><p>finally语句和catch语句是可选的，但finally不能单独使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>举例1：确保资源关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFinally</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"请输入第一个整数："</span>);</span><br><span class="line">            <span class="keyword">int</span> a = input.nextInt();</span><br><span class="line">            System.out.print(<span class="string">"请输入第二个整数："</span>);</span><br><span class="line">            <span class="keyword">int</span> b = input.nextInt();</span><br><span class="line">            <span class="keyword">int</span> result = a/b;</span><br><span class="line">            System.out.println(a + <span class="string">"/"</span> + b +<span class="string">"="</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"数字格式不正确，请输入两个整数"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"第二个整数不能为0"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"程序结束，释放资源"</span>);  <span class="comment">//一定会输出</span></span><br><span class="line">            input.close(); <span class="comment">//输入流的关闭语句一定要写在finally语句</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出：</span><br><span class="line">请输入第一个整数：<span class="number">2</span></span><br><span class="line">请输入第二个整数：<span class="number">0</span></span><br><span class="line">第二个整数不能为<span class="number">0</span></span><br><span class="line">程序结束，释放资源</span><br></pre></td></tr></table></figure><p>举例2：从try回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="string">"12"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Integer.parseInt(str); <span class="comment">//字符串转为int包装类</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"test结束"</span>);  <span class="comment">//一定会执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最后输出:</span><br><span class="line">test结束</span><br><span class="line"><span class="number">1</span>   <span class="comment">//这个1是try里面返回的</span></span><br></pre></td></tr></table></figure><p>举例3：从catch回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="string">"a"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer.parseInt(str);     <span class="comment">//字符串转为int包装类</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;  <span class="comment">//有异常进入catch</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">            System.out.println(<span class="string">"test结束"</span>);  <span class="comment">//一定会执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">test结束</span><br><span class="line">-<span class="number">1</span>   <span class="comment">//这个-1是catch里面返回的</span></span><br></pre></td></tr></table></figure><p>举例4：从finally回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test(<span class="string">"a"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer.parseInt(str);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"test结束"</span>);    <span class="comment">//一定会执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//直接从finally输出0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">test结束</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>笔试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = test();</span><br><span class="line">        System.out.println(result); <span class="comment">//102</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">//i只能在try里面有效</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i++;   <span class="comment">//没有修改try里面的局部变量i的值</span></span><br><span class="line">            <span class="keyword">return</span> ++i; <span class="comment">//这时候返回的是102</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line"><span class="number">102</span></span><br></pre></td></tr></table></figure><blockquote><p>笔试题：final、finally、finalize有什么区别？</p></blockquote><h4 id="4-2-4-练习"><a href="#4-2-4-练习" class="headerlink" title="4.2.4 练习"></a>4.2.4 练习</h4><p>编写一个类ExceptionTest，在main方法中使用try、catch、finally，要求：</p><ul><li><p>在try块中，编写被零除的代码。</p></li><li><p>在catch块中，捕获被零除所产生的异常，并且打印异常信息</p></li><li><p>在finally块中，打印一条语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int a&#x3D;1;</span><br><span class="line">            int b&#x3D;0;</span><br><span class="line">            System.out.println(a&#x2F;b);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(&quot;不能被整除0&quot;);</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            System.out.println(&quot;finally语句&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146146.png" alt="image-20231016141559508"></p></li></ul><h4 id="4-2-5-异常处理的体会"><a href="#4-2-5-异常处理的体会" class="headerlink" title="4.2.5 异常处理的体会"></a>4.2.5 异常处理的体会</h4><ul><li><p>前面使用的异常都是<code>RuntimeException类</code>/它的<code>子类</code>，这些类异常的特点是：即使没有使用try和catch捕获，Java自己也能捕获，并且编译通过 ( 但运行时会发生异常使得程序运行终止 )。所以，对于这类异常，可以<strong>不作处理</strong>，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</p></li><li><p>如果抛出的异常是IOException等类型的<code>非运行时异常</code>，则必须捕获，否则<code>编译错误</code>。也就是说，我们<strong>必须处理编译时异常</strong>，将异常进行捕捉，转化为运行时异常。</p></li></ul><h3 id="4-3-方式2：声明抛出异常类型（throws）"><a href="#4-3-方式2：声明抛出异常类型（throws）" class="headerlink" title="4.3 方式2：声明抛出异常类型（throws）"></a>4.3 方式2：声明抛出异常类型（throws）</h3><ul><li><p>如果在编写方法体的代码时，某句代码可能发生某个<strong>编译时异常</strong>，不处理编译不通过，但是在当前方法体中可能<code>不适合处理</code>或<code>无法给出合理的处理方式</code>，则此方法应<code>显示地</code>声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146749.png" alt="image-20220331112000671" style="zoom:67%;"></li><li><p>具体方式：在方法声明中用<code>throws语句</code>可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</p></li></ul><h4 id="4-3-1-throws基本格式"><a href="#4-3-1-throws基本格式" class="headerlink" title="4.3.1 throws基本格式"></a>4.3.1 throws基本格式</h4><p><strong>声明异常格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) throws 异常类名1,异常类名2…&#123;   &#125;</span><br></pre></td></tr></table></figure><p>在throws后面可以写多个异常类型，用逗号隔开。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String file)</span>  <span class="keyword">throws</span> FileNotFoundException,IOException </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 读文件的操作可能产生FileNotFoundException或IOException类型的异常</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-throws-使用举例"><a href="#4-3-2-throws-使用举例" class="headerlink" title="4.3.2 throws 使用举例"></a>4.3.2 throws 使用举例</h4><p><strong>举例：针对于编译时异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThrowsCheckedException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"上课....."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            afterClass();<span class="comment">//换到这里处理异常</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"准备提前上课"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"上课....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>; i&gt;=<span class="number">1</span>; i--)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);<span class="comment">//本来应该在这里处理异常</span></span><br><span class="line">            System.out.println(<span class="string">"距离上课还有："</span> + i + <span class="string">"分钟"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例：针对于运行时异常：</strong></p><p>throws后面也可以写运行时异常类型，只是运行时异常类型，写或不写对于编译器和程序执行来说都没有任何区别。如果写了，唯一的区别就是调用者调用该方法后，使用try…catch结构时，IDEA可以获得更多的信息，需要添加哪种catch分支。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThrowsRuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"请输入第一个整数："</span>);</span><br><span class="line">            <span class="keyword">int</span> a = input.nextInt();</span><br><span class="line">            System.out.print(<span class="string">"请输入第二个整数："</span>);</span><br><span class="line">            <span class="keyword">int</span> b = input.nextInt();</span><br><span class="line">            <span class="keyword">int</span> result = divide(a,b);</span><br><span class="line">            System.out.println(a + <span class="string">"/"</span> + b +<span class="string">"="</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException | InputMismatchException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><span class="keyword">throws</span> ArithmeticException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a/b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-方法重写中throws的要求"><a href="#4-3-3-方法重写中throws的要求" class="headerlink" title="4.3.3 方法重写中throws的要求"></a>4.3.3 方法重写中throws的要求</h4><p>方法重写时，对于方法签名是有严格要求的。复习：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（1）方法名必须相同</span><br><span class="line">（2）形参列表必须相同</span><br><span class="line">（3）返回值类型</span><br><span class="line">- 基本数据类型和void：必须相同</span><br><span class="line">- 引用数据类型：&lt;&#x3D;</span><br><span class="line">（4）权限修饰符：&gt;&#x3D;，而且要求父类被重写方法在子类中是可见的</span><br><span class="line">（5）不能是static，final修饰的方法</span><br></pre></td></tr></table></figure><p>此外，对于throws异常列表要求：</p><p>​    <strong>1.编译时异常:</strong></p><ul><li><p>如果父类被重写方法的方法签名后面没有 “throws  编译时异常类型”，那么重写方法时，方法签名后面也不能出现“throws  编译时异常类型”。</p></li><li><p>如果父类被重写方法的方法签名后面有 “<code>throws  编译时异常类型</code>”，那么重写方法时，throws的编译时异常类型必须 &lt;= 被重写方法throws的编译时异常类型，或者不throws编译时异常。</p><p><strong>2.运行时异常:</strong></p></li><li><p>方法重写，对于“<code>throws 运行时异常类型</code>”没有要求。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Father.method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException,ClassCastException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Son.method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-两种异常处理方式的选择"><a href="#4-4-两种异常处理方式的选择" class="headerlink" title="4.4 两种异常处理方式的选择"></a>4.4 两种异常处理方式的选择</h3><p>前提：对于异常，使用相应的处理方式。此时的异常，主要指的是编译时异常。</p><ul><li>如果程序代码中，涉及到资源的调用（流、数据库连接、网络连接等），则必须考虑使用try-catch-finally来处理，保证不出现内存泄漏。</li><li>如果父类被重写的方法没有throws异常类型，则子类重写的方法中如果出现异常，只能考虑使用try-catch-finally进行处理，不能throws。</li><li>开发中，方法a中依次调用了方法b,c,d等方法，方法b,c,d之间是递进关系。此时，如果方法b,c,d中有异常，我们通常选择使用throws，而方法a中通常选择使用try-catch-finally。</li></ul><h2 id="5-手动抛出异常对象：throw"><a href="#5-手动抛出异常对象：throw" class="headerlink" title="5. 手动抛出异常对象：throw"></a>5. 手动抛出异常对象：throw</h2><p>Java 中异常对象的生成有两种方式：</p><ul><li><p>由虚拟机<strong>自动生成</strong>：程序运行过程中，虚拟机检测到程序发生了问题，那么针对当前代码，就会在后台自动创建一个对应异常类的实例对象并抛出。</p></li><li><p>由开发人员<strong>手动创建</strong>：<code>new 异常类型([实参列表]);</code>，如果创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样，但是一旦throw抛出，就会对程序运行产生影响了。</p></li></ul><h3 id="5-1-使用格式"><a href="#5-1-使用格式" class="headerlink" title="5.1 使用格式"></a>5.1 使用格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> 异常类名(参数);</span><br></pre></td></tr></table></figure><p>throw语句抛出的异常对象，和JVM自动创建和抛出的异常对象一样。</p><ul><li><p>如果是<strong>编译时异常类型</strong>的对象，需要使用throws或者try…catch处理，否则编译不通过。</p></li><li><p>如果是<strong>运行时异常类型</strong>的对象，编译器不提示。</p></li><li><p>可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将会产生语法错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> String(<span class="string">"want to throw"</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-2-使用注意点："><a href="#5-2-使用注意点：" class="headerlink" title="5.2 使用注意点："></a>5.2 使用注意点：</h3><p>无论是编译时异常类型的对象，还是运行时异常类型的对象，如果没有被try..catch合理的处理，都会导致程序崩溃。</p><p>throw语句会导致程序执行流程被改变，throw语句是明确抛出一个异常对象，因此它<code>下面的代码将不会执行</code>。</p><p>如果当前方法没有try…catch处理这个异常对象，throw语句就会<code>代替return语句</code>提前终止当前方法的执行，并返回一个异常对象给调用者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThrow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一个try-catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(max(<span class="number">4</span>,<span class="number">2</span>,<span class="number">31</span>,<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二个try-catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(max(<span class="number">4</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第三个try-catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(max());  <span class="comment">//有问题</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//寻找数组中的最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>... nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length==<span class="number">0</span>)&#123;  <span class="comment">//nums为空</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"没有传入任何整数，无法获取最大值"</span>);  <span class="comment">//抛出一个异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; max)&#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出：</span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">java.lang.IllegalArgumentException: 没有传入任何整数，无法获取最大值</span><br><span class="line">at ExceptionTest.TestThrow.max(TestThrow.java:<span class="number">27</span>)</span><br><span class="line">at ExceptionTest.TestThrow.main(TestThrow.java:<span class="number">19</span>)</span><br></pre></td></tr></table></figure><h2 id="6-自定义异常类"><a href="#6-自定义异常类" class="headerlink" title="6. 自定义异常类"></a>6. 自定义异常类</h2><h3 id="6-1-为什么需要自定义异常类"><a href="#6-1-为什么需要自定义异常类" class="headerlink" title="6.1 为什么需要自定义异常类"></a>6.1 为什么需要自定义异常类</h3><p>Java中不同的异常类，分别表示着某一种具体的异常情况。那么在开发中总是有些异常情况是核心类库中没有定义好的，此时我们需要根据自己业务的异常情况来定义异常类。例如年龄负数问题，考试成绩负数问题，某员工已在团队中等。</p><h3 id="6-2-如何自定义异常类"><a href="#6-2-如何自定义异常类" class="headerlink" title="6.2 如何自定义异常类"></a>6.2 如何自定义异常类</h3><p>（1）要<strong>继承一个异常类型</strong></p><p>​            自定义一个编译时异常类型：自定义类继承<code>java.lang.Exception</code>。</p><p>​            自定义一个运行时异常类型：自定义类继承<code>java.lang.RuntimeException</code>。</p><p>（2）建议大家提供至少<strong>两个构造器</strong>，一个是无参构造，一个是(String message)构造器。</p><p>（3）自定义异常需要提供<strong>一个全局常量</strong>，—&gt; <strong>static final long</strong> <strong>serialVersionUID</strong></p><p>例如:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146349.png" alt></p><h3 id="6-3-注意点"><a href="#6-3-注意点" class="headerlink" title="6.3 注意点"></a>6.3 注意点</h3><ol><li><p><strong>自定义的异常</strong>只能通过<strong>throw抛出</strong>。</p></li><li><p>自定义异常最重要的是异常类的名字和message属性。当异常出现时，可以根据名字判断异常类型。比如：<code>TeamException(&quot;成员已满，无法添加&quot;);</code>、 <code>TeamException(&quot;该员工已是某团队成员&quot;);</code></p></li><li><p><strong>自定义异常对象</strong>只能<strong>手动抛出</strong>。抛出后由try..catch处理，也可以甩锅throws给调用者处理。</p></li></ol><h3 id="6-4-举例"><a href="#6-4-举例" class="headerlink" title="6.4 举例"></a>6.4 举例</h3><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;  <span class="comment">//继承编译时异常类型</span></span><br><span class="line">    <span class="comment">//1个全局常量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">23423423435L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idnumber;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.idnumber = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idnumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExpTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        MyExpTest t = <span class="keyword">new</span> MyExpTest();</span><br><span class="line">        t.manager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            regist(-<span class="number">100</span>);  <span class="comment">//对regist方法进行检测</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;   <span class="comment">//使用自己定义的MyException类</span></span><br><span class="line">            System.out.println(<span class="string">"登记失败，出错种类:"</span> + e.getId());</span><br><span class="line">            System.out.println(<span class="string">"输出信息:"</span>+e.getMessage());</span><br><span class="line">            System.out.println(<span class="string">"输出报错的原因:"</span>+e.getCause());</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"本次登记操作结束！"</span>);  <span class="comment">//一定会执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> MyException</span>&#123;  <span class="comment">//捕获异常 返回给被调用的manager方法【在它方法内使用try-catch】</span></span><br><span class="line">        <span class="keyword">if</span>(num&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"人数为负数，不合理"</span>,<span class="number">3</span>);  <span class="comment">//抛出异常</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"登记人数"</span>+num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146708.png" alt="image-20231016170808072"></p><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotTriangleException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;  <span class="comment">//继承编译时异常类型</span></span><br><span class="line">    <span class="comment">//一个全局常量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">13465653435L</span>;</span><br><span class="line"><span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotTriangleException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotTriangleException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c)</span> <span class="keyword">throws</span> NotTriangleException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;=<span class="number">0</span> || b&lt;=<span class="number">0</span> || c&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotTriangleException(<span class="string">"三角形的边长必须是正数"</span>);  <span class="comment">//抛出自定义异常类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotTriangleException(a+<span class="string">","</span> + b +<span class="string">","</span> + c +<span class="string">"不能构造三角形，三角形任意两边之后必须大于第三边"</span>);  <span class="comment">//抛出自定义异常类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">double</span> a)</span> <span class="keyword">throws</span> NotTriangleException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotTriangleException(<span class="string">"三角形的边长必须是正数"</span>); <span class="comment">//抛出自定义异常类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotTriangleException(a+<span class="string">","</span> + b +<span class="string">","</span> + c +<span class="string">"不能构造三角形，三角形任意两边之后必须大于第三边"</span>);  <span class="comment">//抛出自定义异常类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(<span class="keyword">double</span> b)</span> <span class="keyword">throws</span> NotTriangleException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotTriangleException(<span class="string">"三角形的边长必须是正数"</span>);  <span class="comment">//抛出自定义异常类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotTriangleException(a+<span class="string">","</span> + b +<span class="string">","</span> + c +<span class="string">"不能构造三角形，三角形任意两边之后必须大于第三边"</span>);  <span class="comment">//抛出自定义异常类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC</span><span class="params">(<span class="keyword">double</span> c)</span> <span class="keyword">throws</span> NotTriangleException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotTriangleException(<span class="string">"三角形的边长必须是正数"</span>);  <span class="comment">//抛出自定义异常类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotTriangleException(a+<span class="string">","</span> + b +<span class="string">","</span> + c +<span class="string">"不能构造三角形，三角形任意两边之后必须大于第三边"</span>);  <span class="comment">//抛出自定义异常类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Triangle&#123;"</span> +<span class="string">"a="</span> + a +<span class="string">", b="</span> + b +<span class="string">", c="</span> + c +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTriangle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Triangle t = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//第一个try  测试构造器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t = <span class="keyword">new</span> Triangle(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);  </span><br><span class="line">            System.out.println(<span class="string">"三角形创建成功："</span>);</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotTriangleException e) &#123;  <span class="comment">//出现在自定义异常类</span></span><br><span class="line">            System.err.println(<span class="string">"三角形创建失败"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//第二个try  测试setA方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                t.setA(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"三角形边长修改成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotTriangleException e) &#123;  <span class="comment">//出现在自定义异常类</span></span><br><span class="line">            System.out.println(<span class="string">"三角形边长修改失败"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146645.png" alt="image-20231016171600914"></p><h2 id="7-练习"><a href="#7-练习" class="headerlink" title="7. 练习"></a>7. 练习</h2><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法 methodA</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"进入方法A"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"制造异常"</span>); <span class="comment">//抛出一个运行时异常</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"用A方法的finally"</span>); <span class="comment">//一定会执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法 methodB</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"进入方法B"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"调用B方法的finally"</span>);   <span class="comment">//一定会执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码执行main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//执行顺序:</span></span><br><span class="line"><span class="comment">//进入try块 执行methodA方法</span></span><br><span class="line"><span class="comment">//进入methodA方法的try块 输出进入方法A  然后执行finally语句 输出用A方法的finally  之后将抛出的运行时异常给调用者main方法 进入catch就输出制造异常</span></span><br><span class="line"><span class="comment">//最后执行methodB方法</span></span><br><span class="line"><span class="comment">//进入方法B的try块  输出进入方法B  然后执行finally输出调用B方法的finally 最后不返回值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodA();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用方法B</span></span><br><span class="line">        methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">进入方法A</span><br><span class="line">用A方法的<span class="keyword">finally</span></span><br><span class="line">制造异常</span><br><span class="line">进入方法B</span><br><span class="line">调用B方法的<span class="keyword">finally</span></span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><p>从键盘接收学生成绩，成绩必须在0~100之间。</p><p>自定义成绩无效异常。</p><p>编写方法接收成绩并返回该成绩，如果输入无效，则抛出自定义异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;自定义异常类</span><br><span class="line">public class GradeNotException extends Exception&#123;</span><br><span class="line">    static final long serialVersionUID&#x3D;-123412421L;</span><br><span class="line">    public GradeNotException()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public GradeNotException(String name)&#123;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;</span><br><span class="line">    public GradeNotException(String message,Throwable cause)&#123;</span><br><span class="line">        super(message,cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;手动Stduent类使用设定的自定义异常</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Student &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner input&#x3D;new Scanner(System.in);</span><br><span class="line">        try&#123;</span><br><span class="line">            System.out.println(&quot;输入学生成绩&quot;);</span><br><span class="line">            int score&#x3D;getValidScore(input);  &#x2F;&#x2F;调用方法</span><br><span class="line">        &#125;catch(GradeNotException e)&#123;  &#x2F;&#x2F;catch为自定义异常类</span><br><span class="line">            System.out.println(e.getMessage());  &#x2F;&#x2F;输出异常信息  --就是throw new GradeNotException括号里面内容</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            System.out.println(&quot;finally语句&quot;);  &#x2F;&#x2F;一定执行</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int getValidScore(Scanner input) throws GradeNotException&#123;  &#x2F;&#x2F;抛出自定义异常</span><br><span class="line">        System.out.println(&quot;输出成绩:&quot;);</span><br><span class="line">        int score&#x3D;input.nextInt(); &#x2F;&#x2F;从键盘输入成绩score</span><br><span class="line">        if(score&lt;0||score&gt;100)&#123;</span><br><span class="line">            throw new GradeNotException(&quot;输入成绩无效&quot;);  &#x2F;&#x2F;只能throw手动抛出</span><br><span class="line">        &#125;</span><br><span class="line">        return score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码结果如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146897.png" alt="image-20231017094258915"></p><p><strong>练习3：</strong></p><p>编写应用程序EcmDef.java，接收命令行的两个参数，要求不能输入负数，计算两数相除。<br>对数据类型不一致(NumberFormatException)、缺少命令行参数(ArrayIndexOutOfBoundsException、<br>除0(ArithmeticException)及输入负数(EcDef 自定义的异常)进行异常处理。</p><p>提示：<br>(1)在主类(EcmDef)中定义异常方法(ecm)完成两数相除功能。</p><p>(2)在main()方法中使用异常处理语句进行异常处理。</p><p>(3)在程序中，自定义对应输入负数的异常类(EcDef)。</p><p>(4)运行时接受参数 java EcmDef 20 10   //args[0]=“20” args[1]=“10”</p><p>(5)Interger类的static方法parseInt(String s)将s转换成对应的int值。<br>     如：int a=Interger.parseInt(“314”);    //a=314;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;自定义异常类</span><br><span class="line">public class EcmDefTest extends Exception&#123;</span><br><span class="line">    static final long serialVersionUID&#x3D;-123148L;</span><br><span class="line">    public EcmDefTest()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public EcmDefTest(String name)&#123;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class EcmDef &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;写try-catch-finally块</span><br><span class="line">        try&#123;</span><br><span class="line">           if(args.length!&#x3D;2)&#123;</span><br><span class="line">               System.out.println(&quot;没有获取两个命令行参数&quot;);</span><br><span class="line">               throw new ArrayIndexOutOfBoundsException(&quot;需要提供两个命令行参数&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           &#x2F;&#x2F;因为main里面是字符串数组&#x2F;&#x2F;要对比数据类型不一致  那么就要将String转为包装类对比</span><br><span class="line">           int num1&#x3D;Integer.parseInt(args[0]);</span><br><span class="line">           int num2&#x3D;Integer.parseInt(args[1]);</span><br><span class="line">           &#x2F;&#x2F;做除法</span><br><span class="line">           getChu(num1,num2);</span><br><span class="line">        &#125;catch(NumberFormatException e)&#123;</span><br><span class="line">            System.out.println(&quot;发生的是NumberFormatException(数据类型不一致)异常类&quot;);</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;catch(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(&quot;发生的是ArrayIndexOutOfBoundsException(缺少命令行参数)异常类&quot;);</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;catch(ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(&quot;发生的是ArithmeticException(除0)异常类&quot;);</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;catch(EcmDefTest e)&#123;</span><br><span class="line">            System.out.println(&quot;发生的是EcmDefTest(输入负数)自定义异常类&quot;);</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            System.out.println(&quot;finally语句&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void getChu(int num1,int num2) throws EcmDefTest &#123;</span><br><span class="line">        if(num1&lt;0||num2&lt;0)&#123;</span><br><span class="line">            throw new EcmDefTest(&quot;输入不能为负数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(num2&#x3D;&#x3D;0)&#123;</span><br><span class="line">            throw new ArithmeticException(&quot;被除数为0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        int res&#x3D;num1&#x2F;num2;</span><br><span class="line">        System.out.println(&quot;res&quot;+res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146690.png" alt="image-20231017102148928"></p><h2 id="8-小结与小悟"><a href="#8-小结与小悟" class="headerlink" title="8. 小结与小悟"></a>8. 小结与小悟</h2><h3 id="8-1-小结：异常处理5个关键字"><a href="#8-1-小结：异常处理5个关键字" class="headerlink" title="8.1 小结：异常处理5个关键字"></a>8.1 小结：异常处理5个关键字</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146785.png" alt="image-20220330003738109" style="zoom: 67%;"><blockquote><p>类比：上游排污，下游治污</p></blockquote><h3 id="8-2-感悟"><a href="#8-2-感悟" class="headerlink" title="8.2 感悟"></a>8.2 感悟</h3><p><strong>小哲理：</strong></p><p>世界上最遥远的<code>距离</code>，是我在<code>if</code>里你在<code>else</code>里，似乎一直相伴又永远分离；</p><p>世界上最痴心的<code>等待</code>，是我当<code>case</code>你是<code>switch</code>，或许永远都选不上自己；</p><p>世界上最真情的<code>相依</code>，是你在<code>try</code>我在<code>catch</code>。无论你发神马脾气，我都默默承受，静静处理。到那时，再来期待我们的<code>finally</code>。</p><p><strong>歌词：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212146209.png" alt="image-20220511163035280" style="zoom:67%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第09章-异常处理&quot;&gt;&lt;a href=&quot;#第09章-异常处理&quot; class=&quot;headerlink&quot; title=&quot;第09章_异常处理&quot;&gt;&lt;/a&gt;第09章_异常处理&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;本章专题与脉络&quot;&gt;&lt;a href=&quot;#本章专题与脉络&quot; clas
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-面向对象</title>
    <link href="https://larkkkkkkk.github.io/2023/10/20/JAVA-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://larkkkkkkk.github.io/2023/10/20/JAVA-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-10-20T06:31:02.000Z</published>
    <updated>2023-10-27T12:02:33.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第06章-面向对象编程（基础）"><a href="#第06章-面向对象编程（基础）" class="headerlink" title="第06章_面向对象编程（基础）"></a>第06章_面向对象编程（基础）</h1><p><strong>学习面向对象内容的三条主线</strong></p><p>•     Java类及类的成员：（重点）属性、方法、构造器；（熟悉）代码块、内部类</p><p>•     面向对象的特征：封装、继承、多态、（抽象）</p><p>•     其他关键字的使用：this、super、package、import、static、final、interface、abstract等</p><h2 id="1-面向对象编程概述-了解"><a href="#1-面向对象编程概述-了解" class="headerlink" title="1. 面向对象编程概述(了解)"></a>1. 面向对象编程概述(了解)</h2><h3 id="1-1-程序设计的思路"><a href="#1-1-程序设计的思路" class="headerlink" title="1.1 程序设计的思路"></a>1.1 程序设计的思路</h3><p>面向对象，是软件开发中的一类编程风格、开发范式。除了面向对象，还有面向过程、指令式编程和函数式编程。在所有的编程范式中，我们接触最多的还是面向过程和面向对象两种。</p><p>类比：史书类型</p><p>•     纪传体：以人物传记为中心，“本纪”叙述帝王，“世家”记叙王侯封国和特殊人物，“列传”记叙民间人物。</p><p>•     编年体：按年、月、日顺序编写。</p><p>•     国别体：是一部分国记事的历史散文，分载多国历史。</p><p>早期先有面向过程思想，随着软件规模的扩大，问题复杂性的提高，面向过程的弊端越来越明显，出现了面向对象思想并成为目前主流的方式。</p><p><strong>1. 面向过程的程序设计思想（Process-Oriented Programming）</strong>，简称POP</p><p>关注的焦点是过程：过程就是操作数据的步骤。如果某个过程的实现代码重复出现，那么就可以把这个过程抽取为一个函数。这样就可以大大简化冗余代码，便于维护。</p><p>典型的语言：C语言</p><p>代码结构：以函数为组织单位。</p><p>是一种“执行者思维”，适合解决简单问题。扩展能力差、后期维护难度较大。</p><p><strong>2. 面向对象的程序设计思想（ Object Oriented Programming）</strong>，简称OOP</p><p>关注的焦点是类：在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，用类来表示。</p><p>典型的语言：Java、C#、C++、Python、Ruby和PHP等</p><p>代码结构：以类为组织单位。每种事物都具备自己的属性和行为/功能。</p><p>是一种“设计者思维”，适合解决复杂问题。代码扩展性强、可维护性高。</p><h3 id="1-2-由实际问题考虑如何设计程序"><a href="#1-2-由实际问题考虑如何设计程序" class="headerlink" title="1.2 由实际问题考虑如何设计程序"></a>1.2 由实际问题考虑如何设计程序</h3><p>可随着需求的更改，功能的增多，发现需要面对每一个步骤很麻烦了，这时就开始思索，<strong>能不能把这些步骤和功能进行封装，封装时根据不同的功能，进行不同的封装，功能类似的封装在一起。</strong>这样结构就清晰了很多。用的时候，找到对应的类就可以了。这就是面向对象的思想。</p><p><strong>类比举例2：人把大象装进冰箱</strong></p><p><strong>面向过程：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.打开冰箱</span><br><span class="line">2.把大象装进冰箱</span><br><span class="line">3.把冰箱门关住</span><br></pre></td></tr></table></figure><p>面向对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;分为三个类</span><br><span class="line">人&#123;</span><br><span class="line">   打开（冰箱）&#123;</span><br><span class="line">   冰箱.开门();  </span><br><span class="line">   &#125;</span><br><span class="line">   操作(大象)&#123;</span><br><span class="line">       大象.进入(冰箱);</span><br><span class="line">   &#125;</span><br><span class="line">   关闭(冰箱)&#123;  </span><br><span class="line">      冰箱.关门();   </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">冰箱&#123;</span><br><span class="line">   开门()&#123; &#125; </span><br><span class="line">   关门()&#123; &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">大象&#123;</span><br><span class="line">   进入(冰箱)&#123; </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-Java语言的基本元素：类和对象"><a href="#2-Java语言的基本元素：类和对象" class="headerlink" title="2. Java语言的基本元素：类和对象"></a>2. Java语言的基本元素：类和对象</h2><h3 id="2-1-引入"><a href="#2-1-引入" class="headerlink" title="2.1 引入"></a>2.1 引入</h3><p>人认识世界，其实就是面向对象的。比如，我们认识一下美人鱼（都没见过）</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212042448.gif" alt="image-20220520162643547"></p><p>经过“仔细学习”，发现美人鱼通常具备一些特征：</p><p>•     女孩</p><p>•     有鱼尾</p><p>•     美丽</p><p>这个总结的过程，其实是抽象化的过程。抽象出来的美人鱼的特征，可以归纳为一个美人鱼类。而图片中的都是这个类呈现出来的具体的对象。</p><h3 id="2-2-类和对象概述"><a href="#2-2-类和对象概述" class="headerlink" title="2.2 类和对象概述"></a>2.2 类和对象概述</h3><p>类(Class)和对象(Object)是面向对象的核心概念。</p><p><strong>1**</strong>、什么是类**</p><p><strong>类</strong>：具有相同特征的事物的抽象描述，是抽象的、概念上的定义。</p><p><strong>2**</strong>、什么是对象**</p><p><strong>对象</strong>：实际存在的该类事物的每个个体，是具体的，因而也称为实例(instance)。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212042110.gif" alt="img"></p><p>可以理解为：类 =&gt; 抽象概念的人；对象 =&gt; 实实在在的某个人</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212042059.jpg" alt="img"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212042451.gif" alt="img"></p><p><strong>3**</strong>、类与对象的关系错误理解**</p><p>曰：“白马非马，可乎？”<br> 曰：“可。”<br> 曰：“何哉？”<br> 曰：“马者，所以命形也。白者，所以命色也。命色者，非命形也，故曰白马非马。”</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212042193.gif" alt="img"></p><h3 id="2-3-类的成员概述"><a href="#2-3-类的成员概述" class="headerlink" title="2.3 类的成员概述"></a>2.3 类的成员概述</h3><p>面向对象程序设计的重点是类的设计</p><p>Java中用类class来描述事物也是如此。类，是一组相关属性和行为的集合，这也是类最基本的两个成员。</p><p><strong>属性：</strong>该类事物的状态信息。对应类中的成员变量</p><p>•     <strong>成员变量 &lt;=&gt; 属性 &lt;=&gt; Field</strong></p><p><strong>行为：</strong>该类事物要做什么操作，或者基于事物的状态能做什么。对应类中的成员方法</p><p>•     <strong>(成员)方法 &lt;=&gt; 函数 &lt;=&gt; Method</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212042714.jpg" alt="20220319_211611"></p><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212042521.gif" alt="img"></p><h3 id="2-4-面向对象完成功能的三步骤（重要）"><a href="#2-4-面向对象完成功能的三步骤（重要）" class="headerlink" title="2.4 面向对象完成功能的三步骤（重要）"></a>2.4 面向对象完成功能的三步骤（重要）</h3><h4 id="步骤1：类的定义"><a href="#步骤1：类的定义" class="headerlink" title="步骤1：类的定义"></a>步骤1：类的定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">类的定义使用关键字：class。格式如下：</span><br><span class="line"></span><br><span class="line">[修饰符] class 类名&#123;</span><br><span class="line">   属性声明;</span><br><span class="line">   方法声明;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">举例1：</span><br><span class="line">public class Person&#123;</span><br><span class="line">   *&#x2F;&#x2F;**声明属性age*</span><br><span class="line">   int age ;           </span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;**声明方法showAge()*</span><br><span class="line">   public void eat() &#123;    </span><br><span class="line">     System.out.println(&quot;人吃饭&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">举例2：</span><br><span class="line"></span><br><span class="line">public class Dog&#123;</span><br><span class="line">   *&#x2F;&#x2F;**声明属性*</span><br><span class="line">   String type; *&#x2F;&#x2F;**种类*</span><br><span class="line">   String nickName; *&#x2F;&#x2F;**昵称*</span><br><span class="line">   String hostName; *&#x2F;&#x2F;**主人名称*</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;**声明方法*</span><br><span class="line">   public void eat()&#123; *&#x2F;&#x2F;**吃东西*</span><br><span class="line">    System.out.println(&quot;狗狗进食&quot;);   </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public class Person&#123;</span><br><span class="line">   String name;</span><br><span class="line">   char gender;</span><br><span class="line">   Dog dog;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;**喂宠物*</span><br><span class="line">   public void feed()&#123;</span><br><span class="line">     dog.eat();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="步骤2：对象的创建"><a href="#步骤2：对象的创建" class="headerlink" title="步骤2：对象的创建"></a>步骤2：对象的创建</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212042315.gif" alt="image-20220319213201568"></p><p>创建对象，使用关键字：<strong>new</strong></p><p><strong>创建对象语法：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方式1：给创建的对象命名*</span><br><span class="line"> 把创建的对象用一个引用数据类型的变量保存起来，这样就可以反复使用这个对象了*</span><br><span class="line"> 类名 对象名 &#x3D; new 类名();</span><br><span class="line"></span><br><span class="line">方式2：</span><br><span class="line"> new 类名()*&#x2F;&#x2F;**也称为匿名对象</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class PersonTest&#123;</span><br><span class="line">   public static void main(String[] args)&#123;</span><br><span class="line">    *&#x2F;&#x2F;**创建Person**类的对象*</span><br><span class="line">    Person per &#x3D; new Person();</span><br><span class="line">    *&#x2F;&#x2F;**创建Dog**类的对象*</span><br><span class="line">    Dog dog &#x3D; new Dog();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3：对象调用属性或方法"><a href="#步骤3：对象调用属性或方法" class="headerlink" title="步骤3：对象调用属性或方法"></a>步骤3：对象调用属性或方法</h4><p>对象是类的一个<strong>实例</strong>，必然具备该类事物的属性和行为（即方法）。</p><p>使用”对象名.属性” 或 “对象名.方法”的方式访问对象成员（包括属性和方法）</p><p>举例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;**声明Animal**类*</span><br><span class="line"> public class Animal &#123; *&#x2F;&#x2F;**动物类*</span><br><span class="line">   public int legs;</span><br><span class="line"></span><br><span class="line">   public void eat() &#123;</span><br><span class="line">     System.out.println(&quot;Eating.&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void move() &#123;</span><br><span class="line">     System.out.println(&quot;Move.&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;声明测试类</span><br><span class="line"> public class AnimalTest &#123;</span><br><span class="line">   public static void main(String args[]) &#123;</span><br><span class="line">     *&#x2F;&#x2F;**创建对象*</span><br><span class="line">     Animal xb &#x3D; new Animal();</span><br><span class="line">     xb.legs &#x3D; 4;*&#x2F;&#x2F;**访问属性*</span><br><span class="line">     System.out.println(xb.legs);</span><br><span class="line">     xb.eat();*&#x2F;&#x2F;**访问方法*</span><br><span class="line">     xb.move();*&#x2F;&#x2F;**访问方法*</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>图示理解：<img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212043080.gif" alt="标题: fig:"></p><p>举例2：针对前面步骤1的举例2：类的实例化（创建类的对象）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Game&#123;</span><br><span class="line">   public static void main(String[] args)&#123;</span><br><span class="line">     Person p &#x3D; new Person();</span><br><span class="line">     *&#x2F;&#x2F;**通过Person**对象调用属性*</span><br><span class="line">     p.name &#x3D; &quot;康师傅&quot;;</span><br><span class="line">     p.gender &#x3D; &#39;男&#39;;</span><br><span class="line">     p.dog &#x3D; new Dog(); *&#x2F;&#x2F;**给Person**对象的dog**属性赋值*</span><br><span class="line">      *&#x2F;&#x2F;**给Person**对象的dog**属性的type**、nickname**属性赋值*</span><br><span class="line">     p.dog.type &#x3D; &quot;柯基犬&quot;;</span><br><span class="line">     p.dog.nickName &#x3D; &quot;小白&quot;;</span><br><span class="line"></span><br><span class="line">     *&#x2F;&#x2F;**通过Person**对象调用方法*</span><br><span class="line">     p.feed();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-匿名对象-anonymous-object"><a href="#2-5-匿名对象-anonymous-object" class="headerlink" title="2.5 匿名对象 (anonymous object)"></a>2.5 匿名对象 (anonymous object)</h3><p>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。</p><p>–     如：new Person().shout(); </p><p>使用情况</p><p>–     如果一个对象只需要进行一次方法调用，那么就可以使用匿名对象。 </p><p>–     我们经常将匿名对象作为实参传递给一个方法调用。 </p><h2 id="3-对象的内存解析"><a href="#3-对象的内存解析" class="headerlink" title="3. 对象的内存解析"></a>3. 对象的内存解析</h2><h3 id="3-1-JVM内存结构划分"><a href="#3-1-JVM内存结构划分" class="headerlink" title="3.1 JVM内存结构划分"></a>3.1 JVM内存结构划分</h3><p>HotSpot Java虚拟机的架构图如下。其中我们主要关心的是运行时数据区部分（Runtime Data Area）。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212043498.gif" alt="img"></p><p>其中：</p><p>堆（Heap）：此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p><p>栈（Stack）：是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。</p><p>方法区（Method Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><h3 id="3-2-对象内存解析"><a href="#3-2-对象内存解析" class="headerlink" title="3.2 对象内存解析"></a>3.2 对象内存解析</h3><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123; *&#x2F;&#x2F;**类：人*</span><br><span class="line">   String name;</span><br><span class="line">   int age;</span><br><span class="line">   boolean isMale;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public class PersonTest &#123; *&#x2F;&#x2F;**测试类*</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     Person p1 &#x3D; new Person();</span><br><span class="line">     p1.name &#x3D; &quot;赵同学&quot;;</span><br><span class="line">     p1.age &#x3D; 20;</span><br><span class="line">     p1.isMale &#x3D; true;</span><br><span class="line"></span><br><span class="line">     Person p2 &#x3D; new Person();</span><br><span class="line">     p2.age &#x3D; 10;</span><br><span class="line">     </span><br><span class="line">     Person p3 &#x3D; p1;</span><br><span class="line">     p3.name &#x3D; &quot;郭同学&quot;;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>内存解析图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212043394.gif" alt="image-20220319215723183"></p><p>说明：</p><p><strong>堆：</strong>凡是new出来的结构(对象、数组)都放在堆空间中。</p><p>对象的属性存放在堆空间中。</p><p>创建一个类的多个对象（比如p1、p2），则每个对象都拥有当前类的一套”副本”（即属性）。当通过一个对象修改其属性时，不会影响其它对象此属性的值。</p><p>当声明一个新的变量使用现有的对象进行赋值时（比如p3 = p1），此时并没有在堆空间中创建新的对象。而是两个变量共同指向了堆空间中同一个对象。当通过一个对象修改属性时，会影响另外一个对象对此属性的调用。</p><p><strong>面试题：对象名中存储的是什么呢？</strong></p><p>答：对象地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class StudentTest&#123;</span><br><span class="line">   public static void main(String[] args)&#123;</span><br><span class="line">     System.out.println(new Student());*&#x2F;&#x2F;Student@7852e922*</span><br><span class="line"></span><br><span class="line">     Student stu &#x3D; new Student();</span><br><span class="line">     System.out.println(stu);*&#x2F;&#x2F;Student@4e25154f*</span><br><span class="line">     </span><br><span class="line">     int[] arr &#x3D; new int[5];</span><br><span class="line">    System.out.println(arr);*&#x2F;&#x2F;[I@70dea4e*</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>直接打印对象名和数组名都是显示“类型@对象的hashCode值”，所以说<strong>类、数组都是引用数据类型，引用数据类型的变量中存储的是对象的地址，或者说指向堆中对象的首地址。</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212044522.gif" alt="img"></p><h3 id="3-3-练习"><a href="#3-3-练习" class="headerlink" title="3.3 练习"></a>3.3 练习</h3><p>根据代码，画出内存图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Car &#123;</span><br><span class="line">   String color &#x3D; &quot;red&quot;;</span><br><span class="line">   int num &#x3D; 4;</span><br><span class="line"></span><br><span class="line">   void show() &#123;</span><br><span class="line">     System.out.println(&quot;color&#x3D;&quot; + color + &quot;,num&#x3D;&quot; + num);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> class CarTest &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     Car c1 &#x3D; new Car();  *&#x2F;&#x2F;**建立对象c1*</span><br><span class="line">     Car c2 &#x3D; new Car();  *&#x2F;&#x2F;**建立对象c2*</span><br><span class="line">     c1.color &#x3D; &quot;blue&quot;;  *&#x2F;&#x2F;**对对象的属性进行修改*</span><br><span class="line">     c1.show();  *&#x2F;&#x2F;**使用对象的方法*</span><br><span class="line">     c2.show();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-类的成员之一：成员变量-field"><a href="#4-类的成员之一：成员变量-field" class="headerlink" title="4. 类的成员之一：成员变量(field)"></a>4. 类的成员之一：成员变量(field)</h2><h3 id="4-1-如何声明成员变量"><a href="#4-1-如何声明成员变量" class="headerlink" title="4.1 如何声明成员变量"></a>4.1 如何声明成员变量</h3><p><strong>语法格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符1] class 类名&#123;</span><br><span class="line">   [修饰符2] 数据类型 成员变量名 [&#x3D; 初始化值]; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>–     位置要求：必须在类中，方法外</p><p>–     修饰符2(暂不考虑)</p><p>•     常用的权限修饰符有：private、缺省、protected、public</p><p>•     其他修饰符：static、final </p><p>–     数据类型</p><p>•     任何基本数据类型(如int、Boolean) 或 任何引用数据类型。</p><p>–     成员变量名</p><p>•     属于标识符，符合命名规则和规范即可。</p><p>–     初始化值</p><p>•     根据情况，可以显式赋值；也可以不赋值，使用默认值</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Person&#123;</span><br><span class="line">   private int age;       *&#x2F;&#x2F;**声明private**变量 age*</span><br><span class="line">   public String name &#x3D; “Lila”;  *&#x2F;&#x2F;**声明public**变量 name*</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-成员变量-vs-局部变量"><a href="#4-2-成员变量-vs-局部变量" class="headerlink" title="4.2 成员变量 vs 局部变量"></a>4.2 成员变量 vs 局部变量</h3><p><strong>1**</strong>、变量的分类：成员变量与局部变量**</p><p>在方法体外，类体内声明的变量称为成员变量。</p><p>在方法体内部等位置声明的变量称为局部变量。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212148222.gif" alt="image-20220511101608038"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212148949.gif" alt="image-20220319230744617"></p><p>其中，static可以将成员变量分为两大类，静态变量和非静态变量。其中静态变量又称为类变量，非静态变量又称为实例变量或者属性。接下来先学习实例变量。</p><p><strong>2**</strong>、成员变量 与 局部变量 的对比**</p><p>相同点：</p><p>–     变量声明的格式相同： 数据类型 变量名 = 初始化值</p><p>–     变量必须先声明、后初始化、再使用。</p><p>–     变量都有其对应的作用域。只在其作用域内是有效的</p><p>不同点：</p><p>1、声明位置和方式 （1）实例变量：在类中方法外 （2）局部变量：在方法体{}中或方法的形参列表、代码块中</p><p>2、在内存中存储的位置不同 （1）实例变量：堆 （2）局部变量：栈</p><p>3、生命周期 （1）实例变量：和对象的生命周期一样，随着对象的创建而存在，随着对象被GC回收而消亡， 而且每一个对象的实例变量是独立的。 （2）局部变量：和方法调用的生命周期一样，每一次方法被调用而在存在，随着方法执行的结束而消亡， 而且每一次方法调用都是独立。</p><p>4、作用域 （1）实例变量：通过对象就可以使用，本类中直接调用，其他类中“对象.实例变量” （2）局部变量：出了作用域就不能使用</p><p>5、修饰符（后面来讲） （1）实例变量：public,protected,private,final,volatile,transient等 （2）局部变量：final</p><p>6、默认值 （1）实例变量：有默认值 （2）局部变量：没有，必须手动初始化。其中的形参比较特殊，靠实参给它初始化。</p><p><strong>3**</strong>、对象属性的默认初始化赋值**</p><p>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212148739.gif" alt="image-20220319231821747"></p><p><strong>4、举例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;*&#x2F;&#x2F;**人类*</span><br><span class="line">   *&#x2F;&#x2F;1.**属性*</span><br><span class="line">   String name;*&#x2F;&#x2F;**姓名*</span><br><span class="line">   int age &#x3D; 1;*&#x2F;&#x2F;**年龄*</span><br><span class="line">   boolean isMale;*&#x2F;&#x2F;**是否是男性*</span><br><span class="line"></span><br><span class="line">   public void show(String nation) &#123;</span><br><span class="line">     *&#x2F;&#x2F;nation:**局部变量*</span><br><span class="line">     String color;*&#x2F;&#x2F;color:**局部变量*</span><br><span class="line">     color &#x3D; &quot;yellow&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;**测试类*</span><br><span class="line"> class PersonTest &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     Person p &#x3D; new Person();</span><br><span class="line">     p.show(&quot;CHN&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212148474.gif" alt="image-20220319231703240"></p><h2 id="1-类的成员之二：方法-method"><a href="#1-类的成员之二：方法-method" class="headerlink" title="1.  类的成员之二：方法(method)"></a>1.  类的成员之二：方法(method)</h2><h3 id="5-1-方法的引入"><a href="#5-1-方法的引入" class="headerlink" title="5.1 方法的引入"></a>5.1 方法的引入</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212148852.jpg" alt="img"></p><p>《街霸》游戏中，每次人物出拳、出脚或跳跃等动作都需要编写50-80行的代码，在每次出拳、出脚或跳跃的地方都需要重复地编写这50-80行代码，这样程序会变得很臃肿，可读性也非常差。为了解决代码重复编写的问题，可以将出拳、出脚或跳跃的代码提取出来放在一个{}中，并为这段代码起个名字，这样在每次的出拳、出脚或跳跃的地方通过这个名字来调用这个{}的代码就可以了。</p><p>上述过程中，所提取出来的代码可以被看作是程序中定义的一个方法，程序在需要出拳、出脚或跳跃时调用该方法即可。</p><h3 id="5-2-方法-method、函数-的理解"><a href="#5-2-方法-method、函数-的理解" class="headerlink" title="5.2 方法(method、函数)的理解"></a>5.2 方法(method、函数)的理解</h3><p>方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为函数或过程。 </p><p>将功能封装为方法的目的是，可以实现代码重用，减少冗余，简化代码</p><p>Java里的方法不能独立存在，所有的方法必须定义在类里。</p><p><strong>举例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">–     Math.random()的random()方法</span><br><span class="line"></span><br><span class="line">–     Math.sqrt(x)的sqrt(x)方法</span><br><span class="line"></span><br><span class="line">–     System.out.println(x)的println(x)方法</span><br><span class="line"></span><br><span class="line">–     new Scanner(System.in).nextInt()的nextInt()方法</span><br><span class="line"></span><br><span class="line">–     Arrays类中的binarySearch()方法、sort()方法、equals()方法</span><br></pre></td></tr></table></figure><p><strong>举例2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  public class Person&#123;</span><br><span class="line">  private int age;</span><br><span class="line">  public int getAge() &#123; *&#x2F;&#x2F;**声明方法getAge()*</span><br><span class="line">  return age; </span><br><span class="line">  &#125;</span><br><span class="line">  public void setAge(int i) &#123; *&#x2F;&#x2F;**声明方法setAge*</span><br><span class="line">  age &#x3D; i;    *&#x2F;&#x2F;**将参数i**的值赋给类的成员变量age*</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-如何声明方法"><a href="#5-3-如何声明方法" class="headerlink" title="5.3 如何声明方法"></a>5.3 如何声明方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">1****、声明方法的语法格式**</span><br><span class="line"></span><br><span class="line">[修饰符] 返回值类型 方法名([形参列表])[throws 异常列表]&#123;</span><br><span class="line">     方法体的功能代码</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">（1）一个完整的方法 &#x3D; 方法头 + 方法体。</span><br><span class="line"></span><br><span class="line">方法头就是[修饰符] 返回值类型 方法名([形参列表])[throws 异常列表]，也称为方法签名。通常调用方法时只需要关注方法头就可以，从方法头可以看出这个方法的功能和调用格式。</span><br><span class="line"></span><br><span class="line">方法体就是方法被调用后要执行的代码。对于调用者来说，不了解方法体如何实现的，并不影响方法的使用。</span><br><span class="line"></span><br><span class="line">**（2）方法头可能包含5个部分**</span><br><span class="line"></span><br><span class="line">**修饰符**：可选的。方法的修饰符也有很多，例如：public、protected、private、static、abstract、native、final、synchronized等，后面会一一学习。</span><br><span class="line"></span><br><span class="line">–     其中，权限修饰符有public、protected、private。在讲封装性之前，我们先默认使用pulbic修饰方法。</span><br><span class="line"></span><br><span class="line">–     其中，根据是否有static，可以将方法分为静态方法和非静态方法。其中静态方法又称为类方法，非静态方法又称为实例方法。咱们在讲static前先学习实例方法。</span><br><span class="line"></span><br><span class="line">**返回值类型**： 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者。</span><br><span class="line"></span><br><span class="line">–     无返回值，则声明：void</span><br><span class="line"></span><br><span class="line">–     有返回值，则声明出返回值类型（可以是任意类型）。与方法体中“return 返回值”搭配使用</span><br><span class="line"></span><br><span class="line">**方法名**：属于标识符，命名时遵循标识符命名规则和规范，“见名知意”</span><br><span class="line"></span><br><span class="line">**形参列表**：表示完成方法体功能时需要外部提供的数据列表。可以包含零个，一个或多个参数。</span><br><span class="line"></span><br><span class="line">–     无论是否有参数，()不能省略</span><br><span class="line"></span><br><span class="line">–     如果有参数，每一个参数都要指定数据类型和参数名，多个参数之间使用逗号分隔，例如：</span><br><span class="line"></span><br><span class="line">•     一个参数： (数据类型 参数名)</span><br><span class="line"></span><br><span class="line">•     二个参数： (数据类型1 参数1, 数据类型2 参数2) </span><br><span class="line"></span><br><span class="line">–     参数的类型可以是基本数据类型、引用数据类型</span><br><span class="line"></span><br><span class="line">**throws 异常列表**：可选，在【第09章-异常处理】章节再讲</span><br><span class="line"></span><br><span class="line">**（3）方法体**：方法体必须有&#123;&#125;括起来，在&#123;&#125;中编写完成方法功能的代码</span><br><span class="line"></span><br><span class="line">**（4）关于方法体中return语句的说明：**</span><br><span class="line"></span><br><span class="line">return语句的作用是结束方法的执行，并将方法的结果返回去</span><br><span class="line"></span><br><span class="line">如果返回值类型不是void，方法体中必须保证一定有 return 返回值; 语句，并且要求该返回值结果的类型与声明的返回值类型一致或兼容。</span><br><span class="line"></span><br><span class="line">如果返回值类型为void时，方法体中可以没有return语句，如果要用return语句提前结束方法的执行，那么return后面不能跟返回值，直接写return ; 就可以。</span><br><span class="line"></span><br><span class="line">return语句后面就不能再写其他代码了，否则会报错：Unreachable code</span><br><span class="line"></span><br><span class="line">补充：方法的分类：按照是否有形参及返回值</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212149493.gif" alt="image-20220320000047155"></p><p><strong>2、类比举例</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212149572.gif" alt="image-20220503102323689"></p><p><strong>3、代码示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.test04.method;</span><br><span class="line"></span><br><span class="line"> *&#x2F;***</span><br><span class="line"> *** *方法定义案例演示*</span><br><span class="line"> **&#x2F;*</span><br><span class="line"> public class MethodDefineDemo &#123;</span><br><span class="line">   *&#x2F;***</span><br><span class="line">   *** *无参无返回值方法的演示*</span><br><span class="line">   **&#x2F;*</span><br><span class="line">   public void sayHello()&#123;</span><br><span class="line">     System.out.println(&quot;hello&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;***</span><br><span class="line">   *** *有参无返回值方法的演示*</span><br><span class="line">   ** @*param length int *第一个参数，表示矩形的长*</span><br><span class="line">   *** *@*param width int *第二个参数，表示矩形的宽*</span><br><span class="line">   *** *@*param sign char *第三个参数，表示填充矩形图形的符号*</span><br><span class="line">   **&#x2F;*</span><br><span class="line">   public void printRectangle(int length, int width, char sign)&#123;</span><br><span class="line">     for (int i &#x3D; 1; i &lt;&#x3D; length ; i++) &#123;</span><br><span class="line">       for(int j&#x3D;1; j &lt;&#x3D; width; j++)&#123;</span><br><span class="line">         System.out.print(sign);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;***</span><br><span class="line">   *** *无参有返回值方法的演示*</span><br><span class="line">   ** @*return</span><br><span class="line">   **&#x2F;*</span><br><span class="line">   public int getIntBetweenOneToHundred()&#123;</span><br><span class="line">     return (int)(Math.random()*100+1);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;***</span><br><span class="line">   *** *有参有返回值方法的演示*</span><br><span class="line">   ** @*param a int *第一个参数，要比较大小的整数之一*</span><br><span class="line">   *** *@*param b int *第二个参数，要比较大小的整数之二*</span><br><span class="line">   *** *@*return int *比较大小的两个整数中较大者的值*</span><br><span class="line">   **&#x2F;*</span><br><span class="line">   public int max(int a, int b)&#123;</span><br><span class="line">     return a &gt; b ? a : b;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-如何调用实例方法"><a href="#5-4-如何调用实例方法" class="headerlink" title="5.4 如何调用实例方法"></a>5.4 如何调用实例方法</h3><p>方法通过方法名被调用，且只有被调用才会执行。</p><p><strong>1</strong>、方法调用语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.方法名([实参列表])</span><br></pre></td></tr></table></figure><p><strong>2、示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">举例1：</span><br><span class="line"></span><br><span class="line">package com.atguigu.test04.method;</span><br><span class="line"></span><br><span class="line"> *&#x2F;***</span><br><span class="line"> *** *方法调用案例演示*</span><br><span class="line"> **&#x2F;*</span><br><span class="line"> public class MethodInvokeDemo &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     *&#x2F;&#x2F;**创建对象*</span><br><span class="line">     MethodDefineDemo md &#x3D; new MethodDefineDemo();</span><br><span class="line"></span><br><span class="line">     System.out.println(&quot;-----------------------方法调用演示-------------------------&quot;);</span><br><span class="line">     </span><br><span class="line">     *&#x2F;&#x2F;**调用MethodDefineDemo**类中无参无返回值的方法sayHello*</span><br><span class="line">     md.sayHello();</span><br><span class="line">     md.sayHello();</span><br><span class="line">     md.sayHello();</span><br><span class="line">     *&#x2F;&#x2F;**调用一次，执行一次，不调用不执行*</span><br><span class="line">     </span><br><span class="line">     System.out.println(&quot;------------------------------------------------&quot;);</span><br><span class="line">     *&#x2F;&#x2F;**调用MethodDefineDemo**类中有参无返回值的方法printRectangle*</span><br><span class="line">     md.printRectangle(5,10,&#39;@&#39;);</span><br><span class="line">     </span><br><span class="line">     System.out.println(&quot;------------------------------------------------&quot;);</span><br><span class="line">     *&#x2F;&#x2F;**调用MethodDefineDemo**类中无参有返回值的方法getIntBetweenOneToHundred*</span><br><span class="line">     md.getIntBetweenOneToHundred();*&#x2F;&#x2F;**语法没问题，就是结果丢失*</span><br><span class="line">     </span><br><span class="line">     int num &#x3D; md.getIntBetweenOneToHundred();</span><br><span class="line">     System.out.println(&quot;num &#x3D; &quot; + num);</span><br><span class="line">     </span><br><span class="line">     System.out.println(md.getIntBetweenOneToHundred());</span><br><span class="line">     *&#x2F;&#x2F;**上面的代码调用了getIntBetweenOneToHundred**三次，这个方法执行了三次*</span><br><span class="line">     </span><br><span class="line">     System.out.println(&quot;------------------------------------------------&quot;);</span><br><span class="line">     *&#x2F;&#x2F;**调用MethodDefineDemo**类中有参有返回值的方法max*</span><br><span class="line">     md.max(3,6);*&#x2F;&#x2F;**语法没问题，就是结果丢失*</span><br><span class="line">     </span><br><span class="line">     int bigger &#x3D; md.max(5,6);</span><br><span class="line">     System.out.println(&quot;bigger &#x3D; &quot; + bigger);</span><br><span class="line">     </span><br><span class="line">     System.out.println(&quot;8,3中较大者是：&quot; + md.max(8,9));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">举例2：</span><br><span class="line"></span><br><span class="line">*&#x2F;&#x2F;1**、创建Scanner**的对象*</span><br><span class="line"> Scanner input &#x3D; new Scanner(System.in);*&#x2F;&#x2F;System.in**默认代表键盘输入*</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;2**、提示输入xx*</span><br><span class="line"> System.out.print(&quot;请输入一个整数：&quot;); *&#x2F;&#x2F;**对象.**非静态方法(**实参列表)*</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;3**、接收输入内容*</span><br><span class="line"> int num &#x3D; input.nextInt(); *&#x2F;&#x2F;**对象.**非静态方法()</span><br></pre></td></tr></table></figure><h3 id="5-5-使用的注意点"><a href="#5-5-使用的注意点" class="headerlink" title="5.5 使用的注意点"></a>5.5 使用的注意点</h3><p>（1）必须先声明后使用，且方法必须定义在类的内部</p><p>（2）调用一次就执行一次，不调用不执行。</p><p>（3）方法中可以调用类中的方法或属性，不可以在方法内部定义方法。</p><p>正确示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">类&#123;</span><br><span class="line">   方法1()&#123;</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line">   方法2()&#123;</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">类&#123;</span><br><span class="line">   方法1()&#123;</span><br><span class="line">     方法2()&#123; *&#x2F;&#x2F;**位置错误*</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-关键字return的使用"><a href="#5-6-关键字return的使用" class="headerlink" title="5.6 关键字return的使用"></a>5.6 关键字return的使用</h3><p>return在方法中的作用：</p><p>–     作用1：结束一个方法</p><p>–     作用2：结束一个方法的同时，可以返回数据给方法的调用者</p><p>注意点：在return关键字的直接后面不能声明执行语句</p><h3 id="5-7-方法调用内存分析"><a href="#5-7-方法调用内存分析" class="headerlink" title="5.7 方法调用内存分析"></a>5.7 方法调用内存分析</h3><p>方法没有被调用的时候，都在方法区中的字节码文件(.class)中存储。</p><p>方法被调用的时候，需要进入到栈内存中运行。方法每调用一次就会在栈中有一个入栈动作，即给当前方法开辟一块独立的内存区域，用于存储当前方法的局部变量的值。</p><p>当方法执行结束后，会释放该内存，称为出栈，如果方法有返回值，就会把结果返回调用处，如果没有返回值，就直接结束，回到调用处继续执行下一条指令。</p><p>栈结构：先进后出，后进先出。</p><p>举例分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     Person p1 &#x3D; new Person();</span><br><span class="line">     p1.eat();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   public static void eat() &#123;</span><br><span class="line">     sleep();</span><br><span class="line">     System.out.println(&quot;人：吃饭&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   public static void sleep()&#123;</span><br><span class="line">     System.out.println(&quot;人：睡觉&quot;);</span><br><span class="line">     doSport();</span><br><span class="line">   &#125;</span><br><span class="line">   public static void doSport()&#123;</span><br><span class="line">     System.out.println(&quot;人：运动&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>内存分析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212150395.gif" alt="img"></p><h3 id="5-8-练习"><a href="#5-8-练习" class="headerlink" title="5.8 练习"></a>5.8 练习</h3><p><strong>练习1：</strong>创建一个Person类，其定义如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212150716.gif" alt="image-20220320001337145"></p><p>要求：</p><p>(1)创建Person类的对象，设置该对象的name、age和sex属性，调用study方法，输出字符串“studying”，调用showAge()方法显示age值，调用addAge()方法给对象的age属性值增加2岁。 (2)创建第二个对象，执行上述操作，体会同一个类的不同对象之间的关系。</p><p><strong>练习2：</strong>利用面向对象的编程方法，设计圆类Circle，包含属性（半径）和计算圆面积的方法。定义测试类，创建该Circle类的对象，并进行测试。</p><p><strong>练习3：</strong></p><p>3.1 编写程序，声明一个method方法，在方法中打印一个10<em>8的</em>型矩形，在main方法中调用该方法。</p><p>3.2 修改上一个程序，在method方法中，除打印一个10<em>8的</em>型矩形外，再计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</p><p>3.3 修改上一个程序，在method方法提供m和n两个参数，方法中打印一个m<em>n的</em>型矩形，并计算该矩形的面积， 将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</p><p><strong>练习4：</strong>声明一个日期类型MyDate：有属性：年year,月month，日day。创建2个日期对象，分别赋值为：你的出生日期，你对象的出生日期，并显示信息。</p><p><strong>练习5（课下练习）：</strong>用面向对象的方式编写用户登录程序。</p><p>用户类：</p><p>属性：用户名，密码</p><p>方法：登录</p><p>界面类：</p><p>在界面类中添加main方法，接受用户输入，并调用用户类的登录方法进行验证。</p><p>–     输出：</p><p>•     登录失败：用户名或密码错误！</p><p>•     登录成功：欢迎你，用户名！</p><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">   String name;</span><br><span class="line">   String password;*&#x2F;&#x2F;**密码*</span><br><span class="line"></span><br><span class="line">   *&#x2F;***</span><br><span class="line">   *** *实现用户登录的判断*</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">   ** @*param inputName *输入的用户名*</span><br><span class="line">   *** *@*param inputPwd *输入的密码*</span><br><span class="line">   **&#x2F;*</span><br><span class="line">   public void login(String inputName,String inputPwd)&#123;</span><br><span class="line">     if(name.equals(inputName) &amp;&amp; password.equals(inputPwd))&#123;</span><br><span class="line">       System.out.println(&quot;登录成功：欢迎你，&quot; + name);</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">       System.out.println(&quot;登录失败：用户名或密码错误！&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;***</span><br><span class="line">   *** *实现用户登录的判断*</span><br><span class="line">   ** @*param inputName *输入的用户名*</span><br><span class="line">   *** *@*param inputPwd *输入的密码*</span><br><span class="line">   *** *@*return true*:**登录成功* false*:**登录失败*</span><br><span class="line">   **&#x2F;*</span><br><span class="line">   public boolean login1(String inputName,String inputPwd)&#123;</span><br><span class="line"> *&#x2F;&#x2F;    if(name.equals(inputName) &amp;&amp; password.equals(inputPwd))&#123;*</span><br><span class="line"> *&#x2F;&#x2F;      return true;*</span><br><span class="line"> *&#x2F;&#x2F;    &#125;else&#123;*</span><br><span class="line"> *&#x2F;&#x2F;      return false;*</span><br><span class="line"> *&#x2F;&#x2F;    &#125;*</span><br><span class="line"></span><br><span class="line">     *&#x2F;&#x2F;**简化为：*</span><br><span class="line">     return name.equals(inputName) &amp;&amp; password.equals(inputPwd);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> *** *用户界面类*UserInterface*：*</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line"> *** *-* *在用户界面类中添加*main*方法，接受用户输入，并调用用户类的登录方法进行验证。*</span><br><span class="line"> *** *-* *输出：*</span><br><span class="line"> ***   *-* *登录失败：用户名或密码错误！*</span><br><span class="line"> ***   *-* *登录成功：欢迎你，用户名！*</span><br><span class="line"> **&#x2F;*</span><br><span class="line"> public class UserInterface &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">     User u1 &#x3D; new User();</span><br><span class="line">     u1.name &#x3D; &quot;Tom&quot;;</span><br><span class="line">     u1.password &#x3D; &quot;abc123&quot;;</span><br><span class="line">     Scanner scanner &#x3D; new Scanner(System.in);</span><br><span class="line">     System.out.print(&quot;请输入用户名：&quot;);</span><br><span class="line">     String name &#x3D; scanner.next();</span><br><span class="line">     System.out.print(&quot;请输入密码：&quot;);</span><br><span class="line">     String pwd &#x3D; scanner.next();</span><br><span class="line">     </span><br><span class="line">     *&#x2F;&#x2F;**演示1**：*</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;    u1.login(name,pwd);*</span><br><span class="line"></span><br><span class="line">     *&#x2F;&#x2F;**演示2**：*</span><br><span class="line">     boolean isLogin &#x3D; u1.login1(name, pwd);</span><br><span class="line">     if(isLogin)&#123;</span><br><span class="line">       System.out.println(&quot;登录成功：欢迎你，&quot; + u1.name);</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">       System.out.println(&quot;登录失败：用户名或密码错误！&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     scanner.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="6-对象数组"><a href="#6-对象数组" class="headerlink" title="6. 对象数组"></a>6. 对象数组</h2><p>数组的元素可以是基本数据类型，也可以是引用数据类型。当元素是引用类型中的类时，我们称为对象数组。</p><p><strong>1、案例</strong></p><p>定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</p><p>问题一：打印出3年级(state值为3）的学生信息。</p><p>问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</p><p>提示：</p><p>\1) 生成随机数：Math.random()，返回值类型double; </p><p>\2) 四舍五入取整：Math.round(double d)，返回值类型long。</p><p>定义类Student<strong>，包含三个属性：学号number(int)</strong>，年级state(int)<strong>，成绩score(int)</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">   int number;*&#x2F;&#x2F;**学号*</span><br><span class="line">   int state;*&#x2F;&#x2F;**年级*</span><br><span class="line">   int score;*&#x2F;&#x2F;**成绩*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public void info()&#123;</span><br><span class="line">    System.out.println(&quot;number : &quot; + number </span><br><span class="line">        \+ &quot;,state : &quot; + state + &quot;,score : &quot; + score);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public class StudentTest &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">    *&#x2F;&#x2F; Student s1 &#x3D; new Student();*</span><br><span class="line">    *&#x2F;&#x2F; s1.number &#x3D; 1;*</span><br><span class="line">    *&#x2F;&#x2F; s1.state &#x3D; (int)(Math.random() \* 6 + 1);&#x2F;&#x2F;[1,6]*</span><br><span class="line">    *&#x2F;&#x2F; s1.score &#x3D; (int)(Math.random() \* 101);&#x2F;&#x2F;[0,100]*</span><br><span class="line">    *&#x2F;&#x2F;*</span><br><span class="line">    *&#x2F;&#x2F; Student s2 &#x3D; new Student();*</span><br><span class="line">    *&#x2F;&#x2F; s2.number &#x3D; 2;*</span><br><span class="line">    *&#x2F;&#x2F; s2.state &#x3D; (int)(Math.random() \* 6 + 1);&#x2F;&#x2F;[1,6]*</span><br><span class="line">    *&#x2F;&#x2F; s2.score &#x3D; (int)(Math.random() \* 101);&#x2F;&#x2F;[0,100]*</span><br><span class="line">    *&#x2F;&#x2F;*</span><br><span class="line">    *&#x2F;&#x2F; &#x2F;&#x2F;....*</span><br><span class="line">    *&#x2F;&#x2F;* *对象数组*</span><br><span class="line">    *&#x2F;&#x2F; String[] arr &#x3D; new String[10];*</span><br><span class="line">    *&#x2F;&#x2F;* *数组的创建*</span><br><span class="line">    Student[] students &#x3D; new Student[20];</span><br><span class="line">    *&#x2F;&#x2F;* *通过循环结构给数组的属性赋值*</span><br><span class="line">    for (int i &#x3D; 0; i &lt; students.length; i++) &#123;</span><br><span class="line">      *&#x2F;&#x2F;* *数组元素的赋值*</span><br><span class="line">      students[i] &#x3D; new Student();</span><br><span class="line">      *&#x2F;&#x2F;* *数组元素是一个对象，给对象的各个属性赋值*</span><br><span class="line">      students[i].number &#x3D; (i + 1);</span><br><span class="line">      students[i].state &#x3D; (int) (Math.random() * 6 + 1);*&#x2F;&#x2F; [1,6]*</span><br><span class="line">      students[i].score &#x3D; (int) (Math.random() * 101);*&#x2F;&#x2F; [0,100]*</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    *&#x2F;&#x2F;* *问题一：打印出3**年级(state**值为3**）的学生信息。*</span><br><span class="line">    for (int i &#x3D; 0; i &lt; students.length; i++) &#123;</span><br><span class="line">     </span><br><span class="line">      if (students[i].state &#x3D;&#x3D; 3) &#123;</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;      System.out.println(*</span><br><span class="line"> *&#x2F;&#x2F;          &quot;number:&quot; + students[i].number + &quot;,state:&quot; + students[i].state + &quot;,score:&quot; + students[i].score);*</span><br><span class="line">        students[i].info();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">     &#125;</span><br><span class="line">    System.out.println(&quot;******************************&quot;);</span><br><span class="line">    *&#x2F;&#x2F;* *问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息*</span><br><span class="line">    *&#x2F;&#x2F;* *排序前*</span><br><span class="line">    for (int i &#x3D; 0; i &lt; students.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;     System.out.println(*</span><br><span class="line"> *&#x2F;&#x2F;        &quot;number:&quot; + students[i].number + &quot;,state:&quot; +* </span><br><span class="line"> *&#x2F;&#x2F;            students[i].state + &quot;,score:&quot; + students[i].score);*</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      students[i].info();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    System.out.println();</span><br><span class="line">    *&#x2F;&#x2F;* *排序：*</span><br><span class="line">    for (int i &#x3D; 0; i &lt; students.length - 1; i++) &#123;</span><br><span class="line">      for (int j &#x3D; 0; j &lt; students.length - 1 - i; j++) &#123;</span><br><span class="line">        if (students[j].score &gt; students[j + 1].score) &#123;</span><br><span class="line">          Student temp &#x3D; students[j];</span><br><span class="line">          students[j] &#x3D; students[j + 1];</span><br><span class="line">          students[j + 1] &#x3D; temp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    *&#x2F;&#x2F;* *排序后：*</span><br><span class="line">    for (int i &#x3D; 0; i &lt; students.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;     System.out.println(*</span><br><span class="line"> *&#x2F;&#x2F;        &quot;number:&quot; + students[i].number + &quot;,state:&quot; +* </span><br><span class="line"> *&#x2F;&#x2F;            students[i].state + &quot;,score:&quot; + students[i].score);*</span><br><span class="line">      students[i].info();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212151364.gif" alt="img"></p><p>2、<strong>注意点</strong></p><p>对象数组，首先要创建数组对象本身，即确定数组的长度，然后再创建每一个元素对象，如果不创建，数组的元素的默认值就是null，所以很容易出现空指针异常NullPointerException。</p><p><strong>3、练习</strong></p><p>（1）定义矩形类Rectangle，包含长、宽属性，area()返回矩形面积的方法，perimeter()返回矩形周长的方法，String getInfo()返回圆对象的详细信息（如：长、宽、面积、周长等数据）的方法</p><p>（2）在测试类中创建长度为3的Rectangle[]数组，用来装3个矩形对象，并给3个矩形对象的长分别赋值为10,20,30，宽分别赋值为5,15,25，遍历输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.test08.array;</span><br><span class="line"></span><br><span class="line"> public class Rectangle &#123;</span><br><span class="line">   double length;</span><br><span class="line">   double width;</span><br><span class="line"></span><br><span class="line">   public double area()&#123;*&#x2F;&#x2F;**面积*</span><br><span class="line">     return length * width;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public double perimeter()&#123;*&#x2F;&#x2F;**周长*</span><br><span class="line">     return 2 * (length + width);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getInfo()&#123;</span><br><span class="line">     return &quot;长：&quot; + length +</span><br><span class="line">         &quot;，宽：&quot; + width +</span><br><span class="line">         &quot;，面积：&quot; + area() +</span><br><span class="line">         &quot;，周长：&quot; + perimeter();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">package com.atguigu.test08.array;</span><br><span class="line"></span><br><span class="line"> public class ObjectArrayTest &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     *&#x2F;&#x2F;**声明并创建一个长度为3**的矩形对象数组*</span><br><span class="line">     Rectangle[] array &#x3D; new Rectangle[3];</span><br><span class="line"></span><br><span class="line">     *&#x2F;&#x2F;**创建3**个矩形对象，并为对象的实例变量赋值，*</span><br><span class="line">     *&#x2F;&#x2F;3**个矩形对象的长分别是10,20,30*</span><br><span class="line">     *&#x2F;&#x2F;3**个矩形对象的宽分别是5,15,25*</span><br><span class="line">     *&#x2F;&#x2F;**调用矩形对象的getInfo()**返回对象信息后输出*</span><br><span class="line">     for (int i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line">       *&#x2F;&#x2F;**创建矩形对象*</span><br><span class="line">       array[i] &#x3D; new Rectangle();</span><br><span class="line">     </span><br><span class="line">       *&#x2F;&#x2F;**为矩形对象的成员变量赋值*</span><br><span class="line">       array[i].length &#x3D; (i+1) * 10;</span><br><span class="line">       array[i].width &#x3D; (2*i+1) * 5;</span><br><span class="line">     </span><br><span class="line">       *&#x2F;&#x2F;**获取并输出对象对象的信息*</span><br><span class="line">       System.out.println(array[i].getInfo());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212151866.gif" alt="img"></p><h2 id="7-再谈方法"><a href="#7-再谈方法" class="headerlink" title="7. 再谈方法"></a>7. 再谈方法</h2><h3 id="7-1-方法的重载（overload）"><a href="#7-1-方法的重载（overload）" class="headerlink" title="7.1 方法的重载（overload）"></a>7.1 方法的重载（overload）</h3><h4 id="7-1-1-概念及特点"><a href="#7-1-1-概念及特点" class="headerlink" title="7.1.1 概念及特点"></a>7.1.1 概念及特点</h4><p><strong>方法重载</strong>：在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可。</p><p>–     参数列表不同，意味着参数个数或参数类型的不同</p><p><strong>重载的特点</strong>：与修饰符、返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。</p><p><strong>重载方法调用</strong>：JVM通过方法的参数列表，调用匹配的方法。</p><p>–     先找个数、类型最匹配的</p><p>–     再找个数和类型可以兼容的，如果同时多个方法可以兼容将会报错</p><h4 id="7-1-2-示例"><a href="#7-1-2-示例" class="headerlink" title="7.1.2 示例"></a>7.1.2 示例</h4><p>举例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;System.out.println()**方法就是典型的重载方法，其内部的声明形式如下：*</span><br><span class="line"> public class PrintStream &#123;</span><br><span class="line">   public void println(byte x)</span><br><span class="line">   public void println(short x)</span><br><span class="line">   public void println(int x)</span><br><span class="line">   public void println(long x)</span><br><span class="line">   public void println(float x)</span><br><span class="line">   public void println(double x)</span><br><span class="line">   public void println(char x)</span><br><span class="line">   public void println(double x)</span><br><span class="line">   public void println()</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public class HelloWorld&#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     System.out.println(3);</span><br><span class="line">     System.out.println(1.2f);</span><br><span class="line">     System.out.println(&quot;hello!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 举例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;**返回两个整数的和*</span><br><span class="line"> public int add(int x,int y)&#123;</span><br><span class="line">   return x+y;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;**返回三个整数的和*</span><br><span class="line"> public int add(int x,int y,int z)&#123;</span><br><span class="line">   return x+y+z;</span><br><span class="line"> &#125;</span><br><span class="line"> *&#x2F;&#x2F;**返回两个小数的和*</span><br><span class="line"> public double add(double x,double y)&#123;</span><br><span class="line">   return x+y;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> 举例3：方法的重载和返回值类型无关</span><br><span class="line"></span><br><span class="line">public class MathTools &#123;</span><br><span class="line">   *&#x2F;&#x2F;**以下方法不是重载，会报错*</span><br><span class="line">   public int getOneToHundred()&#123;</span><br><span class="line">     return (int)(Math.random()*100);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public double getOneToHundred()&#123;</span><br><span class="line">     return Math.random()*100;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-3-练习"><a href="#7-1-3-练习" class="headerlink" title="7.1.3 练习"></a>7.1.3 练习</h4><p><strong>练习1：</strong>判 断与void show(int a,char b,double c){}构成重载的有：</p><p>a)void show(int x,char y,double z){}   <em>// no</em></p><p> b)int show(int a,double c,char b){}   <em>// yes</em></p><p> c) void show(int a,double c,char b){}  <em>// yes</em></p><p> d) boolean show(int c,char b){}     <em>// yes</em></p><p> e) void show(double c){}         <em>// yes</em></p><p> f) double show(int x,char y,double z){} <em>// no</em></p><p> g) void shows(){double c}        <em>// no</em></p><p><strong>练习2</strong>：编写程序，定义三个重载方法并调用。</p><p>方法名为mOL。</p><p>三个方法分别接收一个int参数、两个int参数、一个字符串参数。分别执行平方运算并输出结果，相乘并输出结果，输出字符串信息。</p><p>在主类的main ()方法中分别用参数区别调用三个方法。</p><p><strong>练习3</strong>：定义三个重载方法max()，第一个方法求两个int值中的最大值，第二个方法求两个double值中的最大值，第三个方法求三个double值中的最大值，并分别调用三个方法。</p><h3 id="7-2-可变个数的形参"><a href="#7-2-可变个数的形参" class="headerlink" title="7.2 可变个数的形参"></a>7.2 可变个数的形参</h3><p>在<strong>JDK 5.0</strong> 中提供了<strong>Varargs(</strong>variable number of arguments<strong>)</strong>机制。即当定义一个方法时，形参的类型可以确定，但是形参的个数不确定，那么可以考虑使用可变个数的形参。</p><p><strong>格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名(参数的类型名 ...参数名)</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;JDK 5.0**以前：采用数组形参来定义方法，传入多个同一类型变量*</span><br><span class="line"> public static void test(int a ,String[] books);</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;JDK5.0**：采用可变个数形参来定义方法，传入多个同一类型变量*</span><br><span class="line"> public static void test(int a ,String...books);</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><p>可变参数：方法参数部分指定类型的参数个数是可变多个：0个，1个或多个</p><p>可变个数形参的方法与同名的方法之间，彼此构成重载</p><p>可变参数方法的使用与方法参数部分使用数组是一致的，二者不能同时声明，否则报错。</p><p>方法的参数部分有可变形参，需要放在形参声明的最后</p><p>在一个方法的形参中，最多只能声明一个可变个数的形参</p><p><strong>案例分析：</strong></p><p>案例1：n个字符串进行拼接，每一个字符串之间使用某字符进行分割，如果没有传入字符串，那么返回空字符串””</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class StringTools &#123;</span><br><span class="line">   String concat(char seperator, String... args)&#123;</span><br><span class="line">     String str &#x3D; &quot;&quot;;</span><br><span class="line">     for (int i &#x3D; 0; i &lt; args.length; i++) &#123;</span><br><span class="line">       if(i&#x3D;&#x3D;0)&#123;</span><br><span class="line">         str +&#x3D; args[i];</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">         str +&#x3D; seperator + args[i];</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     return str;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">package com.atguigu.test05.param;</span><br><span class="line"></span><br><span class="line"> public class StringToolsTest &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     StringTools tools &#x3D; new StringTools();</span><br><span class="line"></span><br><span class="line">     System.out.println(tools.concat(&#39;-&#39;));</span><br><span class="line">     System.out.println(tools.concat(&#39;-&#39;,&quot;hello&quot;));</span><br><span class="line">     System.out.println(tools.concat(&#39;-&#39;,&quot;hello&quot;,&quot;world&quot;));</span><br><span class="line">     System.out.println(tools.concat(&#39;-&#39;,&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">案例2：求n个整数的和</span><br><span class="line"></span><br><span class="line">public class NumberTools &#123;</span><br><span class="line">   public int total(int[] nums)&#123;</span><br><span class="line">     int sum &#x3D; 0;</span><br><span class="line">     for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">       sum +&#x3D; nums[i];</span><br><span class="line">     &#125;</span><br><span class="line">     return sum;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public int sum(int... nums)&#123;</span><br><span class="line">     int sum &#x3D; 0;</span><br><span class="line">     for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">       sum +&#x3D; nums[i];</span><br><span class="line">     &#125;</span><br><span class="line">     return sum;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public class TestVarParam &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     NumberTools tools &#x3D; new NumberTools();</span><br><span class="line"></span><br><span class="line">     System.out.println(tools.sum());*&#x2F;&#x2F;0**个实参*</span><br><span class="line">     System.out.println(tools.sum(5));*&#x2F;&#x2F;1**个实参*</span><br><span class="line">     System.out.println(tools.sum(5,6,2,4));*&#x2F;&#x2F;4**个实参*</span><br><span class="line">     System.out.println(tools.sum(new int[]&#123;5,6,2,4&#125;));*&#x2F;&#x2F;**传入数组实参*</span><br><span class="line">     </span><br><span class="line">     System.out.println(&quot;------------------------------------&quot;);</span><br><span class="line">     System.out.println(tools.total(new int[]&#123;&#125;));*&#x2F;&#x2F;0**个元素的数组*</span><br><span class="line">     System.out.println(tools.total(new int[]&#123;5&#125;));*&#x2F;&#x2F;1**个元素的数组*</span><br><span class="line">     System.out.println(tools.total(new int[]&#123;5,6,2,4&#125;));*&#x2F;&#x2F;**传入数组实参*</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>案例3：如下的方法彼此构成重载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class MathTools &#123;</span><br><span class="line">   *&#x2F;&#x2F;**求两个整数的最大值*</span><br><span class="line">   public int max(int a,int b)&#123;</span><br><span class="line">     return a&gt;b?a:b;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;**求两个小数的最大值*</span><br><span class="line">   public double max(double a, double b)&#123;</span><br><span class="line">     return a&gt;b?a:b;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;**求三个整数的最大值*</span><br><span class="line">   public int max(int a, int b, int c)&#123;</span><br><span class="line">     return max(max(a,b),c);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;**求n**个整数的最大值*</span><br><span class="line">   public int max(int... nums)&#123;</span><br><span class="line">     int max &#x3D; nums[0];*&#x2F;&#x2F;**如果没有传入整数，或者传入null**，这句代码会报异常*</span><br><span class="line">     for (int i &#x3D; 1; i &lt; nums.length; i++) &#123;</span><br><span class="line">       if(nums[i] &gt; max)&#123;</span><br><span class="line">         max &#x3D; nums[i];</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     return max;</span><br><span class="line">   &#125;</span><br><span class="line">   *&#x2F;\*  &#x2F;&#x2F;**求n**整数的最大值*</span><br><span class="line">   *public int max(int[] nums)&#123; &#x2F;&#x2F;**编译就报错，与(int... nums)**无法区分*</span><br><span class="line">     *int max &#x3D; nums[0];&#x2F;&#x2F;**如果没有传入整数，或者传入null**，这句代码会报异常*</span><br><span class="line">     *for (int i &#x3D; 1; i &lt; nums.length; i++) &#123;*</span><br><span class="line">       *if(nums[i] &gt; max)&#123;*</span><br><span class="line">         *max &#x3D; nums[i];*</span><br><span class="line">       *&#125;*</span><br><span class="line">     *&#125;*</span><br><span class="line">     *return max;*</span><br><span class="line">   *&#125;\*&#x2F;*</span><br><span class="line"></span><br><span class="line"> *&#x2F;\*  &#x2F;&#x2F;**求n**整数的最大值*</span><br><span class="line">   *public int max(int first, int... nums)&#123; &#x2F;&#x2F;**当前类不报错，但是调用时会引起多个方法同时匹配*</span><br><span class="line">     *int max &#x3D; first;*</span><br><span class="line">     *for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;*</span><br><span class="line">       *if(nums[i] &gt; max)&#123;*</span><br><span class="line">         *max &#x3D; nums[i];*</span><br><span class="line">       *&#125;*</span><br><span class="line">     *&#125;*</span><br><span class="line">     *return max;*</span><br><span class="line">   *&#125;\*&#x2F;*</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-方法的参数传递机制"><a href="#7-3-方法的参数传递机制" class="headerlink" title="7.3 方法的参数传递机制"></a>7.3 方法的参数传递机制</h3><h4 id="7-3-1-形参和实参"><a href="#7-3-1-形参和实参" class="headerlink" title="7.3.1 形参和实参"></a>7.3.1 形参和实参</h4><p>形参（formal parameter）：在定义方法时，方法名后面括号()中声明的变量称为形式参数，简称形参。</p><p>实参（actual parameter）：在调用方法时，方法名后面括号()中的使用的值/变量/表达式称为实际参数，简称实参。</p><h4 id="7-3-2-参数传递机制：值传递"><a href="#7-3-2-参数传递机制：值传递" class="headerlink" title="7.3.2 参数传递机制：值传递"></a>7.3.2 参数传递机制：值传递</h4><p>Java里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p><p>形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参</p><p>形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</p><h4 id="7-3-3-举例"><a href="#7-3-3-举例" class="headerlink" title="7.3.3 举例"></a>7.3.3 举例</h4><p><strong>1、形参是基本数据类型</strong></p><p>案例：编写方法，交换两个整型变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">    int m &#x3D; 10;</span><br><span class="line">    int n &#x3D; 20;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;m &#x3D; &quot; + m + &quot;, n &#x3D; &quot; + n);</span><br><span class="line">    *&#x2F;&#x2F;**交换m**和n**的值*</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;   int temp &#x3D; m;*</span><br><span class="line"> *&#x2F;&#x2F;   m &#x3D; n;*</span><br><span class="line"> *&#x2F;&#x2F;   n &#x3D; temp;*</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    ValueTransferTest1 test &#x3D; new ValueTransferTest1();</span><br><span class="line">    test.swap(m, n);</span><br><span class="line">    </span><br><span class="line">    System.out.println(&quot;m &#x3D; &quot; + m + &quot;, n &#x3D; &quot; + n);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void swap(int m,int n)&#123;</span><br><span class="line">    int temp &#x3D; m;</span><br><span class="line">    m &#x3D; n;</span><br><span class="line">    n &#x3D; temp;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212152067.gif" alt="img"></p><p><strong>2、形参是引用数据类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    Data d1 &#x3D; new Data();</span><br><span class="line">    d1.m &#x3D; 10;</span><br><span class="line">    d1.n &#x3D; 20;</span><br><span class="line">    </span><br><span class="line">    System.out.println(&quot;m &#x3D; &quot; + d1.m + &quot;, n &#x3D; &quot; + d1.n);</span><br><span class="line">    </span><br><span class="line">    *&#x2F;&#x2F;**实现* *换序*</span><br><span class="line">    ValueTransferTest2 test &#x3D; new ValueTransferTest2();</span><br><span class="line">    test.swap(d1);  </span><br><span class="line">    System.out.println(&quot;m &#x3D; &quot; + d1.m + &quot;, n &#x3D; &quot; + d1.n);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   public void swap(Data data)&#123;</span><br><span class="line">    int temp &#x3D; data.m;</span><br><span class="line">    data.m &#x3D; data.n;</span><br><span class="line">    data.n &#x3D; temp;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class Data&#123;</span><br><span class="line">   int m;</span><br><span class="line">   int n;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212152773.gif" alt="img"></p><h4 id="7-3-4-练习"><a href="#7-3-4-练习" class="headerlink" title="7.3.4 练习"></a>7.3.4 练习</h4><p>练习1：判断如下程序输出的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class AssignNewObject &#123;</span><br><span class="line">   public void swap(MyData my)&#123;</span><br><span class="line">     my &#x3D; new MyData(); *&#x2F;&#x2F;**考虑堆空间此新创建的对象，和main**中的data**对象是否有关*</span><br><span class="line">     int temp &#x3D; my.x;</span><br><span class="line">     my.x &#x3D; my.y;</span><br><span class="line">     my.y &#x3D; temp;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     AssignNewObject tools &#x3D; new AssignNewObject();</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">     MyData data &#x3D; new MyData();</span><br><span class="line">     data.x &#x3D; 1;</span><br><span class="line">     data.y &#x3D; 2;</span><br><span class="line">     System.out.println(&quot;交换之前：x &#x3D; &quot; + data.x +&quot;,y &#x3D; &quot; + data.y);*&#x2F;&#x2F;*</span><br><span class="line">     tools.swap(data);*&#x2F;&#x2F;**调用完之后，x**与y**的值交换？*</span><br><span class="line">     System.out.println(&quot;交换之后：x &#x3D; &quot; + data.x +&quot;,y &#x3D; &quot; + data.y);*&#x2F;&#x2F;*</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> class MyData&#123;</span><br><span class="line">   int x ;</span><br><span class="line">   int y;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">练习2：如下操作是否可以实现数组排序</span><br><span class="line"></span><br><span class="line">public class ArrayTypeParam &#123;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;**冒泡排序，实现数组从小到大排序*</span><br><span class="line">   public void sort(int[] arr)&#123;</span><br><span class="line">     for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">       for (int j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class="line">         if(arr[j] &gt; arr[j+1])&#123;</span><br><span class="line">           int temp &#x3D; arr[j];</span><br><span class="line">           arr[j] &#x3D; arr[j+1];</span><br><span class="line">           arr[j+1] &#x3D; temp;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   *&#x2F;&#x2F;**打印数组的元素*</span><br><span class="line">   public void print(int[] arr)&#123;</span><br><span class="line">     for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">       System.out.print(arr[i]+&quot; &quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     ArrayTypeParam tools &#x3D; new ArrayTypeParam();</span><br><span class="line"></span><br><span class="line">     int[] nums &#x3D; &#123;4,3,1,6,7&#125;;</span><br><span class="line">     System.out.println(&quot;排序之前：&quot;);</span><br><span class="line">     tools.print(nums);</span><br><span class="line">     </span><br><span class="line">     tools.sort(nums);*&#x2F;&#x2F;**对nums**数组进行排序*</span><br><span class="line">     </span><br><span class="line">     System.out.println(&quot;排序之后：&quot;);</span><br><span class="line">     tools.print(nums);*&#x2F;&#x2F;**输出nums**数组的元素*</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">练习3：通过内存结构图，写出如下程序的输出结果</span><br><span class="line"></span><br><span class="line">*&#x2F;&#x2F;**栈：每个方法在调用时，都会有以栈帧的方法压入栈中。栈帧中保存了当前方法中声明的变量：方法内声明的，形参*</span><br><span class="line"> *&#x2F;&#x2F;**堆：存放**new**出来的**&quot;**东西**&quot;**：对象（成员变量在对象中）、数组实体（数组元素）。* </span><br><span class="line"> *&#x2F;&#x2F;**注意：变量前如果声明有类型，那么这就是一个新的刚要定义的变量。如果变量前没有声明类型，那就说明此变量在之前已经声明过。*</span><br><span class="line"> public class TransferTest3 &#123;</span><br><span class="line">   public static void main(String args[]) &#123;</span><br><span class="line">     TransferTest3 test &#x3D; new TransferTest3();</span><br><span class="line">     test.first();</span><br><span class="line">   &#125;</span><br><span class="line">   public void first() &#123;</span><br><span class="line">     int i &#x3D; 5;</span><br><span class="line">     Value v &#x3D; new Value();</span><br><span class="line">     v.i &#x3D; 25;</span><br><span class="line">     second(v, i);</span><br><span class="line">     System.out.println(v.i);</span><br><span class="line">   &#125;</span><br><span class="line">   public void second(Value v, int i) &#123;</span><br><span class="line">     i &#x3D; 0;</span><br><span class="line">     v.i &#x3D; 20;</span><br><span class="line">     Value val &#x3D; new Value();</span><br><span class="line">     v &#x3D; val;</span><br><span class="line">     System.out.println(v.i + &quot; &quot; + i);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> class Value &#123;</span><br><span class="line">   int i &#x3D; 15;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212153523.jpg" alt="20220320_233145"></p><p>练习4：貌似是考查方法的参数传递</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212153002.gif" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;&#x2F;**法一：*</span><br><span class="line"> public static void method(int a, int b) &#123;</span><br><span class="line">   *&#x2F;&#x2F;* *在不改变原本题目的前提下，如何写这个函数才能在main**函数中输出a&#x3D;100**，b&#x3D;200**？* </span><br><span class="line">   a &#x3D; a * 10;</span><br><span class="line">   b &#x3D; b * 20;</span><br><span class="line">   System.out.println(a);</span><br><span class="line">   System.out.println(b);</span><br><span class="line">   System.exit(0);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;**法二：*</span><br><span class="line"> public static void method(int a, int b) &#123;</span><br><span class="line"></span><br><span class="line">   PrintStream ps &#x3D; new PrintStream(System.out) &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void println(String x) &#123;</span><br><span class="line">   </span><br><span class="line">       if (&quot;a&#x3D;10&quot;.equals(x)) &#123;</span><br><span class="line">         x &#x3D; &quot;a&#x3D;100&quot;;</span><br><span class="line">       &#125; else if (&quot;b&#x3D;10&quot;.equals(x)) &#123;</span><br><span class="line">         x &#x3D; &quot;b&#x3D;200&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">       super.println(x);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   System.setOut(ps);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>练习5：将对象作为参数传递给方法</p><p>（1）定义一个Circle类，包含一个double型的radius属性代表圆的半径，一个findArea()方法返回圆的面积。 （2）定义一个类PassObject，在类中定义一个方法printAreas()，该方法的定义如下：public void printAreas(Circle c, int time)，在printAreas方法中打印输出1到time之间的每个整数半径值，以及对应的面积。例如，times为5，则输出半径1，2，3，4，5，以及对应的圆面积。 （3）在main方法中调用printAreas()方法，调用完毕后输出当前半径值。程序运行结果如图所示。</p><p><img src=".images/clip_image072.gif" alt="img"></p><h3 id="7-4-递归-recursion-方法"><a href="#7-4-递归-recursion-方法" class="headerlink" title="7.4 递归(recursion)方法"></a>7.4 递归(recursion)方法</h3><p>举例1：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212153708.gif" alt="image-20220521160246138"></p><p>举例2：</p><p>从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>    从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>      从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>        从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?…<br>        …<br> 老和尚没了,庙塌了,小和尚还俗结婚了。</p><p><strong>递归方法调用</strong>：方法自己调用自己的现象就称为递归。</p><p><strong>递归的分类:</strong> 直接递归、间接递归。</p><p>直接递归：方法自身调用自己。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> public void methodA()&#123;</span><br><span class="line"> methodA();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">间接递归：可以理解为A()方法调用B()方法，B()方法调用C()方法，C()方法调用A()方法。</span><br><span class="line"></span><br><span class="line">   public static void A()&#123;</span><br><span class="line"> B();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public static void B()&#123;</span><br><span class="line"> C();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public static void C()&#123;</span><br><span class="line"> A();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><p>递归方法包含了一种隐式的循环。</p><p>递归方法会重复执行某段代码，但这种重复执行无须循环控制。</p><p>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，停不下来，类似于死循环。最终发生栈内存溢出。</p><p><strong>举例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">举例1：计算1 ~ n的和</span><br><span class="line"></span><br><span class="line">public class RecursionDemo &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     RecursionDemo demo &#x3D; new RecursionDemo();</span><br><span class="line">    *&#x2F;&#x2F;**计算1~num**的和，使用递归完成*</span><br><span class="line">    int num &#x3D; 5;</span><br><span class="line">     *&#x2F;&#x2F;* *调用求和的方法*</span><br><span class="line">    int sum &#x3D; demo.getSum(num);</span><br><span class="line">     *&#x2F;&#x2F;* *输出结果*</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">   *&#x2F;**</span><br><span class="line">    *通过递归算法实现.*</span><br><span class="line">    *参数列表:int* </span><br><span class="line">    *返回值类型: int* </span><br><span class="line">   **&#x2F;*</span><br><span class="line">   public int getSum(int num) &#123;</span><br><span class="line">     *&#x2F;** </span><br><span class="line">       *num**为1**时,**方法返回1,*</span><br><span class="line">       *相当于是方法的出口,num**总有是1**的情况*</span><br><span class="line">     **&#x2F;*</span><br><span class="line">    if(num &#x3D;&#x3D; 1)&#123;</span><br><span class="line">      return 1;</span><br><span class="line">    &#125;</span><br><span class="line">     *&#x2F;**</span><br><span class="line">      *num**不为1**时,**方法返回 num +(num-1)**的累和*</span><br><span class="line">      *递归调用getSum**方法*</span><br><span class="line">     **&#x2F;*</span><br><span class="line">    return num + getSum(num-1);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>代码执行图解：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212154676.gif" alt="img"></p><p>举例2：递归方法计算n!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int multiply(int num)&#123;</span><br><span class="line">   if(num &#x3D;&#x3D; 1)&#123;</span><br><span class="line">    return 1;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">    return num * multiply(num - 1);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212154552.gif" alt="img"></p><p>举例3：已知有一个数列：f(0) = 1，f(1) = 4，f(n+2)=2*f(n+1) + f(n)，其中n是大于0的整数，求f(10)的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public int f(int num)&#123;</span><br><span class="line">   if(num &#x3D;&#x3D; 0)&#123;</span><br><span class="line">    return 1;</span><br><span class="line">   &#125;else if(num &#x3D;&#x3D; 1)&#123;</span><br><span class="line">    return 4;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">    return 2 * f(num - 1) + f(num - 2);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>举例4：已知一个数列：f(20) = 1,f(21) = 4,f(n+2) = 2*f(n+1)+f(n)，其中n是大于0的整数，求f(10)的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public int func(int num)&#123;</span><br><span class="line">   if(num &#x3D;&#x3D; 20)&#123;</span><br><span class="line">    return 1;</span><br><span class="line">   &#125;else if(num &#x3D;&#x3D; 21)&#123;</span><br><span class="line">    return 4;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">     return func(num + 2) - 2 * func(num + 1);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>举例5：计算斐波那契数列（Fibonacci）的第n个值，斐波那契数列满足如下规律，</p><p>1,1,2,3,5,8,13,21,34,55,….</p><p>即从第三个数开始，一个数等于前两个数之和。假设f(n)代表斐波那契数列的第n个值，那么f(n)满足： f(n) = f(n-2) + f(n-1); </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;**使用递归的写法*</span><br><span class="line">   int f(int n) &#123;*&#x2F;&#x2F;**计算斐波那契数列第**n**个值是多少*</span><br><span class="line">     if (n &lt; 1) &#123;*&#x2F;&#x2F;**负数是返回特殊值**1**，表示不计算负数情况*</span><br><span class="line">       return 1;</span><br><span class="line">     &#125;</span><br><span class="line">     if (n &#x3D;&#x3D; 1 || n &#x3D;&#x3D; 2) &#123;</span><br><span class="line">       return 1;</span><br><span class="line">     &#125;</span><br><span class="line">     return f(n - 2) + f(n - 1);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;**不用递归*</span><br><span class="line">   int fValue(int n) &#123;*&#x2F;&#x2F;**计算斐波那契数列第**n**个值是多少*</span><br><span class="line">     if (n &lt; 1) &#123;*&#x2F;&#x2F;**负数是返回特殊值**1**，表示不计算负数情况*</span><br><span class="line">       return 1;</span><br><span class="line">     &#125;</span><br><span class="line">     if (n &#x3D;&#x3D; 1 || n &#x3D;&#x3D; 2) &#123;</span><br><span class="line">       return 1;</span><br><span class="line">     &#125;</span><br><span class="line">     *&#x2F;&#x2F;**从第三个数开始，* *等于* *前两个整数相加*</span><br><span class="line">     int beforeBefore &#x3D; 1; *&#x2F;&#x2F;**相当于**n&#x3D;1**时的值*</span><br><span class="line">     int before &#x3D; 1;*&#x2F;&#x2F;**相当于**n&#x3D;2**时的值*</span><br><span class="line">     int current &#x3D; beforeBefore + before; *&#x2F;&#x2F;**相当于**n&#x3D;3**的值*</span><br><span class="line">     *&#x2F;&#x2F;**再完后*</span><br><span class="line">     for (int i &#x3D; 4; i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">       beforeBefore &#x3D; before;</span><br><span class="line">       before &#x3D; current;</span><br><span class="line">       current &#x3D; beforeBefore + before;</span><br><span class="line">       *&#x2F;**</span><br><span class="line">       *假设**i&#x3D;4*</span><br><span class="line">         *beforeBefore &#x3D; before; &#x2F;&#x2F;**相当于**n&#x3D;2**时的值*</span><br><span class="line">         *before &#x3D; current; &#x2F;&#x2F;**相当于**n&#x3D;3**的值*</span><br><span class="line">         *current &#x3D; beforeBefore + before; &#x2F;&#x2F;**相当于**n &#x3D; 4**的值*</span><br><span class="line">       *假设**i&#x3D;5*</span><br><span class="line">         *beforeBefore &#x3D; before; &#x2F;&#x2F;**相当于**n&#x3D;3**的值*</span><br><span class="line">         *before &#x3D; current; &#x2F;&#x2F;**相当于**n &#x3D; 4**的值*</span><br><span class="line">         *current &#x3D; beforeBefore + before; &#x2F;&#x2F;**相当于**n &#x3D; 5**的值*</span><br><span class="line">         *....*</span><br><span class="line">       **&#x2F;*</span><br><span class="line">     &#125;</span><br><span class="line">     return current;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>举例6：面试题</p><p>宋老师，我今天去百度面试，遇到一个一个双重递归调用的问题，我琢磨了一下，完全不知道为什么。打断点了，也还是没看懂为什么程序会那样走。您有空可以看一下，求指教。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212155814.gif" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  public int recursion(int k) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    System.out.println(&quot;count1:&quot; + count + &quot; k:&quot; + k);</span><br><span class="line">    if (k &lt;&#x3D; 0) &#123;</span><br><span class="line">      return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return recursion(k - 1) + recursion(k - 2);*&#x2F;&#x2F;287*</span><br><span class="line">    *&#x2F;&#x2F;return recursion(k - 1);&#x2F;&#x2F;11*</span><br><span class="line">    *&#x2F;&#x2F;return recursion(k - 1) + recursion(k - 1);&#x2F;&#x2F;2047*</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>剖析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212155044.gif" alt="image-20220320235229941"></p><p>最后说两句：</p><p>\1.    递归调用会占用大量的系统堆栈，内存耗用多，在递归调用层次多时速度要比循环慢的多，所以在使用递归时要慎重。</p><p>\2.    在要求高性能的情况下尽量避免使用递归，递归调用既花时间又耗内存。考虑使用循环迭代</p><h2 id="8-关键字：package、import"><a href="#8-关键字：package、import" class="headerlink" title="8. 关键字：package、import"></a>8. 关键字：package、import</h2><h3 id="8-1-package-包"><a href="#8-1-package-包" class="headerlink" title="8.1 package(包)"></a>8.1 package(包)</h3><p>package，称为包，用于指明该文件中定义的类、接口等结构所在的包。</p><h4 id="8-1-1-语法格式"><a href="#8-1-1-语法格式" class="headerlink" title="8.1.1 语法格式"></a>8.1.1 语法格式</h4><p>package 顶层包名.子包名 ;</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pack1\pack2\PackageTest.java</span><br><span class="line"></span><br><span class="line">package pack1.pack2;  *&#x2F;&#x2F;**指定类PackageTest**属于包pack1.pack2*</span><br><span class="line"></span><br><span class="line"> public class PackageTest&#123;</span><br><span class="line">   public void display()&#123;</span><br><span class="line">    System.out.println(&quot;in method display()&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>•     一个源文件只能有一个声明包的package语句</p><p>•     package语句作为Java源文件的第一条语句出现。若缺省该语句，则指定为无名包。</p><p>•     包名，属于标识符，满足标识符命名的规则和规范（全部小写）、见名知意</p><p>–     包通常使用所在公司域名的倒置：com.atguigu.xxx。</p><p>–     大家取包名时不要使用”java.xx”包</p><p>•     包对应于文件系统的目录，package语句中用 “.” 来指明包(目录)的层次，每.一次就表示一层文件目录。</p><p>•     同一个包下可以声明多个结构（类、接口），但是不能定义同名的结构（类、接口）。不同的包下可以定义同名的结构（类、接口）</p><h4 id="8-1-2-包的作用"><a href="#8-1-2-包的作用" class="headerlink" title="8.1.2 包的作用"></a>8.1.2 包的作用</h4><p>•     包可以包含类和子包，划分项目层次，便于管理</p><p>•     帮助管理大型软件系统：将功能相近的类划分到同一个包中。比如：MVC的设计模式</p><p>•     解决类命名冲突的问题</p><p>•     控制访问权限</p><h4 id="8-1-3-应用举例"><a href="#8-1-3-应用举例" class="headerlink" title="8.1.3 应用举例"></a>8.1.3 应用举例</h4><p>举例1：某航运软件系统包括：一组域对象、GUI和reports子系统</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212155997.gif" alt="img"></p><p><strong>举例2：MVC设计模式</strong></p><p>MVC是一种软件构件模式，目的是为了降低程序开发中代码业务的耦合度。</p><p>MVC设计模式将整个程序分为三个层次：视图模型(Viewer)层，控制器(Controller)层，与数据模型(Model)层。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。</p><p>视图层viewer：显示数据,为用户提供使用界面，与用户直接进行交互。<br> &gt;相关工具类  view.utils<br> &gt;自定义view  view.ui</p><p> 控制层controller：解析用户请求，处理业务逻辑，给予用户响应<br> &gt;应用界面相关   controller.activity<br> &gt;存放fragment  controller.fragment<br> &gt;显示列表的适配器 controller.adapter<br> &gt;服务相关的     controller.service<br> &gt;抽取的基类     controller.base</p><p> 模型层model：主要承载数据、处理数据<br> &gt;数据对象封装 model.bean/domain<br> &gt;数据库操作类 model.dao<br> &gt;数据库    model.db</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212155074.gif" alt="img"></p><h4 id="8-1-4-JDK中主要的包介绍"><a href="#8-1-4-JDK中主要的包介绍" class="headerlink" title="8.1.4 JDK中主要的包介绍"></a>8.1.4 JDK中主要的包介绍</h4><p>java.lang—-包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能 java.net—-包含执行与网络相关的操作的类和接口。 java.io —-包含能提供多种输入/输出功能的类。 java.util—-包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。 java.text—-包含了一些java格式化相关的类 java.sql—-包含了java进行JDBC数据库编程的相关类/接口 java.awt—-包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。</p><h3 id="8-2-import-导入"><a href="#8-2-import-导入" class="headerlink" title="8.2 import(导入)"></a>8.2 import(导入)</h3><p>为了使用定义在其它包中的Java类，需用import语句来显式引入指定包下所需要的类。相当于import语句告诉编译器到哪里去寻找这个类。</p><h4 id="8-2-1-语法格式"><a href="#8-2-1-语法格式" class="headerlink" title="8.2.1 语法格式"></a>8.2.1 语法格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import 包名.类名;</span><br></pre></td></tr></table></figure><h4 id="8-2-2-应用举例"><a href="#8-2-2-应用举例" class="headerlink" title="8.2.2 应用举例"></a>8.2.2 应用举例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pack1.pack2.Test;  *&#x2F;&#x2F;import pack1.pack2.\*;**表示引入pack1.pack2**包中的所有结构*</span><br><span class="line"></span><br><span class="line"> public class PackTest&#123;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">    Test t &#x3D; new Test();     *&#x2F;&#x2F;Test**类在pack1.pack2**包中定义*</span><br><span class="line">    t.display();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-3-注意事项"><a href="#8-2-3-注意事项" class="headerlink" title="8.2.3 注意事项"></a>8.2.3 注意事项</h4><p>•     import语句，声明在包的声明和类的声明之间。</p><p>•     如果需要导入多个类或接口，那么就并列显式多个import语句即可</p><p>•     如果使用a.<em>导入结构，表示可以导入a包下的所有的结构。举例：可以使用java.util.</em>的方式，一次性导入util包下所有的类或接口。</p><p>•     如果导入的类或接口是java.lang包下的，或者是当前包下的，则可以省略此import语句。</p><p>•     如果已经导入java.a包下的类，那么如果需要使用a包的子包下的类的话，仍然需要导入。</p><p>•     如果在代码中使用不同包下的同名的类，那么就需要使用类的全类名的方式指明调用的是哪个类。</p><p>•     （了解）import static组合的使用：调用指定类或接口下的静态的属性或方法</p><h2 id="9-面向对象特征一：封装性-encapsulation"><a href="#9-面向对象特征一：封装性-encapsulation" class="headerlink" title="9. 面向对象特征一：封装性(encapsulation)"></a>9. 面向对象特征一：封装性(encapsulation)</h2><h3 id="9-1-为什么需要封装？"><a href="#9-1-为什么需要封装？" class="headerlink" title="9.1 为什么需要封装？"></a>9.1 为什么需要封装？</h3><p>•     我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？</p><p>•     我要开车，我不需要懂离合、油门、制动等原理和维修也可以驾驶。</p><p>•     客观世界里每一个事物的内部信息都隐藏在其内部，外界无法直接操作和修改，只能通过指定的方式进行访问和修改。</p><p>随着我们系统越来越复杂，类会越来越多，那么类之间的访问边界必须把握好，面向对象的开发原则要遵循“高内聚、低耦合”。</p><p>高内聚、低耦合是软件工程中的概念，也是UNIX 操作系统设计的经典原则。</p><p>内聚，指一个模块内各个元素彼此结合的紧密程度；耦合指一个软件结构内不同模块之间互连程度的度量。内聚意味着重用和独立，耦合意味着多米诺效应牵一发动全身。</p><p>而“高内聚，低耦合”的体现之一：</p><p>•     高内聚：类的内部数据操作细节自己完成，不允许外部干涉；</p><p>•     低耦合：仅暴露少量的方法给外部使用，尽量方便外部调用。</p><h3 id="9-2-何为封装性？"><a href="#9-2-何为封装性？" class="headerlink" title="9.2 何为封装性？"></a>9.2 何为封装性？</h3><p>所谓封装，就是把客观事物封装成抽象概念的类，并且类可以把自己的数据和方法只向可信的类或者对象开放，向没必要开放的类或者对象隐藏信息。</p><p><strong>通俗的讲，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</strong></p><h3 id="9-3-Java如何实现数据封装"><a href="#9-3-Java如何实现数据封装" class="headerlink" title="9.3 Java如何实现数据封装"></a>9.3 Java如何实现数据封装</h3><p>•     实现封装就是控制类或成员的可见性范围。这就需要依赖访问控制修饰符，也称为权限修饰符来控制。</p><p>•     权限修饰符：public、protected、缺省、private。具体访问范围如下：</p><table><thead><tr><th>修饰符</th><th>本类内部</th><th>本包内</th><th>其他包的子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>缺省</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>•     具体修饰的结构：</p><p>–     外部类：public、缺省</p><p>–     成员变量、成员方法、构造器、成员内部类：public、protected、缺省、private</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212156909.gif" alt="image-20220321222327616"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212156562.gif" alt="image-20220617164042390"></p><h3 id="9-4-封装性的体现"><a href="#9-4-封装性的体现" class="headerlink" title="9.4 封装性的体现"></a>9.4 封装性的体现</h3><h4 id="9-4-1-成员变量-属性私有化"><a href="#9-4-1-成员变量-属性私有化" class="headerlink" title="9.4.1 成员变量/属性私有化"></a>9.4.1 成员变量/属性私有化</h4><p><strong>概述：私有化类的成员变量，提供公共的get和set方法，对外暴露获取和修改属性的功能。</strong></p><p>实现步骤：</p><p><strong>①</strong> 使用 private 修饰成员变量</p><p>private 数据类型 变量名 ；</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line">   private boolean marry;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>②</strong> 提供 getXxx方法 / setXxx 方法，可以访问成员变量，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line">   private boolean marry;</span><br><span class="line"></span><br><span class="line">   public void setName(String n) &#123;</span><br><span class="line">    name &#x3D; n;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getName() &#123;</span><br><span class="line">     return name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setAge(int a) &#123;</span><br><span class="line">     age &#x3D; a;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public int getAge() &#123;</span><br><span class="line">     return age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setMarry(boolean m)&#123;</span><br><span class="line">     marry &#x3D; m;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public boolean isMarry()&#123;</span><br><span class="line">     return marry;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>③</strong> 测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class PersonTest &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     Person p &#x3D; new Person();</span><br><span class="line"></span><br><span class="line">     *&#x2F;&#x2F;**实例变量私有化，跨类是无法直接使用的*</span><br><span class="line">    *&#x2F;\* p.name &#x3D; &quot;**张三&quot;;*</span><br><span class="line">     *p.age &#x3D; 23;*</span><br><span class="line">     *p.marry &#x3D; true;\*&#x2F;*</span><br><span class="line">     </span><br><span class="line">     p.setName(&quot;张三&quot;);</span><br><span class="line">     System.out.println(&quot;p.name &#x3D; &quot; + p.getName());</span><br><span class="line">     </span><br><span class="line">     p.setAge(23);</span><br><span class="line">     System.out.println(&quot;p.age &#x3D; &quot; + p.getAge());</span><br><span class="line">     </span><br><span class="line">     p.setMarry(true);</span><br><span class="line">     System.out.println(&quot;p.marry &#x3D; &quot; + p.isMarry());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>成员变量封装的好处：</strong></p><p>•     让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里面加入控制逻辑，限制对成员变量的不合理访问。还可以进行数据检查，从而有利于保证对象信息的完整性。</p><p>•     便于修改，提高代码的可维护性。主要说的是隐藏的部分，在内部修改了，如果其对外可以的访问方式不变的话，外部根本感觉不到它的修改。例如：Java8-&gt;Java9，String从char[]转为byte[]内部实现，而对外的方法不变，我们使用者根本感觉不到它内部的修改。</p><p><strong>开心一笑：</strong></p><p>A man and woman are in a computer programming lecture. The man touches the woman’s breasts.</p><p> “Hey!” she says. “Those are private!”</p><p> The man says, “But we’re in the same class!”</p><h4 id="9-4-2-私有化方法"><a href="#9-4-2-私有化方法" class="headerlink" title="9.4.2 私有化方法"></a>9.4.2 私有化方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayUtil &#123;</span><br><span class="line"></span><br><span class="line">    public int max(int[] arr) &#123;</span><br><span class="line">    int maxValue &#x3D; arr[0];</span><br><span class="line">    for(int i &#x3D; 1;i &lt; arr.length;i++)&#123;</span><br><span class="line">      if(maxValue &lt; arr[i])&#123;</span><br><span class="line">        maxValue &#x3D; arr[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxValue;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public int min(int[] arr)&#123;</span><br><span class="line">    int minValue &#x3D; arr[0];</span><br><span class="line">    for(int i &#x3D; 1;i &lt; arr.length;i++)&#123;</span><br><span class="line">      if(minValue &gt; arr[i])&#123;</span><br><span class="line">        minValue &#x3D; arr[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return minValue;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public int sum(int[] arr) &#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 0;i &lt; arr.length;i++)&#123;</span><br><span class="line">      sum +&#x3D; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public int avg(int[] arr) &#123;</span><br><span class="line">    int sumValue &#x3D; sum(arr);</span><br><span class="line">    return sumValue &#x2F; arr.length;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;* *创建一系列重载的上述方法*</span><br><span class="line">   *&#x2F;&#x2F; public double max(double[] arr)&#123;&#125;*</span><br><span class="line">   *&#x2F;&#x2F; public float max(float[] arr)&#123;&#125;*</span><br><span class="line">   *&#x2F;&#x2F; public byte max(byte[] arr)&#123;&#125;*</span><br><span class="line"></span><br><span class="line">    public void print(int[] arr) &#123;</span><br><span class="line">    for(int i &#x3D; 0;i &lt; arr.length;i++)&#123;</span><br><span class="line">      System.out.print(arr[i] + &quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    public int[] copy(int[] arr) &#123;</span><br><span class="line">    int[] arr1 &#x3D; new int[arr.length];</span><br><span class="line">    for(int i &#x3D; 0;i &lt; arr.length;i++)&#123;</span><br><span class="line">      arr1[i] &#x3D; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return arr1;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void reverse(int[] arr) &#123;</span><br><span class="line">    for(int i &#x3D; 0,j &#x3D; arr.length - 1;i &lt; j;i++,j--)&#123;</span><br><span class="line">      int temp &#x3D; arr[i];</span><br><span class="line">      arr[i] &#x3D; arr[j];</span><br><span class="line">      arr[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void sort(int[] arr,String desc) &#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    if(&quot;ascend&quot;.equals(desc))&#123;*&#x2F;&#x2F;if(desc.equals(&quot;ascend&quot;))&#123;*</span><br><span class="line">      for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">        for (int j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class="line">          if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line"></span><br><span class="line"> *&#x2F;&#x2F;          int temp &#x3D; arr[j];*</span><br><span class="line"> *&#x2F;&#x2F;          arr[j] &#x3D; arr[j + 1];*</span><br><span class="line"> *&#x2F;&#x2F;          arr[j + 1] &#x3D; temp;*</span><br><span class="line">           swap(arr,j,j+1);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else if (&quot;descend&quot;.equals(desc))&#123;</span><br><span class="line">      for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">        for (int j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class="line">          if (arr[j] &lt; arr[j + 1]) &#123;</span><br><span class="line"> *&#x2F;&#x2F;          int temp &#x3D; arr[j];*</span><br><span class="line"> *&#x2F;&#x2F;          arr[j] &#x3D; arr[j + 1];*</span><br><span class="line"> *&#x2F;&#x2F;          arr[j + 1] &#x3D; temp;*</span><br><span class="line">           swap(arr,j,j+1);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      System.out.println(&quot;您输入的排序方式有误！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private void swap(int[] arr,int i,int j)&#123;</span><br><span class="line">    int temp &#x3D; arr[i];</span><br><span class="line">    arr[i] &#x3D; arr[j];</span><br><span class="line">    arr[j] &#x3D; temp;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;***</span><br><span class="line">    *** </span><br><span class="line">    *** *@*param arr</span><br><span class="line">    *** *@*param value</span><br><span class="line">    *** *@*return *返回*value*值出现的位置* *或* *-1**：未找到*</span><br><span class="line">    **&#x2F;*</span><br><span class="line">   public int getValue(int[] arr, int value) &#123;</span><br><span class="line">    *&#x2F;&#x2F;**方法：线性查找*</span><br><span class="line">    for(int i &#x3D; 0;i &lt; arr.length;i++)&#123;</span><br><span class="line">      if(value &#x3D;&#x3D; arr[i])&#123;</span><br><span class="line">        return i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    return - 1;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>开发中，一般成员实例变量都习惯使用private修饰，再提供相应的public权限的get/set方法访问。</p><p>对于final的实例变量，不提供set()方法。（后面final关键字的时候讲）</p><p>对于static final的成员变量，习惯上使用public修饰。</p><h3 id="9-5-练习"><a href="#9-5-练习" class="headerlink" title="9.5 练习"></a>9.5 练习</h3><p>练习1：</p><p>创建程序：在其中定义两个类：Person和PersonTest类。定义如下：</p><p>用setAge()设置人的合法年龄(0~130)，用getAge()返回人的年龄。在PersonTest类中实例化Person类的对象b，调用setAge()和getAge()方法，体会Java的封装性。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212157241.gif" alt="image-20220321223633916"></p><p>练习2：</p><p>自定义图书类。设定属性包括：书名bookName，作者author，出版社名publisher，价格price；方法包括：相应属性的get/set方法，图书信息介绍等。</p><h2 id="10-类的成员之三：构造器-Constructor"><a href="#10-类的成员之三：构造器-Constructor" class="headerlink" title="10. 类的成员之三：构造器(Constructor)"></a>10. 类的成员之三：构造器(Constructor)</h2><p>我们new完对象时，所有成员变量都是默认值，如果我们需要赋别的值，需要挨个为它们再赋值，太麻烦了。我们能不能在new对象时，直接为当前对象的某个或所有成员变量直接赋值呢？</p><p>可以，Java给我们提供了构造器（Constructor)，也称为构造方法。</p><h3 id="10-1-构造器的作用"><a href="#10-1-构造器的作用" class="headerlink" title="10.1 构造器的作用"></a>10.1 构造器的作用</h3><p>new对象，并在new对象的时候为实例变量赋值。</p><p>举例：Person p = new Person(“Peter”,15);</p><p>解释：如同我们规定每个“人”一出生就必须先洗澡，我们就可以在“人”的构造器中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们要“洗澡”了。</p><h3 id="10-2-构造器的语法格式"><a href="#10-2-构造器的语法格式" class="headerlink" title="10.2 构造器的语法格式"></a>10.2 构造器的语法格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] class 类名&#123;</span><br><span class="line">   [修饰符] 构造器名()&#123;</span><br><span class="line">     *&#x2F;&#x2F;* *实例初始化代码*</span><br><span class="line">   &#125;</span><br><span class="line">   [修饰符] 构造器名(参数列表)&#123;</span><br><span class="line">     *&#x2F;&#x2F;* *实例初始化代码*</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>\3.    构造器名必须与它所在的类名必须相同。</p><p>\4.    它没有返回值，所以不需要返回值类型，也不需要void。</p><p>\5.    构造器的修饰符只能是权限修饰符，不能被其他任何修饰。比如，不能被static、final、synchronized、abstract、native修饰，不能有return语句返回值。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;* *无参构造*</span><br><span class="line">   public Student() &#123;&#125;</span><br><span class="line"></span><br><span class="line">   *&#x2F;&#x2F;* *有参构造*</span><br><span class="line">   public Student(String n,int a) &#123;</span><br><span class="line">     name &#x3D; n;</span><br><span class="line">     age &#x3D; a;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getName() &#123;</span><br><span class="line">     return name;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setName(String n) &#123;</span><br><span class="line">     name &#x3D; n;</span><br><span class="line">   &#125;</span><br><span class="line">   public int getAge() &#123;</span><br><span class="line">     return age;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setAge(int a) &#123;</span><br><span class="line">     age &#x3D; a;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getInfo()&#123;</span><br><span class="line">     return &quot;姓名：&quot; + name +&quot;，年龄：&quot; + age;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">public class TestStudent &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     *&#x2F;&#x2F;**调用无参构造创建学生对象*</span><br><span class="line">     Student s1 &#x3D; new Student();</span><br><span class="line"></span><br><span class="line">     *&#x2F;&#x2F;**调用有参构造创建学生对象*</span><br><span class="line">     Student s2 &#x3D; new Student(&quot;张三&quot;,23);</span><br><span class="line">     </span><br><span class="line">     System.out.println(s1.getInfo());</span><br><span class="line">     System.out.println(s2.getInfo());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="10-3-使用说明"><a href="#10-3-使用说明" class="headerlink" title="10.3 使用说明"></a>10.3 使用说明</h3><p>当我们没有显式的声明类中的构造器时，系统会默认提供一个无参的构造器并且该构造器的修饰符默认与类的修饰符相同</p><p>​      <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212157521.gif" alt="img"></p><p>​      </p><p>当我们显式的定义类的构造器以后，系统就不再提供默认的无参的构造器了。</p><p>在类中，至少会存在一个构造器。</p><p>构造器是可以重载的。</p><h3 id="10-4-练习"><a href="#10-4-练习" class="headerlink" title="10.4 练习"></a>10.4 练习</h3><p><strong>练习1：</strong>编写两个类，TriAngle和TriAngleTest，其中TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形的面积。</p><p><strong>练习2：</strong></p><p>(1)定义Student类,有4个属性： String name;  int age;  String school;  String major;</p><p>(2)定义Student类的3个构造器:</p><p>•     第一个构造器Student(String n, int a)设置类的name和age属性；</p><p>•     第二个构造器Student(String n, int a, String s)设置类的name, age 和school属性；</p><p>•     第三个构造器Student(String n, int a, String s, String m)设置类的name, age ,school和major属性；</p><p>(3)在main方法中分别调用不同的构造器创建的对象，并输出其属性值。</p><p><strong>练习3：</strong></p><p>1、写一个名为Account的类模拟账户。该类的属性和方法如下图所示。</p><p>该类包括的属性：账号id，余额balance，年利率annualInterestRate；</p><p>包含的方法：访问器方法（getter和setter方法），取款方法withdraw()，存款方法deposit()。</p><p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212157098.gif" alt="标题: fig:"></p><p><strong>提示：</strong>在提款方法withdraw中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。</p><p>\1.    创建Customer类。</p><p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212157663.gif" alt="标题: fig:"></p><p>\2. 声明三个私有对象属性：firstName、lastName和account。 b. 声明一个公有构造器，这个构造器带有两个代表对象属性的参数（f和l） c. 声明两个公有存取器来访问该对象属性，方法getFirstName和getLastName返回相应的属性。 d. 声明setAccount 方法来对account属性赋值。 e. 声明getAccount 方法以获取account属性。</p><p>3.写一个测试程序。</p><p>（1）创建一个Customer ，名字叫 Jane Smith, 他有一个账号为1000，余额为2000元，年利率为 1.23％ 的账户。 （2）对Jane Smith操作。 存入 100 元，再取出960元。再取出2000元。 打印出Jane Smith 的基本信息</p><p>成功存入 ：100.0<br> 成功取出：960.0<br> 余额不足，取款失败<br> Customer [Smith, Jane] has a account: id is 1000, annualInterestRate is 1.23％, balance is 1140.0</p><h2 id="11-阶段性知识补充"><a href="#11-阶段性知识补充" class="headerlink" title="11. 阶段性知识补充"></a>11. 阶段性知识补充</h2><h3 id="11-1-类中属性赋值过程"><a href="#11-1-类中属性赋值过程" class="headerlink" title="11.1 类中属性赋值过程"></a>11.1 类中属性赋值过程</h3><p><strong>1、在类的属性中，可以有哪些位置给属性赋值？</strong></p><p>① 默认初始化</p><p>② 显式初始化</p><p>③ 构造器中初始化</p><p>④ 通过”对象.属性”或”对象.方法”的方式，给属性赋值</p><p><strong>2、这些位置执行的先后顺序是怎样？</strong></p><p>顺序：① - ② - ③ - ④</p><p><strong>3、说明：</strong></p><p>上述中的①、②、③在对象创建过程中，只执行一次。</p><p>④ 是在对象创建后执行的，可以根据需求多次执行。</p><h3 id="11-2-JavaBean"><a href="#11-2-JavaBean" class="headerlink" title="11.2 JavaBean"></a>11.2 JavaBean</h3><p><strong>JavaBean是一种Java语言写成的可重用组件。</strong></p><p>–     好比你做了一个扳手，这个扳手会在很多地方被拿去用。这个扳手也提供多种功能(你可以拿这个扳手扳、锤、撬等等)，而这个扳手就是一个组件。</p><p><strong>所谓JavaBean，是指符合如下标准的Java类：</strong></p><ul><li><p>–     类是公共的</p></li><li><p>–     有一个无参的公共的构造器</p></li><li><p>–     有属性，且有对应的get、set方法</p></li></ul><p>•     用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</p><p>•     《Think in Java》中提到，JavaBean最初是为Java GUI的可视化编程实现的。你拖动IDE构建工具创建一个GUI 组件（如多选框），其实是工具给你创建Java类，并提供将类的属性暴露出来给你修改调整，将事件监听器暴露出来。</p><p>•     示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  public class JavaBean &#123;</span><br><span class="line">  private String name; *&#x2F;&#x2F;* *属性一般定义为private*</span><br><span class="line">  private int age;</span><br><span class="line">  public JavaBean() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  public int getAge() &#123;</span><br><span class="line">    return age;</span><br><span class="line">  &#125;</span><br><span class="line">  public void setAge(int a) &#123;</span><br><span class="line">    age &#x3D; a;</span><br><span class="line">  &#125;</span><br><span class="line">  public String getName() &#123;</span><br><span class="line">    return name;</span><br><span class="line">  &#125;</span><br><span class="line">  public void setName(String n) &#123;</span><br><span class="line">    name &#x3D; n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-3-UML类图"><a href="#11-3-UML类图" class="headerlink" title="11.3 UML类图"></a>11.3 UML类图</h3><p>UML（Unified Modeling Language，统一建模语言），用来描述软件模型和架构的图形化语言。</p><p>•     常用的UML工具软件有PowerDesinger、Rose和Enterprise Architect。</p><p>•     UML工具软件不仅可以绘制软件开发中所需的各种图表，还可以生成对应的源代码。</p><p>•     在软件开发中，使用UML类图可以更加直观地描述类内部结构（类的属性和操作）以及类之间的关系（如关联、依赖、聚合等）。</p><p>–     +表示 public 类型， - 表示 private 类型，#表示protected类型</p><p>–     方法的写法: 方法的类型(+、-) 方法名(参数名： 参数类型)：返回值类型</p><p>–     斜体表示抽象方法或类。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158974.gif" alt="image-20220321232230831"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158886.gif" alt="img"></p><h1 id="第07章-面向对象编程-进阶"><a href="#第07章-面向对象编程-进阶" class="headerlink" title="第07章_面向对象编程(进阶)"></a>第07章_面向对象编程(进阶)</h1><hr><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158056.png" alt="第2阶段：Java面向对象编程-第07章" style="zoom: 67%;"><h2 id="1-关键字：this"><a href="#1-关键字：this" class="headerlink" title="1. 关键字：this"></a>1. 关键字：this</h2><h3 id="1-1-this是什么？"><a href="#1-1-this是什么？" class="headerlink" title="1.1 this是什么？"></a>1.1 this是什么？</h3><ul><li><p>在Java中，this关键字不算难理解，它的作用和其词义很接近。</p><ul><li>它在方法（实例方法/非static的方法）内部使用，表示调用该方法的对象   —this.name=name;这时候</li><li>它在构造器内部使用，表示该构造器正在初始化的对象。  – -Person person=new Person();这时候</li></ul></li><li><p>this可以调用的结构：成员变量[不可以是局部变量!!]、方法和构造器</p></li></ul><h3 id="1-2-什么时候使用this"><a href="#1-2-什么时候使用this" class="headerlink" title="1.2 什么时候使用this"></a>1.2 什么时候使用this</h3><h4 id="1-2-1-实例方法-构造器中—使用当前对象的成员-区分成员变量和传入的局部变量"><a href="#1-2-1-实例方法-构造器中—使用当前对象的成员-区分成员变量和传入的局部变量" class="headerlink" title="1.2.1 实例方法/构造器中—使用当前对象的成员(区分成员变量和传入的局部变量)"></a>1.2.1 实例方法/构造器中—使用当前对象的成员(区分成员变量和传入的局部变量)</h4><p>在实例方法或构造器中，如果使用当前类的成员变量或成员方法可以在其前面添加this，增强程序的可读性。不过，通常我们都习惯省略this。</p><p>但是，当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量。即：<strong>我们可以用this来区分<code>成员变量</code>和<code>局部变量</code></strong>。比如：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158238.png" alt="image-20220503102947013" style="zoom:67%;"><p>另外，使用this访问属性和方法时，如果在本类中未找到，会从父类中查找。这个在继承中会讲到。</p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;<span class="comment">// 定义Person类</span></span><br><span class="line"><span class="keyword">private</span> String name ;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name ;   </span><br><span class="line"><span class="keyword">this</span>.age = age ;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"姓名："</span> + name) ;</span><br><span class="line"><span class="keyword">this</span>.speak();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(“年龄：” + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">perimeter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (<span class="keyword">this</span>.length + <span class="keyword">this</span>.width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> sign)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="keyword">this</span>.width; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="keyword">this</span>.length; j++) &#123;</span><br><span class="line">                System.out.print(sign);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"长："</span> + <span class="keyword">this</span>.length + <span class="string">"，宽："</span> + <span class="keyword">this</span>.width +<span class="string">"，面积："</span> + <span class="keyword">this</span>.area() +<span class="string">"，周长："</span> + <span class="keyword">this</span>.perimeter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRectangle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Rectangle r1 = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        Rectangle r2 = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"r1对象："</span> + r1.getInfo());</span><br><span class="line">        System.out.println(<span class="string">"r2对象："</span> + r2.getInfo());</span><br><span class="line"></span><br><span class="line">        r1.length = <span class="number">10</span>;</span><br><span class="line">        r1.width = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"r1对象："</span> + r1.getInfo());</span><br><span class="line">        System.out.println(<span class="string">"r2对象："</span> + r2.getInfo());</span><br><span class="line"></span><br><span class="line">        r1.print(<span class="string">'#'</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">        r1.print(<span class="string">'&amp;'</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">        r2.print(<span class="string">'#'</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">        r2.print(<span class="string">'%'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-同一个类中—-构造器互相调用-减少重复代码"><a href="#1-2-2-同一个类中—-构造器互相调用-减少重复代码" class="headerlink" title="1.2.2 同一个类中—-构造器互相调用(减少重复代码)"></a>1.2.2 同一个类中—-构造器互相调用(减少重复代码)</h4><p>this可以作为一个类中构造器相互调用的特殊格式。  –<strong>我们可以通过this调用类中的其他构造器!!!!</strong></p><ul><li><p>this()：调用本类的无参构造器</p></li><li><p>this(实参列表)：调用本类的有参构造器</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158727.png" alt="image-20230927165025075"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this("",18);//调用本类有参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();<span class="comment">//调用本类无参构造器   必须是首行  只能最多声明一个this()</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="comment">//直接this.name=name都可以省略了</span></span><br><span class="line">        <span class="keyword">this</span>(name);<span class="comment">//调用本类中有一个String参数的构造器    必须是首行   只能最多声明一个this()</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>不能出现递归调用。比如，调用自身构造器。<ul><li>推论：如果一个类中声明了n个构造器，则<strong>最多有 n - 1个构造器中使用了”this(形参列表)</strong>“</li></ul></li><li>this()和this(实参列表)只能声明在构造器<strong>首行</strong>。<ul><li>推论：在类的一个构造器中，<strong>最多只能声明一个”this(参数列表)</strong>“</li></ul></li></ul><h3 id="1-3-练习"><a href="#1-3-练习" class="headerlink" title="1.3 练习"></a>1.3 练习</h3><p><strong>练习1：</strong>添加必要的构造器，综合应用构造器的重载，this关键字。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158165.png" alt="image-20220808191154534"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Boy &#123;</span><br><span class="line">    private String name;  &#x2F;&#x2F;name和age前面写的负号  说明是私有属性</span><br><span class="line">    private String age;</span><br><span class="line"></span><br><span class="line">    public void setAge(String age)&#123;  &#x2F;&#x2F;set方法传入的就可以是age  使用this.age&#x3D;age可以区分传入的局部变量</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name)&#123;  &#x2F;&#x2F;set方法传入的就可以是name  使用this.name&#x3D;name可以区分传入的局部变量</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAge()&#123;</span><br><span class="line">        return this.age;  &#x2F;&#x2F;this可以省略</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return this.name; &#x2F;&#x2F;this可以省略</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void marry(Girl girl)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void shout()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public Boy()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public Boy(String name,String age)&#123;</span><br><span class="line">    this.name&#x3D;name;  &#x2F;&#x2F;this()可以调用无参构造器</span><br><span class="line">    this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Girl &#123;</span><br><span class="line">    private String name;  &#x2F;&#x2F;name和age前面写的负号  说明是私有属性</span><br><span class="line">    private String age;</span><br><span class="line"></span><br><span class="line">    public void setAge(String age)&#123;     &#x2F;&#x2F;set方法传入的就可以是age  使用this.age&#x3D;age可以区分传入的局部变量</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name)&#123;   &#x2F;&#x2F;set方法传入的就可以是name  使用this.name&#x3D;name可以区分传入的局部变量</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAge()&#123;</span><br><span class="line">        return this.age;  &#x2F;&#x2F;this可以省略</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName()&#123; </span><br><span class="line">        return this.name;  &#x2F;&#x2F;this可以省略</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void marry(Boy boy)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void compare(Girl girl)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><p>（1）按照如下的UML类图，创建相应的类，提供必要的结构：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158508.png" alt="image-20220323211412409" style="zoom:50%;"><p>在提款方法withdraw()中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。deposit()方法表示存款。</p><p>（2）按照如下的UML类图，创建相应的类，提供必要的结构</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158891.png" alt="image-20220323211454372" style="zoom:50%;"><p>（3）按照如下的UML类图，创建相应的类，提供必要的结构</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158869.png" alt="image-20220323211521808" style="zoom:50%;"><ul><li><p>addCustomer 方法必须依照参数（姓，名）构造一个新的 Customer对象，然后把它放到 customer 数组中。还必须把 numberOfCustomer 属性的值加 1。</p></li><li><p>getNumOfCustomers 方法返回 numberofCustomers 属性值。</p></li><li><p>getCustomer方法返回与给出的index参数相关的客户。</p></li></ul><p>（4）创建BankTest类，进行测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class Account &#123;</span><br><span class="line">    private double balance; &#x2F;&#x2F;因为balance前面是负号</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;前面一个加号是public 加横线了就是构造器</span><br><span class="line">    public Account(double balance)&#123;</span><br><span class="line">        this.balance&#x3D;balance; &#x2F;&#x2F;使用this区分成员变量和局部变量</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;前面一个加号是public  冒号后面是double是返回值</span><br><span class="line">    public double getBalance()&#123;</span><br><span class="line">        return this.balance;  &#x2F;&#x2F;this可以省略</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deposit(double amt)&#123;  &#x2F;&#x2F;存钱</span><br><span class="line">        if(amt&gt;0)&#123;</span><br><span class="line">            this.balance+&#x3D;amt;</span><br><span class="line">            System.out.println(&quot;存入成功!!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void withdraw(double amt)&#123;  &#x2F;&#x2F;取钱</span><br><span class="line">        if(amt&gt;this.balance)&#123;</span><br><span class="line">            System.out.println(&quot;余额不足!!!&quot;);</span><br><span class="line">            return;  &#x2F;&#x2F;跳出结果</span><br><span class="line">        &#125;</span><br><span class="line">        this.balance-&#x3D;amt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Customer &#123;</span><br><span class="line">    private String firstName;   &#x2F;&#x2F;三个属性都是负号 所以设定为私有private</span><br><span class="line">    private String lastName;    &#x2F;&#x2F;三个属性都是负号 所以设定为私有private</span><br><span class="line">    private Account account;    &#x2F;&#x2F;三个属性都是负号 所以设定为私有private</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;正号所以是public  下划线所以是构造器</span><br><span class="line">    public Customer(String f,String l)&#123;</span><br><span class="line">        this.firstName&#x3D;f;</span><br><span class="line">        this.lastName&#x3D;l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;有冒号 说明有返回值</span><br><span class="line">    public String getFirstName()&#123;</span><br><span class="line">        return this.firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;有冒号 说明有返回值</span><br><span class="line">    public String getLastName()&#123;</span><br><span class="line">        return this.lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;有冒号 说明有返回值</span><br><span class="line">    public Account getAccount()&#123;</span><br><span class="line">        return this.account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;没有冒号 说明没有返回值</span><br><span class="line">    public void setAccount(Account acct)&#123;</span><br><span class="line">        this.account&#x3D;acct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Bank &#123;</span><br><span class="line">    private Customer[] customers;  &#x2F;&#x2F;私有化不能get和set创建</span><br><span class="line">    private int numberOfCustomer;</span><br><span class="line"></span><br><span class="line">    public Bank()&#123;</span><br><span class="line">        customers &#x3D; new Customer[10];  &#x2F;&#x2F;要初始化 不然BankTest会出现customers是null!!!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addCustomer(String f,String l)&#123;</span><br><span class="line">        Customer customer&#x3D;new Customer(f,l);  &#x2F;&#x2F;新创建的顾客</span><br><span class="line">        customers[this.numberOfCustomer++]&#x3D;customer;  &#x2F;&#x2F;将顾客添加到顾客数组</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNumberOfCustomer()&#123;</span><br><span class="line">        return this.numberOfCustomer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Customer getCustomer(int index)&#123;</span><br><span class="line">        if(index &lt; 0 || index &gt;&#x3D; numberOfCustomer)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return customers[index];   &#x2F;&#x2F;返回对应位置的顾客</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class BankTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Bank bank &#x3D; new Bank();</span><br><span class="line"></span><br><span class="line">        bank.addCustomer(&quot;操&quot;,&quot;曹&quot;);</span><br><span class="line">        bank.addCustomer(&quot;备&quot;,&quot;刘&quot;);</span><br><span class="line"></span><br><span class="line">        bank.getCustomer(0).setAccount(new Account(1000)); &#x2F;&#x2F;银行类bank获取第一个顾客，顾客设定一个账户，账户里面有1000余额</span><br><span class="line">        bank.getCustomer(0).getAccount().withdraw(50);  &#x2F;&#x2F;余额取出50</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;账户余额为：&quot; + bank.getCustomer(0).getAccount().getBalance()); &#x2F;&#x2F;获取余额950</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存解析图：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158617.png" alt="image-20220323211653907" style="zoom:80%;"><h2 id="2-面向对象特征二：继承-Inheritance"><a href="#2-面向对象特征二：继承-Inheritance" class="headerlink" title="2. 面向对象特征二：继承(Inheritance)"></a>2. 面向对象特征二：继承(Inheritance)</h2><h3 id="2-1-继承的概述"><a href="#2-1-继承的概述" class="headerlink" title="2.1 继承的概述"></a>2.1 继承的概述</h3><p><strong>角度一：从上而下</strong></p><p>为描述和处理<strong>个人</strong>信息，定义类Person：</p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158029.png" alt="image-20220323220923386" style="zoom:67%;"><p>为描述和处理<strong>学生</strong>信息，定义类Student：</p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158434.png" alt="image-20220323221001495" style="zoom:67%;"><p>通过继承，简化Student类的定义：</p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158172.png" alt="image-20220323221050791" style="zoom:67%;"><blockquote><p>说明：Student类继承了父类Person的所有属性和方法，并增加了一个属性school。Person中的属性和方法，Student都可以使用。</p></blockquote><p><strong>角度二：从下而上</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158747.jpg" alt></p><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类中无需再定义这些属性和行为，只需要和抽取出来的类构成<code>继承关系</code>。如图所示：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158180.jpg" style="zoom: 67%;"><p>再举例：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158410.png" alt="image-20220323221436571" style="zoom:67%;"><h4 id="2-1-1-继承的好处"><a href="#2-1-1-继承的好处" class="headerlink" title="2.1.1 继承的好处"></a>2.1.1 继承的好处</h4><ul><li><p>继承的出现减少了代码冗余，提高了代码的复用性。</p></li><li><p>继承的出现，更有利于功能的扩展。</p></li><li><p>继承的出现让类与类之间产生了<code>is-a</code>的关系，为多态的使用提供了前提。</p><ul><li>继承描述事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。可见，父类更通用、更一般，子类更具体。</li></ul></li></ul><blockquote><p>注意：不要仅为了获取其他类中某个功能而去继承！</p></blockquote><h3 id="2-2-继承的语法"><a href="#2-2-继承的语法" class="headerlink" title="2.2 继承的语法"></a>2.2 继承的语法</h3><h4 id="2-2-1-继承中的语法格式"><a href="#2-2-1-继承中的语法格式" class="headerlink" title="2.2.1 继承中的语法格式"></a>2.2.1 继承中的语法格式</h4><p>通过 <code>extends</code> 关键字，可以声明一个类B继承另外一个类A，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> 类<span class="title">A</span> </span>&#123;  <span class="comment">//类A，称为父类、超类、基类(base class)、SuperClass</span></span><br><span class="line"><span class="comment">//属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> 类<span class="title">B</span> <span class="keyword">extends</span> 类<span class="title">A</span> </span>&#123;   <span class="comment">//类B，称为子类、派生类(derived class)、SubClass</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-继承中的基本概念"><a href="#2-2-2-继承中的基本概念" class="headerlink" title="2.2.2 继承中的基本概念"></a>2.2.2 继承中的基本概念</h4><p>类B，称为子类、派生类(derived class)、SubClass</p><p>类A，称为父类、超类、基类(base class)、SuperClass</p><h3 id="2-3-代码举例"><a href="#2-3-代码举例" class="headerlink" title="2.3 代码举例"></a>2.3 代码举例</h3><p><strong>1、父类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义name属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">// 定义age属性</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 定义动物的吃东西方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(age + <span class="string">"岁的"</span>+ name + <span class="string">"在吃东西"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  <span class="comment">//使用extends继承   </span></span><br><span class="line">    <span class="keyword">int</span> count;<span class="comment">//记录每只猫抓的老鼠数量</span></span><br><span class="line">    <span class="comment">// 定义一个猫抓老鼠的方法catchMouse</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">"抓老鼠，已经抓了"</span>+ count + <span class="string">"只老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个猫类对象</span></span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();      </span><br><span class="line">        <span class="comment">// 为该猫类对象的name属性进行赋值   这是父类Animal的属性和方法(继承过来的)</span></span><br><span class="line">        cat.name = <span class="string">"Tom"</span>;</span><br><span class="line">        <span class="comment">// 为该猫类对象的age属性进行赋值</span></span><br><span class="line">        cat.age = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 调用该猫继承来的eat()方法</span></span><br><span class="line">        cat.eat();        </span><br><span class="line">        <span class="comment">// 调用该猫的catchMouse()方法     这是自己类的方法</span></span><br><span class="line">        cat.catchMouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158514.png" alt="image-20211230090255997"></p><h3 id="2-4-继承性的细节说明"><a href="#2-4-继承性的细节说明" class="headerlink" title="2.4 继承性的细节说明"></a>2.4 继承性的细节说明</h3><p><strong>1、子类会继承父类所有的实例变量和实例方法</strong></p><p>从类的定义来看，类是一类具有相同特性的事物的抽象描述。父类是所有子类共同特征的抽象描述。而实例变量和实例方法就是事物的特征，那么父类中声明的实例变量和实例方法代表子类事物也有这个特征。</p><ul><li>当子类对象被创建时，在堆中给new对象申请内存时，就要看子类和父类都声明了什么实例变量，这些<strong>实例变量都要分配内存</strong>。</li><li>当子类对象调用方法时，编译器会先在子类模板中看该类是否有这个方法，如果没找到，父类—-&gt;父类—-&gt;父类是否声明了这个方法，遵循<strong><code>从下往上</code></strong>找的顺序，找到了就停止，一直到根父类都没有找到，就会报编译错误。</li></ul><p>所以继承意味着子类的对象除了看子类的类模板还要看父类的类模板。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158739.png" alt="image-20211230090255997"></p><p><strong>2、子类不能直接访问父类中私有的(private)的成员变量和方法</strong></p><p>子类虽会继承父类私有(private)的成员变量，但子类不能对继承的私有成员变量<strong>直接进行访问</strong>，——&gt;通过get/set方法进行访问。 (继承性要保证封装性!!!)</p><p>如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158183.png" alt="image-20220323224757212"></p><p><strong>3、在Java 中，继承的关键字用的是“extends”，即子类不是父类的子集，而是对父类的“扩展”</strong></p><p>子类在继承父类以后，还可以定义自己特有的方法，这就可以看做是对父类功能上的扩展。</p><p><strong>4、Java支持多层继承(继承体系)</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158656.png" alt="image-20220323225441417" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li><p>子类和父类是一种<strong>相对的</strong></p></li><li><p>顶层父类是Object类。所有的类默认继承Object，作为父类。 (<strong>如果没有显示说明的话就是继承Object类</strong>)</p></li></ul></blockquote><p><strong>5、一个父类可以同时拥有多个子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>6、Java只支持单继承，不支持多重继承</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158220.png" alt="image-20220514162507692" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个类只能有一个父类，不可以有多个直接父类。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125; <span class="comment">// √</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span>...// ×</span></span><br></pre></td></tr></table></figure><h3 id="2-5-练习"><a href="#2-5-练习" class="headerlink" title="2.5 练习"></a>2.5 练习</h3><p><strong>练习1：</strong>定义一个学生类Student，它继承自Person类</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212158099.png" alt="image-20220323231804928" style="zoom:67%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public char sex;</span><br><span class="line">    public int age;</span><br><span class="line"></span><br><span class="line">    public Person(String name,char sex,int age)&#123;  &#x2F;&#x2F;构造器</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        this.sex&#x3D;sex;</span><br><span class="line">        this.age&#x3D;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;name是： &quot;+this.name+&quot;sex是: &quot;+this.sex+&quot; age是: &quot;+this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Student extends Person&#123;</span><br><span class="line">    public long number;</span><br><span class="line">    public int math;</span><br><span class="line">    public int english;</span><br><span class="line">    public int computer;</span><br><span class="line"></span><br><span class="line">    public Student(String n,char s,int a,long k,int m,int e,int c)&#123;</span><br><span class="line">        super(n,s,a);  &#x2F;&#x2F;要使用super调用父类的三个属性 跟this(有参&#x2F;无参)功能样式一样!!!</span><br><span class="line">        this.number&#x3D;k;</span><br><span class="line">        this.math&#x3D;m;</span><br><span class="line">        this.english&#x3D;e;</span><br><span class="line">        this.computer&#x3D;c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double aver()&#123;</span><br><span class="line">        return 1.0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int max()&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int min()&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><p>(1)定义一个ManKind类，包括</p><ul><li><p>成员变量int sex和int salary；</p></li><li><p>方法void manOrWoman()：根据sex的值显示“man”(sex==1)或者“woman”(sex==0)；</p></li><li><p>方法void employeed()：根据salary的值显示“no job”(salary==0)或者“ job”(salary!=0)。</p></li></ul><p>(2)定义类Kids继承ManKind，并包括</p><ul><li>成员变量int yearsOld；</li><li>方法printAge()打印yearsOld的值。</li></ul><p>(3)定义类KidsTest，在类的main方法中实例化Kids的对象someKid，用该对象访问其父类的成员变量及方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class ManKind &#123;</span><br><span class="line">    private int sex;     &#x2F;&#x2F;属性设置为私有  子类只能通过get&#x2F;set方法获取 [不能直接获取]</span><br><span class="line">    private int salary;  &#x2F;&#x2F;属性设置为私有  子类只能通过get&#x2F;set方法获取 [不能直接获取]</span><br><span class="line"></span><br><span class="line">    public void manOrWoman()&#123;   &#x2F;&#x2F;我的误区就是经常往里面传值，其实成员变量没必要，传入的是局部变量!!!</span><br><span class="line">        if(sex&#x3D;&#x3D;1)&#123;</span><br><span class="line">            System.out.println(&quot;man&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if(sex&#x3D;&#x3D;0)&#123;</span><br><span class="line">            System.out.println(&quot;woman&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;输入sex异常&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(int sex) &#123;</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getSalary() &#123;</span><br><span class="line">        return salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSalary(int salary) &#123;</span><br><span class="line">        this.salary &#x3D; salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;无参构造器</span><br><span class="line">    public ManKind() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;有参构造器</span><br><span class="line">    public ManKind(int sex, int salary) &#123;</span><br><span class="line">        this();  &#x2F;&#x2F;调用无参构造器public ManKind()&#123;&#125;</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">        this.salary &#x3D; salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void employeed()&#123;   &#x2F;&#x2F;我的误区就是经常往里面传值，其实成员变量没必要，传入的是局部变量!!!</span><br><span class="line">        if(salary&#x3D;&#x3D;0)&#123;</span><br><span class="line">            System.out.println(&quot;no job&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;job&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Kids extends ManKind&#123;  &#x2F;&#x2F;使用extends关键字继承父类</span><br><span class="line">    private int yearsOld;  &#x2F;&#x2F;属性设置成私有 其他人获取只能通过get和set方法  而且private只能在类中和同一包内</span><br><span class="line"></span><br><span class="line">    public int getYearsOld() &#123;</span><br><span class="line">        return yearsOld;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setYearsOld(int yearsOld) &#123;</span><br><span class="line">        this.yearsOld &#x3D; yearsOld;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void printAge()&#123;</span><br><span class="line">        System.out.println(this.yearsOld);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class KidsTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Kids someKid&#x3D;new Kids();</span><br><span class="line">        &#x2F;&#x2F;调用父类属性</span><br><span class="line">        someKid.setSex(1);</span><br><span class="line">        someKid.setSalary(1);  &#x2F;&#x2F;相当于子类拥有了父类和自己的属性  三个属性一共</span><br><span class="line">        &#x2F;&#x2F;调用父类方法</span><br><span class="line">        someKid.manOrWoman();</span><br><span class="line">        someKid.employeed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">man</span><br><span class="line">job</span><br></pre></td></tr></table></figure><p><strong>练习3：</strong>根据下图实现类。在CylinderTest类中创建Cylinder类的对象，设置圆柱的底面半径和高，并输出圆柱的体积。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212159800.png" alt="image-20220323231942361" style="zoom:67%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Circle &#123;</span><br><span class="line">    private double radius;</span><br><span class="line">    public Circle()&#123;</span><br><span class="line">        this.radius&#x3D;1; &#x2F;&#x2F;初始化为1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;声明set和get方便其他类访问private成员变量</span><br><span class="line">    public void setRadius(double radius)&#123;</span><br><span class="line">        this.radius&#x3D;radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getRadius()&#123;</span><br><span class="line">        return this.radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double findArea()&#123;</span><br><span class="line">        return this.radius*this.radius*Math.PI;  &#x2F;&#x2F;计算圆的面积</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Cylinder extends Circle&#123;  &#x2F;&#x2F;使用extends继承父类圆Circle</span><br><span class="line">    private double length;</span><br><span class="line"></span><br><span class="line">    public Cylinder()&#123;</span><br><span class="line">        this.length&#x3D;1; &#x2F;&#x2F;初始化为1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;声明set和get方便其他类访问private成员变量</span><br><span class="line">    public void setLength(double length) &#123;</span><br><span class="line">        this.length &#x3D; length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getLength()&#123;</span><br><span class="line">        return this.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double findVolume()&#123;</span><br><span class="line">        return this.findArea()*length;  &#x2F;&#x2F;或者getLength()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class CylinderTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Cylinder cy &#x3D; new Cylinder();  &#x2F;&#x2F;创建一个圆柱对象  子类</span><br><span class="line">        cy.setRadius(2.3); &#x2F;&#x2F;子类使用父类的属性</span><br><span class="line">        cy.setLength(1.4); &#x2F;&#x2F;子类使用自己的方法</span><br><span class="line">        System.out.println(&quot;圆柱的体积为：&quot; + cy.findVolume());</span><br><span class="line">        System.out.println(&quot;圆柱的底面积：&quot; + cy.findArea()); &#x2F;&#x2F;子类使用父类的方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">圆柱的体积为：23.266635192486003</span><br><span class="line">圆柱的底面积：16.619025137490002</span><br></pre></td></tr></table></figure><h2 id="3-方法的重写（override-overwrite）"><a href="#3-方法的重写（override-overwrite）" class="headerlink" title="3. 方法的重写（override/overwrite）"></a>3. 方法的重写（override/overwrite）</h2><p>父类的所有方法子类都会继承，但是当某个方法被继承到子类之后，子类觉得父类原来的实现不适合于自己当前的类，该怎么办呢？子类可以对从父类中继承来的方法进行改造，我们称为方法的<code>重写 (override、overwrite)</code>。也称为方法的<code>重置</code>、<code>覆盖</code>。</p><p>在程序执行时，子类的方法将覆盖父类的方法。</p><h3 id="3-1-方法重写举例"><a href="#3-1-方法重写举例" class="headerlink" title="3.1 方法重写举例"></a>3.1 方法重写举例</h3><p>比如新的手机增加来电显示头像的功能，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.inherited.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"来电显示号码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.inherited.method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SmartPhone：智能手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写父类的来电显示功能的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//来电显示姓名和图片功能</span></span><br><span class="line">        System.out.println(<span class="string">"显示来电姓名"</span>);</span><br><span class="line">        System.out.println(<span class="string">"显示头像"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写父类的通话功能的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"语音通话 或 视频通话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.inherited.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverride</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        SmartPhone sp = <span class="keyword">new</span> SmartPhone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用父类继承而来的方法</span></span><br><span class="line">        sp.call();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用子类重写的方法</span></span><br><span class="line">        sp.showNum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Override使用说明：</p><p>写在方法上面，用来检测是不是满足重写方法的要求。这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。建议保留，这样编译器可以帮助我们检查格式，另外也可以让阅读源代码的程序员清晰的知道这是一个重写的方法。</p></blockquote><h3 id="3-2-方法重写的要求"><a href="#3-2-方法重写的要求" class="headerlink" title="3.2 方法重写的要求"></a>3.2 方法重写的要求</h3><ol><li><p>子类重写的方法<code>必须</code>和父类被重写的方法具有相同的<code>方法名称</code>、<code>参数列表</code>。</p></li><li><p>子类重写的方法的返回值类型<code>不能大于</code>父类被重写的方法的返回值类型。（例如：Student &lt; Person）。</p></li></ol><blockquote><p>注意：如果返回值类型是基本数据类型和void，那么必须是相同</p></blockquote><ol start="3"><li>子类重写的方法使用的访问权限<code>不能小于</code>父类被重写的方法的访问权限。（public &gt; protected &gt; 缺省 &gt; private）</li></ol><blockquote><p>注意：① 父类私有方法不能重写   ② 跨包的父类缺省的方法也不能重写</p></blockquote><ol start="4"><li>子类方法抛出的异常不能大于父类被重写方法的异常</li></ol><p>此外，子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。</p><h3 id="3-3-小结：方法的重载与重写"><a href="#3-3-小结：方法的重载与重写" class="headerlink" title="3.3 小结：方法的重载与重写"></a>3.3 小结：方法的重载与重写</h3><p>方法的重载：方法名相同，形参列表不同。不看返回值类型。</p><p>方法的重写：见上面。</p><p>（1）同一个类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.inherited.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverload</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> max(max(a,b),c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）父子类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.inherited.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverloadOverride</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        s.method(<span class="number">1</span>);<span class="comment">//只有一个形式的method方法</span></span><br><span class="line"></span><br><span class="line">        Daughter d = <span class="keyword">new</span> Daughter();</span><br><span class="line">        d.method(<span class="number">1</span>);</span><br><span class="line">        d.method(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//有两个形式的method方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Father.method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="comment">//重写</span></span><br><span class="line">        System.out.println(<span class="string">"Son.method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Daughter</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;<span class="comment">//重载</span></span><br><span class="line">        System.out.println(<span class="string">"Daughter.method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-练习"><a href="#3-4-练习" class="headerlink" title="3.4 练习"></a>3.4 练习</h3><p><strong>练习1：</strong>如果现在父类的一个方法定义成private访问权限，在子类中将此方法声明为default访问权限，那么这样还叫重写吗？ (NO)</p><p><strong>练习2：</strong>修改继承内容的练习2中定义的类Kids，在Kids中重新定义employeed()方法，覆盖父类ManKind中定义的employeed()方法，输出“Kids should study and no job.”</p><h2 id="4-再谈封装性中的4种权限修饰"><a href="#4-再谈封装性中的4种权限修饰" class="headerlink" title="4. 再谈封装性中的4种权限修饰"></a>4. 再谈封装性中的4种权限修饰</h2><p>权限修饰符：public,protected,缺省,private</p><table><thead><tr><th>修饰符</th><th>本类</th><th>本包</th><th align="left">其他包子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td align="left">×</td><td>×</td></tr><tr><td>缺省</td><td>√</td><td>√（本包子类和非子类都可见）</td><td align="left">×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√（本包子类和非子类都可见）</td><td align="left">√（其他包仅限于子类中可见）</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td align="left">√</td><td>√</td></tr></tbody></table><p>外部类：public和缺省</p><p>成员变量、成员方法等：public,protected,缺省,private</p><p><strong>1、外部类要跨包使用必须是public，否则仅限于本包使用</strong></p><p>（1）外部类的权限修饰符如果缺省，本包使用没问题</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212159295.png" alt="image-20211230093627763"></p><p>（2）外部类的权限修饰符如果缺省，跨包使用有问题</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212159292.png" alt="image-20211230094236974"></p><p><strong>2、成员的权限修饰符问题</strong></p><p>（1）本包下使用：成员的权限修饰符可以是public、protected、缺省</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212159380.png" alt="image-20211230095320646"></p><p>（2）跨包下使用：要求严格</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212159675.png" alt="image-20211230095817784"></p><p>（3）跨包使用时，如果类的权限修饰符缺省，成员权限修饰符&gt;类的权限修饰符也没有意义</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212159358.png" alt="image-20211230100219840"></p><h2 id="5-关键字：super"><a href="#5-关键字：super" class="headerlink" title="5. 关键字：super"></a>5. 关键字：super</h2><h3 id="5-1-super的理解"><a href="#5-1-super的理解" class="headerlink" title="5.1 super的理解"></a>5.1 super的理解</h3><p>在Java类中使用super来调用父类中的指定操作：</p><ul><li>super可用于访问父类中定义的属性</li><li>super可用于调用父类中定义的成员方法</li><li>super可用于在子类构造器中调用父类的构造器</li></ul><p>注意：</p><ul><li>尤其当子父类出现同名成员时，可以用super表明调用的是父类中的成员</li><li>super的追溯不仅限于直接父类[从下往上一直找]</li><li>super和this的用法相像，this代表本类对象的引用，super代表父类的内存空间的标识</li></ul><h3 id="5-2-super的使用场景"><a href="#5-2-super的使用场景" class="headerlink" title="5.2 super的使用场景"></a>5.2 super的使用场景</h3><h4 id="5-2-1-子类中调用父类被重写的方法"><a href="#5-2-1-子类中调用父类被重写的方法" class="headerlink" title="5.2.1 子类中调用父类被重写的方法"></a>5.2.1 子类中调用父类被重写的方法</h4><ul><li>如果子类没有重写父类的方法，只要权限修饰符允许，在子类中完全可以直接调用父类的方法；</li><li>如果子类重写了父类的方法，在子类中需要通过<code>super.</code>才能调用父类被重写的方法，否则默认调用的子类重写的方法</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.inherited.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"来电显示号码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//smartphone：智能手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写父类的来电显示功能的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//来电显示姓名和图片功能</span></span><br><span class="line">        System.out.println(<span class="string">"显示来电姓名"</span>);</span><br><span class="line">        System.out.println(<span class="string">"显示头像"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保留父类来电显示号码的功能</span></span><br><span class="line">        <span class="keyword">super</span>.showNum();<span class="comment">//此处必须加super.，否则就是无限递归，那么就会栈内存溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><p><strong>方法前面没有super.和this.</strong></p><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><p><strong>方法前面有this.</strong></p><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><p><strong>方法前面有super.</strong></p><ul><li>从当前子类的直接父类找，如果没有，继续往上追溯</li></ul></li></ul><h4 id="5-2-2-子类中调用父类中同名的成员变量"><a href="#5-2-2-子类中调用父类中同名的成员变量" class="headerlink" title="5.2.2 子类中调用父类中同名的成员变量"></a>5.2.2 子类中调用父类中同名的成员变量</h4><ul><li>如果实例变量与局部变量重名，可以在实例变量前面加this.进行区别</li><li>如果子类实例变量和父类实例变量重名，并且父类的该实例变量在子类仍然可见，在子类中要访问父类声明的实例变量需要在父类实例变量前加super.，否则默认访问的是子类自己声明的实例变量</li><li>如果父子类实例变量没有重名，只要权限修饰符允许，在子类中完全可以直接访问父类中声明的实例变量，也可以用this.实例访问，也可以用super.实例变量访问</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//子类与父类的属性同名，子类对象中就有两个a</span></span><br><span class="line">System.out.println(<span class="string">"子类的a："</span> + a);<span class="comment">//20  先找局部变量找，没有再从本类成员变量找</span></span><br><span class="line">        System.out.println(<span class="string">"子类的a："</span> + <span class="keyword">this</span>.a);<span class="comment">//20   先从本类成员变量找</span></span><br><span class="line">        System.out.println(<span class="string">"父类的a："</span> + <span class="keyword">super</span>.a);<span class="comment">//10    直接从父类成员变量找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类与父类的属性不同名，是同一个b</span></span><br><span class="line">System.out.println(<span class="string">"b = "</span> + b);<span class="comment">//11  先找局部变量找，没有再从本类成员变量找，没有再从父类找</span></span><br><span class="line">System.out.println(<span class="string">"b = "</span> + <span class="keyword">this</span>.b);<span class="comment">//11   先从本类成员变量找，没有再从父类找</span></span><br><span class="line">System.out.println(<span class="string">"b = "</span> + <span class="keyword">super</span>.b);<span class="comment">//11  直接从父类局部变量找</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="comment">//子类与父类的属性同名，子类对象中就有两个成员变量a，此时方法中还有一个局部变量a</span></span><br><span class="line">System.out.println(<span class="string">"局部变量的a："</span> + a);<span class="comment">//30  先找局部变量</span></span><br><span class="line">        System.out.println(<span class="string">"子类的a："</span> + <span class="keyword">this</span>.a);<span class="comment">//20  先从本类成员变量找</span></span><br><span class="line">        System.out.println(<span class="string">"父类的a："</span> + <span class="keyword">super</span>.a);<span class="comment">//10  直接从父类成员变量找</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b);<span class="comment">//13  先找局部变量</span></span><br><span class="line">System.out.println(<span class="string">"b = "</span> + <span class="keyword">this</span>.b);<span class="comment">//11  先从本类成员变量找</span></span><br><span class="line">System.out.println(<span class="string">"b = "</span> + <span class="keyword">super</span>.b);<span class="comment">//11  直接从父类局部变量找</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">son.test();</span><br><span class="line">son.method(<span class="number">30</span>,<span class="number">13</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：起点不同（就近原则）</p><ul><li><p><strong>变量前面没有super.和this.</strong></p><ul><li>在构造器、代码块、方法中如果出现使用某个变量，先查看是否是当前块声明的<code>局部变量</code>，</li><li>如果不是局部变量，先从当前执行代码的<code>本类去找成员变量</code></li><li>如果从当前执行代码的本类中没有找到，会往上找<code>父类声明的成员变量</code>（权限修饰符允许在子类中访问的）</li></ul></li><li><p><strong>变量前面有this.</strong> </p><ul><li>通过this找成员变量时，先从当前执行代码的==本类去找成员变量==</li><li>如果从当前执行代码的本类中没有找到，会往上找==父类声明的成员变量（==权限修饰符允许在子类中访问的）</li></ul></li><li><p><strong>变量前面super.</strong> </p><ul><li>通过super找成员变量，直接从当前执行代码的直接父类去找成员变量（权限修饰符允许在子类中访问的）</li><li>如果直接父类没有，就去父类的父类中找（权限修饰符允许在子类中访问的）</li></ul></li></ul><p><strong><font color="red">特别说明：应该避免子类声明和父类重名的成员变量</font></strong></p><p>在阿里的开发规范等文档中都做出明确说明：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212159642.png" alt="image-20211230110411580"></p><h4 id="5-2-3-子类构造器中调用父类构造器"><a href="#5-2-3-子类构造器中调用父类构造器" class="headerlink" title="5.2.3 子类构造器中调用父类构造器"></a>5.2.3 子类构造器中调用父类构造器</h4><p>① 子类继承父类时，不会继承父类的构造器。只能通过<strong>“super(形参列表)</strong>”的方式调用<strong>父类指定的构造器</strong>。</p><p>② 规定：“super(形参列表)”，必须声明在<strong>构造器的首行</strong>。（类似于this也在首行）</p><p>③ 我们前面讲过，在构造器的首行可以使用”this(形参列表)”，调用本类中重载的构造器，<br>     结合②，结论：在构造器的首行，<strong>“this(形参列表)” 和 “super(形参列表)”只能二选一</strong>。      </p><p>④ 如果在子类构造器的首行既没有显示调用”this(形参列表)”，也没有显式调用”super(形参列表)”，     [先父类后子类]<br>​     则子类此构造器<strong>默认调用”super()”</strong>，即<strong>调用父类中空参的构造器</strong>。</p><p>⑤ 由③和④得到结论：子类的任何一个构造器中，要么会调用本类中重载的构造器，要么会调用父类的构造器。<br>     只能是这两种情况之一。  <strong>—–写this就是掉自己  写super就是掉父类  不写就是父类的无参构造器!!!!!</strong></p><p>⑥ 由⑤得到：一个类中声明有n个构造器，最多有n-1个构造器中使用了”this(形参列表)”，则剩下的那个一定使用”super(形参列表)”。<br><strong>这里的最后一个可能是写了super，也可能没写用的默认的父类无参的</strong></p><blockquote><p>开发中常见错误：</p><p>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有空参的构造器，则<code>编译出错</code>。</p></blockquote><p>情景举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">//A类和B类都是默认有一个无参构造，B类的默认无参构造中还会默认调用A类的默认无参构造</span></span><br><span class="line">        <span class="comment">//但是因为都是默认的，没有打印语句，看不出来</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情景举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">A()&#123;</span><br><span class="line">System.out.println(<span class="string">"A类无参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">//A类显示声明一个无参构造，</span></span><br><span class="line"><span class="comment">//B类默认有一个无参构造，</span></span><br><span class="line"><span class="comment">//B类的默认无参构造中会默认调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//可以看到会输出“A类无参构造器"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情景举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">A()&#123;</span><br><span class="line">System.out.println(<span class="string">"A类无参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">B()&#123;</span><br><span class="line">System.out.println(<span class="string">"B类无参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">//A类显示声明一个无参构造，</span></span><br><span class="line"><span class="comment">//B类显示声明一个无参构造，        </span></span><br><span class="line"><span class="comment">//B类的无参构造中虽然没有写super()，但是仍然会默认调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//可以看到会输出“A类无参构造器"和"B类无参构造器")</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情景举例4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">A()&#123;</span><br><span class="line">System.out.println(<span class="string">"A类无参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">B()&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"B类无参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">//A类显示声明一个无参构造，</span></span><br><span class="line"><span class="comment">//B类显示声明一个无参构造，        </span></span><br><span class="line"><span class="comment">//B类的无参构造中明确写了super()，表示调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//可以看到会输出“A类无参构造器"和"B类无参构造器")</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情景举例5：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">A(<span class="keyword">int</span> a)&#123;</span><br><span class="line">System.out.println(<span class="string">"A类有参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">B()&#123;</span><br><span class="line">System.out.println(<span class="string">"B类无参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span></span><br><span class="line"><span class="comment">//B类显示声明一个无参构造，        </span></span><br><span class="line"><span class="comment">//B类的无参构造没有写super(...)，表示默认调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//编译报错，因为A类没有无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212159309.png" alt="image-20200227141228450"></p><p>情景举例6：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">A(<span class="keyword">int</span> a)&#123;</span><br><span class="line">System.out.println(<span class="string">"A类有参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">B()&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"B类无参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test06</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span></span><br><span class="line"><span class="comment">//B类显示声明一个无参构造，        </span></span><br><span class="line"><span class="comment">//B类的无参构造明确写super()，表示调用A类的无参构造</span></span><br><span class="line">        <span class="comment">//编译报错，因为A类没有无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212200300.png" alt="image-20200303183542807"></p><p>情景举例7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">A(<span class="keyword">int</span> a)&#123;</span><br><span class="line">System.out.println(<span class="string">"A类有参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">B(<span class="keyword">int</span> a)&#123;</span><br><span class="line"><span class="keyword">super</span>(a);</span><br><span class="line">System.out.println(<span class="string">"B类有参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test07</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span></span><br><span class="line"><span class="comment">//B类显示声明一个有参构造，        </span></span><br><span class="line"><span class="comment">//B类的有参构造明确写super(a)，表示调用A类的有参构造</span></span><br><span class="line">        <span class="comment">//会打印“A类有参构造器"和"B类有参构造器"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情景举例8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    A()&#123;</span><br><span class="line">        System.out.println(<span class="string">"A类无参构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">A(<span class="keyword">int</span> a)&#123;</span><br><span class="line">System.out.println(<span class="string">"A类有参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    B()&#123;</span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//可以省略，调用父类的无参构造</span></span><br><span class="line">        System.out.println(<span class="string">"B类无参构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">B(<span class="keyword">int</span> a)&#123;</span><br><span class="line"><span class="keyword">super</span>(a);<span class="comment">//调用父类有参构造</span></span><br><span class="line">System.out.println(<span class="string">"B类有参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test8</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        B b1 = <span class="keyword">new</span> B();</span><br><span class="line">        B b2 = <span class="keyword">new</span> B(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-小结：this与super"><a href="#5-3-小结：this与super" class="headerlink" title="5.3 小结：this与super"></a>5.3 小结：this与super</h3><p><strong>1、this和super的意义</strong></p><p>this：当前对象</p><ul><li>在构造器和非静态代码块中，表示正在new的对象</li><li>在实例方法中，表示调用当前方法的对象</li></ul><p>super：引用父类声明的成员</p><p><strong>2、this和super的使用格式</strong></p><ul><li>this<ul><li>this.成员变量：表示当前对象的某个成员变量，而不是局部变量</li><li>this.成员方法：表示当前对象的某个成员方法，完全可以省略this.</li><li>this()或this(实参列表)：调用另一个构造器协助当前对象的实例化，只能在构造器首行，只会找本类的构造器，找不到就报错</li></ul></li><li>super<ul><li>super.成员变量：表示当前对象的某个成员变量，该成员变量在父类中声明的</li><li>super.成员方法：表示当前对象的某个成员方法，该成员方法在父类中声明的</li><li>super()或super(实参列表)：调用父类的构造器协助当前对象的实例化，只能在构造器首行，只会找直接父类的对应构造器，找不到就报错</li></ul></li></ul><h3 id="5-4-练习"><a href="#5-4-练习" class="headerlink" title="5.4 练习"></a>5.4 练习</h3><p><strong>练习1：</strong>修改方法重写的练习2中定义的类Kids中employeed()方法，在该方法中调用父类ManKind的employeed()方法，然后再输出“but Kids should study and no job.”</p><p><strong>练习2：</strong>修改继承中的练习3中定义的Cylinder类，在Cylinder类中覆盖findArea()方法，计算圆柱的表面积。考虑：findVolume方法怎样做相应的修改？</p><p>在CylinderTest类中创建Cylinder类的对象，设置圆柱的底面半径和高，并输出圆柱的表面积和体积。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public double findVolume()&#123;</span><br><span class="line">    return super.findArea()*length;  &#x2F;&#x2F;直接super调用父类的方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public double findArea()&#123;</span><br><span class="line">    &#x2F;&#x2F;S表&#x3D;2πr²+2πrh</span><br><span class="line">&#x2F;&#x2F;直接super调用父类的属性 因为是private就改成调用get方法</span><br><span class="line">    return 2*Math.PI*super.getRadius()*super.getRadius()+2*Math.PI*super.getRadius()*this.length;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附加题：在CylinderTest类中创建一个Circle类的对象，设置圆的半径，计算输出圆的面积。体会父类和子类成员的分别调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Circle circle&#x3D;new Circle();</span><br><span class="line">circle.setRadius(2);</span><br><span class="line">System.out.println(circle.findArea());  &#x2F;&#x2F;直接自己调用自己方法就行</span><br></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>1、写一个名为Account的类模拟账户。该类的属性和方法如下图所示。该类包括的属性：账号id，余额balance，年利率annualInterestRate；包含的方法：访问器方法（getter和setter方法），返回月利率的方法getMonthlyInterest()，取款方法withdraw()，存款方法deposit()。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212200145.png" alt="image-20220324003430464"></p><p>写一个用户程序测试Account类。在用户程序中，创建一个账号为1122、余额为20000、年利率4.5%的Account对象。使用withdraw方法提款30000元，并打印余额。<br>再使用withdraw方法提款2500元，使用deposit方法存款3000元，然后打印余额和月利率。</p><p>提示：在提款方法withdraw中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public class Account &#123;</span><br><span class="line">    private int id;  &#x2F;&#x2F;账号</span><br><span class="line">    private double balance;  &#x2F;&#x2F;余额</span><br><span class="line">    private double annuallnterestRate;  &#x2F;&#x2F;年利率</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;三个private属性的set和get方法</span><br><span class="line">    public void setId(int id)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return this.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBalance(double balance) &#123;</span><br><span class="line">        this.balance &#x3D; balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getBalance() &#123;</span><br><span class="line">        return this.balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAnnuallnterestRate(double annuallnterestRate) &#123;</span><br><span class="line">        this.annuallnterestRate &#x3D; annuallnterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getAnnuallnterestRate() &#123;</span><br><span class="line">        return this.annuallnterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;构造器</span><br><span class="line">    public Account(int id,double balance,double annuallnterestRate)&#123;</span><br><span class="line">        this.id&#x3D;id;</span><br><span class="line">        this.balance&#x3D;balance;</span><br><span class="line">        this.annuallnterestRate&#x3D;annuallnterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;返回月利率</span><br><span class="line">    public double getMonthlyInterest()&#123;</span><br><span class="line">        return this.annuallnterestRate&#x2F;12;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;取款</span><br><span class="line">    public void withdraw(double amount)&#123;</span><br><span class="line">        if(balance&lt;amount)&#123;</span><br><span class="line">            System.out.println(&quot;余额不够!!!&quot;);</span><br><span class="line">            return;  &#x2F;&#x2F;一定要return 不然余额还是会扣除</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;取款</span><br><span class="line">        balance-&#x3D;amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;存款</span><br><span class="line">    public void deposit(double amount)&#123;</span><br><span class="line">        &#x2F;&#x2F;存款</span><br><span class="line">        balance+&#x3D;amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class AccountTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Account account&#x3D;new Account(1122,20000,0.045);</span><br><span class="line">        &#x2F;&#x2F;取款30000</span><br><span class="line">        account.withdraw(30000);</span><br><span class="line">        System.out.println(&quot;现在余额是:&quot;+account.getBalance());</span><br><span class="line">        &#x2F;&#x2F;取款2500</span><br><span class="line">        account.withdraw(2500);</span><br><span class="line">        &#x2F;&#x2F;存款3000</span><br><span class="line">        account.deposit(3000);</span><br><span class="line">        System.out.println(&quot;现在余额是:&quot;+account.getBalance());</span><br><span class="line">        System.out.println(&quot;现在是月利率是:&quot;+account.getMonthlyInterest());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212200394.png" alt="image-20231003170202016"></p><p>2、创建Account类的一个子类CheckAccount代表可透支的账户，该账户中定义一个属性overdraft代表可透支限额。在CheckAccount类中重写withdraw方法，其算法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果（取款金额&lt;账户余额），</span><br><span class="line">可直接取款</span><br><span class="line">如果（取款金额&gt;账户余额），</span><br><span class="line">计算需要透支的额度</span><br><span class="line">判断可透支额overdraft是否足够支付本次透支需要，如果可以</span><br><span class="line">将账户余额修改为0，冲减可透支金额</span><br><span class="line">如果不可以</span><br><span class="line">提示用户超过可透支额的限额</span><br></pre></td></tr></table></figure><p>要求：写一个用户程序测试CheckAccount类。在用户程序中，创建一个账号为1122、余额为20000、年利率4.5%，可透支限额为5000元的CheckAccount对象。</p><p>使用withdraw方法提款5000元，并打印账户余额和可透支额。</p><p>再使用withdraw方法提款18000元，并打印账户余额和可透支额。</p><p>再使用withdraw方法提款3000元，并打印账户余额和可透支额。</p><p>提示：</p><p>（1）子类CheckAccount的构造方法需要将从父类继承的3个属性和子类自己的属性全部初始化。【不然被报错】</p><p>（2）父类Account的属性balance被设置为private，但在子类CheckAccount的withdraw方法中需要修改它的值，因此应修改父类的balance属性，定义其为protected。【也可以不修改，子类继承父类所有方法 直接用super.setBalance(super.getBalance()-amount);】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;代表 可透支的账户</span><br><span class="line">public class CheckAccount extends Account &#123;  &#x2F;&#x2F;子类</span><br><span class="line">    private double overdraft;  &#x2F;&#x2F; 可透支额度</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;子类构造器</span><br><span class="line">    public CheckAccount(int id, double balance, double annuallnterestRate,double overdraft) &#123;</span><br><span class="line">        super(id, balance, annuallnterestRate);  &#x2F;&#x2F;显式用super调用父类构造器 [如果不写的话就默认是super()无参构造器]</span><br><span class="line">        this.overdraft&#x3D;overdraft;  &#x2F;&#x2F;自己属性</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;get和set方法</span><br><span class="line">    public double getOverdraft() &#123;</span><br><span class="line">        return overdraft;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOverdraft(double overdraft) &#123;</span><br><span class="line">        this.overdraft &#x3D; overdraft;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;重写withdraw方法取款</span><br><span class="line">    @Override</span><br><span class="line">    public void withdraw(double amount)&#123;</span><br><span class="line">        &#x2F;&#x2F;因为子类没有balance属性 所以不写super也会从子类找到父类</span><br><span class="line">        if(amount&lt;super.getBalance())&#123;</span><br><span class="line">            super.setBalance(super.getBalance()-amount);  &#x2F;&#x2F;符合条件可以取款</span><br><span class="line">        &#125;</span><br><span class="line">        if(amount&gt;super.getBalance())&#123;</span><br><span class="line">            double cha&#x3D;amount-super.getBalance(); &#x2F;&#x2F;需要透支的额度</span><br><span class="line">            if(this.overdraft&gt;cha)&#123;</span><br><span class="line">                super.setBalance(0);  &#x2F;&#x2F;账户余额修改为0  减少可透支余额</span><br><span class="line">                this.overdraft-&#x3D;cha;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.println(&quot;超过了可透支余额的限额&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class CheckAccountTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        CheckAccount checkAccount&#x3D;new CheckAccount(1122,20000,0.045,5000);</span><br><span class="line">        System.out.println(&quot;一开始余额是:&quot;+checkAccount.getOverdraft());</span><br><span class="line">        System.out.println(&quot;一开始可透支额度是：&quot;+checkAccount.getBalance());</span><br><span class="line">        System.out.println(&quot;--------------------------------------------&quot;);</span><br><span class="line">        checkAccount.withdraw(5000);</span><br><span class="line">        System.out.println(&quot;取了5000之后余额是:&quot;+checkAccount.getBalance());</span><br><span class="line">        System.out.println(&quot;现在可透支额度是：&quot;+checkAccount.getOverdraft());</span><br><span class="line">        System.out.println(&quot;--------------------------------------------&quot;);</span><br><span class="line">        checkAccount.withdraw(18000);</span><br><span class="line">        System.out.println(&quot;取了18000之后余额是:&quot;+checkAccount.getBalance());</span><br><span class="line">        System.out.println(&quot;现在可透支额度是：&quot;+checkAccount.getOverdraft());</span><br><span class="line">        System.out.println(&quot;--------------------------------------------&quot;);</span><br><span class="line">        checkAccount.withdraw(3000);</span><br><span class="line">        System.out.println(&quot;取了3000之后余额是:&quot;+checkAccount.getBalance());</span><br><span class="line">        System.out.println(&quot;现在可透支额度是：&quot;+checkAccount.getOverdraft());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212200466.png" alt="image-20231003172602789"></p><h2 id="6-子类对象实例化全过程"><a href="#6-子类对象实例化全过程" class="headerlink" title="6. 子类对象实例化全过程"></a>6. 子类对象实例化全过程</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212200527.png" alt="image-20220324003713230"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog dog = <span class="keyword">new</span> Dog(<span class="string">"小花"</span>,<span class="string">"小红"</span>);</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212200883.png" alt="image-20220324003735416" style="zoom:80%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212200275.png" alt="image-20220324003813163" style="zoom:67%;"><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creature</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Creature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Creature无参数的构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">extends</span> <span class="title">Creature</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Animal带一个参数的构造器，该动物的name为"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name);  <span class="comment">//调用上面的构造器</span></span><br><span class="line">        System.out.println(<span class="string">"Animal带两个参数的构造器，其age为"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"汪汪队阿奇"</span>, <span class="number">3</span>);  <span class="comment">//调用父类的构造器</span></span><br><span class="line">        System.out.println(<span class="string">"Dog无参数的构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Dog();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212200421.png" alt="image-20231003201658599"></p><h2 id="7-面向对象特征三：多态性"><a href="#7-面向对象特征三：多态性" class="headerlink" title="7. 面向对象特征三：多态性"></a>7. 面向对象特征三：多态性</h2><blockquote><p>一千个读者眼中有一千个哈姆雷特。</p></blockquote><h3 id="7-1-多态的形式和体现"><a href="#7-1-多态的形式和体现" class="headerlink" title="7.1 多态的形式和体现"></a>7.1 多态的形式和体现</h3><h4 id="7-1-1-对象的多态性"><a href="#7-1-1-对象的多态性" class="headerlink" title="7.1.1 对象的多态性"></a>7.1.1 对象的多态性</h4><p>多态性，是面向对象中最重要的概念，在Java中的体现：<strong>对象的多态性：父类的引用指向子类的对象</strong></p><p>格式：（父类类型：指子类继承的父类类型，或者实现的接口类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = 子类对象；</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">Object o = <span class="keyword">new</span> Person();<span class="comment">//Object类型的变量o，指向Person类型的对象</span></span><br><span class="line"></span><br><span class="line">o = <span class="keyword">new</span> Student(); <span class="comment">//Object类型的变量o，指向Student类型的对象</span></span><br></pre></td></tr></table></figure><p>对象的多态：在Java中，子类的对象可以替代父类的对象使用。所以，一个引用类型变量可能指向(引用)多种不同类型的对象</p><h4 id="7-1-2-多态的理解"><a href="#7-1-2-多态的理解" class="headerlink" title="7.1.2 多态的理解"></a>7.1.2 多态的理解</h4><p>Java引用变量有两个类型：<code>编译时类型</code>和<code>运行时类型</code>。编译时类型由<code>声明</code>该变量时使用的类型决定，运行时类型由<code>实际赋给该变量的对象</code>决定。<br>简称：<strong>编译时，看左边；运行时，看右边。</strong></p><ul><li><p>若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)</p></li><li><p>多态情况下，“看左边”：看的是父类的引用（父类中不具备子类特有的方法）</p><pre><code>“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）</code></pre></li><li><p>多态的<strong>使用前提</strong>：① 类的继承关系  ② 方法的重写</p></li><li><p>多态的<strong>适用性</strong>：适用于方法，不适用于属性</p></li><li></li></ul><h4 id="7-1-3-举例"><a href="#7-1-3-举例" class="headerlink" title="7.1.3 举例"></a>7.1.3 举例</h4><p>创建人、男人和女人三个class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> id=<span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> isSmoking;</span><br><span class="line">    <span class="keyword">int</span> id=<span class="number">1002</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男人多吃肉，长肌肉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男人笔挺的走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">earnMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男人挣钱养家"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isBeauty;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女人应该少吃，减肥"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女人窈窕的走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goShopping</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女人喜欢逛街..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class PersonTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;1.多态性之前的场景</span><br><span class="line">        Person p1&#x3D;new Person();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.多态性  &#123;左右不一致&#125;</span><br><span class="line">        Person p2&#x3D;new Man();</span><br><span class="line">        &#x2F;&#x2F;走的是man的方法</span><br><span class="line">        System.out.println(p2.id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201490.png" alt="image-20231003220858899"></p><h3 id="7-2-为什么需要多态性-polymorphism-？"><a href="#7-2-为什么需要多态性-polymorphism-？" class="headerlink" title="7.2 为什么需要多态性(polymorphism)？"></a>7.2 为什么需要多态性(polymorphism)？</h3><p>开发中，有时我们在设计一个数组、或一个成员变量、或一个方法的形参、返回值类型时，无法确定它具体的类型，只能确定它是某个系列的类型。<br>[<strong>在设计时候无法确定具体是什么？</strong>]</p><p>案例：</p><p>（1）声明一个Animal类，包含eat()和jump()方法</p><p>（2）声明一个Cat类，重写eat()和jump()方法，并且多一个catchMouse()方法</p><p>（3）声明一个Dog类，重写eat()和jump()方法，并且多一个watchDoor()方法</p><p>（4）声明一个AnimalTest类，包含adopt(Animal animal)方法，<strong>主要是收养动物【这时候不知道收养的是什么】 –&gt; 考虑多态性</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Animal&#123;</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;动物进食&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void jump()&#123;</span><br><span class="line">        System.out.println(&quot;动物跳&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫跳~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫抓老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃骨头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗急跳墙"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗能看家"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnimalTest test=<span class="keyword">new</span> AnimalTest();</span><br><span class="line">        <span class="comment">//多态性就可以直接更换new的对象就行 就不用写很多adopt方法了</span></span><br><span class="line">        test.adopt(<span class="keyword">new</span> Dog()); <span class="comment">//就可以执行时候考虑具体的动物对象!!!</span></span><br><span class="line">        test.adopt(<span class="keyword">new</span> Cat()); <span class="comment">//就可以执行时候考虑具体的动物对象!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//领养动物</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adopt</span><span class="params">(Animal animal)</span></span>&#123;  <span class="comment">//声明一个动物 但是实际上传进来new可以是Dog 或者Cat</span></span><br><span class="line">        animal.eat();</span><br><span class="line">        animal.jump();</span><br><span class="line">        <span class="comment">//在这个情况下就不能写animal.子类方法()!!!!  因为设计的时候只是知道是个动物</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-多态的好处和弊端"><a href="#7-3-多态的好处和弊端" class="headerlink" title="7.3 多态的好处和弊端"></a>7.3 多态的好处和弊端</h3><p><strong>好处</strong>：变量引用的子类对象不同，执行的方法就不同，实现<strong>动态绑定【要什么传入什么】</strong>。代码编写更灵活、功能更强大，可维护性和扩展性更好了。</p><p><strong>弊端</strong>：一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就<strong>不能再访问子类中添加的属性和方法</strong>。<strong>【只能访问被重写的方法和父类的属性】</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;多态的好处!!!</span><br><span class="line">public class AnimalTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AnimalTest test&#x3D;new AnimalTest();</span><br><span class="line">        &#x2F;&#x2F;多态性就可以直接更换new的对象就行 就不用写很多adopt方法了</span><br><span class="line">        test.adopt(new Dog()); &#x2F;&#x2F;就可以执行时候考虑具体的动物对象!!!</span><br><span class="line">        test.adopt(new Cat()); &#x2F;&#x2F;就可以执行时候考虑具体的动物对象!!!</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;领养动物</span><br><span class="line">    public void adopt(Animal animal)&#123;  &#x2F;&#x2F;声明一个动物 但是实际上传进来new可以是Dog 或者Cat    ------多态的好处!!!!!!!</span><br><span class="line">        animal.eat();</span><br><span class="line">        animal.jump();</span><br><span class="line">        &#x2F;&#x2F;在这个情况下就不能写animal.子类方法()!!!!  因为设计的时候只是知道是个动物</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;多态的弊端!!!</span><br><span class="line">&#x2F;&#x2F;[基于7.1.3举例的Person Woman Man[]</span><br><span class="line">public class PersonTest1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;向下转型</span><br><span class="line">        Person p1&#x3D;new Man();</span><br><span class="line">        &#x2F;&#x2F;不能调用子类特有的属性和方法   ------多态的弊端!!!!!!!!</span><br><span class="line">        &#x2F;&#x2F;p1.earnMoney();</span><br><span class="line">        &#x2F;&#x2F;System.out.println(p1.isSmoking); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>开发中：</p><p>方法形参：父类，是多态使用最多的场合。即使增加了新的子类，方法也无需改变，提高了扩展性，符合<strong>开闭原则</strong>。【你具体的类可以更新，毕竟我设计的时候用的是父类，这个不改就行】</p><p><strong>【开闭原则OCP】</strong></p><ul><li>对扩展开放，对修改关闭</li><li>通俗解释：软件系统中的各种组件，如模块（Modules）、类（Classes）以及功能（Functions）等，应该在不修改现有代码的基础上，引入新功能</li></ul></blockquote><h3 id="7-4-虚方法调用-Virtual-Method-Invocation"><a href="#7-4-虚方法调用-Virtual-Method-Invocation" class="headerlink" title="7.4 虚方法调用(Virtual Method Invocation)"></a>7.4 虚方法调用(Virtual Method Invocation)</h3><p>在Java中虚方法是指在编译阶段不能确定方法的调用入口地址，在运行阶段才能确定的方法，即可能被重写的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person e = <span class="keyword">new</span> Student();</span><br><span class="line">e.getInfo();<span class="comment">//调用Student类的getInfo()方法</span></span><br></pre></td></tr></table></figure><p>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为<strong>虚方法</strong>，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201019.png" alt="image-20220324234208997"></p><p>前提：Person类中定义了welcome()方法，各个子类重写了welcome()。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201354.png" alt="image-20220324234214932"></p><p>执行：多态的情况下，调用对象的welcome()方法，实际执行的是子类重写的方法。</p><blockquote><p>拓展：</p><p><code>静态链接（或早起绑定）</code>：当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。那么调用这样的方法，就称为非虚方法调用。比如调用静态方法、私有方法、final方法、父类构造器、本类重载构造器等。</p><p><code>动态链接（或晚期绑定）</code>：如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。调用这样的方法，就称为虚方法调用。比如调用重写的方法（针对父类）、实现的方法（针对接口）。</p></blockquote><h3 id="7-5-成员变量没有多态性"><a href="#7-5-成员变量没有多态性" class="headerlink" title="7.5 成员变量没有多态性"></a>7.5 成员变量没有多态性</h3><ul><li><p>若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中。</p></li><li><p>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.polymorphism.grammar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVariable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Base b = <span class="keyword">new</span> Sub();</span><br><span class="line">        System.out.println(b.a);</span><br><span class="line">        System.out.println(((Sub)b).a);</span><br><span class="line"></span><br><span class="line">        Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">        System.out.println(s.a);</span><br><span class="line">        System.out.println(((Base)s).a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-向上转型与向下转型"><a href="#7-6-向上转型与向下转型" class="headerlink" title="7.6 向上转型与向下转型"></a>7.6 向上转型与向下转型</h3><p>首先，一个对象在new的时候创建是哪个类型的对象，它从头至尾都不会变。即这个对象的运行时类型，本质的类型用于不会变。但是，把这个对象赋值给不同类型的变量时，这些变量的编译时类型却不同。</p><h4 id="7-6-1-为什么要类型转换"><a href="#7-6-1-为什么要类型转换" class="headerlink" title="7.6.1 为什么要类型转换"></a>7.6.1 为什么要类型转换</h4><p>​    多态的弊端，因为多态我们就<code>不能调用</code>子类特有的方法和属性。所以，<strong>想要调用子类特有的方法</strong>，<strong>必须做类型转换</strong>，使得<code>编译通过</code>。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201908.png" alt="image-20220324235337563" style="zoom:80%;"><ul><li><p><strong>向上转型</strong>：当左边的变量的类型（父类） &gt; 右边对象/变量的类型（子类），我们就称为向上转型</p><ul><li>此时，编译时按照左边变量的类型处理，就只能调用父类中有的变量和方法，不能调用子类特有的变量和方法了</li><li>但是，<strong>运行时，仍然是对象本身的类型</strong>，所以执行的方法是子类重写的方法体。</li><li>此时，一定是安全的，而且也是自动完成的</li></ul></li><li><p><strong>向下转型</strong>：当左边的变量的类型（子类）&lt;右边对象/变量的编译时类型（父类），我们就称为向下转型</p><ul><li>此时，编译时按照左边变量的类型处理，就可以调用子类特有的变量和方法了</li><li>但是，<strong>运行时，仍然是对象本身的类型</strong></li><li>不是所有通过编译的向下转型都是正确的，可能会发生ClassCastException，为了安全，可以通过isInstanceof关键字进行判断</li></ul></li></ul><h4 id="7-6-2-如何向上或向下转型"><a href="#7-6-2-如何向上或向下转型" class="headerlink" title="7.6.2 如何向上或向下转型"></a>7.6.2 如何向上或向下转型</h4><p>向上转型：自动完成</p><p>向下转型：（子类类型）父类变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基于7.1.3举例的Person Woman Man</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向下转型</span></span><br><span class="line">        Person p1=<span class="keyword">new</span> Man();</span><br><span class="line">        <span class="comment">//不能调用子类特有的属性和方法</span></span><br><span class="line">        <span class="comment">//p1.earnMoney();</span></span><br><span class="line">        <span class="comment">//System.out.println(p1.isSmoking);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下转型【强转】</span></span><br><span class="line">        Man m1=(Man)p1;  <span class="comment">//p1和m1指向堆的同一个地址</span></span><br><span class="line">        m1.earnMoney();</span><br><span class="line">        System.out.println(m1.isSmoking);</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//可能会出现类型转换异常【ClassCastException】</span></span><br><span class="line">        <span class="comment">//Person p2=new Woman();</span></span><br><span class="line">        <span class="comment">//Man m2=(Man)p2;</span></span><br><span class="line">        <span class="comment">//m2.earnMoney();</span></span><br><span class="line">        <span class="comment">//  |</span></span><br><span class="line">        <span class="comment">//  |    </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201180.png" alt="image-20231003220521144"></p><h4 id="7-6-3-instanceof关键字"><a href="#7-6-3-instanceof关键字" class="headerlink" title="7.6.3 instanceof关键字"></a>7.6.3 instanceof关键字</h4><p>但是向下转型类似于数据类型转换一样，可能会存在并不是这个子类，但是你要转移成这个子类，就会出现ClassCastException!!!</p><p><img src=".images/image-20231003221329249.png" alt="image-20231003221329249"></p><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验。如下代码格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检验对象a是否是数据类型A的对象，返回值为boolean型</span></span><br><span class="line">对象a <span class="keyword">instanceof</span> 数据类型A</span><br></pre></td></tr></table></figure><ul><li>说明：<ul><li>只要用instanceof判断返回true的，那么强转为该类型就一定是安全的，不会报ClassCastException异常。</li><li>如果对象a属于类A的子类B，a instanceof A值也为true。</li><li>要求对象a所属的类与类A必须是子类和父类的关系，否则编译错误。</li><li>如果a instanceOf A 返回true，则：a instanceOf superA 返回也是true。[A是superA的子类]</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person p2=<span class="keyword">new</span> Woman();</span><br><span class="line">      <span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Man)&#123;  <span class="comment">//如果属于女人类就进强制转换</span></span><br><span class="line">          Man m2=(Man)p2;</span><br><span class="line">          m2.earnMoney(); </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="7-7-练习"><a href="#7-7-练习" class="headerlink" title="7.7 练习"></a>7.7 练习</h3><p><strong>练习1：笔试&amp;面试</strong></p><p>题目1：继承成员变量和继承方法的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.count);  <span class="comment">//展示base类的count属性10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.count);  <span class="comment">//展示Sub类的count属性20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个子类对象</span></span><br><span class="line">        Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">        System.out.println(s.count); <span class="comment">// 输出20</span></span><br><span class="line">        s.display(); <span class="comment">// 输出20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        Base b = s;</span><br><span class="line">        System.out.println(b == s);  <span class="comment">// 因为两个指向同一个子类对象 所以输出true</span></span><br><span class="line">        System.out.println(b.count);  <span class="comment">//这时候还是父类的属性 输出10</span></span><br><span class="line">        b.display();  <span class="comment">//输出20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//考查多态的笔试题目：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterviewTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//多态</span></span><br><span class="line">        Base base = <span class="keyword">new</span> Sub();</span><br><span class="line">        base.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">//调用被重写的子类方法  输出sub_1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>... arr)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"base"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sub_1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getXxx()和setXxx()声明在哪个类中，内部操作的属性就是哪个类里的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterviewTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//普通创建父类对象f</span></span><br><span class="line">        Father f = <span class="keyword">new</span> Father();</span><br><span class="line">        <span class="comment">//普通创建子类对象s</span></span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        System.out.println(f.getInfo());  <span class="comment">//输出父类属性 atguigu</span></span><br><span class="line">        System.out.println(s.getInfo());  <span class="comment">//输出子类属性 尚硅谷</span></span><br><span class="line">        <span class="comment">//输出子类的方法</span></span><br><span class="line">        s.test(); <span class="comment">//输出 尚硅谷 atguigu</span></span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">        <span class="comment">//更改子类的属性为大硅谷</span></span><br><span class="line">        s.setInfo(<span class="string">"大硅谷"</span>);</span><br><span class="line">        System.out.println(f.getInfo()); <span class="comment">//输出 atguigu</span></span><br><span class="line">        System.out.println(s.getInfo()); <span class="comment">//输出 大硅谷</span></span><br><span class="line">        s.test(); <span class="comment">//输出 大硅谷 atguigu</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String info = <span class="string">"atguigu"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有属性的get和set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;   <span class="comment">//继承父类</span></span><br><span class="line">    <span class="keyword">private</span> String info = <span class="string">"尚硅谷"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInfo());   <span class="comment">//调用子类的属性 尚硅谷</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.getInfo());  <span class="comment">//调用父类的属性 atguigu</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目4：多态是编译时行为还是运行时行为？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;   <span class="comment">//父类</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"animal eat food"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;   <span class="comment">//子类继承父类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat eat fish"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;   <span class="comment">//子类继承父类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dog eat bone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;   <span class="comment">//子类继承父类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sheep eat grass"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterviewTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">getInstance</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;  <span class="comment">//返回值是一个动物父类</span></span><br><span class="line">        <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat ();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dog ();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Sheep ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>); <span class="comment">//随机生成0-3中的随机数</span></span><br><span class="line">        System.out.println(key); <span class="comment">//输出随机数</span></span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        Animal animal = getInstance(key);  <span class="comment">//获取子类</span></span><br><span class="line">        animal.eat(); <span class="comment">//是哪个子类就输出哪个子类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//protected修饰符 --可以跨包但是仅限子类可以获取到</span></span><br><span class="line"><span class="keyword">protected</span> String name=<span class="string">"宋亚翔"</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age=<span class="number">24</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"Name: "</span>+ name + <span class="string">"\n"</span> +<span class="string">"age: "</span>+ age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//protected修饰符 --可以跨包但是仅限子类可以获取到</span></span><br><span class="line"><span class="keyword">protected</span> String school=<span class="string">"东北林业大学"</span>;  <span class="comment">//子类特有的属性</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">"Name: "</span>+ name + <span class="string">"\nage: "</span>+ age + <span class="string">"\nschool: "</span>+ school;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graduate</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> String major=<span class="string">"计算机"</span>;  <span class="comment">//子类特有的属性</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="string">"Name: "</span>+ name + <span class="string">"\nage: "</span>+ age + <span class="string">"\nschool: "</span>+ school+<span class="string">"\nmajor:"</span>+major;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立InstanceTest 类，在类中定义方法method(Person e);<br>在method中:<br>(1)根据e的类型调用相应类的getInfo()方法。<br>(2)根据e的类型执行：<br>如果e为Person类的对象，输出：<br>“a person”;<br>如果e为Student类的对象，输出：<br>“a student”<br>“a person ”<br>如果e为Graduate类的对象，输出：<br>“a graduated student”<br>“a student”<br>“a person”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class InstanceTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person person&#x3D;new Person();</span><br><span class="line">        Person person1&#x3D;new Student();</span><br><span class="line">        Person person2&#x3D;new Graduate();</span><br><span class="line">        InstanceTest test&#x3D;new InstanceTest();</span><br><span class="line">        test.method(person);</span><br><span class="line">        System.out.println(&quot;--------------------------&quot;);</span><br><span class="line">        test.method(person1);</span><br><span class="line">        System.out.println(&quot;--------------------------&quot;);</span><br><span class="line">        test.method(person2);</span><br><span class="line">        System.out.println(&quot;--------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void method(Person e)&#123;</span><br><span class="line">    &#x2F;&#x2F;设置key来接到底是哪个类 </span><br><span class="line">        int key &#x3D; 0;</span><br><span class="line">        if(e instanceof Person)&#123;</span><br><span class="line">            key&#x3D;0;</span><br><span class="line">        &#125;</span><br><span class="line">        if(e instanceof Student)&#123;</span><br><span class="line">            key&#x3D;1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(e instanceof Graduate)&#123;</span><br><span class="line">            key&#x3D;2;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;根据key判断是哪个类型按照要求输出</span><br><span class="line">        switch (key)&#123;</span><br><span class="line">            case 0:System.out.println(e.getInfo());System.out.println(&quot;a person&quot;);</span><br><span class="line">    break;</span><br><span class="line">            case 1:System.out.println(e.getInfo());</span><br><span class="line">                   System.out.println(&quot;a person&quot;);</span><br><span class="line">   System.out.println(&quot;a student&quot;);</span><br><span class="line">                   break;</span><br><span class="line">            case 2:System.out.println(e.getInfo());</span><br><span class="line">   System.out.println(&quot;a person&quot;);</span><br><span class="line">   System.out.println(&quot;a student&quot;);</span><br><span class="line">   System.out.println(&quot;a graduate&quot;);</span><br><span class="line">   break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201594.png" alt="image-20231005215343643"></p><p><strong>练习3</strong>：定义三个类，父类GeometricObject代表几何形状，子类Circle代表圆形，MyRectangle代表矩形。定义一个测试类GeometricTest，编写equalsArea方法测试两个对象的面积是否相等（注意方法的参数类型，利用动态绑定技术），编写displayGeometricObject方法显示对象的面积（注意方法的参数类型，利用动态绑定技术）。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201972.png" alt="image-20220325000034619" style="zoom:67%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;几何类</span><br><span class="line">public class GeometricObject &#123;</span><br><span class="line">    &#x2F;&#x2F; 类图中#表示protected修饰符 --可以跨包但是只能是子类使用</span><br><span class="line">    protected String color;</span><br><span class="line">    protected double weight;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;有参构造器</span><br><span class="line">    protected GeometricObject(String color,double weight)&#123;</span><br><span class="line">        this.color&#x3D;color;</span><br><span class="line">        this.weight&#x3D;weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;set和get方法</span><br><span class="line">    public String getColor() &#123;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setColor(String color) &#123;</span><br><span class="line">        this.color &#x3D; color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getWeight() &#123;</span><br><span class="line">        return weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWeight(double weight) &#123;</span><br><span class="line">        this.weight &#x3D; weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;要被重写的方法</span><br><span class="line">    public double findArea()&#123;</span><br><span class="line">        return 0.0;  &#x2F;&#x2F;默认输出0  后来要被重写</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;圆类</span><br><span class="line">public class Circle extends GeometricObject&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;子类私有属性 -半径</span><br><span class="line">    private double radius;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;构造器</span><br><span class="line">    protected Circle(double radius,String color, double weight) &#123;</span><br><span class="line">        super(color, weight);  &#x2F;&#x2F;【首行】调用父类构造器</span><br><span class="line">        this.radius&#x3D;radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;set和get方法</span><br><span class="line">    public double getRadius() &#123;</span><br><span class="line">        return radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRadius(double radius) &#123;</span><br><span class="line">        this.radius &#x3D; radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double findArea()&#123;</span><br><span class="line">        return Math.PI*radius*radius;  &#x2F;&#x2F;重写方法 返回Πr平方²</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;矩形</span><br><span class="line">public class MyRectangle extends GeometricObject&#123;</span><br><span class="line"></span><br><span class="line">    private double width;</span><br><span class="line">    private double height;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;构造器</span><br><span class="line">    public MyRectangle(double width,double height,String color,double weight)&#123;</span><br><span class="line">        super(color, weight); &#x2F;&#x2F;【首行】调用父类构造器</span><br><span class="line">        this.width&#x3D;width;</span><br><span class="line">        this.height&#x3D;height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;set和get方法</span><br><span class="line">    public double getWidth() &#123;</span><br><span class="line">        return width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWidth(double width) &#123;</span><br><span class="line">        this.width &#x3D; width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getHeight() &#123;</span><br><span class="line">        return height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHeight(double height) &#123;</span><br><span class="line">        this.height &#x3D; height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double findArea()&#123;</span><br><span class="line">        return width*height;  &#x2F;&#x2F;重写方法 返回长*宽</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class GeometricTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;两个多态</span><br><span class="line">        GeometricObject g1&#x3D;new Circle(3,&quot;黄色&quot;,10);</span><br><span class="line">        GeometricObject g2&#x3D;new MyRectangle(3,4,&quot;绿色&quot;,10);</span><br><span class="line">        &#x2F;&#x2F;设定test对象测试方法</span><br><span class="line">        GeometricTest test&#x3D;new GeometricTest();</span><br><span class="line">        System.out.println(test.equalsArea(g1,g2));</span><br><span class="line">        System.out.println(test.displayGeometricObject(g1));</span><br><span class="line">        System.out.println(test.displayGeometricObject(g2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean equalsArea(GeometricObject g1,GeometricObject g2)&#123;</span><br><span class="line">          return g1.findArea()&#x3D;&#x3D;g2.findArea();  &#x2F;&#x2F;判断两个对象的面积是否相等</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double displayGeometricObject(GeometricObject g)&#123;</span><br><span class="line">        &#x2F;&#x2F;根据对象输出对应的方法</span><br><span class="line">        return g.findArea();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果截图如下:</p><p><img src=".images/image-20231005222429951.png" alt="image-20231005222429951"></p><h2 id="8-Object-类"><a href="#8-Object-类" class="headerlink" title="8. Object 类"></a>8. Object 类</h2><h3 id="8-1-如何理解根父类"><a href="#8-1-如何理解根父类" class="headerlink" title="8.1 如何理解根父类"></a>8.1 如何理解根父类</h3><p>类 <code>java.lang.Object</code>是类层次结构的根类，即所有其它类的父类。每个类都使用 <code>Object</code> 作为超类。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201270.png" alt="image-20220503104750655" style="zoom:67%;"><ul><li><p>Object类型的变量与除Object以外的任意引用数据类型的对象都存在多态引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">method(Object obj)&#123;…&#125; <span class="comment">//可以接收任何类作为其参数</span></span><br><span class="line"></span><br><span class="line">Person o = <span class="keyword">new</span> Person();  </span><br><span class="line">method(o);</span><br></pre></td></tr></table></figure></li><li><p>所有对象（包括数组）都实现这个类的方法。</p></li><li><p>如果一个类没有特别指定父类，那么默认则继承自Object类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-2-Object类的方法"><a href="#8-2-Object类的方法" class="headerlink" title="8.2 Object类的方法"></a>8.2 Object类的方法</h3><p>根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。这里我们主要关注其中的6个：</p><h4 id="1、-重点-equals"><a href="#1、-重点-equals" class="headerlink" title="1、(重点)equals()"></a>1、(重点)equals()</h4><p><strong>= =：</strong> </p><ul><li><p>1.基本类型:比较值:只要两个变量的值相等，即为true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">5</span>; </span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">6</span>)&#123;…&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.引用类型:比较引用(是否指向同一个对象)：只有指向同一个对象时，==才返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();      </span><br><span class="line">Person p2=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">if</span> (p1==p2)&#123;…&#125;</span><br></pre></td></tr></table></figure><ul><li>用“==”进行比较时，符号两边的<code>数据类型必须兼容</code>(可自动转换的基本数据类型除外)，否则编译出错</li></ul></li></ul><p><strong>equals()：</strong>所有类都继承了Object，也就获得了equals()方法。还可以重写。</p><ul><li><p>只能比较引用类型，Object类源码中equals()的作用与“==”相同：比较是否指向同一个对象。     </p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201473.png" alt="image-20220503104750655" style="zoom:67%;"></li><li><p>格式:obj1.equals(obj2)</p></li><li><blockquote><p>没有重写Object中equals()方法[自定义的类] –&gt; 比较两个对象的引用地址是否相同（或比较两个对象是否指向了堆空间中的同一个对象实体）</p></blockquote><blockquote><p>重写了Object类中的equals()方法[String、File、Date和包装类等] –&gt; 用于比较两个对象的实体内容是否相等</p></blockquote></li><li><p>重写equals()方法的原则</p><ul><li><p><code>对称性</code>：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</p></li><li><p><code>自反性</code>：x.equals(x)必须返回是“true”。</p></li><li><p><code>传递性</code>：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</p></li><li><p><code>一致性</code>：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</p></li><li><p>任何情况下，x.equals(null)，永远返回是“false”；</p><p>​    x.equals(和x不同类型的对象)永远返回是“false”。</p></li></ul></li><li><p>重写equals()方法的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.自己写 </span><br><span class="line">&#x2F;&#x2F; 2.idea自动创建[Alt+Ins] 选中equals和hashCode()</span><br></pre></td></tr></table></figure></li><li><p>重写举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写equals()</span></span><br><span class="line">    <span class="comment">// 1.自己写</span></span><br><span class="line">    <span class="comment">// 2.idea自动创建[Alt+Ins] 选中equals和hashCode() </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User user)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp; Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试题：</strong>==和equals的区别</p><blockquote><p>从我面试的反馈，85%的求职者“理直气壮”的回答错误…</p></blockquote><ul><li><p>== 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址</p></li><li><p>equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也是==;我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中用的比较多，久而久之，形成了equals是比较值的错误观点。</p></li><li><p>具体要看自定义类里有没有重写Object的equals方法来判断。</p></li><li><p>通常情况下，重写equals方法，会比较类中的相应属性是否都相等。</p></li></ul><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> it = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">float</span> fl = <span class="number">65.0f</span>;</span><br><span class="line">System.out.println(<span class="string">"65和65.0f是否相等？"</span> + (it == fl));  <span class="comment">// 两个是基本数据类型比较值 输出true 【int会自动类型转换为float】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">'A'</span>; <span class="keyword">char</span> ch2 = <span class="number">12</span>;</span><br><span class="line">System.out.println(<span class="string">"65和'A'是否相等？"</span> + (it == ch1));  <span class="comment">// 两个是基本数据类型比较值 输出true 【char会自动类型转换为int比较】</span></span><br><span class="line">System.out.println(<span class="string">"12和ch2是否相等？"</span> + (<span class="number">12</span> == ch2));  <span class="comment">// 两个是基本数据类型比较值 输出true 【char会自动类型转换为int比较】</span></span><br><span class="line"></span><br><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(<span class="string">"str1和str2是否相等？"</span>+ (str1 == str2));   <span class="comment">// 两个是引用数据类型比较是不是同一对象 输出false</span></span><br><span class="line">System.out.println(<span class="string">"str1是否equals str2？"</span>+(str1.equals(str2)));  <span class="comment">// 两个是引用数据类型比较是不是同一对象 又因为是String类型重写了方法比较值 输出true</span></span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><p>编写Order类，有int型的orderId，String型的orderName，相应的getter()和setter()方法，两个参数的构造器，重写父类的equals()方法：public boolean equals(Object obj)，并判断测试类中创建的两个对象是否相等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Objects;</span><br><span class="line">public class Order &#123;</span><br><span class="line">    &#x2F;&#x2F;因为要设置get和set方法 所以需要设置为private</span><br><span class="line">    private int orderld;</span><br><span class="line">    private String orderName;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;get和set方法</span><br><span class="line">    public int getOrderld() &#123;</span><br><span class="line">        return orderld;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderld(int orderld) &#123;</span><br><span class="line">        this.orderld &#x3D; orderld;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getOrderName() &#123;</span><br><span class="line">        return orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderName(String orderName) &#123;</span><br><span class="line">        this.orderName &#x3D; orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;两个参数的构造器</span><br><span class="line">    public Order(int orderld,String ordername)&#123;</span><br><span class="line">        this.orderld&#x3D;orderld;</span><br><span class="line">        this.orderName&#x3D;ordername;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;根据idea重写 Alt+ins</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (!(o instanceof Order order)) return false;</span><br><span class="line">        return getOrderld() &#x3D;&#x3D; order.getOrderld() &amp;&amp; Objects.equals(getOrderName(), order.getOrderName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class OrderTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Order order1&#x3D;new Order(1,&quot;宋亚翔&quot;);</span><br><span class="line">        Order order2&#x3D;new Order(1,&quot;宋亚翔&quot;);</span><br><span class="line">        Order order3&#x3D;new Order(2,&quot;宋亚翔&quot;);</span><br><span class="line">        Order order4&#x3D;new Order(1,&quot;李武&quot;);</span><br><span class="line">        System.out.println(order1.equals(order2));  &#x2F;&#x2F;必须是两个属性都相同才行</span><br><span class="line">        System.out.println(order1.equals(order3));</span><br><span class="line">        System.out.println(order1.equals(order4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码结果如下:</p><p><img src=".images/image-20231006111943546.png" alt="image-20231006111943546"></p><p><strong>练习3：</strong></p><p>请根据以下代码自行定义能满足需要的MyDate类,在MyDate类中覆盖equals方法，使其判断当两个MyDate类型对象的年月日都相同时，结果为true，否则为false。  public boolean equals(Object o)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyDate m1 = <span class="keyword">new</span> MyDate(<span class="number">14</span>, <span class="number">3</span>, <span class="number">1976</span>);</span><br><span class="line">        MyDate m2 = <span class="keyword">new</span> MyDate(<span class="number">14</span>, <span class="number">3</span>, <span class="number">1976</span>);</span><br><span class="line">        <span class="keyword">if</span> (m1 == m2) &#123;</span><br><span class="line">            System.out.println(<span class="string">"m1==m2"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"m1!=m2"</span>); <span class="comment">// m1 != m2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m1.equals(m2)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"m1 is equal to m2"</span>);<span class="comment">// m1 is equal to m2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"m1 is not equal to m2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Objects;</span><br><span class="line">public class MyDate &#123;</span><br><span class="line">&#x2F;&#x2F;三个参数设置为private属性 加上三个get和set方法</span><br><span class="line">    private int year;</span><br><span class="line">    private int month;</span><br><span class="line">    private int day;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;get和set方法</span><br><span class="line">    public int getYear() &#123;</span><br><span class="line">        return year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setYear(int year) &#123;</span><br><span class="line">        this.year &#x3D; year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getMonth() &#123;</span><br><span class="line">        return month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMonth(int month) &#123;</span><br><span class="line">        this.month &#x3D; month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getDay() &#123;</span><br><span class="line">        return day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDay(int day) &#123;</span><br><span class="line">        this.day &#x3D; day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;构造器 因为Test里面是有参的</span><br><span class="line">    public MyDate(int day, int month, int year) &#123;</span><br><span class="line">        this.year &#x3D; year;</span><br><span class="line">        this.month &#x3D; month;</span><br><span class="line">        this.day &#x3D; day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;重写equals方法</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (!(o instanceof MyDate myDate)) return false;</span><br><span class="line">        return getYear() &#x3D;&#x3D; myDate.getYear() &amp;&amp; getMonth() &#x3D;&#x3D; myDate.getMonth() &amp;&amp; getDay() &#x3D;&#x3D; myDate.getDay();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-重点-toString"><a href="#2、-重点-toString" class="headerlink" title="2、(重点)toString()"></a>2、(重点)toString()</h4><p>方法签名：public String toString()</p><p>① 默认情况下，toString()返回的是“对象的运行时类型 @ 对象的hashCode值的十六进制形式”</p><p>② 在进行String与其它类型数据的连接操作时，自动调用toString()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date now=<span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(“now=”+now);  <span class="comment">//相当于</span></span><br><span class="line">System.out.println(“now=”+now.toString());</span><br></pre></td></tr></table></figure><p>③ 如果我们直接System.out.println(对象)，默认会自动调用这个对象的toString()</p><blockquote><p>因为Java的引用数据类型的变量中存储的实际上时对象的内存地址，但是Java对程序员隐藏内存地址信息，所以不能直接将内存地址显示出来，所以当你打印对象时，JVM帮你调用了对象的toString()。</p></blockquote><p>④ 可以根据需要在用户自定义类型中重写toString()方法<br>    如String 类重写了toString()方法，返回字符串的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1=<span class="string">"hello"</span>;</span><br><span class="line">System.out.println(s1);<span class="comment">//相当于System.out.println(s1.toString());</span></span><br></pre></td></tr></table></figure><p>例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">", age="</span> + age + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习</strong>：定义两个类，父类GeometricObject代表几何形状，子类Circle代表圆形。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201402.png" alt="image-20220325002959156" style="zoom:67%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212201298.png" alt="image-20220325002932102" style="zoom:67%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class GeometricObject &#123;</span><br><span class="line">    protected String color;</span><br><span class="line">    protected double weight;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;get和set方法</span><br><span class="line">    public String getColor() &#123;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setColor(String color) &#123;</span><br><span class="line">        this.color &#x3D; color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getWeight() &#123;</span><br><span class="line">        return weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWeight(double weight) &#123;</span><br><span class="line">        this.weight &#x3D; weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;空参构造器</span><br><span class="line">    protected GeometricObject()&#123;</span><br><span class="line">        this.weight&#x3D;1.0;</span><br><span class="line">        this.color&#x3D;&quot;white&quot;;   &#x2F;&#x2F;初始化对象</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;有参构造器</span><br><span class="line">    protected GeometricObject(String color,double weight)&#123;</span><br><span class="line">        this.color&#x3D;color;</span><br><span class="line">        this.weight&#x3D;weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Objects;</span><br><span class="line">public class Circle extends GeometricObject &#123;</span><br><span class="line">    private double radius;</span><br><span class="line"></span><br><span class="line">    public Circle()&#123;</span><br><span class="line">        this.radius&#x3D;1.0;</span><br><span class="line">        super.color&#x3D;&quot;white&quot;;  &#x2F;&#x2F;初始化三个属性</span><br><span class="line">        super.weight&#x3D;1.0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Circle(double radius)&#123;</span><br><span class="line">        this.radius&#x3D;radius;     &#x2F;&#x2F;radius根据参数构造器确定</span><br><span class="line">        super.color&#x3D;&quot;white&quot;;</span><br><span class="line">        super.weight&#x3D;1.0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Circle(double radius,String color,double weight)&#123;</span><br><span class="line">        super(color,weight);  &#x2F;&#x2F;显式调用父类有参构造器</span><br><span class="line">        this.radius&#x3D;radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;set和get方法</span><br><span class="line">    public double getRaidus() &#123;</span><br><span class="line">        return radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRaidus(double raidus) &#123;</span><br><span class="line">        this.radius &#x3D; raidus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;计算圆面积</span><br><span class="line">    public double findArea()&#123;</span><br><span class="line">        return Math.PI*radius*radius;  &#x2F;&#x2F; π×r²</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;   &#x2F;&#x2F;重写toString()方法</span><br><span class="line">        return &quot;Circle&#123;&quot; +</span><br><span class="line">                &quot;radius&#x3D;&quot; + radius +</span><br><span class="line">                &quot;, color&#x3D;&#39;&quot; + color + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, weight&#x3D;&quot; + weight +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;   &#x2F;&#x2F;重写equals()方法</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (!(o instanceof Circle circle)) return false;</span><br><span class="line">        return Double.compare(radius, circle.radius) &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、clone"><a href="#3、clone" class="headerlink" title="3、clone()"></a>3、clone()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object类的clone()的使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Animal a1 = <span class="keyword">new</span> Animal(<span class="string">"花花"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Animal a2 = (Animal) a1.clone();</span><br><span class="line">System.out.println(<span class="string">"原始对象："</span> + a1);</span><br><span class="line">a2.setName(<span class="string">"毛毛"</span>);</span><br><span class="line">System.out.println(<span class="string">"clone之后的对象："</span> + a2);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Animal [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、finalize"><a href="#4、finalize" class="headerlink" title="4、finalize()"></a>4、finalize()</h4><ul><li>当对象被回收时，系统自动调用该对象的 finalize() 方法。（不是垃圾回收器调用的，是本类对象调用的）<ul><li>永远不要主动调用某个对象的finalize方法，应该交给垃圾回收机制调用。</li></ul></li><li>什么时候被回收：当某个对象没有任何引用时，JVM就认为这个对象是垃圾对象，就会在之后不确定的时间使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用 finalize()方法。 </li><li>子类可以重写该方法，目的是在对象被清理之前执行必要的清理操作。比如，在方法内断开相关连接资源。<ul><li>如果重写该方法，让一个新的引用变量重新引用该对象，则会重新激活对象。</li></ul></li><li>在JDK 9中此方法已经被<code>标记为过时</code>的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalizeTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">"Peter"</span>, <span class="number">12</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line">p = <span class="keyword">null</span>;<span class="comment">//此时对象实体就是垃圾对象，等待被回收。但时间不确定。</span></span><br><span class="line">System.gc();<span class="comment">//强制性释放空间</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类重写此方法，可在释放对象前进行某些操作</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"对象被释放---&gt;"</span> + <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、getClass"><a href="#5、getClass" class="headerlink" title="5、getClass()"></a>5、getClass()</h4><p>public final Class&lt;?&gt; getClass()：获取对象的运行时类型</p><blockquote><p>因为Java有多态现象，所以一个引用数据类型的变量的编译时类型与运行时类型可能不一致，因此如果需要查看这个变量实际指向的对象的类型，需要用getClass()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Object obj = <span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(obj.getClass());<span class="comment">//运行时类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">atguigu</span>.<span class="title">java</span>.<span class="title">Person</span></span></span><br></pre></td></tr></table></figure><h4 id="6、hashCode"><a href="#6、hashCode" class="headerlink" title="6、hashCode()"></a>6、hashCode()</h4><p>public int hashCode()：返回每个对象的hash值。(后续在集合框架章节重点讲解)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AA"</span>.hashCode());<span class="comment">//2080</span></span><br><span class="line">    System.out.println(<span class="string">"BB"</span>.hashCode());<span class="comment">//2112</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-native关键字的理解"><a href="#8-3-native关键字的理解" class="headerlink" title="8.3 native关键字的理解"></a>8.3 native关键字的理解</h3><p>使用native关键字说明这个方法是<strong>原生函数</strong>，也就是这个方法是用<code>C/C++</code>等实现的，并且<code>被编译成了DLL</code>，由Java去调用。</p><ul><li><p>本地方法是有方法体的，用c语言编写。由于本地方法的方法体源码没有对我们开源，所以我们看不到方法体</p></li><li><p>在Java中定义一个native方法时，并不提供实现体。</p></li></ul><p><strong>1. 为什么要用native方法</strong></p><p>Java使用起来非常方便，然而有些层次的任务用java实现起来不容易，或者我们对程序的效率很在意时，例如：Java需要与一些底层操作系统或某些硬件交换信息时的情况。native方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解Java应用之外的繁琐的细节。</p><p><strong>2. native声明的方法，对于调用者，可以当做和其他Java方法一样使用</strong></p><p>native method的存在并不会对其他类调用这些本地方法产生任何影响，实际上调用这些方法的其他类甚至不知道它所调用的是一个本地方法。JVM将控制调用本地方法的所有细节。</p><h1 id="第08章-面向对象编程-高级"><a href="#第08章-面向对象编程-高级" class="headerlink" title="第08章_面向对象编程(高级)"></a>第08章_面向对象编程(高级)</h1><hr><h2 id="本章专题与脉络-1"><a href="#本章专题与脉络-1" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202358.png" alt="第2阶段：Java面向对象编程-第08章" style="zoom: 40%;"><h2 id="1-关键字：static"><a href="#1-关键字：static" class="headerlink" title="1. 关键字：static"></a>1. 关键字：static</h2><p><strong>回顾类中的实例变量（即非static的成员变量）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="comment">//私有属性radius</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius=radius;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//findArea()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI*radius*radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建两个Circle对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Circle c1=<span class="keyword">new</span> Circle(<span class="number">2.0</span>);<span class="comment">//c1.radius=2.0</span></span><br><span class="line">Circle c2=<span class="keyword">new</span> Circle(<span class="number">3.0</span>);<span class="comment">//c2.radius=3.0</span></span><br></pre></td></tr></table></figure><p>Circle类中的变量radius是一个实例变量(instance variable)，它属于<strong>类的每一个对象</strong>，c1中的radius变化不会影响c2的radius。</p><p> –&gt; 如果想让一个成员变量被类的<strong>所有实例所共享</strong>，就用static修饰即可，称为<strong>类变量/类属性</strong>！</p><h3 id="1-1-类属性、类方法的设计思想"><a href="#1-1-类属性、类方法的设计思想" class="headerlink" title="1.1 类属性、类方法的设计思想"></a>1.1 类属性、类方法的设计思想</h3><p>当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过new关键字才会产出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，<code>某些特定的数据在内存空间里只有一份</code>。例如，所有的中国人都有个国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202226.png" alt="image-20220325213629311"></p><p>此外，在类中声明的实例方法，在类的外面必须要先创建对象，才能调用。但是有些方法的调用者和当前类的对象无关，这样的方法通常被声明为<code>类方法</code>，由于不需要创建对象就可以调用类方法，从而简化了方法的调用。</p><p>这里的类变量、类方法，只需要使用<code>static</code>修饰即可。所以也称为静态变量、静态方法。</p><h3 id="1-2-static关键字"><a href="#1-2-static关键字" class="headerlink" title="1.2 static关键字"></a>1.2 static关键字</h3><ul><li><p>使用范围：</p><ul><li>在Java类中，可用static修饰属性、方法、代码块、内部类</li></ul></li><li><p>被修饰后的成员具备以下特点：</p><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>修饰的成员，被所有对象所共享</li><li>访问权限允许时，可不创建对象，直接被类调用</li></ul></li></ul><h3 id="1-3-静态变量"><a href="#1-3-静态变量" class="headerlink" title="1.3 静态变量"></a>1.3 静态变量</h3><h4 id="1-3-1-语法格式"><a href="#1-3-1-语法格式" class="headerlink" title="1.3.1 语法格式"></a>1.3.1 语法格式</h4><p>使用static修饰的成员变量就是静态变量（或类变量、类属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> 类</span>&#123;</span><br><span class="line">[其他修饰符] <span class="keyword">static</span> 数据类型 变量名;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-静态变量的特点"><a href="#1-3-2-静态变量的特点" class="headerlink" title="1.3.2 静态变量的特点"></a>1.3.2 静态变量的特点</h4><ul><li><p>静态变量的默认值规则和实例变量一样。</p></li><li><p>静态变量值是所有对象共享。</p></li><li><p>静态变量在本类中，可以在任意方法、代码块、构造器中直接使用。</p></li><li><p>如果权限修饰符允许，在其他类中可以通过“<code>类名.静态变量</code>”直接访问，也可以通过“<code>对象.静态变量</code>”的方式访问（但是更推荐使用类名.静态变量的方式）。</p></li><li><p>静态变量的get/set方法也静态的，当局部变量与静态变量<code>重名时</code>，使用“<code>类名.静态变量</code>”进行区分。</p></li></ul><h4 id="1-3-3-举例"><a href="#1-3-3-举例" class="headerlink" title="1.3.3 举例"></a>1.3.3 举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//类变量</span></span><br><span class="line">    <span class="keyword">static</span> String nation;<span class="comment">//国籍</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chinese</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Chinese&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", nation='"</span> + nation + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chinese c1 = <span class="keyword">new</span> Chinese(<span class="string">"康师傅"</span>,<span class="number">36</span>);</span><br><span class="line">        c1.nation = <span class="string">"中华人民共和国"</span>;</span><br><span class="line"></span><br><span class="line">        Chinese c2 = <span class="keyword">new</span> Chinese(<span class="string">"老干妈"</span>,<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line"></span><br><span class="line">        System.out.println(Chinese.nation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的内存结构：（以经典的JDK6内存解析为例，此时静态变量存储在方法区）</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202314.png" alt="image-20220514183814514" style="zoom:67%;"><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> total;<span class="comment">//这里私有化，在类的外面必须使用get/set方法的方式来访问静态变量</span></span><br><span class="line">    <span class="keyword">static</span> String company; <span class="comment">//这里缺省权限修饰符，是为了方便类外以“类名.静态变量”的方式访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total++;</span><br><span class="line">        id = total;<span class="comment">//这里使用total静态变量的值为id属性赋值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">int</span> total)</span> </span>&#123;</span><br><span class="line">        Employee.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;company = "</span> + company + <span class="string">",id = "</span> + id + <span class="string">" ,name="</span> + name +<span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStaticVariable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//静态变量total的默认值是0</span></span><br><span class="line">        System.out.println(<span class="string">"Employee.total = "</span> + Employee.getTotal());</span><br><span class="line"></span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="string">"张三"</span>);</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="string">"李四"</span>);</span><br><span class="line">        System.out.println(e1);<span class="comment">//静态变量company的默认值是null</span></span><br><span class="line">        System.out.println(e2);<span class="comment">//静态变量company的默认值是null</span></span><br><span class="line">        System.out.println(<span class="string">"Employee.total = "</span> + Employee.getTotal());<span class="comment">//静态变量total值是2</span></span><br><span class="line"></span><br><span class="line">        Employee.company = <span class="string">"尚硅谷"</span>;</span><br><span class="line">        System.out.println(e1);<span class="comment">//静态变量company的值是尚硅谷</span></span><br><span class="line">        System.out.println(e2);<span class="comment">//静态变量company的值是尚硅谷</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//只要权限修饰符允许,虽然不推荐，但是也可以通过“对象.静态变量”的形式来访问</span></span><br><span class="line">        e1.company = <span class="string">"超级尚硅谷"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(e1);<span class="comment">//静态变量company的值是超级尚硅谷</span></span><br><span class="line">        System.out.println(e2);<span class="comment">//静态变量company的值是超级尚硅谷</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-内存解析"><a href="#1-3-4-内存解析" class="headerlink" title="1.3.4 内存解析"></a>1.3.4 内存解析</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202954.png" alt="image-20220104100145059"></p><h3 id="1-4-静态方法"><a href="#1-4-静态方法" class="headerlink" title="1.4 静态方法"></a>1.4 静态方法</h3><h4 id="1-4-1-语法格式"><a href="#1-4-1-语法格式" class="headerlink" title="1.4.1 语法格式"></a>1.4.1 语法格式</h4><p>用static修饰的成员方法就是静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> 类</span>&#123;</span><br><span class="line">[其他修饰符] <span class="keyword">static</span> 返回值类型 方法名(形参列表)&#123;</span><br><span class="line">        方法体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-静态方法的特点"><a href="#1-4-2-静态方法的特点" class="headerlink" title="1.4.2 静态方法的特点"></a>1.4.2 静态方法的特点</h4><ul><li>静态方法在本类的任意方法、代码块、构造器中都可以直接被调用。</li><li>只要权限修饰符允许，静态方法在其他类中可以通过“类名.静态方法“的方式调用。也可以通过”对象.静态方法“的方式调用（但是更推荐使用类名.静态方法的方式）。</li><li>在static方法内部只能访问类的static修饰的属性或方法，不能访问类的非static的结构。</li><li>静态方法可以被子类继承，但不能被子类重写。</li><li>静态方法的调用都只看编译时类型。</li><li>因为不需要实例就可以访问static方法，因此static方法内部不能有this，也不能有super。如果有重名问题，使用“类名.”进行区别。</li></ul><h4 id="1-4-3-举例"><a href="#1-4-3-举例" class="headerlink" title="1.4.3 举例"></a>1.4.3 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Father.method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Father.fun"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="comment">//    @Override //尝试重写静态方法，加上@Override编译报错，去掉Override不报错，但是也不是重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Son.fun"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStaticMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Father.method();</span><br><span class="line">        Son.method();<span class="comment">//继承静态方法</span></span><br><span class="line"></span><br><span class="line">        Father f = <span class="keyword">new</span> Son();</span><br><span class="line">        f.method();<span class="comment">//执行Father类中的method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-练习"><a href="#1-5-练习" class="headerlink" title="1.5 练习"></a>1.5 练习</h3><p>笔试题：如下程序执行会不会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//代码入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  <span class="comment">//静态的方法只能调用静态的方法和属性</span></span><br><span class="line">         Demo test = <span class="keyword">null</span>;  <span class="comment">//创建对象</span></span><br><span class="line">        test.hello(); <span class="comment">//对象.静态方法</span></span><br><span class="line">        Demo.hello(); <span class="comment">//类.静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">hello!</span><br><span class="line">hello!</span><br></pre></td></tr></table></figure><p>练习：</p><p>编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、“利率”、“最小余额”，定义封装这些属性的方法。<code>账号要自动生成。</code></p><p>编写主类，使用银行账户类，输入、输出3个储户的上述信息。</p><p>考虑：哪些属性可以设计成static属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package staticTest;</span><br><span class="line"></span><br><span class="line">public class Account &#123;</span><br><span class="line"></span><br><span class="line">    private int id; &#x2F;&#x2F;账号</span><br><span class="line"></span><br><span class="line">    private String password;&#x2F;&#x2F;密码</span><br><span class="line"></span><br><span class="line">    private double balance; &#x2F;&#x2F;余额</span><br><span class="line"></span><br><span class="line">    private static double interestRate;&#x2F;&#x2F;利率</span><br><span class="line"></span><br><span class="line">    private static double minBalance &#x3D; 1.0;&#x2F;&#x2F;最小余额</span><br><span class="line"></span><br><span class="line">    private static int init &#x3D; 1001;&#x2F;&#x2F;用于自动生成id的基数</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;无参构造器</span><br><span class="line">    public Account() &#123;</span><br><span class="line">        this.id &#x3D; init;</span><br><span class="line">        init++;</span><br><span class="line">        password &#x3D; &quot;000000&quot;;  &#x2F;&#x2F;初始化密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;有参构造器</span><br><span class="line">    public Account(String password, double balance) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">        this.balance &#x3D; balance;</span><br><span class="line">        this.id &#x3D; init;</span><br><span class="line">        init++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;set和get方法</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getBalance() &#123;</span><br><span class="line">        return balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBalance(double balance) &#123;</span><br><span class="line">        this.balance &#x3D; balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static double getInterestRate() &#123;</span><br><span class="line">        return interestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void setInterestRate(double interestRate) &#123;</span><br><span class="line">        Account.interestRate &#x3D; interestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static double getMinBalance() &#123;</span><br><span class="line">        return minBalance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void setMinBalance(double minBalance) &#123;</span><br><span class="line">        Account.minBalance &#x3D; minBalance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;重写toString方法</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Account&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, password&#x3D;&#39;&quot; + password + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, balance&#x3D;&quot; + balance +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-单例-Singleton-设计模式"><a href="#2-单例-Singleton-设计模式" class="headerlink" title="2. 单例(Singleton)设计模式"></a>2. 单例(Singleton)设计模式</h2><h3 id="2-1-设计模式概述"><a href="#2-1-设计模式概述" class="headerlink" title="2.1 设计模式概述"></a>2.1 设计模式概述</h3><p><strong>设计模式</strong>是在大量的<code>实践中总结</code>和<code>理论化</code>之后优选的代码结构、编程风格、以及解决问题的思考方式。设计模式免去我们自己再思考和摸索。就像是经典的棋谱，不同的棋局，我们用不同的棋谱。”套路”</p><p>经典的设计模式共有23种。每个设计模式均是特定环境下特定问题的处理方法。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202783.png" alt="image-20220520174508815" style="zoom: 80%;"><blockquote><p>简单工厂模式并不是23中经典模式的一种，是其中工厂方法模式的简化版</p></blockquote><blockquote><p>对软件设计模式的研究造就了一本可能是面向对象设计方面最有影响的书籍：《设计模式》：《Design Patterns: Elements of Reusable Object-Oriented Software》（即后述《设计模式》一书），由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 合著（Addison-Wesley，1995）。这几位作者常被称为”四人组（Gang of Four）”，而这本书也就被称为”四人组（或 GoF）”书。</p></blockquote><h3 id="2-2-何为单例模式"><a href="#2-2-何为单例模式" class="headerlink" title="2.2 何为单例模式"></a>2.2 何为单例模式</h3><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法。</p><h3 id="2-3-实现思路"><a href="#2-3-实现思路" class="headerlink" title="2.3 实现思路"></a>2.3 实现思路</h3><p>如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将<code>类的构造器的访问权限设置为private</code>，[就不能用new操作符在类的外部产生类的对象]，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，<code>只能调用该类的某个静态方法</code>以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的<code>该类对象的变量也必须定义成静态的</code>。</p><h3 id="2-4-单例模式的两种实现方式"><a href="#2-4-单例模式的两种实现方式" class="headerlink" title="2.4 单例模式的两种实现方式"></a>2.4 单例模式的两种实现方式</h3><h4 id="2-4-1-饿汉式"><a href="#2-4-1-饿汉式" class="headerlink" title="2.4.1 饿汉式"></a>2.4.1 饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.内部提供一个当前类的实例</span></span><br><span class="line">    <span class="comment">// 4.此实例也必须静态化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.提供公共的静态的方法，返回当前类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-懒汉式"><a href="#2-4-2-懒汉式" class="headerlink" title="2.4.2 懒汉式"></a>2.4.2 懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.内部提供一个当前类的实例</span></span><br><span class="line">    <span class="comment">// 4.此实例也必须静态化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single;</span><br><span class="line">    <span class="comment">// 3.提供公共的静态的方法，返回当前类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3-饿汉式-vs-懒汉式"><a href="#2-4-3-饿汉式-vs-懒汉式" class="headerlink" title="2.4.3 饿汉式 vs 懒汉式"></a>2.4.3 饿汉式 vs 懒汉式</h4><p>饿汉式：</p><ul><li>特点：<code>立即加载</code>，即在使用类的时候已经将对象创建完毕。</li><li>优点：实现起来<code>简单</code>；没有多线程安全问题。</li><li>缺点：当类被加载的时候，会初始化static的实例，静态变量被创建并分配内存空间，从这以后，这个static的实例便一直占着这块内存，直到类被卸载时，静态变量被摧毁，并释放所占有的内存。因此在某些特定条件下会<code>耗费内存</code>。</li></ul><p>懒汉式：</p><ul><li>特点：<code>延迟加载</code>，即在调用静态方法时实例才被创建。</li><li>优点：实现起来比较简单；当类被加载的时候，static的实例未被创建并分配内存空间，当静态方法第一次被调用时，初始化实例变量，并分配内存，因此在某些特定条件下会<code>节约内存</code>。</li><li>缺点：在多线程环境中，这种实现方法是完全错误的，<code>线程不安全</code>，根本不能保证单例的唯一性。<ul><li>说明：在多线程章节，会将懒汉式改造成线程安全的模式。</li></ul></li></ul><h3 id="2-5-单例模式的优点及应用场景"><a href="#2-5-单例模式的优点及应用场景" class="headerlink" title="2.5 单例模式的优点及应用场景"></a>2.5 单例模式的优点及应用场景</h3><p>由于单例模式只生成一个实例，减少了<code>系统性能开销</code>，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p><p>举例：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202410.png" alt="image-20220325222541203" style="zoom:67%;"><p><strong>应用场景</strong></p><ul><li><p>Windows的Task Manager (任务管理器)就是很典型的单例模式</p></li><li><p>Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</p></li><li><p>Application 也是单例的典型应用</p></li><li><p>应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只</p><p>能有一个实例去操作，否则内容不好追加。</p></li><li><p>数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。</p></li></ul><h2 id="3-理解main方法的语法"><a href="#3-理解main方法的语法" class="headerlink" title="3. 理解main方法的语法"></a>3. 理解main方法的语法</h2><p>由于JVM需要调用类的main()方法，所以该方法的访问权限必须是public，又因为JVM在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。 </p><p>又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员，这种情况，我们在之前的例子中多次碰到。</p><p><strong>命令行参数用法举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandPara</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"args["</span> + i + <span class="string">"] = "</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行程序CommandPara.java</span></span><br><span class="line">java CommandPara <span class="string">"Tom"</span> <span class="string">"Jerry"</span> <span class="string">"Shkstart"</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">args[<span class="number">0</span>] = Tom</span><br><span class="line">args[<span class="number">1</span>] = Jerry</span><br><span class="line">args[<span class="number">2</span>] = Shkstart</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202809.png" alt="image-20220325223215924"></p><p>IDEA工具：</p><p>（1）配置运行参数</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202014.png" alt="image-20211228101828718" style="zoom: 80%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202437.png" alt="image-20211228102022216" style="zoom:67%;"><p>（2）运行程序</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202122.png" alt="image-20211228102059327" style="zoom: 80%;"><p>笔试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处，Something类的文件名叫OtherThing.java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] something_to_do)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"Do something ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上述程序是否可以正常编译、运行？  如果改一下类名的话，其他事可以啊，没什么影响。</span></span><br></pre></td></tr></table></figure><h2 id="4-类的成员之四：代码块"><a href="#4-类的成员之四：代码块" class="headerlink" title="4. 类的成员之四：代码块"></a>4. 类的成员之四：代码块</h2><p>如果成员变量想要初始化的值不是一个硬编码的常量值，而是需要通过复杂的计算或读取文件、或读取运行环境信息等方式才能获取的一些值，该怎么办呢？此时，可以考虑<strong>代码块/初始化块</strong>。</p><ul><li><p>代码块(或初始化块)的<code>作用</code>：</p></li><li><p>对Java的类/对象进行初始化</p></li><li><p>代码块(或初始化块)的<code>分类</code>：</p><ul><li><p>静态代码块(static block): 用static修饰<strong>[只能被static修饰]</strong></p></li><li><p>非静态代码块:没有用static修饰</p></li></ul></li></ul><h3 id="4-1-静态代码块"><a href="#4-1-静态代码块" class="headerlink" title="4.1 静态代码块"></a>4.1 静态代码块</h3><p>如果想要为静态变量初始化，可以直接在静态变量的声明后面直接赋值，也可以使用静态代码块。</p><h4 id="4-1-1-语法格式"><a href="#4-1-1-语法格式" class="headerlink" title="4.1.1 语法格式"></a>4.1.1 语法格式</h4><p>在代码块的前面加static，就是静态代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 <span class="class"><span class="keyword">class</span> 类</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">        静态代码块</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-静态代码块的特点"><a href="#4-1-2-静态代码块的特点" class="headerlink" title="4.1.2 静态代码块的特点"></a>4.1.2 静态代码块的特点</h4><ol><li><p>可以有输出语句。</p><ol start="2"><li><p>可以对类的属性和类的声明进行初始化操作。</p></li><li><p>不可以对非静态的属性初始化。[即：不可以调用非静态的属性和方法]</p></li><li><p>若有多个静态的代码块，那么按照<strong>从上到下</strong>的顺序依次执行。</p></li><li><p>执行顺序: <strong>静态代码块 &gt; 非静态代码块。</strong></p></li><li><p>静态代码块<strong>随着类</strong>的加载而加载，且<strong>只执行一次</strong>。</p></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String country;  <span class="comment">//私有静态属性country</span></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">//私有非静态属性name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"非静态代码块，country = "</span> + country);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        country = <span class="string">"中国"</span>;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chinese</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStaticBlock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建TestStaticBlock类然后创建出country=null 执行静态代码块 country=中国 输出静态代码块</span></span><br><span class="line">        Chinese c1 = <span class="keyword">new</span> Chinese(<span class="string">"张三"</span>); <span class="comment">//创建对象 执行非静态代码块，country =中国</span></span><br><span class="line">        Chinese c2 = <span class="keyword">new</span> Chinese(<span class="string">"李四"</span>); <span class="comment">//创建对象 执行非静态代码块，country =中国</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">静态代码块</span><br><span class="line">非静态代码块，country = 中国</span><br><span class="line">非静态代码块，country = 中国</span><br></pre></td></tr></table></figure><h3 id="4-2-非静态代码块"><a href="#4-2-非静态代码块" class="headerlink" title="4.2 非静态代码块"></a>4.2 非静态代码块</h3><h4 id="4-2-1-语法格式"><a href="#4-2-1-语法格式" class="headerlink" title="4.2.1 语法格式"></a>4.2.1 语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 <span class="class"><span class="keyword">class</span> 类</span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        非静态代码块</span><br><span class="line">    &#125;</span><br><span class="line">    【修饰符】 构造器名()&#123;</span><br><span class="line">    <span class="comment">// 实例初始化代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    【修饰符】 构造器名(参数列表)&#123;</span><br><span class="line">        <span class="comment">// 实例初始化代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-非静态代码块的作用"><a href="#4-2-2-非静态代码块的作用" class="headerlink" title="4.2.2 非静态代码块的作用"></a>4.2.2 非静态代码块的作用</h4><p>和构造器一样，也是用于实例变量的初始化等操作。</p><h4 id="4-2-3-非静态代码块的意义"><a href="#4-2-3-非静态代码块的意义" class="headerlink" title="4.2.3 非静态代码块的意义"></a>4.2.3 非静态代码块的意义</h4><p>如果<strong>多个重载的构造器</strong>有<strong>公共代码[先于构造器其他代码执行的]</strong>，那么可以将这部分代码 —-&gt; <strong>非静态代码块</strong>，减少冗余代码。</p><h4 id="4-2-4-非静态代码块的执行特点"><a href="#4-2-4-非静态代码块的执行特点" class="headerlink" title="4.2.4 非静态代码块的执行特点"></a>4.2.4 非静态代码块的执行特点</h4><ol><li>可以有输出语句。<ol start="2"><li>可以对类的属性、类的声明进行初始化操作。</li><li>可以调用 非静态的结构 + 静态的变量或方法。</li><li>若有多个非静态的代码块，那么按照<strong>从上到下</strong>的顺序依次执行。</li><li>每次创建对象的时候，都会执行一次。</li><li>执行顺序:<strong>静态代码块 &gt; 非静态代码块 &gt; 构造器</strong>。</li></ol></li></ol><h3 id="4-3-举例"><a href="#4-3-举例" class="headerlink" title="4.3 举例"></a>4.3 举例</h3><p><strong>举例1：</strong></p><p>（1）声明User类，</p><ul><li><p>包含属性：username（String类型），password（String类型），registrationTime（long类型），私有化</p></li><li><p>包含get/set方法，其中registrationTime没有set方法</p></li><li><p>包含无参构造，</p><ul><li>输出“新用户注册”，</li><li>registrationTime赋值为当前系统时间，</li><li>username就默认为当前系统时间值，</li><li>password默认为“123456”</li></ul></li><li><p>包含有参构造(String username, String password)，</p><ul><li>输出“新用户注册”，</li><li>registrationTime赋值为当前系统时间，</li><li>username和password由参数赋值</li></ul></li><li><p>包含public String getInfo()方法，返回：“用户名：xx，密码：xx，注册时间：xx”</p></li></ul><p>（2）编写测试类，测试类main方法的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(u1.getInfo());</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"song"</span>,<span class="string">"8888"</span>);</span><br><span class="line">        System.out.println(u2.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">新用户注册</span><br><span class="line">用户名:larkkkkkkk,密码:<span class="number">123456</span>,注册时间:<span class="number">1696858612390</span></span><br><span class="line">新用户注册</span><br><span class="line">用户名:song,密码:<span class="number">8888</span>,注册时间:<span class="number">1696858612400</span></span><br></pre></td></tr></table></figure><p>如果不用非静态代码块，User类是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> registrationTime;</span><br><span class="line">    <span class="comment">//属性的set和get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getRegistrationTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registrationTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"新用户注册"</span>);</span><br><span class="line">        <span class="keyword">this</span>.registrationTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("新用户注册");</span></span><br><span class="line">        <span class="comment">//this.registrationTime=System.currentTimeMillis();</span></span><br><span class="line">        username=<span class="string">"larkkkkkkk"</span>;</span><br><span class="line">        password=<span class="string">"123456"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("新用户注册");</span></span><br><span class="line">        <span class="comment">//this.registrationTime=System.currentTimeMillis();</span></span><br><span class="line">        <span class="keyword">this</span>.username=username;</span><br><span class="line">        <span class="keyword">this</span>.password=password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"用户名:"</span>+getUsername()+<span class="string">",密码:"</span>+getPassword()+<span class="string">",注册时间:"</span>+getRegistrationTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果提取构造器公共代码到非静态代码块，User类是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非静态代码块</span></span><br><span class="line">   &#123;</span><br><span class="line">       System.out.println(<span class="string">"新用户注册"</span>);</span><br><span class="line">       registrationTime = System.currentTimeMillis();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       username = registrationTime+<span class="string">""</span>;</span><br><span class="line">       password = <span class="string">"123456"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.username = username;</span><br><span class="line">       <span class="keyword">this</span>.password = password;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>举例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = DBCPTest.class.getClassLoader().getResourceAsStream("dbcp.properties");</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="comment">//调用BasicDataSourceFactory的静态方法，获取数据源。</span></span><br><span class="line">dataSource = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-小结：实例变量赋值顺序"><a href="#4-4-小结：实例变量赋值顺序" class="headerlink" title="4.4 小结：实例变量赋值顺序"></a>4.4 小结：实例变量赋值顺序</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202138.png" alt="image-20220325230208941" style="zoom:67%;"><h3 id="4-5-练习"><a href="#4-5-练习" class="headerlink" title="4.5 练习"></a>4.5 练习</h3><p>练习1：分析加载顺序   — <strong>由父后子，静态先行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Root的静态初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Root的普通初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Root</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Root的无参数的构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mid</span> <span class="keyword">extends</span> <span class="title">Root</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mid的静态初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Mid的普通初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//没写this(参数列表)和super(参数列表)  --默认读取父类的无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">"Mid的无参数的构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mid</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();<span class="comment">//调用无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">"Mid的带参数构造器，其参数值："</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Mid</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Leaf的静态初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Leaf的普通初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"尚硅谷"</span>); <span class="comment">//通过super调用父类中有一个字符串参数的构造器</span></span><br><span class="line">        System.out.println(<span class="string">"Leaf的构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeafTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个子类对象</span></span><br><span class="line">        <span class="keyword">new</span> Leaf();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">最终输出:</span><br><span class="line"><span class="comment">//顺序: 静态代码块 &gt; 非静态代码块 &gt; 构造器</span></span><br><span class="line"><span class="comment">//先加载父类</span></span><br><span class="line">Root的静态初始化块</span><br><span class="line">Mid的静态初始化块</span><br><span class="line">Leaf的静态初始化块</span><br><span class="line"><span class="comment">//后面的就根据类的调用顺序执行   </span></span><br><span class="line"><span class="comment">//加载root类    </span></span><br><span class="line">Root的普通初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line"><span class="comment">//加载Mid类</span></span><br><span class="line">Mid的普通初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：尚硅谷</span><br><span class="line"><span class="comment">//最终加载最小子类Leaf</span></span><br><span class="line">Leaf的普通初始化块</span><br><span class="line">Leaf的构造器</span><br></pre></td></tr></table></figure><p>练习2：分析加载顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"11111111111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"22222222222"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"33333333333"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"44444444444"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"55555555555"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"66666666666"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行顺序: 静态代码块 &gt; 非静态代码块 &gt; 构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"77777777777"</span>);</span><br><span class="line">        System.out.println(<span class="string">"************************"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建子类的匿名对象[只创建一次]</span></span><br><span class="line">        <span class="keyword">new</span> Son();</span><br><span class="line">        System.out.println(<span class="string">"************************"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建子类的匿名对象[只创建一次]</span></span><br><span class="line">        <span class="keyword">new</span> Son();</span><br><span class="line">        System.out.println(<span class="string">"************************"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建父类的匿名对象[只创建一次]</span></span><br><span class="line">        <span class="keyword">new</span> Father();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">最终输出:</span><br><span class="line"><span class="comment">//先初始化父类和子类的静态代码块(只执行一次)</span></span><br><span class="line"><span class="number">11111111111</span></span><br><span class="line"><span class="number">44444444444</span></span><br><span class="line"><span class="number">77777777777</span></span><br><span class="line">************************</span><br><span class="line"><span class="comment">//先执行父类的非静态代码块和构造器</span></span><br><span class="line"><span class="number">22222222222</span></span><br><span class="line"><span class="number">33333333333</span></span><br><span class="line"><span class="comment">//后执行子类的非静态代码块和构造器</span></span><br><span class="line"><span class="number">55555555555</span></span><br><span class="line"><span class="number">66666666666</span></span><br><span class="line">************************</span><br><span class="line"><span class="comment">//先执行父类的非静态代码块和构造器</span></span><br><span class="line"><span class="number">22222222222</span></span><br><span class="line"><span class="number">33333333333</span></span><br><span class="line"><span class="comment">//后执行子类的非静态代码块和构造器</span></span><br><span class="line"><span class="number">55555555555</span></span><br><span class="line"><span class="number">66666666666</span></span><br><span class="line">************************</span><br><span class="line"><span class="number">22222222222</span></span><br><span class="line"><span class="number">33333333333</span></span><br></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="comment">//私有静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = getNum(<span class="string">"（1）i"</span>);</span><br><span class="line">    <span class="comment">//私有非静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j = getNum(<span class="string">"（2）j"</span>);</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        print(<span class="string">"（3）父类静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">"（4）父类非静态代码块，又称为构造代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类无参构造器</span></span><br><span class="line">    Fu()&#123;</span><br><span class="line">        print(<span class="string">"（5）父类构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//print方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(str + <span class="string">"-&gt;"</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        print(str);</span><br><span class="line">        <span class="keyword">return</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="comment">//私有静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> k = getNum(<span class="string">"（6）k"</span>);</span><br><span class="line">    <span class="comment">//私有非静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> h = getNum(<span class="string">"（7）h"</span>);</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        print(<span class="string">"（8）子类静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">"（9）子类非静态代码块，又称为构造代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子类无参构造器</span></span><br><span class="line">    Zi()&#123;</span><br><span class="line">        <span class="comment">//默认调用父类无参构造器 super()</span></span><br><span class="line">        print(<span class="string">"（10）子类构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//print方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(str + <span class="string">"-&gt;"</span> + k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        print(str);</span><br><span class="line">        <span class="keyword">return</span> ++k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建子类对象</span></span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">最终输出:</span><br><span class="line"><span class="comment">//先执行父类和子类的创建 静态的东西</span></span><br><span class="line">（<span class="number">1</span>）i-&gt;<span class="number">0</span></span><br><span class="line">（<span class="number">3</span>）父类静态代码块-&gt;<span class="number">1</span></span><br><span class="line">（<span class="number">6</span>）k-&gt;<span class="number">0</span></span><br><span class="line">（<span class="number">8</span>）子类静态代码块-&gt;<span class="number">1</span></span><br><span class="line"><span class="comment">//再执行创建对象时从父类-&gt;子类实例化</span></span><br><span class="line">    <span class="comment">//父类的实例化属性</span></span><br><span class="line"><span class="comment">//父类的非静态代码块</span></span><br><span class="line">    <span class="comment">//父类的构造器</span></span><br><span class="line">（<span class="number">2</span>）j-&gt;<span class="number">1</span></span><br><span class="line">（<span class="number">4</span>）父类非静态代码块，又称为构造代码块-&gt;<span class="number">2</span></span><br><span class="line">（<span class="number">5</span>）父类构造器-&gt;<span class="number">2</span></span><br><span class="line">（<span class="number">7</span>）h-&gt;<span class="number">1</span></span><br><span class="line">（<span class="number">9</span>）子类非静态代码块，又称为构造代码块-&gt;<span class="number">2</span></span><br><span class="line">（<span class="number">10</span>）子类构造器-&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="5-final关键字"><a href="#5-final关键字" class="headerlink" title="5. final关键字"></a>5. final关键字</h2><h3 id="5-1-final的意义"><a href="#5-1-final的意义" class="headerlink" title="5.1 final的意义"></a>5.1 final的意义</h3><p>final：最终的，不可更改的</p><h3 id="5-2-final的使用"><a href="#5-2-final的使用" class="headerlink" title="5.2 final的使用"></a>5.2 final的使用</h3><h4 id="5-2-1-final修饰类"><a href="#5-2-1-final修饰类" class="headerlink" title="5.2.1 final修饰类"></a>5.2.1 final修饰类</h4><p>表示这个类不能被继承，没有子类。提高安全性，提高程序的可读性。</p><p>例如：String类、System类、StringBuffer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Eunuch</span></span>&#123;<span class="comment">//太监类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Eunuch</span></span>&#123;<span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-final修饰方法"><a href="#5-2-2-final修饰方法" class="headerlink" title="5.2.2 final修饰方法"></a>5.2.2 final修饰方法</h4><p>表示这个方法不能被子类重写。</p><p>例如：Object类中的getClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"father"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;<span class="comment">//错误</span></span><br><span class="line">System.out.println(<span class="string">"son"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-final修饰变量"><a href="#5-2-3-final修饰变量" class="headerlink" title="5.2.3 final修饰变量"></a>5.2.3 final修饰变量</h4><p>final修饰某个变量（成员变量或局部变量），一旦赋值，它的值就不能被修改，即常量，常量名建议使用大写字母。</p><p>例如：final double MY_PI = 3.14;</p><blockquote><p>如果某个成员变量用final修饰后，<strong>没有set方法 + 必须初始化</strong>（可以显式赋值、或在初始化块赋值、实例变量还可以在构造器中赋值）</p></blockquote><ul><li>修饰成员变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> totalNumber = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> ID;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ID = ++totalNumber; <span class="comment">// 可在构造器中给final修饰的“变量”赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(t.ID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修饰局部变量：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFinal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> MIN_SCORE ;</span><br><span class="line">        MIN_SCORE = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCORE = <span class="number">100</span>;</span><br><span class="line">        MAX_SCORE = <span class="number">200</span>; <span class="comment">//非法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>错误演示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String INFO = <span class="string">"atguigu"</span>;  <span class="comment">//声明常量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//The final field A.INFO cannot be  assigned</span></span><br><span class="line">        <span class="comment">//INFO = "尚硅谷";   //不能被赋值 修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-笔试题"><a href="#5-3-笔试题" class="headerlink" title="5.3 笔试题"></a>5.3 笔试题</h3><p>题1：排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;  <span class="comment">//不能修改</span></span><br><span class="line">        <span class="comment">// return x + 1;  //可以 因为x没被修改 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题2：排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Other o = <span class="keyword">new</span> Other();</span><br><span class="line">        <span class="keyword">new</span> Something().addOne(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> Other o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// o = new Other();  //不能重新new一个  只能用o调用方法/调用属性</span></span><br><span class="line">        o.i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-抽象类与抽象方法-或abstract关键字"><a href="#6-抽象类与抽象方法-或abstract关键字" class="headerlink" title="6. 抽象类与抽象方法(或abstract关键字)"></a>6. 抽象类与抽象方法(或abstract关键字)</h2><h3 id="6-1-由来"><a href="#6-1-由来" class="headerlink" title="6.1 由来"></a>6.1 由来</h3><p>举例1：</p><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它<strong>没有具体的实例</strong>，这样的类叫做抽象类。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202253.png" alt="image-20220325231608838"></p><p>举例2：</p><p>我们声明一些几何图形类：圆、矩形、三角形类等，发现这些类都有共同特征：求面积、求周长。那么这些共同特征应该抽取到一个共同父类：几何图形类中。但是这些方法在父类中又<code>无法给出具体的实现</code>，而是应该交给子类各自具体实现。那么父类在声明这些方法时，就<strong>只有方法签名，没有方法体</strong>，我们把没有方法体的方法称为<strong>抽象方法</strong>。Java语法规定，包含抽象方法的类必须是<strong>抽象类</strong>。</p><h3 id="6-2-语法格式"><a href="#6-2-语法格式" class="headerlink" title="6.2 语法格式"></a>6.2 语法格式</h3><ul><li><strong>抽象类</strong>：被abstract修饰的类。</li><li><strong>抽象方法</strong>：被abstract修饰没有方法体的方法。</li></ul><p>抽象类的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[权限修饰符] <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">[权限修饰符] <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[其他修饰符] <span class="keyword">abstract</span> 返回值类型 方法名([形参列表]);</span><br></pre></td></tr></table></figure><blockquote><p>注意：抽象方法没有方法体</p></blockquote><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202268.png" alt="image-20220517204707255"></p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"小猫吃鱼和猫粮"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat(); </span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 调用eat方法</span></span><br><span class="line">        c.eat();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h3 id="6-3-使用说明"><a href="#6-3-使用说明" class="headerlink" title="6.3 使用说明"></a>6.3 使用说明</h3><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p><p>抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体。若没有重写全部的抽象方法，仍为抽象类。</p></blockquote></li><li><p>抽象类中，也有构造方法，是供子类创建对象时，初始化父类成员变量使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()或手动的super(实参列表)，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li></ol><h3 id="6-4-注意事项"><a href="#6-4-注意事项" class="headerlink" title="6.4 注意事项"></a>6.4 注意事项</h3><ul><li><p>不能用abstract修饰变量、代码块、构造器；</p></li><li><p>不能用abstract修饰私有方法、静态方法、final的方法、final的类。</p></li><li><blockquote><p>私有方法不能重写   –私有方法不能被重写但是abstract方法必须让子类重写<br>避免静态方法使用类进行调用  –方法只能被①类[一定是static方法]和②对象调用[抽象类不能实例化对象]  我现在abstract不能调用类 所以方法也不能是static方法<br>final的方法不能被重写   —-抽象类必须有子类重写所有抽象方法<br>final修饰的类不能有子类  –抽象类必须有子类重写所有抽象方法</p></blockquote></li></ul><h3 id="6-5-应用举例1"><a href="#6-5-应用举例1" class="headerlink" title="6.5 应用举例1"></a>6.5 应用举例1</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202075.png" alt="image-20220325232847872"></p><p>在航运公司系统中，Vehicle类需要定义两个方法分别<code>计算运输工具的燃料效率</code>和<code>行驶距离</code>。</p><p><strong>问题：</strong>卡车(Truck)和驳船(RiverBarge)的燃料效率和行驶距离的计算方法完全不同。Vehicle类不能提供计算方法，但子类可以。</p><p><strong>解决方案：</strong>Java允许类设计者指定：超类声明一个方法但不提供实现，该方法的实现由子类提供。这样的方法称为抽象方法。有一个或更多抽象方法的类称为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Vehicle是一个抽象类，有两个抽象方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">calcFuelEfficiency</span><span class="params">()</span></span>;<span class="comment">//计算燃料效率的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">calcTripDistance</span><span class="params">()</span></span>;<span class="comment">//计算行驶距离的抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//卡车</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcFuelEfficiency</span><span class="params">( )</span></span>&#123;</span><br><span class="line">        <span class="comment">//写出计算卡车的燃料效率的具体方法  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcTripDistance</span><span class="params">( )</span></span>&#123;  </span><br><span class="line">        <span class="comment">//写出计算卡车行驶距离的具体方法   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//驳船</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RiverBarge</span> <span class="keyword">extends</span> <span class="title">Vehicle</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcFuelEfficiency</span><span class="params">( )</span></span>&#123;</span><br><span class="line">         <span class="comment">//写出计算驳船的燃料效率的具体方法  </span></span><br><span class="line">     &#125; </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcTripDistance</span><span class="params">( )</span></span>&#123; </span><br><span class="line">         <span class="comment">//写出计算驳船行驶距离的具体方法</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-应用举例2：模板方法设计模式-TemplateMethod"><a href="#6-6-应用举例2：模板方法设计模式-TemplateMethod" class="headerlink" title="6.6 应用举例2：模板方法设计模式(TemplateMethod)"></a>6.6 应用举例2：模板方法设计模式(TemplateMethod)</h3><p>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><p><strong>解决的问题</strong>：</p><ul><li><p>当功能内部一部分实现是确定的，另一部分实现是不确定的【这部分暴露出去给子类实现】。</p></li><li><p>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p></li></ul><p><strong>类比举例：</strong>英语六级模板</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202034.png" alt="image-20220503145003315" style="zoom: 80%;"><p>制作月饼的模板：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202504.png" alt="image-20220517205013997" style="zoom: 50%;"><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类要是一个抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        code();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"执行时间是："</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTemplate</span> <span class="keyword">extends</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="comment">//子类必须重写父类所有抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类的应用：模板方法的设计模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BankTemplateMethod btm = <span class="keyword">new</span> DrawMoney();  <span class="comment">//子类-取款类</span></span><br><span class="line">        btm.process();</span><br><span class="line"></span><br><span class="line">        BankTemplateMethod btm2 = <span class="keyword">new</span> ManageMoney();  <span class="comment">//子类-理财类</span></span><br><span class="line">        btm2.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取号排队"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"反馈评分"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>; <span class="comment">// 办理具体的业务 //钩子方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取号</span></span><br><span class="line">        <span class="keyword">this</span>.takeNumber();</span><br><span class="line">        <span class="comment">//办理业务</span></span><br><span class="line">        <span class="keyword">this</span>.transact();<span class="comment">// 具体执行时，挂哪个子类，就执行哪个子类的实现代码</span></span><br><span class="line">        <span class="comment">//评分</span></span><br><span class="line">        <span class="keyword">this</span>.evaluate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我要取款！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManageMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我要理财！我这里有2000万美元!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">最终输出:</span><br><span class="line">取号排队</span><br><span class="line">我要取款！！！</span><br><span class="line">反馈评分</span><br><span class="line">取号排队</span><br><span class="line">我要理财！我这里有<span class="number">2000</span>万美元!!</span><br><span class="line">反馈评分</span><br></pre></td></tr></table></figure><p>模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有：</p><ul><li><p>数据库访问的封装</p></li><li><p>Junit单元测试</p></li><li><p>JavaWeb的Servlet中关于doGet/doPost方法调用</p></li><li><p>Hibernate中模板程序</p></li><li><p>Spring中JDBCTemlate、HibernateTemplate等</p></li></ul><h3 id="6-7-思考与练习"><a href="#6-7-思考与练习" class="headerlink" title="6.7 思考与练习"></a>6.7 思考与练习</h3><p><strong>思考：</strong></p><p>问题1：为什么抽象类不可以使用final关键字声明？  — 因为final类是不可以被继承的，abstract类必须让子类重写抽象方法</p><p>问题2：一个抽象类中可以定义构造器吗？   — 可以，要留给子类到时候继承父类成员</p><p>问题3：抽象类就是比普通类多定义了抽象方法，除了不能直接进行类的实例化操作之外，并没有任何的不同？ — 确实</p><p><strong>练习1：</strong></p><p>编写一个Employee类，声明为抽象类，包含如下三个属性：name，id，salary。提供必要的构造器和抽象方法：work()。</p><p>对于Manager类来说，他既是员工，还具有奖金(bonus)的属性。</p><p>请使用继承的思想，设计CommonEmployee类和Manager类，要求类中提供必要的方法进行属性访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;抽象类</span><br><span class="line">public abstract class Employee &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int id;</span><br><span class="line">    private double salary;</span><br><span class="line"></span><br><span class="line">    public  Employee()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Employee(String name, int id, double salary) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.salary &#x3D; salary;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;抽象方法</span><br><span class="line">    public abstract void work();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;子类</span><br><span class="line">public class Manager extends Employee&#123;  &#x2F;&#x2F;继承Employee类</span><br><span class="line">    private double bonus;</span><br><span class="line">&#x2F;&#x2F;必须重写</span><br><span class="line">    @Override</span><br><span class="line">    public void work() &#123;</span><br><span class="line">        System.out.println(&quot;我是管理人员，我需要努力工作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：软件外包公司外派管理</strong></p><p>有一家软件外包公司，可以外派开发人员，该公司有两个角色：普通开发人员Developer和项目经理Manager。他们的关系如下图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212202972.png" alt="image-20220504164925878"></p><p>普通开发人员的工作内容是“开发项目”，项目经理的工作内容是“项目管理”。对外的报价是普通开发人员每天500,元，超过60天每天400元。项目经理每天800元，超过60天每天700元。</p><p>有一家银行需要1名项目经理、2名开发人员，现场开发90天，计算银行需要付给软件公司的总金额。</p><p>提示：创建数组 Employee[] emps = new Employee[3]。其中存储驻场的3名员工。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;抽象类</span><br><span class="line">public abstract class Employee &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Employee(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;抽象方法</span><br><span class="line">    public abstract void work();</span><br><span class="line">    public abstract double calMoney(int days);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Developer extends Employee&#123;</span><br><span class="line">    private int workExperiences&#x3D;500;</span><br><span class="line"></span><br><span class="line">    public Developer(String name,int age)&#123;</span><br><span class="line">        super(name,age);  &#x2F;&#x2F;调用父类的有参构造器</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void work() &#123;</span><br><span class="line">        System.out.println(&quot;开发项目&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double calMoney(int days) &#123;</span><br><span class="line">        int sum&#x3D;0;</span><br><span class="line">        &#x2F;&#x2F;看看超没超过60天</span><br><span class="line">        int quyu&#x3D;days%60;</span><br><span class="line">        if(quyu&gt;0)&#123;  &#x2F;&#x2F;如果超过60天</span><br><span class="line">            sum+&#x3D;(this.workExperiences*60+400*(quyu));</span><br><span class="line">            return sum;</span><br><span class="line">        &#125;</span><br><span class="line">        return this.workExperiences*days;  &#x2F;&#x2F;默认是没超过60天</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Manager extends Employee&#123;</span><br><span class="line">    private int manageExperiences&#x3D;800;</span><br><span class="line"></span><br><span class="line">    public Manager(String name,int age) &#123;</span><br><span class="line">        super(name, age);  &#x2F;&#x2F;调用父类的有参构造器</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void work() &#123;</span><br><span class="line">        System.out.println(&quot;项目管理&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double calMoney(int days) &#123;</span><br><span class="line">        int sum&#x3D;0;</span><br><span class="line">        &#x2F;&#x2F;看看超没超过60天</span><br><span class="line">        int quyu&#x3D;days%60;</span><br><span class="line">        if(quyu&gt;0)&#123;</span><br><span class="line">            sum+&#x3D;(this.manageExperiences*60+700*(quyu));</span><br><span class="line">            return sum;</span><br><span class="line">        &#125;</span><br><span class="line">        return this.manageExperiences*days;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Employee[] emps&#x3D;new Employee[3];</span><br><span class="line">        &#x2F;&#x2F;一名项目经理</span><br><span class="line">        emps[0]&#x3D;new Manager(&quot;项目经理&quot;,26);</span><br><span class="line">        &#x2F;&#x2F;两名开发人员</span><br><span class="line">        emps[1]&#x3D;new Developer(&quot;开发人员1&quot;,30);</span><br><span class="line">        emps[2]&#x3D;new Developer(&quot;开发人员2&quot;,30);</span><br><span class="line">        System.out.println(emps[0].calMoney(90)+emps[1].calMoney(90)+emps[2].calMoney(90));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>创建父类Shape，包含绘制形状的抽象方法draw()。</p><p>创建Shape的子类Circle和Rectangle，重写draw()方法，绘制圆形和矩形。</p><p>绘制多个圆形和矩形。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;抽象类</span><br><span class="line">public abstract class Shape &#123;</span><br><span class="line">&#x2F;&#x2F;抽象方法</span><br><span class="line">    public abstract void draw();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;子类</span><br><span class="line">public class Circle extends Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;绘制圆形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;子类</span><br><span class="line">public class Rectangle extends Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;绘制矩形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习4：</strong></p><p>1、声明抽象父类Person，包含抽象方法public abstract void eat();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Person&#123;</span><br><span class="line">    &#x2F;&#x2F;抽象方法</span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、声明子类中国人Chinese，重写抽象方法，打印用筷子吃饭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Chinese extends Person&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;用筷子吃饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、声明子类美国人American，重写抽象方法，打印用刀叉吃饭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class American extends Person&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;用刀叉吃饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、声明子类印度人Indian，重写抽象方法，打印用手抓饭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Indian extends Person&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;用手抓饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、声明测试类PersonTest，创建Person数组，存储各国人对象，并遍历数组，调用eat()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class PersonTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person[] p1&#x3D;new Person[3];</span><br><span class="line">        p1[0]&#x3D;new Indian();</span><br><span class="line">        p1[0].eat();</span><br><span class="line">        p1[1]&#x3D;new Chinese();</span><br><span class="line">        p1[1].eat();</span><br><span class="line">        p1[2]&#x3D;new American();</span><br><span class="line">        p1[2].eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习5：工资系统设计</strong></p><p>编写工资系统，实现不同类型员工(多态)的按月发放工资。如果当月出现某个Employee对象的生日，则将该雇员的工资增加100元。</p><p>实验说明：</p><p>（1）定义一个Employee类，该类包含：</p><p>private成员变量name,number,birthday，其中birthday 为MyDate类的对象；</p><p>abstract方法earnings()；</p><p>toString()方法输出对象的name,number和birthday。</p><p>（2）MyDate类包含:</p><p>private成员变量year,month,day ；</p><p>toDateString()方法返回日期对应的字符串：xxxx年xx月xx日</p><p>（3）定义SalariedEmployee类继承Employee类，实现按月计算工资的员工处理。该类包括：private成员变量monthlySalary；</p><p>实现父类的抽象方法earnings(),该方法返回monthlySalary值；toString()方法输出员工类型信息及员工的name，number,birthday。</p><p>（4）参照SalariedEmployee类定义HourlyEmployee类，实现按小时计算工资的员工处理。该类包括：</p><p>private成员变量wage和hour；</p><p>实现父类的抽象方法earnings(),该方法返回wage*hour值；</p><p>toString()方法输出员工类型信息及员工的name，number,birthday。</p><p>（5）定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各类雇员对象的引用。利用循环结构遍历数组元素，输出各个对象的类型,name,number,birthday,以及该对象生日。当键盘输入本月月份值时，如果本月是某个Employee对象的生日，还要输出增加工资信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提示：</span></span><br><span class="line"><span class="comment">//定义People类型的数组People c1[]=new People[10];</span></span><br><span class="line"><span class="comment">//数组元素赋值</span></span><br><span class="line">c1[<span class="number">0</span>]=<span class="keyword">new</span> People(<span class="string">"John"</span>,<span class="string">"0001"</span>,<span class="number">20</span>);</span><br><span class="line">c1[<span class="number">1</span>]=<span class="keyword">new</span> People(<span class="string">"Bob"</span>,<span class="string">"0002"</span>,<span class="number">19</span>);</span><br><span class="line"><span class="comment">//若People有两个子类Student和Officer，则数组元素赋值时，可以使父类类型的数组元素指向子类。</span></span><br><span class="line">c1[<span class="number">0</span>]=<span class="keyword">new</span> Student(<span class="string">"John"</span>,<span class="string">"0001"</span>,<span class="number">20</span>,<span class="number">85.0</span>);</span><br><span class="line">c1[<span class="number">1</span>]=<span class="keyword">new</span> Officer(<span class="string">"Bob"</span>,<span class="string">"0002"</span>,<span class="number">19</span>,<span class="number">90.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> number, MyDate birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyDate <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(MyDate birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">earnings</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name = "</span> + name + <span class="string">",number = "</span> + number +<span class="string">", birthday = "</span> + birthday.toDateString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class SalariedEmployee extends Employee&#123;</span><br><span class="line">    private double monthlySalary;&#x2F;&#x2F;月工资</span><br><span class="line"></span><br><span class="line">    public SalariedEmployee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double earnings() &#123;</span><br><span class="line">        return monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SalariedEmployee(String name, int number, MyDate birthday, double monthlySalary) &#123;</span><br><span class="line">        super(name, number, birthday);</span><br><span class="line">        this.monthlySalary &#x3D; monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMonthlySalary(double monthlySalary) &#123;</span><br><span class="line">        this.monthlySalary &#x3D; monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;SalariedEmployee[&quot; + super.toString() + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class HourlyEmployee extends Employee&#123;</span><br><span class="line">    private double wage;&#x2F;&#x2F;单位小时的工资</span><br><span class="line">    private int hour;&#x2F;&#x2F;月工作的小时数</span><br><span class="line"></span><br><span class="line">    public HourlyEmployee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HourlyEmployee(String name, int number, MyDate birthday, double wage, int hour) &#123;</span><br><span class="line">        super(name, number, birthday);</span><br><span class="line">        this.wage &#x3D; wage;</span><br><span class="line">        this.hour &#x3D; hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getWage() &#123;</span><br><span class="line">        return wage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWage(double wage) &#123;</span><br><span class="line">        this.wage &#x3D; wage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getHour() &#123;</span><br><span class="line">        return hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHour(int hour) &#123;</span><br><span class="line">        this.hour &#x3D; hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double earnings() &#123;</span><br><span class="line">        return wage * hour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;HourlyEmployee[&quot; + super.toString() + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class MyDate &#123;</span><br><span class="line">    private int year;</span><br><span class="line">    private int month;</span><br><span class="line">    private int day;</span><br><span class="line">    public MyDate() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyDate(int year, int month, int day) &#123;</span><br><span class="line">        this.year &#x3D; year;</span><br><span class="line">        this.month &#x3D; month;</span><br><span class="line">        this.day &#x3D; day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getYear() &#123;</span><br><span class="line">        return year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setYear(int year) &#123;</span><br><span class="line">        this.year &#x3D; year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getMonth() &#123;</span><br><span class="line">        return month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMonth(int month) &#123;</span><br><span class="line">        this.month &#x3D; month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getDay() &#123;</span><br><span class="line">        return day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDay(int day) &#123;</span><br><span class="line">        this.day &#x3D; day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toDateString()&#123;</span><br><span class="line">        return year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class PayrollSystem &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner scan &#x3D; new Scanner(System.in);</span><br><span class="line">        Employee[] emps &#x3D; new Employee[2];</span><br><span class="line"></span><br><span class="line">        emps[0] &#x3D; new SalariedEmployee(&quot;张小亮&quot;,1001,new MyDate(1992,12,21),18000);</span><br><span class="line"></span><br><span class="line">        emps[1] &#x3D; new HourlyEmployee(&quot;侯少鹏&quot;,1002,new MyDate(1997,11,12),240,100);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;请输入当前的月份：&quot;);</span><br><span class="line">        int month &#x3D; scan.nextInt();</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; emps.length; i++) &#123;</span><br><span class="line">            System.out.println(emps[i].toString());</span><br><span class="line">            System.out.println(&quot;工资为：&quot; + emps[i].earnings());</span><br><span class="line">            if(month &#x3D;&#x3D; emps[i].getBirthday().getMonth())&#123;</span><br><span class="line">                System.out.println(&quot;生日快乐！加薪100&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-接口-interface"><a href="#7-接口-interface" class="headerlink" title="7. 接口(interface)"></a>7. 接口(interface)</h2><h3 id="7-1-类比"><a href="#7-1-类比" class="headerlink" title="7.1 类比"></a>7.1 类比</h3><p>生活中大家每天都在用USB接口，那么USB接口与我们今天要学习的接口有什么相同点呢？</p><pre><code>USB，（Universal Serial Bus，通用串行总线）是Intel公司开发的总线架构，使得在计算机上添加串行设备（鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等）非常容易。</code></pre><p>其实，不管是电脑上的USB插口，还是其他设备上的USB插口都只是<code>遵循了USB规范</code>的一种具体设备而已。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203030.png" alt="bbcc80f541000c71b81650cfaa770c86"></p><p>只要设备遵循USB规范的，那么就可以与电脑互联，并正常通信。至于这个设备、电脑是哪个厂家制造的，内部是如何实现的，我们都无需关心。</p><p>Java的软件系统会有很多模块组成，那么各个模块之间也应该采用这种<code>面向接口</code>的<code>低耦合</code>，为系统提供更好的可扩展性和可维护性。</p><h3 id="7-2-概述"><a href="#7-2-概述" class="headerlink" title="7.2 概述"></a>7.2 概述</h3><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须能…”的思想。继承是一个”是不是”的is-a关系，而接口实现则是 “能不能”的<code>has-a</code>关系。</p><ul><li>例如：电脑都预留了可以插入USB设备的USB接口，USB接口具备基本的数据传输的开启功能和关闭功能。你能不能用USB进行连接，或是否具备USB通信功能，就看你能否遵循USB接口规范</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203886.png" alt="image-20220517211517846" style="zoom:67%;"><ul><li>例如：Java程序是否能够连接使用某种数据库产品，那么要看该数据库产品能否实现Java设计的JDBC规范</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203377.png" alt="image-20220325235434103" style="zoom:67%;"><blockquote><p>接口的本质是契约、标准、规范，就像我们的法律一样。制定好后大家都要遵守。</p></blockquote><h3 id="7-3-定义格式"><a href="#7-3-定义格式" class="headerlink" title="7.3 定义格式"></a>7.3 定义格式</h3><p>接口的定义，它与定义类方式相似，但是使用 <code>interface</code> 关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。</p><blockquote><p>引用数据类型：数组，类，枚举，接口，注解。</p></blockquote><h4 id="7-3-1-接口的声明格式"><a href="#7-3-1-接口的声明格式" class="headerlink" title="7.3.1 接口的声明格式"></a>7.3.1 接口的声明格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">    <span class="comment">//接口的成员列表：</span></span><br><span class="line">    <span class="comment">// 公共的静态常量</span></span><br><span class="line">    <span class="comment">// 公共的抽象方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共的默认方法（JDK1.8以上）</span></span><br><span class="line">    <span class="comment">// 公共的静态方法（JDK1.8以上）</span></span><br><span class="line">    <span class="comment">// 私有方法（JDK1.9以上）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB3</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态常量</span></span><br><span class="line">    <span class="keyword">long</span> MAX_SPEED = <span class="number">500</span>*<span class="number">1024</span>*<span class="number">1024</span>;<span class="comment">//500MB/s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"USB 3.0可以同步全速地进行读写操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-2-接口的成员说明"><a href="#7-3-2-接口的成员说明" class="headerlink" title="7.3.2 接口的成员说明"></a>7.3.2 接口的成员说明</h4><p><strong>在JDK8.0 之前</strong>，接口中只允许出现：</p><p>（1）公共的静态的常量：其中<code>public static final</code>可以省略</p><p>（2）公共的抽象的方法：其中<code>public abstract</code>可以省略</p><blockquote><p>理解：接口是从多个相似类中抽象出来的规范，不需要提供具体实现</p></blockquote><p><strong>在JDK8.0 时</strong>，接口中允许声明<code>默认方法</code>和<code>静态方法</code>：</p><p>（3）公共的默认的方法：其中public 可以省略，建议保留，但是default不能省略</p><p>（4）公共的静态的方法：其中public 可以省略，建议保留，但是static不能省略</p><p><strong>在JDK9.0 时</strong>，接口又增加了：</p><p>（5）私有方法</p><p>除此之外，接口中没有构造器，没有初始化块，因为接口中没有成员变量需要动态初始化。</p><h3 id="7-4-接口的使用规则"><a href="#7-4-接口的使用规则" class="headerlink" title="7.4 接口的使用规则"></a>7.4 接口的使用规则</h3><p><strong>1、类实现接口（implements）</strong></p><p>接口<strong>不能创建对象</strong>，但是可以被类实现（<code>implements</code> ，类似于被继承）。</p><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code>implements</code>关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 <span class="class"><span class="keyword">class</span> 实现类  <span class="keyword">implements</span> 接口</span>&#123;</span><br><span class="line"><span class="comment">// 重写接口中抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span></span><br><span class="line">  <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【修饰符】 <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口</span>&#123;</span><br><span class="line">    <span class="comment">// 重写接口中抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span></span><br><span class="line">  <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203354.png" alt="image-20220514163212312" style="zoom:80%;"><p>注意：</p><ol><li><p>如果接口的实现类是非抽象类，那么必须<code>重写接口中所有抽象方法</code>。</p></li><li><p>默认方法可以选择保留，也可以重写。</p><blockquote><p>重写时，default单词就不要再写了，它只用于在接口中表示默认方法，到类中就没有默认方法的概念了</p></blockquote></li><li><p>接口中的静态方法不能被继承也不能被重写</p></li></ol><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;<span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(USB usb)</span></span>&#123;</span><br><span class="line">usb.start() ;</span><br><span class="line">System.out.println(<span class="string">"=========== USB 设备工作 ========"</span>) ;</span><br><span class="line">usb.stop() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flash</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;<span class="comment">// 重写方法</span></span><br><span class="line">System.out.println(<span class="string">"U盘开始工作。"</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;<span class="comment">// 重写方法</span></span><br><span class="line">System.out.println(<span class="string">"U盘停止工作。"</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Print</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;<span class="comment">// 重写方法</span></span><br><span class="line">System.out.println(<span class="string">"打印机开始工作。"</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;<span class="comment">// 重写方法</span></span><br><span class="line">System.out.println(<span class="string">"打印机停止工作。"</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Computer.show(<span class="keyword">new</span> Flash()) ;</span><br><span class="line">Computer.show(<span class="keyword">new</span> Print()) ;</span><br><span class="line"></span><br><span class="line">c.show(<span class="keyword">new</span> USB()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"移动硬盘开始运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"移动硬盘停止运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、接口的多实现（implements）</strong></p><p>之前学过，在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的<code>多实现</code>。并且，一个类能继承一个父类，同时实现多个接口。</p><p>实现格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 <span class="class"><span class="keyword">class</span> 实现类  <span class="keyword">implements</span> 接口1，接口2，接口3。。。</span>&#123;</span><br><span class="line"><span class="comment">// 重写接口中所有抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span></span><br><span class="line">  <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【修饰符】 <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口1，接口2，接口3。。。</span>&#123;</span><br><span class="line">    <span class="comment">// 重写接口中所有抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span></span><br><span class="line">  <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口中，有多个抽象方法时，实现类必须重写所有抽象方法。<strong>如果抽象方法有重名的，只需要重写一次</strong>。</p></blockquote><p>举例：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203509.png" alt="image-20220514163311418" style="zoom:80%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203063.png" alt="image-20220325235321778" style="zoom:67%;"><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203623.png" alt="1562216188519"></p><p>定义多个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"showA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"showB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.showA();</span><br><span class="line">        c.showB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、接口的多继承(extends)</strong></p><p>一个接口能继承另一个或者多个接口，接口的继承也使用 <code>extends</code> 关键字，子接口继承父接口的方法。</p><p>定义父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Chargeable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsbC</span> <span class="keyword">extends</span> <span class="title">Chargeable</span>,<span class="title">USB3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeCConverter</span> <span class="keyword">implements</span> <span class="title">UsbC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正反面都支持"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"可充电"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"输出数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有父接口的抽象方法都有重写。</p><p>方法签名相同的抽象方法只需要实现一次。</p></blockquote><p><strong>4、接口与实现类对象构成多态引用</strong></p><p>实现类实现接口，类似于子类继承父类，因此，接口类型的变量与实现类的对象之间，也可以构成多态引用。通过接口类型的变量调用方法，最终执行的是你new的实现类对象实现的方法体。</p><p>接口的不同实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送脉冲信号"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不接收信号"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyBoard</span> <span class="keyword">implements</span> <span class="title">USB3</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不接收信号"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送按键信号"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComputer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        USB3 usb = <span class="keyword">new</span> Mouse();</span><br><span class="line">        computer.setUsb(usb);</span><br><span class="line">        usb.start();</span><br><span class="line">        usb.out();</span><br><span class="line">        usb.in();</span><br><span class="line">        usb.stop();</span><br><span class="line">        System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        usb = <span class="keyword">new</span> KeyBoard();</span><br><span class="line">        computer.setUsb(usb);</span><br><span class="line">        usb.start();</span><br><span class="line">        usb.out();</span><br><span class="line">        usb.in();</span><br><span class="line">        usb.stop();</span><br><span class="line">        System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        usb = <span class="keyword">new</span> MobileHDD();</span><br><span class="line">        computer.setUsb(usb);</span><br><span class="line">        usb.start();</span><br><span class="line">        usb.out();</span><br><span class="line">        usb.in();</span><br><span class="line">        usb.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、使用接口的静态成员</strong></p><p>接口不能直接创建对象，但是可以通过接口名直接调用接口的静态方法和静态常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUSB3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过“接口名.”调用接口的静态方法 (JDK8.0才能开始使用)</span></span><br><span class="line">        USB3.show();</span><br><span class="line">        <span class="comment">//通过“接口名.”直接使用接口的静态常量</span></span><br><span class="line">        System.out.println(USB3.MAX_SPEED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、使用接口的非静态方法</strong></p><ul><li>对于接口的静态方法，直接使用“<code>接口名.</code>”进行调用即可<ul><li>也只能使用“接口名.”进行调用，不能通过实现类的对象进行调用</li></ul></li><li>对于接口的抽象方法、默认方法，只能通过实现类对象才可以调用<ul><li>接口不能直接创建对象，只能创建实现类的对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMobileHDD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建实现类对象</span></span><br><span class="line">        MobileHDD b = <span class="keyword">new</span> MobileHDD();</span><br><span class="line"><span class="comment">//通过实现类对象调用重写的抽象方法，以及接口的默认方法，如果实现类重写了就执行重写的默认方法，如果没有重写，就执行接口中的默认方法</span></span><br><span class="line">        b.start();</span><br><span class="line">        b.in();</span><br><span class="line">        b.stop();</span><br><span class="line">        Usb3.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-JDK8中相关冲突问题"><a href="#7-5-JDK8中相关冲突问题" class="headerlink" title="7.5 JDK8中相关冲突问题"></a>7.5 JDK8中相关冲突问题</h3><h4 id="7-5-1-默认方法冲突问题"><a href="#7-5-1-默认方法冲突问题" class="headerlink" title="7.5.1 默认方法冲突问题"></a>7.5.1 默认方法冲突问题</h4><p><strong>（1）类优先原则</strong></p><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的抽象方法重名，子类就近选择执行父类的成员方法。代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">date</span><span class="params">()</span></span>&#123;<span class="comment">//约会</span></span><br><span class="line">        System.out.println(<span class="string">"吃喝玩乐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">date</span><span class="params">()</span></span>&#123;<span class="comment">//约会</span></span><br><span class="line">        System.out.println(<span class="string">"爸爸约吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> <span class="keyword">implements</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//(1)不重写默认保留父类的</span></span><br><span class="line">        <span class="comment">//(2)调用父类被重写的</span></span><br><span class="line"><span class="comment">//        super.date();</span></span><br><span class="line">        <span class="comment">//(3)保留父接口的</span></span><br><span class="line"><span class="comment">//        Friend.super.date();</span></span><br><span class="line">        <span class="comment">//(4)完全重写</span></span><br><span class="line">        System.out.println(<span class="string">"跟康师傅学Java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        s.date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）接口冲突（左右为难）</strong></p><ul><li>当一个类同时实现了多个父接口，而多个父接口中包含方法签名相同的默认方法时，怎么办呢？</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203344.jpg" alt></p><p>无论你多难抉择，最终都是要做出选择的。</p><p>声明接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BoyFriend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">date</span><span class="params">()</span></span>&#123;<span class="comment">//约会</span></span><br><span class="line">        System.out.println(<span class="string">"神秘约会"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择保留其中一个，通过“<code>接口名.super.方法名</code>“的方法选择保留哪个接口的默认方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> <span class="keyword">implements</span> <span class="title">Friend</span>,<span class="title">BoyFriend</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//(1)保留其中一个父接口的</span></span><br><span class="line"><span class="comment">//        Friend.super.date();</span></span><br><span class="line"><span class="comment">//        BoyFriend.super.date();</span></span><br><span class="line">        <span class="comment">//(2)完全重写</span></span><br><span class="line">        System.out.println(<span class="string">"跟康师傅学Java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGirl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Girl girl = <span class="keyword">new</span> Girl();</span><br><span class="line">        girl.date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当一个子接口同时继承了多个接口，而多个父接口中包含方法签名相同的默认方法时，怎么办呢？</li></ul><p>另一个父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态常量</span></span><br><span class="line">    <span class="keyword">long</span> MAX_SPEED = <span class="number">60</span>*<span class="number">1024</span>*<span class="number">1024</span>;<span class="comment">//60MB/s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"USB 2.0可以高速地进行读写操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB</span> <span class="keyword">extends</span> <span class="title">USB2</span>,<span class="title">USB3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Usb.start"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Usb.stop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>子接口重写默认方法时，default关键字可以保留。</p><p>子类重写默认方法时，default关键字不可以保留。</p></blockquote><h4 id="7-5-2-常量冲突问题"><a href="#7-5-2-常量冲突问题" class="headerlink" title="7.5.2 常量冲突问题"></a>7.5.2 常量冲突问题</h4><ul><li>当子类继承父类又实现父接口，而父类中存在与父接口常量同名的成员变量，并且该成员变量名在子类中仍然可见。</li><li>当子类同时实现多个接口，而多个接口存在相同同名常量。</li></ul><p>此时在子类中想要引用父类或父接口的同名的常量或成员变量时，就会有冲突问题。</p><p>父类和父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SuperInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MotherInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfacetype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> <span class="keyword">implements</span> <span class="title">SuperInterface</span>,<span class="title">MotherInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("x = " + x);//模糊不清</span></span><br><span class="line">        System.out.println(<span class="string">"super.x = "</span> + <span class="keyword">super</span>.x);</span><br><span class="line">        System.out.println(<span class="string">"SuperInterface.x = "</span> + SuperInterface.x);</span><br><span class="line">        System.out.println(<span class="string">"MotherInterface.x = "</span> + MotherInterface.x);</span><br><span class="line">        System.out.println(<span class="string">"y = "</span> + y);<span class="comment">//没有重名问题，可以直接访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-接口的总结与面试题"><a href="#7-6-接口的总结与面试题" class="headerlink" title="7.6 接口的总结与面试题"></a>7.6 接口的总结与面试题</h3><ul><li>接口本身不能创建对象【没有构造器】，只能创建接口的实现类对象，接口类型的变量可以与实现类对象构成多态引用。</li><li>声明接口用interface，接口的成员声明有限制：<ul><li>（1）公共的静态常量   public static final可以省略</li><li>（2）公共的抽象方法   public abstract可以省略</li><li>（3）公共的默认方法（JDK8.0 及以上）</li><li>（4）公共的静态方法（JDK8.0 及以上）</li><li>（5）私有方法（JDK9.0 及以上）</li></ul></li><li><strong>类可以实现(implements)多个接口</strong>。如果实现类不是抽象类，就必须实现接口中所有的抽象方法。如果实现类既要继承父类又要实现父接口，那么<strong>继承（extends）在前，实现（implements）在后</strong>。</li><li><strong>接口可以继承(extends)多个接口</strong>。</li><li>接口的默认方法可以选择重写/不重写。如果有冲突问题，另行处理。子类重写父接口的默认方法，要去掉default，子接口重写父接口的默认方法，不要去掉default。</li><li>接口的静态方法不能被继承，也不能被重写。接口的静态方法只能通过“接口名.静态方法名”进行调用。</li></ul><p><strong>面试题</strong></p><p><strong>1、为什么接口中只能声明公共的静态的常量？</strong></p><p>因为接口是标准规范，那么在规范中需要声明一些底线边界值，当实现者在实现这些规范时，不能去随意修改和触碰这些底线，否则就有“危险”。</p><p>例如：USB1.0规范中规定最大传输速率是1.5Mbps，最大输出电流是5V/500mA</p><p>​           USB3.0规范中规定最大传输速率是5Gbps(500MB/s)，最大输出电流是5V/900mA</p><p>例如：尚硅谷学生行为规范中规定学员，早上8:25之前进班，晚上21:30之后离开等等。</p><p><strong>2、为什么JDK8.0 之后允许接口定义静态方法和默认方法呢？因为它违反了接口作为一个抽象标准定义的概念。</strong></p><p><code>静态方法</code>：因为之前的标准类库设计中，有很多Collection/Colletions或者Path/Paths这样成对的接口和类，后面的类中都是静态方法，而这些静态方法都是为前面的接口服务的，那么这样设计一对API，不如把静态方法直接定义到接口中使用和维护更方便。</p><p><code>默认方法</code>：（1）我们要在已有的老版接口中提供新方法时，如果添加抽象方法，就会涉及到原来使用这些接口的类就会有问题，那么为了保持与旧版本代码的兼容性，只能允许在接口中定义默认方法实现。比如：Java8中对Collection、List、Comparator等接口提供了丰富的默认方法。（2）当我们接口的某个抽象方法，在很多实现类中的实现代码是一样的，此时将这个抽象方法设计为默认方法更为合适，那么实现类就可以选择重写，也可以选择不重写。</p><p><strong>3、为什么JDK1.9要允许接口定义私有方法呢？因为我们说接口是规范，规范是需要公开让大家遵守的。</strong></p><p><strong>私有方法</strong>：因为有了默认方法和静态方法这样具有具体实现的方法，那么就可能出现多个方法由共同的代码可以抽取，而这些共同的代码抽取出来的方法又只希望在接口内部使用，所以就增加了私有方法。</p><h3 id="7-7-接口与抽象类之间的对比"><a href="#7-7-接口与抽象类之间的对比" class="headerlink" title="7.7 接口与抽象类之间的对比"></a>7.7 接口与抽象类之间的对比</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203085.png" alt="image-20220328002053452"></p><blockquote><p>在开发中，常看到一个类要么继承抽象类，要么实现接口。</p></blockquote><h3 id="7-8-练习"><a href="#7-8-练习" class="headerlink" title="7.8 练习"></a>7.8 练习</h3><p><strong>笔试题：</strong>排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(x);  <span class="comment">//没标清楚是谁的x属性 </span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.x); <span class="comment">//输出B的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().pX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>笔试题：</strong>排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Playable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;  <span class="comment">//public abstract可以省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bounceable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;  <span class="comment">//public abstract可以省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Rollable</span> <span class="keyword">extends</span> <span class="title">Playable</span>, <span class="title">Bounceable</span> </span>&#123;  <span class="comment">//子接口继承多个父接口</span></span><br><span class="line">    Ball ball = <span class="keyword">new</span> Ball(<span class="string">"PingPang"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> <span class="keyword">implements</span> <span class="title">Rollable</span> </span>&#123;  <span class="comment">//子类实现接口</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ball</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ball = <span class="keyword">new</span> Ball(<span class="string">"Football"</span>);  <span class="comment">//必须Ball ball = new Ball("Football");</span></span><br><span class="line">        System.out.println(ball.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习1：</strong></p><p>定义一个接口用来实现两个对象的比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CompareObject</span></span>&#123;</span><br><span class="line"><span class="comment">//若返回值是 0 , 代表相等; 若为正数，代表当前对象大；负数代表当前对象小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Circle类，声明redius属性，提供getter和setter方法</p><p>定义一个ComparableCircle类，继承Circle类并且实现CompareObject接口。在ComparableCircle类中给出接口中方法compareTo的实现体，用来比较两个圆的半径大小。</p><p>定义一个测试类InterfaceTest，创建两个ComparableCircle对象，调用compareTo方法比较两个类的半径大小。</p><p>思考：参照上述做法定义矩形类Rectangle和ComparableRectangle类，在ComparableRectangle类中给出compareTo方法的实现，比较两个矩形的面积大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public class Circle &#123;</span><br><span class="line">    private double radius;</span><br><span class="line">    &#x2F;&#x2F;无参构造器</span><br><span class="line">    public Circle() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;有参构造器</span><br><span class="line">    public Circle(double radius) &#123;</span><br><span class="line">        this.radius &#x3D; radius;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getRadius()&#123;</span><br><span class="line">        return radius;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setRadius(double radius)&#123;</span><br><span class="line">        this.radius&#x3D;radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Circle&#123;&quot; +&quot;radius&#x3D;&quot; + radius +&#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;接口</span><br><span class="line">public interface CompareObject &#123;</span><br><span class="line">    &#x2F;&#x2F;若返回值是0,代表相等</span><br><span class="line">    &#x2F;&#x2F;若为正数，代表当前对象大</span><br><span class="line">    &#x2F;&#x2F;若为负数，代表当前对象小</span><br><span class="line">    public int conpareTo(Object o);  &#x2F;&#x2F;抽象方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;继承Circle类 实现CompareObject接口</span><br><span class="line">public class ComparableCircle extends Circle implements CompareObject&#123;  &#x2F;&#x2F;继承Circle类 实现CompareObject接口</span><br><span class="line">    public ComparableCircle() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ComparableCircle(double radius) &#123;</span><br><span class="line">        super(radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int conpareTo(Object o) &#123;</span><br><span class="line">        if(this &#x3D;&#x3D; o)&#123;  &#x2F;&#x2F;如果当前比较的两个对象一致  返回0</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if(o instanceof ComparableCircle)&#123;  &#x2F;&#x2F;o属于圆类</span><br><span class="line">            ComparableCircle c &#x3D; (ComparableCircle)o; &#x2F;&#x2F;类型强制向下转型</span><br><span class="line">            return Double.compare(this.getRadius(),c.getRadius());  &#x2F;&#x2F;调用Double.compare方法对比</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return 2; &#x2F;&#x2F;如果输入的类型不匹配，则返回2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;test测试</span><br><span class="line">public class InterfaceTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">      ComparableCircle c1&#x3D;new ComparableCircle();</span><br><span class="line">      ComparableCircle c2&#x3D;new ComparableCircle();</span><br><span class="line">      System.out.println(c1.conpareTo(c2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：交通工具案例</strong></p><p>阿里的一个工程师，声明的属性和方法如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203933.png" alt="image-20220504172547709"></p><p>其中，有一个乘坐交通工具的方法takingVehicle()，在此方法中调用交通工具的run()。为了出行方便，他买了一辆捷安特自行车、一辆雅迪电动车和一辆奔驰轿车。这里涉及到的相关类及接口关系如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203907.png" alt="image-20220504172918861"></p><p>其中，电动车增加动力的方式是充电，轿车增加动力的方式是加油。在具体交通工具的run()中调用其所在类的相关属性信息。</p><p>请编写相关代码，并测试。</p><p>提示：创建Vehicle[]数组，保存阿里工程师的三辆交通工具，并分别在工程师的takingVehicle()中调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Developer &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    &#x2F;&#x2F;set和get方法</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;乘坐交通工具</span><br><span class="line">    public void takingVehicle(Vehicle vehicle)&#123;</span><br><span class="line">        vehicle.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Vehicle &#123;  &#x2F;&#x2F;抽象类</span><br><span class="line">    private String brand;</span><br><span class="line">    private String color;</span><br><span class="line"></span><br><span class="line">    public Vehicle()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Vehicle(String brand,String color)&#123;  &#x2F;&#x2F;子类调用</span><br><span class="line">        this.brand&#x3D;brand;</span><br><span class="line">        this.color&#x3D;color;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;set和get方法</span><br><span class="line">    public String getBrand() &#123;</span><br><span class="line">        return brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBrand(String brand) &#123;</span><br><span class="line">        this.brand &#x3D; brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getColor() &#123;</span><br><span class="line">        return color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setColor(String color) &#123;</span><br><span class="line">        this.color &#x3D; color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public abstract void run();  &#x2F;&#x2F;抽象方法</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface IPower &#123;</span><br><span class="line">    &#x2F;&#x2F;抽象方法</span><br><span class="line">    public abstract void power(); &#x2F;&#x2F;电车和骑车的充电功能</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Bycicle extends Vehicle&#123;</span><br><span class="line">    public Bycicle(String brand,String color)&#123;</span><br><span class="line">        super(brand,color);  &#x2F;&#x2F;调用父类有参构造器</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;实现抽象类父类的方法</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;开的是:&quot;+getBrand()+&quot;,颜色是:&quot;+getColor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class ElectricVehicle extends Vehicle implements IPower&#123;</span><br><span class="line">    public ElectricVehicle(String brand,String color)&#123;</span><br><span class="line">        super(brand,color);  &#x2F;&#x2F;调用父类构造器</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;实现接口方法</span><br><span class="line">    @Override</span><br><span class="line">    public void power() &#123;</span><br><span class="line">        System.out.println(&quot;充电&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;实现抽象类父类方法</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;开的是:&quot;+super.getBrand()+&quot;,颜色是:&quot;+super.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class Car extends Vehicle implements IPower&#123;</span><br><span class="line">    private String carNumber;</span><br><span class="line">    public Car(String brand,String color,String carNumber)&#123;</span><br><span class="line">        super(brand,color);  &#x2F;&#x2F;调用父类构造器</span><br><span class="line">        this.carNumber&#x3D;carNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCarNumber() &#123;</span><br><span class="line">        return carNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCarNumber(String carNumber) &#123;</span><br><span class="line">        this.carNumber &#x3D; carNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;实现接口方法</span><br><span class="line">    @Override</span><br><span class="line">    public void power() &#123;</span><br><span class="line">        System.out.println(&quot;加油&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;实现抽象类父类方法</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;开的是:&quot;+super.getBrand()+&quot;,颜色是:&quot;+super.getColor()+&quot;,开的车号码牌是:&quot;+this.getCarNumber());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class DeveloperTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Developer test&#x3D;new Developer();</span><br><span class="line">        Vehicle[] vehicles&#x3D;new Vehicle[3];</span><br><span class="line">        &#x2F;&#x2F;创建三个交通工具</span><br><span class="line">        vehicles[0]&#x3D;new Bycicle(&quot;捷安特&quot;,&quot;黄色&quot;);</span><br><span class="line">        vehicles[1]&#x3D;new Car(&quot;奥迪&quot;,&quot;黄色&quot;,&quot;1231123&quot;);</span><br><span class="line">        vehicles[2]&#x3D;new ElectricVehicle(&quot;电动车&quot;,&quot;绿色&quot;);</span><br><span class="line">        test.takingVehicle(vehicles[0]);</span><br><span class="line">        test.takingVehicle(vehicles[1]);</span><br><span class="line">        test.takingVehicle(vehicles[2]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终代码结果如下:</p><p><img src=".images/image-20231011102622680.png" alt="image-20231011102622680"></p><h2 id="8-内部类（InnerClass"><a href="#8-内部类（InnerClass" class="headerlink" title="8. 内部类（InnerClass)"></a>8. 内部类（InnerClass)</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><h4 id="8-1-1-什么是内部类"><a href="#8-1-1-什么是内部类" class="headerlink" title="8.1.1 什么是内部类"></a>8.1.1 什么是内部类</h4><p>将一个类B定义在另一个类A里面，里面的那个类B就称为<code>内部类（InnerClass）</code>，类A则称为<code>外部类（OuterClass）</code>。</p><h4 id="8-1-2-为什么要声明内部类呢"><a href="#8-1-2-为什么要声明内部类呢" class="headerlink" title="8.1.2 为什么要声明内部类呢"></a>8.1.2 为什么要声明内部类呢</h4><p>具体来说，当一个事物A的内部，还有一个部分需要一个完整的结构B进行描述，而这个内部的完整的结构B又只为外部事物A提供服务，不在其他地方单独使用，那么整个内部的完整结构B最好使用内部类。</p><p>总的来说，遵循<code>高内聚、低耦合</code>的面向对象开发原则。</p><h4 id="8-1-3-内部类的分类"><a href="#8-1-3-内部类的分类" class="headerlink" title="8.1.3 内部类的分类"></a>8.1.3 内部类的分类</h4><p>根据内部类声明的位置（如同变量的分类），我们可以分为：</p><p><img src=".images/image-20221124223912529.png" alt="image-20221124223912529"></p><h3 id="8-2-成员内部类"><a href="#8-2-成员内部类" class="headerlink" title="8.2 成员内部类"></a>8.2 成员内部类</h3><h4 id="8-2-1-概述"><a href="#8-2-1-概述" class="headerlink" title="8.2.1 概述"></a>8.2.1 概述</h4><p>如果成员内部类中不使用外部类的非静态成员，那么通常将内部类声明为静态内部类，否则声明为非静态内部类。</p><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> 外部类</span>&#123;</span><br><span class="line">    [其他修饰符] [<span class="keyword">static</span>] <span class="class"><span class="keyword">class</span> 内部类</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>成员内部类的使用特征，概括来讲有如下两种角色：</strong></p><ul><li>成员内部类作为<strong>类的成员</strong>：<ul><li>和外部类不同，Inner class还可以声明为private或protected；</li><li>可以调用外部类的结构。（注意：在静态内部类中不能使用外部类的非静态成员）</li><li>Inner class 可以声明为static的，但此时就不能再使用外层类的非static的成员变量；</li></ul></li><li>成员内部类作为<strong>类</strong>：<ul><li>可以在内部定义属性、方法、构造器等结构</li><li>可以继承自己的想要继承的父类，实现自己想要实现的父接口们，和外部类的父类和父接口无关</li><li>可以声明为abstract类 ，因此可以被其它的内部类继承</li><li>可以声明为final的，表示不能被继承</li><li>编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）</li></ul></li></ul><p>注意点：</p><ol start="2"><li><p>外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式</p></li><li><p>成员内部类可以直接使用外部类的所有成员，包括私有的数据</p></li><li><p>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</p></li></ol><h4 id="8-2-2-创建成员内部类对象"><a href="#8-2-2-创建成员内部类对象" class="headerlink" title="8.2.2 创建成员内部类对象"></a>8.2.2 创建成员内部类对象</h4><ul><li>实例化静态内部类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类名.静态内部类名 变量 &#x3D; 外部类名.静态内部类名();</span><br><span class="line">变量.非静态方法();</span><br></pre></td></tr></table></figure><ul><li>实例化非静态内部类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">外部类名 变量1 &#x3D; new 外部类();</span><br><span class="line">外部类名.非静态内部类名 变量2 &#x3D; 变量1.new 非静态内部类名();</span><br><span class="line">变量2.非静态方法();</span><br></pre></td></tr></table></figure><h4 id="8-2-3-举例"><a href="#8-2-3-举例" class="headerlink" title="8.2.3 举例"></a>8.2.3 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMemberInnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建静态内部类实例，并调用方法</span></span><br><span class="line">        Outer.StaticInner inner = <span class="keyword">new</span> Outer.StaticInner();</span><br><span class="line">        inner.inFun();</span><br><span class="line">        <span class="comment">//调用静态内部类静态方法</span></span><br><span class="line">        Outer.StaticInner.inMethod();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建非静态内部类实例（方式1），并调用方法</span></span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        Outer.NoStaticInner inner1 = outer.<span class="keyword">new</span> NoStaticInner();</span><br><span class="line">        inner1.inFun();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建非静态内部类实例（方式2）</span></span><br><span class="line">        Outer.NoStaticInner inner2 = outer.getNoStaticInner();</span><br><span class="line">        inner1.inFun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String a = <span class="string">"外部类的静态a"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String b  = <span class="string">"外部类的静态b"</span>;</span><br><span class="line">    <span class="keyword">private</span> String c = <span class="string">"外部类对象的非静态c"</span>;</span><br><span class="line">    <span class="keyword">private</span> String d = <span class="string">"外部类对象的非静态d"</span>;</span><br><span class="line"><span class="comment">//内部静态类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String a =<span class="string">"静态内部类的静态a"</span>;</span><br><span class="line">        <span class="keyword">private</span> String c = <span class="string">"静态内部类对象的非静态c"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Inner.a = "</span> + a);</span><br><span class="line">            System.out.println(<span class="string">"Outer.a = "</span> + Outer.a);</span><br><span class="line">            System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Inner.inFun"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Outer.a = "</span> + Outer.a);</span><br><span class="line">            System.out.println(<span class="string">"Inner.a = "</span> + a);</span><br><span class="line">            System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">            System.out.println(<span class="string">"c = "</span> + c);</span><br><span class="line"><span class="comment">//            System.out.println("d = " + d);//不能访问外部类的非静态成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NoStaticInner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String a = <span class="string">"非静态内部类对象的非静态a"</span>;</span><br><span class="line">        <span class="keyword">private</span> String c = <span class="string">"非静态内部类对象的非静态c"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"NoStaticInner.inFun"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Outer.a = "</span> + Outer.a);</span><br><span class="line">            System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">            System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">            System.out.println(<span class="string">"Outer.c = "</span> + Outer.<span class="keyword">this</span>.c);</span><br><span class="line">            System.out.println(<span class="string">"c = "</span> + c);</span><br><span class="line">            System.out.println(<span class="string">"d = "</span> + d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NoStaticInner <span class="title">getNoStaticInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NoStaticInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">Inner.inFun</span><br><span class="line">Outer.a = 外部类的静态a</span><br><span class="line">Inner.a = 静态内部类的静态a</span><br><span class="line">b = 外部类的静态b</span><br><span class="line">c = 静态内部类对象的非静态c</span><br><span class="line">Inner.a = 静态内部类的静态a</span><br><span class="line">Outer.a = 外部类的静态a</span><br><span class="line">b = 外部类的静态b</span><br><span class="line">*****************************</span><br><span class="line">NoStaticInner.inFun</span><br><span class="line">Outer.a = 外部类的静态a</span><br><span class="line">a = 非静态内部类对象的非静态a</span><br><span class="line">b = 外部类的静态b</span><br><span class="line">Outer.c = 外部类对象的非静态c</span><br><span class="line">c = 非静态内部类对象的非静态c</span><br><span class="line">d = 外部类对象的非静态d</span><br><span class="line">NoStaticInner.inFun</span><br><span class="line">Outer.a = 外部类的静态a</span><br><span class="line">a = 非静态内部类对象的非静态a</span><br><span class="line">b = 外部类的静态b</span><br><span class="line">Outer.c = 外部类对象的非静态c</span><br><span class="line">c = 非静态内部类对象的非静态c</span><br><span class="line">d = 外部类对象的非静态d</span><br></pre></td></tr></table></figure><h3 id="8-3-局部内部类"><a href="#8-3-局部内部类" class="headerlink" title="8.3 局部内部类"></a>8.3 局部内部类</h3><h4 id="8-3-1-非匿名局部内部类"><a href="#8-3-1-非匿名局部内部类" class="headerlink" title="8.3.1 非匿名局部内部类"></a>8.3.1 非匿名局部内部类</h4><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> 外部类</span>&#123;</span><br><span class="line">    [修饰符] 返回值类型  方法名(形参列表)&#123;</span><br><span class="line">            [<span class="keyword">final</span>/<span class="keyword">abstract</span>] <span class="class"><span class="keyword">class</span> 内部类</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译后有自己的独立的字节码文件，只不过在内部类名前面冠以外部类名、$符号、编号。<ul><li>这里有编号是因为同一个外部类中，不同的方法中存在相同名称的局部内部类</li></ul></li></ul><ul><li>和成员内部类不同的是，它前面不能有权限修饰符等</li><li>局部内部类如同局部变量一样，有作用域</li><li>局部内部类中是否能访问外部类的非静态的成员，取决于所在的方法</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLocalInner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.outMethod();  <span class="comment">//调用外部类的静态方法</span></span><br><span class="line">        <span class="comment">//输出Outer.outMethod</span></span><br><span class="line">        <span class="comment">//创建局部内部类的对象</span></span><br><span class="line">        <span class="comment">//调用局部内部类的方法  输出Inner.inMehtod</span></span><br><span class="line">        <span class="comment">//输出 外部类方法属性 局部变量c</span></span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Outer out = <span class="keyword">new</span> Outer();  <span class="comment">//创建外部类对象</span></span><br><span class="line">        out.outTest(); <span class="comment">//调用外部类非静态对象</span></span><br><span class="line">        <span class="comment">//创建局部内部类的对象</span></span><br><span class="line">        <span class="comment">//调用局部内部类的方法  输出Inner.inMethod1</span></span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Runner runner = Outer.getRunner();  <span class="comment">//创建外部类对象</span></span><br><span class="line">        runner.run();  <span class="comment">//调用实现接口的方法</span></span><br><span class="line">        <span class="comment">//输出LocalRunner.run</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;  <span class="comment">//外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Outer.outMethod"</span>);</span><br><span class="line">        <span class="keyword">final</span> String c = <span class="string">"局部变量c"</span>;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;  <span class="comment">//内部类</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Inner.inMethod"</span>);</span><br><span class="line">                System.out.println(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.inMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inMethod1</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Inner.inMethod1"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Inner in = <span class="keyword">new</span> Inner();</span><br><span class="line">        in.inMethod1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runner <span class="title">getRunner</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">LocalRunner</span> <span class="keyword">implements</span> <span class="title">Runner</span></span>&#123;   <span class="comment">//实现接口</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  <span class="comment">//重写run方法</span></span><br><span class="line">                System.out.println(<span class="string">"LocalRunner.run"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocalRunner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Runner</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;   <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">Outer.outMethod</span><br><span class="line">Inner.inMethod</span><br><span class="line">局部变量c</span><br><span class="line">-------------------</span><br><span class="line">Inner.inMethod1</span><br><span class="line">-------------------</span><br><span class="line">LocalRunner.run</span><br></pre></td></tr></table></figure><h4 id="8-3-2-匿名内部类"><a href="#8-3-2-匿名内部类" class="headerlink" title="8.3.2 匿名内部类"></a>8.3.2 匿名内部类</h4><p>因为考虑到这个子类或实现类是一次性的，那么我们“费尽心机”的给它取名字，就显得多余。那么我们完全可以使用匿名内部类的方式来实现，避免给类命名的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类([实参列表])&#123;</span><br><span class="line">    重写方法...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父接口()&#123;</span><br><span class="line">    重写方法...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例1：使用匿名内部类的对象直接调用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;  <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> A()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;   <span class="comment">//重写接口方法</span></span><br><span class="line">System.out.println(<span class="string">"aaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;.a();  <span class="comment">//相当于 new 实现类();  然后调用.a()方法 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">aaaa</span><br></pre></td></tr></table></figure><p>举例2：通过父类或父接口的变量多态引用匿名内部类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    A obj = <span class="keyword">new</span> A()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"aaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    obj.a();  <span class="comment">// 然后调用.a()方法 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例3：匿名内部类的对象作为实参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(A a)</span></span>&#123;  <span class="comment">//静态方法</span></span><br><span class="line">    a.method();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接Test.test(A);这样  其中的A属于匿名内部类的对象</span></span><br><span class="line">        test(<span class="keyword">new</span> A()&#123;  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"aaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-练习"><a href="#8-4-练习" class="headerlink" title="8.4 练习"></a>8.4 练习</h3><p>练习：判断输出结果为何？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;   <span class="comment">//外部类</span></span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inner s1 = <span class="keyword">new</span> Inner();  <span class="comment">//创建内部类对象</span></span><br><span class="line">        s1.a = <span class="number">10</span>;</span><br><span class="line">        Inner s2 = <span class="keyword">new</span> Inner();  <span class="comment">//创建内部类对象</span></span><br><span class="line">        s2.a = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//创建内部类对象</span></span><br><span class="line">        Test.Inner s3 = <span class="keyword">new</span> Test.Inner();</span><br><span class="line">        System.out.println(s3.a);  <span class="comment">//输出s3的a属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建外部类对象</span></span><br><span class="line">        <span class="comment">//直接走无参构造器</span></span><br><span class="line">        <span class="comment">//创建内部类对象s1  获得s1.a=5 更改为10</span></span><br><span class="line">        <span class="comment">//创建内部类对象s2  获得s2.a=5 更改为20</span></span><br><span class="line">        <span class="comment">//创建内部类对象s3  获得s3.a=5 输出5</span></span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(<span class="string">"-------"</span>);</span><br><span class="line">        <span class="comment">//创建内部类对象</span></span><br><span class="line">        <span class="comment">//常见内部类对象r  获得r.a=5 输出5</span></span><br><span class="line">        Inner r = t.<span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="comment">//输出内部类对象的a属性</span></span><br><span class="line">        <span class="comment">//直接输出5</span></span><br><span class="line">        System.out.println(r.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line"><span class="number">5</span></span><br><span class="line">---------------------</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>练习2：</p><p>编写一个匿名内部类，它继承Object，并在匿名内部类中，声明一个方法public void test()打印尚硅谷。</p><p>请编写代码调用这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类  直接创建Object的对象</span></span><br><span class="line">        <span class="keyword">new</span> Object()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"尚硅谷"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.test();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二和三方式没办法解决 --因为没被重写</span></span><br></pre></td></tr></table></figure><h2 id="9-枚举类"><a href="#9-枚举类" class="headerlink" title="9. 枚举类"></a>9. 枚举类</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><ul><li><p>枚举类型本质上也是一种类，只不过是这个<strong>类的对象</strong>是<strong>有限的</strong>、<strong>固定几个</strong>，<strong>不让用户随意创建</strong>。</p></li><li><p>枚举类的例子：</p><ul><li><code>星期</code>：Monday(星期一)……Sunday(星期天)</li><li><code>性别</code>：Man(男)、Woman(女)</li><li><code>月份</code>：January(1月)……December(12月)</li><li><code>季节</code>：Spring(春节)……Winter(冬天)</li><li><code>三原色</code>：red(红色)、green(绿色)、blue(蓝色)</li><li><code>支付方式</code>：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)</li><li><code>就职状态</code>：Busy(忙碌)、Free(空闲)、Vocation(休假)、Dimission(离职)</li><li><code>订单状态</code>：Nonpayment（未付款）、Paid（已付款）、Fulfilled（已配货）、Delivered（已发货）、Checked（已确认收货）、Return（退货）、Exchange（换货）、Cancel（取消）</li><li><code>线程状态</code>：创建、就绪、运行、阻塞、死亡</li></ul></li><li><p><strong>若枚举只有一个对象, 则作为一种单例模式的实现。</strong></p></li><li><p>枚举类的实现：</p><ul><li>在JDK5.0 之前，需要程序员自定义枚举类型。</li><li>在JDK5.0 之后，Java支持<code>enum</code>关键字来快速定义枚举类型。</li></ul></li></ul><h3 id="9-2-定义枚举类（JDK5-0-之前）"><a href="#9-2-定义枚举类（JDK5-0-之前）" class="headerlink" title="9.2 定义枚举类（JDK5.0 之前）"></a>9.2 定义枚举类（JDK5.0 之前）</h3><p>在JDK5.0 之前如何声明枚举类呢？</p><ul><li><code>私有化</code>类的构造器，保证不能在类的外部创建其对象</li><li>在类的内部创建枚举类的实例。声明为：<code>public static final</code> ，对外暴露这些常量对象</li><li>对象如果有<code>实例变量</code>，应该声明为<code>private final</code>（建议，不是必须），并在构造器中初始化</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SEASONNAME;<span class="comment">//季节的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SEASONDESC;<span class="comment">//季节的描述</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.SEASONNAME = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.SEASONDESC = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">"春天"</span>, <span class="string">"春暖花开"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">"夏天"</span>, <span class="string">"夏日炎炎"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">"秋天"</span>, <span class="string">"秋高气爽"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">"冬天"</span>, <span class="string">"白雪皑皑"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Season&#123;"</span> +<span class="string">"SEASONNAME='"</span> + SEASONNAME + <span class="string">'\''</span> +<span class="string">", SEASONDESC='"</span> + SEASONDESC + <span class="string">'\''</span> +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeasonTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Season.AUTUMN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-定义枚举类（JDK5-0-之后）"><a href="#9-3-定义枚举类（JDK5-0-之后）" class="headerlink" title="9.3 定义枚举类（JDK5.0 之后）"></a>9.3 定义枚举类（JDK5.0 之后）</h3><h4 id="9-3-1-enum关键字声明枚举"><a href="#9-3-1-enum关键字声明枚举" class="headerlink" title="9.3.1 enum关键字声明枚举"></a>9.3.1 enum关键字声明枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">【修饰符】 <span class="keyword">enum</span> 枚举类名&#123;</span><br><span class="line">    常量对象列表</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【修饰符】 <span class="keyword">enum</span> 枚举类名&#123;</span><br><span class="line">    常量对象列表;</span><br><span class="line">    对象的实例变量列表;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Week &#123;</span><br><span class="line">    MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnum</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Season spring = Season.SPRING;</span><br><span class="line">System.out.println(spring);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-2-enum方式定义的要求和特点"><a href="#9-3-2-enum方式定义的要求和特点" class="headerlink" title="9.3.2 enum方式定义的要求和特点"></a>9.3.2 enum方式定义的要求和特点</h4><ul><li>枚举类的常量对象列表必须在枚举类的首行，因为是常量，所以建议大写。</li><li>列出的实例系统会自动添加 public static final 修饰。</li><li>如果常量对象列表后面没有其他代码，那么“；”可以省略，否则不可以省略“；”。</li><li>编译器给枚举类默认提供的是private的无参构造，如果枚举类需要的是无参构造，就不需要声明，写常量对象列表时也不用加参数</li><li>如果枚举类需要的是有参构造，需要手动定义，有参构造的private可以省略，调用有参构造的方法就是在常量对象名后面加(实参列表)就可以。</li><li>枚举类默认继承的是java.lang.Enum类，因此不能再继承其他的类型。</li><li>JDK5.0 之后switch，提供支持枚举类型，case后面可以写枚举常量名，无需添加枚举类作为限定。</li></ul><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SeasonEnum &#123;</span><br><span class="line">    SPRING(<span class="string">"春天"</span>,<span class="string">"春风又绿江南岸"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>,<span class="string">"映日荷花别样红"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>,<span class="string">"秋水共长天一色"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>,<span class="string">"窗含西岭千秋雪"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SeasonEnum</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Week &#123;</span><br><span class="line">    MONDAY(<span class="string">"星期一"</span>),</span><br><span class="line">    TUESDAY(<span class="string">"星期二"</span>),</span><br><span class="line">    WEDNESDAY(<span class="string">"星期三"</span>),</span><br><span class="line">    THURSDAY(<span class="string">"星期四"</span>),</span><br><span class="line">    FRIDAY(<span class="string">"星期五"</span>),</span><br><span class="line">    SATURDAY(<span class="string">"星期六"</span>),</span><br><span class="line">    SUNDAY(<span class="string">"星期日"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Week</span><span class="params">(String description)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() +<span class="string">":"</span>+ description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWeek</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Week week = Week.MONDAY;</span><br><span class="line">        System.out.println(week);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (week)&#123;</span><br><span class="line">            <span class="keyword">case</span> MONDAY:</span><br><span class="line">                System.out.println(<span class="string">"怀念周末，困意很浓"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TUESDAY:</span><br><span class="line">                System.out.println(<span class="string">"进入学习状态"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WEDNESDAY:</span><br><span class="line">                System.out.println(<span class="string">"死撑"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> THURSDAY:</span><br><span class="line">                System.out.println(<span class="string">"小放松"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRIDAY:</span><br><span class="line">                System.out.println(<span class="string">"又信心满满"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SATURDAY:</span><br><span class="line">                System.out.println(<span class="string">"开始盼周末，无心学习"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SUNDAY:</span><br><span class="line">                System.out.println(<span class="string">"一觉到下午"</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经验之谈：</p><p>开发中，当需要定义一组常量时，强烈建议使用枚举类。</p></blockquote><h3 id="9-4-enum中常用方法"><a href="#9-4-enum中常用方法" class="headerlink" title="9.4 enum中常用方法"></a>9.4 enum中常用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. String toString(): 默认返回的是常量名（对象名），可以继续手动重写该方法！</span><br><span class="line">    </span><br><span class="line">2. static 枚举类型[] values():返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值，是一个静态方法</span><br><span class="line">    </span><br><span class="line">3. static 枚举类型 valueOf(String name)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。</span><br><span class="line">    </span><br><span class="line">4. String name():得到当前枚举常量的名称。建议优先使用toString()。</span><br><span class="line">    </span><br><span class="line">5. int ordinal():返回当前枚举常量的次序号，默认从0开始</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.toString()   ---返回常量名(对象名)</span></span><br><span class="line">        System.out.println(Season1.SPRING);</span><br><span class="line">        System.out.println(Season1.AUTUMN);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.name()   ---得到当前枚举常量的名称  [建议先用toString()[</span></span><br><span class="line">        System.out.println(Season1.AUTUMN.name());</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        <span class="comment">//3.values()  ---返回枚举类型的对象数组，可以方便遍历所有的枚举值</span></span><br><span class="line">        Season1[] values=Season1.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            System.out.println(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.valueOf(String name)  ---一个字符串转为对应的枚举类对象  [要求字符串必须是枚举类对象的"名字"]</span></span><br><span class="line">        String objName=<span class="string">"WINTER"</span>;</span><br><span class="line">        Season1 s1=Season1.valueOf(objName);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.ordinal()   ---返回当前枚举常量的次序号[从0开始]</span></span><br><span class="line">        System.out.println(Season1.AUTUMN.ordinal());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Season1&#123;</span><br><span class="line">    <span class="comment">//1.开头必须声明多个对象 之间用逗号隔开</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>, <span class="string">"春暖花开"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>, <span class="string">"夏日炎炎"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>, <span class="string">"秋高气爽"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>, <span class="string">"白雪皑皑"</span>);</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName, String seasoonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasoonDesc = seasoonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.声明当前类的对象的实例变量   --只让他获取(private)但是不能修改(没有set方法) 【get方法/构造器内赋值】</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;   <span class="comment">//季节的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasoonDesc;  <span class="comment">//季节的描述</span></span><br><span class="line">    <span class="comment">//3.提供get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasoonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasoonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终输出:</span><br><span class="line">SPRING</span><br><span class="line">AUTUMN</span><br><span class="line">---------</span><br><span class="line">AUTUMN</span><br><span class="line">---------</span><br><span class="line">SPRING</span><br><span class="line">SUMMER</span><br><span class="line">AUTUMN</span><br><span class="line">WINTER</span><br><span class="line">---------</span><br><span class="line">WINTER</span><br><span class="line">---------</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="9-5-实现接口的枚举类"><a href="#9-5-实现接口的枚举类" class="headerlink" title="9.5 实现接口的枚举类"></a>9.5 实现接口的枚举类</h3><ul><li>和普通 Java 类一样，枚举类可以<strong>实现一个/多个接口</strong></li><li>若每个枚举值呈现<strong>相同</strong>的行为方式，<strong>统一实现</strong>该方法。</li><li>若每个枚举值呈现出不同的行为方式，让每个枚举值<strong>分别实现</strong>该方法</li></ul><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、枚举类可以像普通的类一样，实现接口，并且可以多个，但要求必须实现里面所有的抽象方法！</span></span><br><span class="line"><span class="keyword">enum</span> A implements 接口<span class="number">1</span>，接口<span class="number">2</span>&#123;</span><br><span class="line"><span class="comment">//抽象方法的实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、如果枚举类的常量可以继续重写抽象方法!</span></span><br><span class="line"><span class="keyword">enum</span> A implements 接口<span class="number">1</span>，接口<span class="number">2</span>&#123;</span><br><span class="line">    常量名<span class="number">1</span>(参数)&#123;</span><br><span class="line">        <span class="comment">//抽象方法的实现或重写</span></span><br><span class="line">    &#125;,</span><br><span class="line">    常量名<span class="number">2</span>(参数)&#123;</span><br><span class="line">        <span class="comment">//抽象方法的实现或重写</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;  <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Season1 implements Info&#123;</span><br><span class="line">    <span class="comment">//1.开头必须声明多个对象 之间用逗号隔开</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>, <span class="string">"春暖花开"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"春天在哪里？"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>, <span class="string">"夏日炎炎"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"春天在哪里？"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>, <span class="string">"秋高气爽"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"春天在哪里？"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>, <span class="string">"白雪皑皑"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"春天在哪里？"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName, String seasoonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasoonDesc = seasoonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明当前类的对象的实例变量   --只让他获取(private)但是不能修改(没有set方法) 【get方法/构造器内赋值】</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;   <span class="comment">//季节的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasoonDesc;  <span class="comment">//季节的描述</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasoonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasoonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"统一的重写"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-注解-Annotation"><a href="#10-注解-Annotation" class="headerlink" title="10. 注解(Annotation)"></a>10. 注解(Annotation)</h2><h3 id="10-1-注解概述"><a href="#10-1-注解概述" class="headerlink" title="10.1 注解概述"></a>10.1 注解概述</h3><h4 id="10-1-1-什么是注解"><a href="#10-1-1-什么是注解" class="headerlink" title="10.1.1 什么是注解"></a>10.1.1 什么是注解</h4><p>注解（Annotation）是从<code>JDK5.0</code>开始引入，以“<code>@注解名</code>”在代码中存在。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(value=”unchecked”)</span><br></pre></td></tr></table></figure><p>Annotation 可以像修饰符一样被使用，<br>①修饰包、类、构造器、方法、成员变量、参数、局部变量的声明、<br>②参数值。这些信息被保存在注解的 “name=value” 中。</p><p>注解可以在类编译、运行时进行加载，体现不同的功能。</p><h4 id="10-1-2-注解与注释"><a href="#10-1-2-注解与注释" class="headerlink" title="10.1.2 注解与注释"></a>10.1.2 注解与注释</h4><p>注解也可以看做是一种注释，通过使用 Annotation，程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。但是，注解，不同于单行注释和多行注释。</p><ul><li>对于单行注释和多行注释是给程序员看的。</li><li>而注解是可以被编译器或其他程序读取的。程序还可以根据注解的不同，做出相应的处理。</li></ul><h4 id="10-1-3-注解的重要性"><a href="#10-1-3-注解的重要性" class="headerlink" title="10.1.3 注解的重要性"></a>10.1.3 注解的重要性</h4><p>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在<code>JavaEE/Android中注解占据了更重要的角色</code>，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的<code>繁冗代码</code>和<code>XML配置</code>等。</p><p>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，Struts2有一部分也是基于注解的了。<code>注解是一种趋势</code>，一定程度上可以说：<code>框架 = 注解 + 反射 + 设计模式</code>。</p><h3 id="10-2-常见的Annotation作用"><a href="#10-2-常见的Annotation作用" class="headerlink" title="10.2 常见的Annotation作用"></a>10.2 常见的Annotation作用</h3><p><strong>示例1：生成文档相关的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@author</span> 标明开发该类模块的作者，多个作者之间使用,分割</span><br><span class="line"><span class="meta">@version</span> 标明该类模块的版本</span><br><span class="line"><span class="meta">@see</span> 参考转向，也就是相关主题</span><br><span class="line"><span class="meta">@since</span> 从哪个版本开始增加的</span><br><span class="line"><span class="meta">@param</span> 对方法中某参数的说明，如果没有参数就不能写</span><br><span class="line"><span class="meta">@return</span> 对方法返回值的说明，如果方法的返回值类型是<span class="keyword">void</span>就不能写</span><br><span class="line"><span class="meta">@exception</span> 对方法可能抛出的异常进行说明 ，如果方法没有用<span class="keyword">throws</span>显式抛出的异常就不能写</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation.javadoc;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Math.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavadocTest</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 程序的主方法，程序的入口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args String[] 命令行参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求圆面积的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> radius double 半径值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> double 圆的面积</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2：在编译时进行格式检查(JDK内置的三个基本注解)</strong></p><p><code>@Override</code>: 限定重写父类方法，该注解只能用于方法</p><p><code>@Deprecated</code>: 用于表示所修饰的元素(类，方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p><p><code>@SuppressWarnings</code>: 抑制编译器警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation.javadoc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"过时的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"重写的toString方法()"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例3：跟踪代码依赖性，实现替代配置文件功能</strong></p><ul><li>Servlet3.0提供了注解(annotation)，使得不再需要在web.xml文件中进行Servlet的部署。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Spring框架中关于“事务”的管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.REQUIRES_NEW,isolation=Isolation.READ_COMMITTED,readOnly=<span class="keyword">false</span>,timeout=<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyBook</span><span class="params">(String username, String isbn)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.查询书的单价</span></span><br><span class="line">    <span class="keyword">int</span> price = bookShopDao.findBookPriceByIsbn(isbn);</span><br><span class="line">    <span class="comment">//2. 更新库存</span></span><br><span class="line">    bookShopDao.updateBookStock(isbn);</span><br><span class="line">    <span class="comment">//3. 更新用户的余额</span></span><br><span class="line">    bookShopDao.updateUserAccount(username, price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置每个方法使用的事务属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"buyBook"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">isolation</span>=<span class="string">"READ_COMMITTED"</span>  <span class="attr">read-only</span>=<span class="string">"false"</span>  <span class="attr">timeout</span>=<span class="string">"3"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-三个最基本的注解"><a href="#10-3-三个最基本的注解" class="headerlink" title="10.3 三个最基本的注解"></a>10.3 三个最基本的注解</h3><h4 id="10-3-1-Override"><a href="#10-3-1-Override" class="headerlink" title="10.3.1 @Override"></a>10.3.1 @Override</h4><ul><li>用于检测被标记的方法为有效的重写方法，如果不是，则报编译错误！</li></ul><ul><li>只能标记在方法上。</li></ul><ul><li>它会被编译器程序读取。</li></ul><h4 id="10-3-2-Deprecated"><a href="#10-3-2-Deprecated" class="headerlink" title="10.3.2 @Deprecated"></a>10.3.2 @Deprecated</h4><ul><li>用于表示被标记的数据已经过时，不推荐使用。</li></ul><ul><li>可以用于修饰 属性、方法、构造、类、包、局部变量、参数。</li></ul><ul><li>它会被编译器程序读取。</li></ul><h4 id="10-3-3-SuppressWarnings"><a href="#10-3-3-SuppressWarnings" class="headerlink" title="10.3.3 @SuppressWarnings"></a>10.3.3 @SuppressWarnings</h4><ul><li>抑制编译警告。当我们不希望看到警告信息的时候，可以使用 SuppressWarnings 注解来抑制警告信息</li></ul><ul><li>可以用于修饰类、属性、方法、构造、局部变量、参数</li></ul><ul><li><p>它会被编译器程序读取。</p></li><li><p>可以指定的警告类型有（了解）</p><ul><li>all，抑制所有警告</li><li>unchecked，抑制与未检查的作业相关的警告</li><li>unused，抑制与未用的程式码及停用的程式码相关的警告</li><li>deprecation，抑制与淘汰的相关警告</li><li>nls，抑制与非 nls 字串文字相关的警告</li><li>null，抑制与空值分析相关的警告</li><li>rawtypes，抑制与使用 raw 类型相关的警告</li><li>static-access，抑制与静态存取不正确相关的警告</li><li>static-method，抑制与可能宣告为 static 的方法相关的警告</li><li>super，抑制与置换方法相关但不含 super 呼叫的警告</li><li>…</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line">        Father f = <span class="keyword">new</span> Son();</span><br><span class="line">        f.show();</span><br><span class="line">        f.methodOl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Father.show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodOl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Father Method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">void method01() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("Son Method");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-4-元注解"><a href="#10-4-元注解" class="headerlink" title="10.4 元注解"></a>10.4 元注解</h3><p><strong>元注解</strong>:对现有的注解进行解释说明的注解。</p><p>JDK1.5在java.lang.annotation包定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。</p><p>（1）<strong>@Target：</strong>用于描述注解的使用范围</p><ul><li>可以通过枚举类型ElementType的10个常量对象来指定</li><li>TYPE，METHOD，CONSTRUCTOR，PACKAGE…..</li></ul><p>（2）<strong>@Retention：</strong>用于描述注解的生命周期</p><ul><li>可以通过枚举类型RetentionPolicy的3个常量对象来指定</li><li>SOURCE（源代码）、CLASS（字节码）、RUNTIME（运行时）</li><li><code>唯有RUNTIME阶段才能被反射读取到</code>。</li></ul><p>（3）<strong>@Documented</strong>：表明这个注解应该被 javadoc工具记录。</p><p>（4）<strong>@Inherited：</strong>允许子类继承父类中的注解</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>拓展：元数据</p><p>String name = “Tom”;</p></blockquote><h3 id="10-5-自定义注解的使用"><a href="#10-5-自定义注解的使用" class="headerlink" title="10.5 自定义注解的使用"></a>10.5 自定义注解的使用</h3><p>一个完整的注解应该包含三个部分：<br>（1）声明<br>（2）使用<br>（3）读取</p><h4 id="10-5-1-声明自定义注解"><a href="#10-5-1-声明自定义注解" class="headerlink" title="10.5.1 声明自定义注解"></a>10.5.1 声明自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【元注解】</span><br><span class="line">【修饰符】 <span class="meta">@interface</span> 注解名&#123;</span><br><span class="line">    【成员列表】</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义注解可以通过四个元注解@Retention,@Target，@Inherited,@Documented，分别说明它的声明周期，使用位置，是否被继承，是否被生成到API文档中。</li><li>Annotation 的成员在 Annotation 定义中以<strong>无参数有返回值的抽象方法</strong>的形式来声明，我们又称为<strong>配置参数</strong>。返回值类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组。</li><li>可以使用 default 关键字为抽象方法指定默认返回值</li><li>如果定义的注解含有抽象方法，那么<strong>使用时必须指定返回值</strong>，除非它有默认值。格式是“方法名 = 返回值”，如果只有一个抽象方法需要赋值，且方法名为value，可以省略“value=”，所以如果注解只有一个抽象方法成员，建议使用方法名value。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">columnType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-5-2-使用自定义注解"><a href="#10-5-2-使用自定义注解" class="headerlink" title="10.5.2 使用自定义注解"></a>10.5.2 使用自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(<span class="string">"t_stu"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span>(columnName = <span class="string">"sid"</span>,columnType = <span class="string">"int"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Column</span>(columnName = <span class="string">"sname"</span>,columnType = <span class="string">"varchar(20)"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-5-3-读取和处理自定义注解"><a href="#10-5-3-读取和处理自定义注解" class="headerlink" title="10.5.3 读取和处理自定义注解"></a>10.5.3 读取和处理自定义注解</h4><p>自定义注解必须配上注解的信息处理流程才有意义。</p><p>我们自己定义的注解，只能使用反射的代码读取。所以自定义注解的声明周期必须是RetentionPolicy.RUNTIME。</p><p>具体的使用见<code>《尚硅谷_宋红康_第17章_反射机制.md》</code>。</p><h3 id="10-6-JUnit单元测试"><a href="#10-6-JUnit单元测试" class="headerlink" title="10.6 JUnit单元测试"></a>10.6 JUnit单元测试</h3><h4 id="10-6-1-测试分类"><a href="#10-6-1-测试分类" class="headerlink" title="10.6.1 测试分类"></a>10.6.1 测试分类</h4><p><strong>黑盒测试：</strong>不需要写代码，给输入值，看程序是否能够输出期望的值。 </p><p><strong>白盒测试：</strong>需要写代码的。关注程序具体的执行流程。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203694.png" alt="image-20220511181800694" style="zoom: 50%;"><p><img src=".images/image-20220524102038600.png" alt="image-20220524102038600"></p><h4 id="10-6-2-JUnit单元测试介绍"><a href="#10-6-2-JUnit单元测试介绍" class="headerlink" title="10.6.2 JUnit单元测试介绍"></a>10.6.2 JUnit单元测试介绍</h4><p>JUnit 是由 Erich Gamma 和 Kent Beck 编写的一个测试框架（regression testing framework），供Java开发人员编写单元测试之用。</p><p><strong>JUnit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。</strong></p><p>要使用JUnit，必须在项目的编译路径中<code>引入JUnit的库</code>，即相关的.class文件组成的jar包。jar就是一个压缩包，压缩包都是开发好的第三方（Oracle公司第一方，我们自己第二方，其他都是第三方）工具类，都是以class文件形式存在的。</p><h4 id="10-6-3-引入本地JUnit-jar"><a href="#10-6-3-引入本地JUnit-jar" class="headerlink" title="10.6.3 引入本地JUnit.jar"></a>10.6.3 引入本地JUnit.jar</h4><p>第1步：在项目中File-Project Structure中操作：添加Libraries库</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203431.png" alt="image-20211228180938922" style="zoom:80%;"><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203997.png" alt="image-20221002195547325"></p><p>其中，junit-libs包内容如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203271.png" alt="image-20220813005206452"></p><p>第2步：选择要在哪些module中应用JUnit库</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204752.png" alt="image-20220813005511062"></p><p>第3步：检查是否应用成功</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212203435.png" alt="image-20220813005729233"></p><p><strong>注意Scope：选择Compile，否则编译时，无法使用JUnit。</strong></p><p>第4步：下次如果有新的模块要使用该libs库，这样操作即可</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204191.png" alt="image-20220813005944022"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204980.png" alt="image-20220813010018152"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204579.png" alt="image-20220813010055217"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204484.png" alt="image-20220813010124381"></p><h4 id="10-6-4-编写和运行-Test单元测试方法"><a href="#10-6-4-编写和运行-Test单元测试方法" class="headerlink" title="10.6.4 编写和运行@Test单元测试方法"></a>10.6.4 编写和运行@Test单元测试方法</h4><p>JUnit4版本，要求@Test标记的方法必须满足如下要求：</p><ul><li>所在的类必须是public的，非抽象的，包含唯一的无参构造器。</li><li>@Test标记的方法本身必须是public，非抽象的，非静态的，void无返回值，()无参数的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUnit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TestJUnit.test01"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TestJUnit.test02"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TestJUnit.test03"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204748.png" alt="image-20220106152412245"></p><h4 id="10-6-5-设置执行JUnit用例时支持控制台输入"><a href="#10-6-5-设置执行JUnit用例时支持控制台输入" class="headerlink" title="10.6.5 设置执行JUnit用例时支持控制台输入"></a>10.6.5 设置执行JUnit用例时支持控制台输入</h4><p><strong>1. 设置数据：</strong></p><p>默认情况下，在单元测试方法中使用Scanner时，并不能实现控制台数据的输入。需要做如下设置：</p><p>在<code>idea64.exe.vmoptions配置文件</code>中加入下面一行设置，重启idea后生效。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">-Deditable.java.test.console</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><strong>2. 配置文件位置：</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204236.png" alt="image-20220813011625546"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204939.png" alt="image-20220813011642180"></p><p>添加完成之后，重启IDEA即可。</p><p><strong>3. 如果上述位置设置不成功，需要继续修改如下位置</strong></p><p>修改位置1：IDEA安装目录的bin目录（例如：<code>D:\develop_tools\IDEA\IntelliJ IDEA 2022.1.2\bin</code>）下的idea64.exe.vmoptions文件。 </p><p>修改位置2：C盘的用户目录<code>C:\Users\用户名\AppData\Roaming\JetBrains\IntelliJIdea2022.1</code> 下的idea64.exe.vmoptions`件。</p><h4 id="10-6-6-定义test测试方法模板"><a href="#10-6-6-定义test测试方法模板" class="headerlink" title="10.6.6 定义test测试方法模板"></a>10.6.6 定义test测试方法模板</h4><p>选中自定义的模板组，点击”+”（1.Live Template）来定义模板。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204667.png" alt="image-20211229100040505"></p><h2 id="11-包装类"><a href="#11-包装类" class="headerlink" title="11. 包装类"></a>11. 包装类</h2><h3 id="11-1-为什么需要包装类"><a href="#11-1-为什么需要包装类" class="headerlink" title="11.1 为什么需要包装类"></a>11.1 为什么需要包装类</h3><p>Java提供了两个类型系统，<code>基本数据类型</code>与<code>引用数据类型</code>。使用基本数据类型在于效率，然而当要使用只针对对象设计的API或新特性（例如泛型），怎么办呢？例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况1：方法形参</span></span><br><span class="line">Object类的equals(Object obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况2：方法形参</span></span><br><span class="line">ArrayList类的add(Object obj)</span><br><span class="line"><span class="comment">//没有如下的方法：</span></span><br><span class="line">add(<span class="keyword">int</span> number)</span><br><span class="line">add(<span class="keyword">double</span> d)</span><br><span class="line">add(<span class="keyword">boolean</span> b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况3：泛型</span></span><br><span class="line">Set&lt;T&gt;</span><br><span class="line">List&lt;T&gt;</span><br><span class="line">Cllection&lt;T&gt;</span><br><span class="line">Map&lt;K,V&gt;</span><br></pre></td></tr></table></figure><h3 id="11-2-有哪些包装类"><a href="#11-2-有哪些包装类" class="headerlink" title="11.2 有哪些包装类"></a>11.2 有哪些包装类</h3><p>Java针对八种基本数据类型定义了相应的引用类型：包装类（封装类）。<strong>有了类的特点</strong>，就<strong>可以调用类中的方法</strong>，Java才是真正的面向对象。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204626.png" alt="image-20220329001912486" style="zoom:80%;"><p>封装以后的，内存结构对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">520</span>;</span><br><span class="line">Integer obj = <span class="keyword">new</span> Integer(<span class="number">520</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204365.png" alt="image-20220514163725830" style="zoom:80%;"><h3 id="11-3-自定义包装类"><a href="#11-3-自定义包装类" class="headerlink" title="11.3 自定义包装类"></a>11.3 自定义包装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"><span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInteger</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写toString方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(value);  <span class="comment">//返回valueOf方法的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-4-包装类与基本数据类型间的转换"><a href="#11-4-包装类与基本数据类型间的转换" class="headerlink" title="11.4 包装类与基本数据类型间的转换"></a>11.4 包装类与基本数据类型间的转换</h3><h4 id="11-4-1-装箱"><a href="#11-4-1-装箱" class="headerlink" title="11.4.1 装箱"></a>11.4.1 装箱</h4><p> <strong>装箱：把基本数据类型转为包装类对象</strong></p><blockquote><p>转为包装类的对象，是为了使用专门为对象设计的API和特性</p></blockquote><p>基本数值—-&gt;包装对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer obj1 = <span class="keyword">new</span> Integer(<span class="number">4</span>);<span class="comment">//使用构造函数函数</span></span><br><span class="line">Float f = <span class="keyword">new</span> Float(“<span class="number">4.56</span>”);</span><br><span class="line">Long l = <span class="keyword">new</span> Long(“asdf”);  <span class="comment">//NumberFormatException</span></span><br><span class="line"></span><br><span class="line">Integer obj2 = Integer.valueOf(<span class="number">4</span>);<span class="comment">//使用包装类中的valueOf方法</span></span><br></pre></td></tr></table></figure><h4 id="11-4-2-拆箱"><a href="#11-4-2-拆箱" class="headerlink" title="11.4.2 拆箱"></a>11.4.2 拆箱</h4><p><strong>拆箱：把包装类对象拆为基本数据类型</strong></p><blockquote><p>转为基本数据类型，一般是因为需要运算，Java中的大多数运算符是为基本数据类型设计的。比较、算术等</p></blockquote><p>包装对象—-&gt;基本数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer obj = <span class="keyword">new</span> Integer(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">int</span> num1 = obj.intValue();</span><br></pre></td></tr></table></figure><p><strong>自动装箱与拆箱：</strong></p><p>由于我们经常要做基本类型与包装类之间的转换，从<code>JDK5.0</code>开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">4</span>;<span class="comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span></span><br><span class="line">i = i + <span class="number">5</span>;<span class="comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span></span><br><span class="line"><span class="comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：只能与自己对应的类型之间才能实现自动装箱与拆箱。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">1</span>;</span><br><span class="line">Double d = <span class="number">1</span>;<span class="comment">//错误的，1是int类型</span></span><br></pre></td></tr></table></figure><h3 id="11-5-基本数据类型、包装类与字符串间的转换"><a href="#11-5-基本数据类型、包装类与字符串间的转换" class="headerlink" title="11.5 基本数据类型、包装类与字符串间的转换"></a>11.5 基本数据类型、包装类与字符串间的转换</h3><p><strong>（1）基本数据类型转为字符串</strong></p><p><strong>方式1：</strong>调用字符串重载的valueOf()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//String str = a;//错误的</span></span><br><span class="line"></span><br><span class="line">String str = String.valueOf(a);</span><br></pre></td></tr></table></figure><p><strong>方式2：</strong>更直接的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">String str = a + <span class="string">""</span>;</span><br></pre></td></tr></table></figure><p><strong>（2）字符串转为基本数据类型</strong></p><p><strong>方式1：</strong>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型，例如：</p><ul><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li></ul><p><strong>方式2：</strong>字符串转为包装类，然后可以自动拆箱为基本数据类型</p><ul><li><code>public static Integer valueOf(String s)</code>：将字符串参数转换为对应的Integer包装类，然后可以自动拆箱为int基本类型</li><li><code>public static Long valueOf(String s)</code>：将字符串参数转换为对应的Long包装类，然后可以自动拆箱为long基本类型</li><li><code>public static Double valueOf(String s)</code>：将字符串参数转换为对应的Double包装类，然后可以自动拆箱为double基本类型</li></ul><p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p><p><strong>方式3：</strong>通过包装类的构造器实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = Integer.parseInt(<span class="string">"整数的字符串"</span>);</span><br><span class="line"><span class="keyword">double</span> d = Double.parseDouble(<span class="string">"小数的字符串"</span>);</span><br><span class="line"><span class="keyword">boolean</span> b = Boolean.parseBoolean(<span class="string">"true或false"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = Integer.valueOf(<span class="string">"整数的字符串"</span>);</span><br><span class="line"><span class="keyword">double</span> d = Double.valueOf(<span class="string">"小数的字符串"</span>);</span><br><span class="line"><span class="keyword">boolean</span> b = Boolean.valueOf(<span class="string">"true或false"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="keyword">new</span> Integer(“<span class="number">12</span>”);</span><br></pre></td></tr></table></figure><p>其他方式小结：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212204066.png" alt="image-20220813012801907"></p><h3 id="11-6-包装类的其它API"><a href="#11-6-包装类的其它API" class="headerlink" title="11.6 包装类的其它API"></a>11.6 包装类的其它API</h3><h4 id="11-6-1-数据类型的最大最小值"><a href="#11-6-1-数据类型的最大最小值" class="headerlink" title="11.6.1 数据类型的最大最小值"></a>11.6.1 数据类型的最大最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer.MAX_VALUE和Integer.MIN_VALUE</span><br><span class="line">    </span><br><span class="line">Long.MAX_VALUE和Long.MIN_VALUE</span><br><span class="line">    </span><br><span class="line">Double.MAX_VALUE和Double.MIN_VALUE</span><br></pre></td></tr></table></figure><h4 id="11-6-2-字符转大小写"><a href="#11-6-2-字符转大小写" class="headerlink" title="11.6.2 字符转大小写"></a>11.6.2 字符转大小写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Character.toUpperCase(<span class="string">'x'</span>);</span><br><span class="line"></span><br><span class="line">Character.toLowerCase(<span class="string">'X'</span>);</span><br></pre></td></tr></table></figure><h4 id="11-6-3-整数转进制"><a href="#11-6-3-整数转进制" class="headerlink" title="11.6.3 整数转进制"></a>11.6.3 整数转进制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer.toBinaryString(<span class="keyword">int</span> i) </span><br><span class="line">    </span><br><span class="line">Integer.toHexString(<span class="keyword">int</span> i)</span><br><span class="line">    </span><br><span class="line">Integer.toOctalString(<span class="keyword">int</span> i)</span><br></pre></td></tr></table></figure><h4 id="11-6-4-比较的方法"><a href="#11-6-4-比较的方法" class="headerlink" title="11.6.4 比较的方法"></a>11.6.4 比较的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Double.compare(<span class="keyword">double</span> d1, <span class="keyword">double</span> d2)</span><br><span class="line">    </span><br><span class="line">Integer.compare(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br></pre></td></tr></table></figure><h3 id="11-7-包装类对象的特点"><a href="#11-7-包装类对象的特点" class="headerlink" title="11.7 包装类对象的特点"></a>11.7 包装类对象的特点</h3><h4 id="11-7-1-包装类缓存对象"><a href="#11-7-1-包装类缓存对象" class="headerlink" title="11.7.1 包装类缓存对象"></a>11.7.1 包装类缓存对象</h4><table><thead><tr><th>包装类</th><th>缓存对象</th></tr></thead><tbody><tr><td>Byte</td><td>-128~127</td></tr><tr><td>Short</td><td>-128~127</td></tr><tr><td>Integer</td><td>-128~127</td></tr><tr><td>Long</td><td>-128~127</td></tr><tr><td>Float</td><td>没有</td></tr><tr><td>Double</td><td>没有</td></tr><tr><td>Character</td><td>0~127</td></tr><tr><td>Boolean</td><td>true和false</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">1</span>;</span><br><span class="line">Integer b = <span class="number">1</span>;</span><br><span class="line">System.out.println(a == b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer i = <span class="number">128</span>;</span><br><span class="line">Integer j = <span class="number">128</span>;</span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Integer m = <span class="keyword">new</span> Integer(<span class="number">1</span>);<span class="comment">//新new的在堆中</span></span><br><span class="line">Integer n = <span class="number">1</span>;<span class="comment">//这个用的是缓冲的常量对象，在方法区</span></span><br><span class="line">System.out.println(m == n);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">1</span>);<span class="comment">//新new的在堆中</span></span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">1</span>);<span class="comment">//另一个新new的在堆中</span></span><br><span class="line">System.out.println(x == y);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Double d1 = <span class="number">1.0</span>;</span><br><span class="line">Double d2 = <span class="number">1.0</span>;</span><br><span class="line">System.out.println(d1==d2);<span class="comment">//false 比较地址，没有缓存对象，每一个都是新new的</span></span><br></pre></td></tr></table></figure><h4 id="11-7-2-类型转换问题"><a href="#11-7-2-类型转换问题" class="headerlink" title="11.7.2 类型转换问题"></a>11.7.2 类型转换问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">1000</span>;  <span class="comment">//先自动拆箱为int  然后自动类型转换为double</span></span><br><span class="line"><span class="keyword">double</span> j = <span class="number">1000</span>;</span><br><span class="line">System.out.println(i==j);<span class="comment">//true  会先将i自动拆箱为int，然后根据基本数据类型“自动类型转换”规则，转为double比较</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">1000</span>;  <span class="comment">//先自动拆箱为int</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1000</span>;</span><br><span class="line">System.out.println(i==j);<span class="comment">//true 会自动拆箱，按照基本数据类型进行比较</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">1</span>;  <span class="comment">//先自动拆箱为int</span></span><br><span class="line">Double d = <span class="number">1.0</span> <span class="comment">//没写;</span></span><br><span class="line">System.out.println(i==d);<span class="comment">//编译报错</span></span><br></pre></td></tr></table></figure><h4 id="11-7-3-包装类对象不可变"><a href="#11-7-3-包装类对象不可变" class="headerlink" title="11.7.3 包装类对象不可变"></a>11.7.3 包装类对象不可变</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExam</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br><span class="line">Circle c = <span class="keyword">new</span> Circle();</span><br><span class="line">change(i,j,c);</span><br><span class="line">System.out.println(<span class="string">"i = "</span> + i);<span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="string">"j = "</span> + j);<span class="comment">//2</span></span><br><span class="line">System.out.println(<span class="string">"c.radius = "</span> + c.radius);<span class="comment">//10.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 方法的参数传递机制：</span></span><br><span class="line"><span class="comment"> * （1）基本数据类型：形参的修改完全不影响实参</span></span><br><span class="line"><span class="comment"> * （2）引用数据类型：通过形参修改对象的属性值，会影响实参的属性值</span></span><br><span class="line"><span class="comment"> * 这类Integer等包装类对象是“不可变”对象，即一旦修改，就是新对象，和实参就无关了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a ,Integer b,Circle c )</span></span>&#123;</span><br><span class="line">a += <span class="number">10</span>;</span><br><span class="line"><span class="comment">//b += 10;//等价于  b = new Integer(b+10);</span></span><br><span class="line">c.radius += <span class="number">10</span>;</span><br><span class="line"><span class="comment">/*c = new Circle();</span></span><br><span class="line"><span class="comment">c.radius+=10;*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-8-练习"><a href="#11-8-练习" class="headerlink" title="11.8 练习"></a>11.8 练习</h3><p>笔试题：如下两个题目输出结果相同吗？各是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object o1 = <span class="keyword">true</span> ? <span class="keyword">new</span> Integer(<span class="number">1</span>) : <span class="keyword">new</span> Double(<span class="number">2.0</span>);  <span class="comment">//在创建的时候要进行统一编译 同时自动类型转换到1.0和2.0</span></span><br><span class="line">System.out.println(o1);<span class="comment">//1.0  相当于创建两个包装类对象</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object o2;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">true</span>)</span><br><span class="line">    o2 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    o2 = <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o2); <span class="comment">//输出1</span></span><br></pre></td></tr></table></figure><p>面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(i == j);  <span class="comment">//输出false  </span></span><br><span class="line"></span><br><span class="line">Integer m = <span class="number">1</span>;</span><br><span class="line">Integer n = <span class="number">1</span>;</span><br><span class="line">System.out.println(m == n);  <span class="comment">//输出true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer内部定义了一个IntegerCache结构，IntegerCache中定义Integer[],保存-128-127范围内的整数。</span></span><br><span class="line"><span class="comment">// 如果我们使用自动装箱的方式【Integer i=xxx;  xxx属于(-128,127]】,就可以直接使用数组中的元素。</span></span><br><span class="line">Integer x = <span class="number">128</span>;  <span class="comment">//128相当于重新new了一个</span></span><br><span class="line">Integer y = <span class="number">128</span>;  <span class="comment">//128相当于重新new了一个</span></span><br><span class="line">System.out.println(x == y);<span class="comment">//输出false</span></span><br></pre></td></tr></table></figure><p>练习：</p><p>利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束），找出最高分，并输出学生成绩等级。</p><ul><li><p>提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。而向量类java.util.Vector可以根据需要动态伸缩。</p></li><li><p>创建Vector对象：Vector v=new Vector();</p></li><li><p>给向量添加元素：v.addElement(Object obj);  //obj必须是对象</p></li><li><p>取出向量中的元素：Object obj=v.elementAt(0);</p><ul><li>注意第一个元素的下标是0，返回值是Object类型的。</li></ul></li><li><p>计算向量的长度：v.size();</p></li><li><p>若与最高分相差10分内：A等；20分内：B等；30分内：C等；其它：D等</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Vector;</span><br><span class="line">public class WrapperTest3 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Vector vector&#x3D;new Vector();</span><br><span class="line">        Scanner input&#x3D;new Scanner(System.in);</span><br><span class="line">        for(;;)&#123;</span><br><span class="line">            double x&#x3D;input.nextDouble();</span><br><span class="line">            if(x&lt;0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                vector.addElement(x);  &#x2F;&#x2F;添加向量</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;向量长度:&quot;+vector.size());</span><br><span class="line">        Vector vector1&#x3D;new Vector();</span><br><span class="line">        double max&#x3D;Integer.MIN_VALUE; &#x2F;&#x2F;寻找最大值</span><br><span class="line">        for(int i&#x3D;0;i&lt;vector.size();i++)&#123;</span><br><span class="line">            Object obj&#x3D;vector.elementAt(i);  &#x2F;&#x2F;取出当前值</span><br><span class="line">            vector1.add(obj); &#x2F;&#x2F;到时候判断用</span><br><span class="line">            double temp&#x3D; (double) obj;  &#x2F;&#x2F;转换为double值</span><br><span class="line">            max&#x3D;(max&gt;temp?max:temp); &#x2F;&#x2F;替换max</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;最大值:&quot;+max);</span><br><span class="line">        for(int i&#x3D;0;i&lt;vector1.size();i++)&#123;</span><br><span class="line">            double cha&#x3D;max-(double)vector1.elementAt(i); &#x2F;&#x2F;要统一为double</span><br><span class="line">            if(cha&lt;10)&#123;</span><br><span class="line">                System.out.println(&quot;A&quot;);</span><br><span class="line">            &#125;else if(cha&lt;20)&#123;</span><br><span class="line">                System.out.println(&quot;B&quot;);</span><br><span class="line">            &#125;else if(cha&lt;30)&#123;</span><br><span class="line">                System.out.println(&quot;C&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.println(&quot;D&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终结果如下:<br><img src=".images/image-20231021185053363.png" alt="image-20231021185053363"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第06章-面向对象编程（基础）&quot;&gt;&lt;a href=&quot;#第06章-面向对象编程（基础）&quot; class=&quot;headerlink&quot; title=&quot;第06章_面向对象编程（基础）&quot;&gt;&lt;/a&gt;第06章_面向对象编程（基础）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;学习面向对象内容的三
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-基础篇</title>
    <link href="https://larkkkkkkk.github.io/2023/10/20/JAVA-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://larkkkkkkk.github.io/2023/10/20/JAVA-%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2023-10-20T06:28:39.000Z</published>
    <updated>2023-10-22T11:21:34.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第01章-Java语言概述"><a href="#第01章-Java语言概述" class="headerlink" title="第01章_Java语言概述"></a>第01章_Java语言概述</h1><hr><h2 id="1-Java知识脉络图"><a href="#1-Java知识脉络图" class="headerlink" title="1. Java知识脉络图"></a>1. Java知识脉络图</h2><h3 id="1-1-Java基础全程脉络图"><a href="#1-1-Java基础全程脉络图" class="headerlink" title="1.1 Java基础全程脉络图"></a>1.1 Java基础全程脉络图</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212049862.png" alt="Java基础全程脉络图" style="zoom: 50%;"><h3 id="1-2-本章专题与脉络"><a href="#1-2-本章专题与脉络" class="headerlink" title="1.2 本章专题与脉络"></a>1.2 本章专题与脉络</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212049247.png" alt="第1阶段：Java基本语法-第01章" style="zoom: 45%;"><h2 id="2-抽丝剥茧话Java"><a href="#2-抽丝剥茧话Java" class="headerlink" title="2. 抽丝剥茧话Java"></a>2. 抽丝剥茧话Java</h2><h3 id="2-1-当前大学生就业形势"><a href="#2-1-当前大学生就业形势" class="headerlink" title="2.1 当前大学生就业形势"></a>2.1 当前大学生就业形势</h3><ul><li><code>麦可思研究院</code>发布了《<strong>2022年中国大学生就业报告</strong>》，针对2021届毕业生收入较高的本科专业排行榜：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212049869.jpeg" alt="img" style="zoom: 50%;"><ul><li><p><code>麦可思研究院</code>发布过《<strong>2021年中国大学生就业报告</strong>》，应届本科毕业生就业数量较大的前十位行业类的就业质量：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212131486.jpg" alt="jiuyezhiliang1" style="zoom: 67%;"></li><li><p>报告还对毕业三年后的2017届毕业生所在十大行业进行了统计：</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212131268.jpg" alt="jiuyezhiliang2" style="zoom: 60%;"><ul><li>从国家统计局发布的2021年全国平均工资来看，不管在城镇非私营单位还是私营单位，<code>IT业均为最高</code>。</li></ul><h3 id="2-2-IT互联网是否依旧靠谱"><a href="#2-2-IT互联网是否依旧靠谱" class="headerlink" title="2.2 IT互联网是否依旧靠谱"></a>2.2 IT互联网是否依旧靠谱</h3><p>过去不能代表未来！互联网是否依旧靠谱？！</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212131466.png" alt="image-20220523002428542" style="zoom:80%;"><blockquote><p>2014 年至 2018 年间，我国网民规模从 6.49 亿增长为 8.29 亿，增幅为 <code>27.5%</code>。同一时间段，全国移动互联网接入的流量却从 20.6EB 增长到了 711.1EB，增幅达 <code>3352%</code>（获取和处理的信息量大幅增加）。 </p><p>随着 5G 技术进一步拓宽移动互联网的速度和容量，<code>产业互联网</code>将在消费型流量的基础上创造生产型流量，根据报告的预测，至 2024 年，全国移动互联网的接入流量将达到 127663.8EB， <code>流量规模达到2018年的179.5倍</code>。</p><p>当下，5G、物联网、人工智能、产业互联网都是国家政策大方向，需要大量<code>能与机器对话</code>的中高端人才。</p></blockquote><h3 id="2-3-IT行业岗位分析"><a href="#2-3-IT行业岗位分析" class="headerlink" title="2.3 IT行业岗位分析"></a>2.3 IT行业岗位分析</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212131364.png" alt="image-20220522234544537" style="zoom: 80%;"><p><strong>软件开发，是进入互联网IT圈最好的选择之一！</strong></p><ul><li>起始薪资高</li><li>工作环境好</li><li>涨薪幅度高</li><li>行业更公平</li></ul><h3 id="2-4-软件开发之Java开发"><a href="#2-4-软件开发之Java开发" class="headerlink" title="2.4 软件开发之Java开发"></a>2.4 软件开发之Java开发</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212131729.png" alt="image-20220504101615999"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212131284.png" alt="image-20220608160444947"></p><ul><li><p><strong>移动应用领域（集成Android平台）</strong>：Java在Android端是主要开发的语言，占有重要的地位。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212131913.png" alt="image-20220511092649122" style="zoom: 65%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132993.jpg" alt="20220608_160310" style="zoom:67%;"></li><li><p><strong>企业级应用领域（JavaEE后台）</strong>：用来开发企业级的应用程序，大型网站如淘宝、京东、12306，以及各大物流、银行、金融、社交、医疗、交通、各种OA系统等都是用JavaEE技术开发的。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132537.png" alt="image-20220511090528043" style="zoom:67%;"></li><li><p><strong>大数据分析、人工智能领域</strong>：流行的大数据框架，如Hadoop、Flink都是用Java编写的。Spark使用Scala编写，但可以用Java开发应用。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132831.png" alt="image-20220511091647358" style="zoom:70%;"><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132016.png" alt="image-20220513233529610"></p><blockquote><p>Eversoft公司在提到2022年Java发展趋势时写道：</p><p><code>Java 是用于开发大数据项目的最主流的语言</code>。我们可以轻松地预测它也将在之后继续<code>主导大数据</code>！</p></blockquote></li><li><p><strong>游戏领域、桌面应用、嵌入式领域：</strong>很多大型游戏的后台、桌面应用等也是Java开发的。</p></li></ul><h3 id="2-5-到底多少人在用Java"><a href="#2-5-到底多少人在用Java" class="headerlink" title="2.5 到底多少人在用Java"></a>2.5 到底多少人在用Java</h3><blockquote><p>2020年，根据 IDC 的报告“Java Turns 25”显示，超过 <code>900 万</code>名开发人员（全球专职开发人员中的 <code>69%</code>）在使用 Java——比其他任何语言都多。该报告指出，大多数企业业务服务都依靠 Java 来实现。</p><p>… Java 一直是开发人员中最流行的编程语言，被誉为“<code>宇宙第一语言</code>”。</p></blockquote><blockquote><p>我想告诉大家：</p><p>“市场的需求比较大，市场的供给比较大”</p><p>“如果你在Java领域里持续积累5-7年以上，那么你至少会成为这个行业的一个专家！”</p></blockquote><h3 id="2-6-八卦一下程序员"><a href="#2-6-八卦一下程序员" class="headerlink" title="2.6 八卦一下程序员"></a>2.6 八卦一下程序员</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132171.png" alt="image-20220602105134523" style="zoom:80%;"><p>还可以是：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132722.png" alt="image-20220602105213557"></p><h3 id="2-7-Java系列课程体系"><a href="#2-7-Java系列课程体系" class="headerlink" title="2.7 Java系列课程体系"></a>2.7 Java系列课程体系</h3><ul><li>见02_学习路线图之《Java中高级程序员全程学习路线图.xmind》</li></ul><h3 id="2-8-Java职业晋升路线图"><a href="#2-8-Java职业晋升路线图" class="headerlink" title="2.8 Java职业晋升路线图"></a>2.8 Java职业晋升路线图</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132922.jpg" alt="技术发展路线"></p><p>薪资数据统计来源：拉勾网</p><h2 id="3-计算机的硬件与软件"><a href="#3-计算机的硬件与软件" class="headerlink" title="3. 计算机的硬件与软件"></a>3. 计算机的硬件与软件</h2><h3 id="3-1-计算机组成：硬件-软件"><a href="#3-1-计算机组成：硬件-软件" class="headerlink" title="3.1 计算机组成：硬件+软件"></a>3.1 计算机组成：硬件+软件</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132971.png" alt="image-20220524152902812"></p><h3 id="3-2-CPU、内存与硬盘"><a href="#3-2-CPU、内存与硬盘" class="headerlink" title="3.2 CPU、内存与硬盘"></a>3.2 CPU、内存与硬盘</h3><ul><li><p><strong>CPU（Central Processing Unit，中央处理器）</strong></p><ul><li>人靠大脑思考，电脑靠CPU来运算、控制。</li></ul></li><li><p><strong>硬盘（Hard Disk Drive）</strong></p><ul><li>计算机最主要的存储设备，容量大，断电数据不丢失。</li><li>正常分类：<code>机械硬盘（HDD）</code>、<code>固态硬盘（SSD）</code>以及<code>混合硬盘（SSHD）</code></li><li>固态硬盘在开机速度和程序加载速度远远高于机械硬盘，缺点就是贵，所有无法完全取代机械硬盘。</li></ul></li><li><p><strong>内存（Memory）</strong></p><ul><li>负责硬盘上的数据与CPU之间数据交换处理</li><li>具体的：保存从硬盘读取的数据，提供给CPU使用；保存CPU的一些临时执行结果，以便CPU下次使用或保存到硬盘。</li><li>断电后数据丢失。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132738.png" alt="image-20220731234604511"></p><h3 id="3-3-输入设备：键盘输入"><a href="#3-3-输入设备：键盘输入" class="headerlink" title="3.3 输入设备：键盘输入"></a>3.3 输入设备：键盘输入</h3><ul><li>熟悉指法</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212132105.png" alt="image-20220517100223784" style="zoom: 80%;"><p>不熟悉键盘的小伙伴，可以“<code>金山打字通</code>”走起了。坚决杜绝<code>二指禅</code>！！</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133533.png" alt="image-20220517100543176" style="zoom:67%;"><h2 id="4-软件相关介绍"><a href="#4-软件相关介绍" class="headerlink" title="4. 软件相关介绍"></a>4. 软件相关介绍</h2><h3 id="4-1-什么是软件"><a href="#4-1-什么是软件" class="headerlink" title="4.1 什么是软件"></a>4.1 什么是软件</h3><p>软件，即一系列按照<code>特定顺序组织</code>的计算机<code>数据</code>和<code>指令</code>的集合。有<strong>系统软件</strong>和<strong>应用软件</strong>之分。</p><blockquote><p>Pascal之父Nicklaus Wirth： “Programs = Data Structures + Algorithms”</p></blockquote><p>系统软件：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133504.png" alt="image-20220522215226273"></p><p>应用软件：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133404.png" alt="macdesk"></p><h3 id="4-2-人机交互方式"><a href="#4-2-人机交互方式" class="headerlink" title="4.2 人机交互方式"></a>4.2 人机交互方式</h3><ul><li><p><strong>图形化界面</strong>（Graphical User Interface，GUI），这种方式简单直观，使用者易于接受，容易上手操作。</p></li><li><p><strong>命令行方式</strong>（Command Line Interface，CLI），需要在控制台输入特定的<code>指令</code>，让计算机完成一些操作。需要记忆一些指令，较为麻烦。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133379" alt="img" style="zoom:67%;"></li></ul><h3 id="4-3-常用的DOS命令"><a href="#4-3-常用的DOS命令" class="headerlink" title="4.3 常用的DOS命令"></a>4.3 常用的DOS命令</h3><p>DOS（Disk Operating System，磁盘操作系统）是Microsoft公司在Windows之前推出的一个操作系统，是单用户、单任务（即只能执行一个任务）的操作系统。现在被Windows系统取代。</p><p>对于Java初学者，学习一些DOS命令，会非常有帮助。</p><p><strong>进入DOS操作窗口：</strong></p><ul><li><p>按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133770.png" alt="image-20220520100110104" style="zoom:80%;"></li></ul><p><strong>常用指令：</strong></p><ul><li><code>操作1：进入和回退</code></li></ul><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>列出当前目录下的文件以及文件夹</td></tr><tr><td>cd 目录</td><td>进入指定单级目录。</td></tr><tr><td>cd 目录1\目录2\…</td><td>进入指定多级目录。cd atguigu\JavaSE</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd \ 或 cd /</td><td>回退到盘符目录。</td></tr></tbody></table><ul><li><code>操作2：增、删</code></li></ul><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>md 文件目录名</td><td>创建指定的文件目录。</td></tr><tr><td>rd 文件目录名</td><td>删除指定的文件目录（如文件目录内有数据，删除失败）</td></tr></tbody></table><ul><li><code>操作3：其它</code></li></ul><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr><tr><td>←  →</td><td>移动光标</td></tr><tr><td>↑  ↓</td><td>调阅历史操作命令</td></tr><tr><td>Delete和Backspace</td><td>删除字符</td></tr></tbody></table><h2 id="5-计算机编程语言"><a href="#5-计算机编程语言" class="headerlink" title="5. 计算机编程语言"></a>5. 计算机编程语言</h2><h3 id="5-1-计算机语言是什么"><a href="#5-1-计算机语言是什么" class="headerlink" title="5.1 计算机语言是什么"></a>5.1 计算机语言是什么</h3><ul><li><p><strong>语言</strong>：是人与人之间用于沟通的一种方式。例如：中国人与中国人用普通话沟通。而中国人要和英国人交流，可以使用英语或普通话。</p></li><li><p><strong>计算机编程语言</strong>，就是人与计算机交流的方式。人们可以使用<code>编程语言</code>对计算机下达<code>命令</code>，让计算机完成人们需要的功能。</p></li><li><p>计算机语言有很多种。如：C 、C++、Java、Go、JavaScript、Python，Scala等。</p></li></ul><blockquote><p>体会：语言 = 语法 + 逻辑</p></blockquote><h3 id="5-2-计算机语言简史"><a href="#5-2-计算机语言简史" class="headerlink" title="5.2 计算机语言简史"></a>5.2 计算机语言简史</h3><ul><li><p><strong>第一代：机器语言（相当于人类的石器时代）</strong></p><ul><li><p>1946年2月14日，世界上第一台计算机<code>ENAC</code>诞生，使用的是最原始的<code>穿孔卡片</code>。这种卡片上使用的是用<code>二进制代码</code>表示的语言，与人类语言差别极大，这种语言就称为<code>机器语言</code>。比如一段典型的机器码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.0000,0000,000000010000 代表 LOAD A, 16</span><br><span class="line">2.0000,0001,000000000001 代表 LOAD B, 1</span><br><span class="line">3.0001,0001,000000010000 代表 STORE B, 16</span><br></pre></td></tr></table></figure></li><li><p>这种语言本质上是计算机能识别的唯一语言，人类很难理解。可以大胆想象”<code>此时的程序员99.9%都是异类！</code>“</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133394.png" alt="image-20220309223406537"></p></li></ul></li><li><p><strong>第二代：汇编语言（相当于人类的青铜&amp;铁器时代）</strong></p><ul><li><p>使用英文缩写的<code>助记符</code>来表示基本的操作，这些助记符构成了汇编语言的基础。比如：<code>LOAD</code>、<code>MOVE</code>等，使人更容易使用。因此，汇编语言也称为<code>符号语言</code>。</p></li><li><p>优点：能编写<code>高效率</code>的程序</p></li><li><p>缺点：汇编语言是<code>面向机器的</code>，不同计算机机型特点不同，因此会有不同的汇编语言，彼此之间<code>不能通用</code>。程序不易移植，较难调试。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133545.png" alt="image-20220309223725671" style="zoom:67%;"></li><li><p>比起机器语言，汇编大大进步了，是机器语言向更高级的语言进化的<code>桥梁</code>。目前仍然应用于工业电子编程领域、软件的加密解密、计算机病毒分析等。</p></li></ul></li><li><p><strong>第三代：高级语言（相当于人类的信息时代）</strong></p><ul><li><p>高级语言发展于20世纪50年代中叶到70年代，是一种<code>接近于人们使用习惯</code>的程序设计语言。它允许程序员使用<code>接近日常英语</code>的指令来编写程序，程序中的符号和算式也与<code>日常用的数学式子</code>差不多，接近于自然语言和数学语言，容易为人们掌握。比如：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133801.png" alt="image-20211218092541175"></p></li><li><p>高级语言<code>独立于机器</code>，有一定的通用性；计算机不能直接识别和执行用高级语言编写的程序，需要使用编译器或者解释器，<code>转换为机器语言</code>才能被识别和执行。</p></li></ul></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133346.png" alt="image-20211218092630678" style="zoom:80%;"><p><img src=".images/image-20211218092541075.png" alt="image-20211218092541075"></p><p>此外，高级语言按照程序设计方法的不同，又分为：<code>面向过程的语言</code>、<code>面向对象的语言</code>。</p><ul><li>C、Pascal、Fortran面向过程的语言</li><li>C++面向过程/面向对象</li><li>Java跨平台的纯面向对象的语言</li><li>C#、Python、JavaScript、Scala…</li></ul><blockquote><p>目前以及可预见的将来，计算机语言仍然处于“第三代高级语言”阶段。但是不管是什么语言，最后都要向机器语言靠近，因为CPU只认识0和1。</p></blockquote><h3 id="5-3-计算机语言排行榜"><a href="#5-3-计算机语言排行榜" class="headerlink" title="5.3 计算机语言排行榜"></a>5.3 计算机语言排行榜</h3><p>TIOBE （<a href="https://www.tiobe.com/tiobe-index/）是一个流行编程语言排行，每月更新。排名权重基于世界范围内" target="_blank" rel="noopener">https://www.tiobe.com/tiobe-index/）是一个流行编程语言排行，每月更新。排名权重基于世界范围内</a> 工程师数量，Google、Bing、Yahoo! 、Wikipedia、Amazon、Youtube和百度这些主流的搜索引擎，也将作为排名权重的参考指标。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133971.png" alt="image-20221027112824724"></p><p>计算机语言走势</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133616.png" alt="image-20221027113511832"></p><h3 id="5-4-编程语言，该学哪个？"><a href="#5-4-编程语言，该学哪个？" class="headerlink" title="5.4 编程语言，该学哪个？"></a>5.4 编程语言，该学哪个？</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133074.png" alt="image-20220310151657860" style="zoom: 50%;"><p>网传的编程语言鄙视链：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212133018.png" alt="image-20220310151750665"></p><ul><li>C语言：万物之源</li></ul><blockquote><ul><li><p>诞生于<code>1972年</code>，由AT&amp;T公司旗下<code>贝尔实验室</code>创建完成，用于构建Unix操作系统。</p></li><li><p>偏向计算机底层操作（操作系统、网络、硬件驱动等）。</p></li><li><p>优势：几乎所有现代编程语言都脱胎于C</p></li><li><p>劣势：相当陡的学习曲线；不支持面向对象编程</p></li></ul></blockquote><ul><li>C++语言：难学的语言</li></ul><blockquote><ul><li>诞生于1983年，作为C语言的增强方案、<code>升级版本</code>。C++是C语言的超集，C语言的大部分知识也适用于C++。</li><li>用途：windows 或 MacOS UI、office全家桶、主流的浏览器、Oracle、MySQL、著名的游戏引擎（如星际争霸、魔兽世界）等</li><li>优势：很多公司都用 C++ 开发核心架构，如 Google、腾讯、百度、阿里云等；面向对象性</li><li>劣势：体系极为庞大，这是世界目前来说<code>最复杂</code>也是<code>最难</code>的编程语言。</li></ul></blockquote><ul><li>C#语言：背靠大树的语言</li></ul><blockquote><ul><li>诞生于<code>2000年</code>，一款强大而灵活的编程语言。靠着<code>微软</code>这棵大树，是多年来windows平台的一门主流编程语言。</li><li>用途：windows桌面应用开发、Windows Azure、游戏开发</li></ul></blockquote><ul><li>PHP语言：最好的语言？</li></ul><blockquote><ul><li>诞生于1994年，一款<code>服务器端脚本语言</code>。最初表示个人主页（Personal Home Page）</li><li>PHP语法和C类似，有很多的模板和框架，简单易懂，也许你可以在短短几天做出web app。它主要用于web端，快速建站网络开发</li><li>劣势：学习门槛太低；其代码运行速度低于大部分编程语言党争对手</li></ul></blockquote><ul><li>Python：易学的语言</li></ul><blockquote><ul><li>诞生于1991年，一种面向对象的语言，虽然运行效率不高，但是<code>开发效率非常高</code>。</li><li>Python被称为<code>胶水语言</code>，哪里都可以用。</li></ul></blockquote><ul><li>JavaScript语言：前端为王</li></ul><blockquote><ul><li>诞生于1995年，网景公司开发完成。</li><li>JavaScript是JavaScript 是目前<code>所有主流浏览器</code>上唯一支持的脚本语言。在前端开发中，占有不可替代的地位。</li></ul></blockquote><ul><li>Java语言：需求旺盛</li></ul><blockquote><ul><li>创建于1995年，Java是一种面向对象、基于类的编程语言。</li><li>Java可能是目前<code>运用最广的项目语言</code>。代码稳定性超过 C 和 C++，生产力远超 C 和 C++。有 JVM 在，可以轻松地跨平台。</li><li>具有强大的开源开发工具，大量的开源共享库。</li><li>Java拥有世界上<code>数量最多</code>的程序员，最不缺人。</li></ul></blockquote><ul><li>Go语言：夹缝中生存</li></ul><blockquote><ul><li>Go 语言现在很受关注，它是取代 C 和 C++ 的另一门有潜力的语言。<ul><li>C 语言太原始了，C++ 太复杂了，Java 太高级了，所以 Go 语言就在这个夹缝中出现了。</li></ul></li><li>Go语言已成为<code>云计算领域</code>事实上的标准语言，尤其是在 Docker/Kubernetes 等项目中。</li><li>Go 语言语法特别简单，你有了 C 和 C++ 的基础，学习 Go 的学习成本基本为零。</li><li>Go社区从Java社区移植了各种优秀的框架或库。</li></ul></blockquote><p>总结：</p><ul><li>程序设计语言有很多种，每种语言都是为了实现某个特定的目的而发明的。</li><li><strong>没有“最好”的语言</strong>，只有在特定场景下相对来说，最适合的语言而已。</li><li>如果你掌握了一种编程语言，也会更容易上手其它的编程语言。关键是学习如何使用<code>程序设计方法</code>来解决问题。这也是本套课程的主旨。</li><li><code>Talk is cheap，Show me the code</code>。</li></ul><h2 id="6-Java语言概述"><a href="#6-Java语言概述" class="headerlink" title="6. Java语言概述"></a>6. Java语言概述</h2><h3 id="6-1-Java概述"><a href="#6-1-Java概述" class="headerlink" title="6.1 Java概述"></a>6.1 Java概述</h3><ul><li><p>是<code>SUN</code>(Stanford University Network，斯坦福大学网络公司 ) <code>1995年</code>推出的一门高级编程语言。</p></li><li><p>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在<code>Web浏览器</code>中运行。这些Java程序被称为<code>Java小程序</code>（applet），内嵌在HTML代码中。</p></li><li><p>伴随着互联网的迅猛发展，以及Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p></li></ul><h3 id="6-2-Java语言简史"><a href="#6-2-Java语言简史" class="headerlink" title="6.2 Java语言简史"></a>6.2 Java语言简史</h3><p><strong>起步阶段：</strong></p><p>1991年，Sun公司的工程师小组想要设计一种语言，应用在<code>电视机</code>、<code>电话</code>、<code>闹钟</code>、<code>烤面包机</code>等家用电器的控制和通信。由于这些设备的<code>处理能力</code>和<code>内存</code>都很有限，并且不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是<code>代码短小</code>、<code>紧凑</code>且<code>与平台无关</code>（即不能与任何特定的体系结构捆绑在一起）。</p><p>Gosling团队率先创造了这个语言，并命名为“<code>Oak</code>“（起名的原因是因为他非常喜欢自己办公室外的橡树)。后因智能化家电的市场需求没有预期的高，Sun公司放弃了该项计划。</p><p>随着20世纪90年代互联网的发展，Sun公司发现该语言在互联网上应用的前景，于是改造了Oak，于1995年5月以Java的名称正式发布。（Java是印度尼西亚<code>爪哇岛</code>的英文名称，因盛产咖啡而闻名。）</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134725.png" alt="image-20220309230839100"></p><p><strong>发展阶段：</strong></p><table><thead><tr><th align="center">发行版本</th><th align="center">发行时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Java 1.0</td><td align="center">1996.01.23</td><td align="center">Sun公司发布了Java的第一个开发工具包</td></tr><tr><td align="center">Java 1.1</td><td align="center">1997.02.19</td><td align="center">JavaOne会议召开，创当时全球同类会议规模之最。</td></tr><tr><td align="center">Java 1.2</td><td align="center">1998.12.08</td><td align="center">Java拆分成：J2SE（标准版）、J2EE（企业版）、J2ME（小型版）</td></tr><tr><td align="center">Java 1.3</td><td align="center">2000.05.08</td><td align="center"></td></tr><tr><td align="center">Java1.4</td><td align="center">2004.02.06</td><td align="center"></td></tr><tr><td align="center"><strong>Java 5.0</strong></td><td align="center"><strong>2004.09.30</strong></td><td align="center"><strong>①版本号从1.4直接更新至5.0；②平台更名为JavaSE、JavaEE、JavaME</strong></td></tr><tr><td align="center">Java 6.0</td><td align="center">2006.12.11</td><td align="center">2009.04.20 Oracle宣布收购SUN公司</td></tr><tr><td align="center"></td><td align="center">2009.04.20</td><td align="center">Oracle公司收购SUN，交易价格<code>74亿</code>美元。</td></tr><tr><td align="center">Java 7.0</td><td align="center">2011.07.02</td><td align="center"></td></tr><tr><td align="center"><strong>Java 8.0</strong></td><td align="center"><strong>2014.03.18</strong></td><td align="center"><strong>此版本是继Java 5.0以来变化最大的版本。是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 9.0</td><td align="center">2017.09.22</td><td align="center">①此版本开始，<strong>每半年更新一次</strong>；②Java 9.0开始不再支持windows 32位系统</td></tr><tr><td align="center">Java 10.0</td><td align="center">2018.03.21</td><td align="center"></td></tr><tr><td align="center"><strong>Java 11.0</strong></td><td align="center"><strong>2018.09.25</strong></td><td align="center"><strong>JDK安装包取消独立JRE安装包，是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 12.0</td><td align="center">2019.03.19</td><td align="center"></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center"><strong>Java17.0</strong></td><td align="center"><strong>2021.09</strong></td><td align="center"><strong>发布Java 17.0，版本号也称为21.9，是长期支持版本。</strong></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center">Java19.0</td><td align="center">2022.09</td><td align="center">发布Java19.0，版本号也称为22.9。</td></tr></tbody></table><h3 id="6-3-Java之父"><a href="#6-3-Java之父" class="headerlink" title="6.3 Java之父"></a>6.3 Java之父</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134991.png" alt="image-20220310152923961" style="zoom:67%;"><ul><li><code>詹姆斯·高斯林(James Gosling)</code>先生以“Java 技术之父”而闻名于世。他是Java 技术的创始人，他亲手设计了Java语言，并开发了Java编译器和Java虚拟机，使Java成为了世界上最流行的开发语言。</li><li>James Gosling于1984 年加入Sun公司，并一直服务于Sun公司，直至2010年前后，Sun被Oracle并购而加入Oracle，担任客户端软件集团的首席技术官; 2010年4月从Oracle离职。</li></ul><h3 id="6-4-公司八卦"><a href="#6-4-公司八卦" class="headerlink" title="6.4 公司八卦"></a>6.4 公司八卦</h3><ul><li><strong>SUN 与 Oracle</strong></li></ul><blockquote><p>SUN是一家<code>极具创新能力</code>的公司，2001年 “9.11”以前，SUN公司市值<code>超过1000亿</code>美元。 但是没能利用Java构建一个强有力、可变现的生态系统，没打好Java这张牌。此后，互联网泡沫破裂，硬件需求大幅减少，它的市值在一个月之内跌幅超过90%。<strong>SUN公司的成长用了20年，而衰落只用了1年！</strong></p></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134123.png" alt="image-20220309230923533" style="zoom: 67%;"><ul><li><strong>Oracle 与 Google</strong></li></ul><blockquote><p>Google和Oracle的侵权事件：</p><p>2010 年 8 月，Oracle 起诉 Google 的 Android 系统侵权，要求赔偿 26 亿美元。</p><ul><li>Oracle认为Google的代码中使用了Java的<code>37个API</code>，并且认为Google是故意为之，因为这样做的好处是可以让更多的Java程序员更容易接受Android的代码。</li><li>Oracle认为Android 中有<code>9行代码</code>直接抄袭了Java的实现。这9行牛气哄哄的代码都出自一人之手，他就是Java 大牛——<code>Joshua Bloch</code>。</li></ul><p>2018 年 3 月，美国联邦巡回上诉法院裁决，谷歌侵犯了甲骨文的版权，支付高达<code>88亿美元</code>的赔偿金。</p><p>2021 年 4 月，美国最高法院给出了最终裁决：谷歌胜诉，其代码属于“合理使用”的范畴。为期十多年的软件行业“第一版权案”落幕。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Code In OpenJDK / Android ：</span></span><br><span class="line"><span class="number">1</span>. <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> arrayLen, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>.    <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line"><span class="number">3</span>.        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</span><br><span class="line"><span class="number">4</span>.                   <span class="string">") &gt; toIndex("</span> + toIndex+<span class="string">")"</span>);</span><br><span class="line"><span class="number">5</span>.    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line"><span class="number">6</span>.        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(fromIndex);</span><br><span class="line"><span class="number">7</span>.    <span class="keyword">if</span> (toIndex &gt; arrayLen)</span><br><span class="line"><span class="number">8</span>.        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(toIndex);</span><br><span class="line"><span class="number">9</span>. &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134314.png" alt="image-20221027145908490"></p><h3 id="6-5-Java技术体系平台"><a href="#6-5-Java技术体系平台" class="headerlink" title="6.5 Java技术体系平台"></a>6.5 Java技术体系平台</h3><ul><li><strong>Java SE(Java Standard Edition)标准版</strong><ul><li>支持面向<code>桌面级应用</code>（如Windows下的应用程序）的Java平台，即定位个人计算机的应用开发。</li><li>包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。</li><li>此版本以前称为J2SE</li></ul></li><li><strong>Java EE(Java Enterprise Edition)企业版</strong><ul><li>为开发企业环境下的应用程序提供的一套解决方案，即定位<code>在服务器端的Web应用开发</code>。</li><li>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术。</li><li>版本以前称为J2EE</li></ul></li><li><strong>Java ME(Java Micro Edition)小型版</strong><ul><li>支持Java程序运行在<code>移动终端（手机、机顶盒）上的平台</code>，即定位在消费性电子产品的应用开发</li><li>JavaME是JavaSE的内伸，精简了JavaSE 的核心类库，同时也提供自己的扩展类。增加了适合微小装置的类库：javax.microedition.io.*等。</li><li>此版本以前称为J2ME</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134205.png" alt="image-20211218093009884"></p><blockquote><p>注意：</p><p>Android开发不等同于Java ME的开发</p></blockquote><h2 id="7-Java开发环境搭建（掌握）"><a href="#7-Java开发环境搭建（掌握）" class="headerlink" title="7. Java开发环境搭建（掌握）"></a>7. Java开发环境搭建（掌握）</h2><h3 id="7-1-什么是JDK、JRE"><a href="#7-1-什么是JDK、JRE" class="headerlink" title="7.1 什么是JDK、JRE"></a>7.1 什么是JDK、JRE</h3><ul><li><strong>JDK</strong>  (<code>J</code>ava <code>D</code>evelopment <code>K</code>it)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</li><li>*<em>JRE *</em> (<code>J</code>ava <code>R</code>untime <code>E</code>nvironment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的<code>核心类库</code>。</li></ul><p>如下是Java 8.0 Platform：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134802.jpg" alt></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134921.png" alt="image-20220310200731185" style="zoom:67%;"><blockquote><p>小结：</p><p>JDK = JRE + 开发工具集（例如Javac编译工具等）</p><p>JRE = JVM + Java SE标准类库</p></blockquote><h3 id="7-2-JDK版本选择"><a href="#7-2-JDK版本选择" class="headerlink" title="7.2 JDK版本选择"></a>7.2 JDK版本选择</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134386.png" alt="image-20221108221057540" style="zoom:80%;"><hr><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134698.png" alt="image-20220310201541841"></p><ul><li>自Java 8版本发布以来，其后的每次更新，都会有小伙伴高呼：<strong>Java8 YYDS！</strong></li><li>论坛的声音：“<code>你发任你发，我用Java 8！</code>”</li></ul><p><strong>数据说话1：</strong></p><p>JRebel 于2022年4月前后发布了《2022 年Java生态系统状况报告》，报告中提到使用Java11 的占比最多，Java 8 紧随其后，如下图。而此前2020年的报告显示，Java8占比达到了<code>84.48%</code>。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134685.jpeg" alt="d315"></p><blockquote><p>我的分析：</p><p>G1是最受欢迎的GC算法。Java 11及更高版本的G1收集器是默认的GC，而Java 8中并不是。出于对G1的喜爱，很多开发者才会选择抛弃Java 8。</p></blockquote><p><strong>数据说话2：</strong></p><p>此外，某美国软件开发商在对近千名专业的Java开发者调研后，发布的《2022年Java开发者生产力报告》称：八年前发布的Java 8依然是Java中应用最广泛的版本，占比 <code>37%</code>，其次是 Java 11，占比<code>29%</code> 。</p><p><strong>高斯林说话：</strong></p><hr><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134128.png" alt="image-20220428151952049" style="zoom: 67%;"><p><strong>Spring框架说话：</strong></p><p>在Java 17正式发布之前，Java开发框架Spring率先在官博宣布，Spring Framework 6和Spring Boot 3计划在2022年第四季度实现总体可用性的高端基线：</p><ul><li>Java 17+(来自 Spring Framework 5.3.x 线中的 Java 8-17)</li></ul><ul><li>Jakarta EE 9+（来自Spring框架5.3.x 线中的 Java EE 7-8）</li></ul><p>Spring 官方说明：<code>https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available</code></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134630.png" alt="image-20220527155439683"></p><blockquote><p>意味着：springboot3.0 是需要用java17和spring6.0为基础建设。如果从企业选型最新springboot3.0作为架构来说，它搭配jdk17肯定是标配了。</p></blockquote><h3 id="7-3-JDK的下载"><a href="#7-3-JDK的下载" class="headerlink" title="7.3 JDK的下载"></a>7.3 JDK的下载</h3><ul><li>下载网址（Oracle公司官网）：</li><li>下载步骤：如图所示，在官网底部选择Developers开发者</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134865.png" alt="1572254490435"></p><p>（1）在Developers页面中间的技术分类部分，选择<code>Java</code>，单击进入，如图所示：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134906.png" alt="image-20211019110551338" style="zoom: 50%;"><p>（2）这里展示的是最新Java版本，例如Java17。单击<code>Download Java</code>，然后选择具体的版本下载。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134881.png" alt="image-20211019110843394" style="zoom:80%;"><p>（3）选择Download Java按钮后</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134161.png" alt="image-20211019111110242"></p><p>（4）如果想安装Java8 可以选择如下位置：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134744.png" alt="image-20211019111150970" style="zoom:80%;"><p>（5）选择Accept License Agreement，</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134176.png" alt="image-20211019111252989" style="zoom:80%;"><p>（6）注册或登录后下载：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134002.png" alt="image-20211019111922387" style="zoom:50%;"><p>（7）如果需要安装其它版本，可以选择Java archive：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134362.png" alt="image-20220801004606762" style="zoom: 67%;"><p>接着进行选择下载即可：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212134115.png" alt="image-20220801004648997" style="zoom:67%;"><h3 id="7-4-JDK的安装"><a href="#7-4-JDK的安装" class="headerlink" title="7.4 JDK的安装"></a>7.4 JDK的安装</h3><ul><li>安装说明<ul><li>傻瓜式安装，下一步即可。</li><li><strong>建议：安装路径不要有中文或者空格等特殊符号。</strong></li><li><strong>本套课程会同时安装JDK8 和 JDK17，并以JDK17为默认版本进行讲解。</strong></li></ul></li></ul><ul><li>安装步骤：</li></ul><p>（1）双击<code>jdk-17_windows-x64_bin.exe</code>文件，并单击下一步，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135020.png" alt="image-20220303083718546"></p><p>（2）修改安装路径，单击更改，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135418.png" alt="image-20220303083759546"></p><p>（3）将安装路径修改为<code>D:\develop_tools\jdk\jdk-17.0.2\</code>，并单击下一步，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135752.png" alt="image-20220303083845794"></p><p>（4）稍后几秒，安装完成，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135332.png" alt="image-20220303083905277"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135316.png" alt="image-20220303083931309"></p><h3 id="7-5-配置path环境变量"><a href="#7-5-配置path环境变量" class="headerlink" title="7.5 配置path环境变量"></a>7.5 配置path环境变量</h3><h4 id="7-5-1-理解path环境变量"><a href="#7-5-1-理解path环境变量" class="headerlink" title="7.5.1 理解path环境变量"></a>7.5.1 理解path环境变量</h4><p><strong>什么是path环境变量？</strong></p><p>答：window操作系统执行命令时，所要搜寻的路径。</p><p><strong>为什么配置path？</strong></p><p>答：希望在命令行使用javac.exe等工具时，任意目录下都可以找到这个工具所在的目录。</p><p><strong>以JDK为例演示</strong></p><p>我们在<code>C:\Users\songhk</code>目录下使用javac命令，结果如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135984.png" alt="image-20220310223852720"></p><p>我们在JDK的安装目录的bin目录下使用javac命令，结果如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135505.png" alt="image-20220607113708022" style="zoom:75%;"><p>我们不可能每次使用java.exe，javac.exe等工具的时候都进入到JDK的安装目录下，太麻烦了。这时就需要配置path环境变量。</p><h4 id="7-5-2-JDK8配置方案1：只配置path"><a href="#7-5-2-JDK8配置方案1：只配置path" class="headerlink" title="7.5.2 JDK8配置方案1：只配置path"></a>7.5.2 JDK8配置方案1：只配置path</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>此电脑</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135800.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135645.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135371.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ,如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135849.png" alt="image-20220310225023208"></p><p>（5）点击<code>新建</code>，填入<code>D:\develop_tools\jdk\jdk1.8.0_271\bin</code>  ，并将此值<code>上移</code>到变量列表的首位。如图所示：</p><ul><li>编辑模式1：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135947.png" alt="image-20220607114102135" style="zoom:80%;"><ul><li>编辑模式2：（注意，结尾需要有英文模式下的;）</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135536.png" alt="image-20220929104547925"></p><p>（6）环境变量配置完成，<strong>重新开启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135386.png" alt="image-20220607114432286" style="zoom:80%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135747.png" alt="image-20220607114517652" style="zoom:90%;"><h4 id="7-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）"><a href="#7-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）" class="headerlink" title="7.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）"></a>7.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>计算机</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135644.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135683.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135209.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，单击<code>新建</code> ，创建新的环境变量，如图所示：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135352.png" alt="image-20220310225245208" style="zoom:90%;"><p>（5）变量名输入<code>JAVA_HOME</code>，变量值输入 <code>D:\develop_tools\jdk\jdk1.8.0_271</code> ，单击<code>确定</code>，如图所示：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212135530.png" alt="image-20220607114800372" style="zoom:80%;"><p>（6）选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ，如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136299.png" alt="image-20220310225023208"></p><p>（7）在变量值的最前面，键入<code>%JAVA_HOME%\bin</code>。如图所示：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136865.png" alt="image-20220607114953758" style="zoom:80%;"><blockquote><p>注意：强烈建议将%JAVA_HOME%\bin声明在path环境变量中所有变量的最前面！</p></blockquote><p>（8）环境变量配置完成，<strong>重启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136321.png" alt="image-20220607114432286" style="zoom:80%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136676.png" alt="image-20220607114517652" style="zoom:90%;"><blockquote><p>我想说：</p><p>有的书籍、论坛、视频上还提到配置classpath，用于指名class文件识别的路径。其实是没必要的，反而建议大家如果配置了classpath环境变量，要删除。对于初学者，反而不友好。</p></blockquote><p><strong>小结如下：</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136203.png" alt="image-20220607115255562"></p><h4 id="7-5-4-JDK17配置方案：自动配置"><a href="#7-5-4-JDK17配置方案：自动配置" class="headerlink" title="7.5.4 JDK17配置方案：自动配置"></a>7.5.4 JDK17配置方案：自动配置</h4><p>不管大家有没有提前安装JDK8或其它版本JDK，在我们安装完JDK17之后，理应按JDK8的方式配置path环境变量。但是，我们发现在安装完JDK17以后，配置环境变量之前，执行CMD指令：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136765.png" alt="image-20220607115700870" style="zoom:80%;"><p>竟然成功了！而且是17.0.2版本。因为JDK17在安装之后，自动进行了环境变量的配置。如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136714.png" alt="image-20220607115840388" style="zoom:80%;"><p>这里建议，将JDK17安装的路径，设置为JAVA_HOME，并将<code>%JAVA_HOME%\bin</code>上移到首位。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136567.png" alt="image-20221110142710972" style="zoom:80%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136600.png" alt="image-20221110142734279" style="zoom:80%;"><blockquote><p>思考：如果你仍然希望在JDK8下开发Java程序？如何做呢？</p></blockquote><h2 id="8-开发体验：HelloWorld（掌握）"><a href="#8-开发体验：HelloWorld（掌握）" class="headerlink" title="8. 开发体验：HelloWorld（掌握）"></a>8. 开发体验：HelloWorld（掌握）</h2><p>JDK安装完毕，我们就可以开发第一个Java程序了，习惯性的称为：HelloWorld。</p><h3 id="8-1-开发步骤"><a href="#8-1-开发步骤" class="headerlink" title="8.1 开发步骤"></a>8.1 开发步骤</h3><p>Java程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><ul><li>将 Java 代码<strong>编写</strong>到扩展名为 .java 的源文件中</li><li>通过 javac.exe 命令对该 java 文件进行<strong>编译</strong>，生成一个或多个字节码文件</li><li>通过 java.exe 命令对生成的 class 文件进行<strong>运行</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136113.png" alt="image-20220310230210728"></p><h3 id="8-2-编写"><a href="#8-2-编写" class="headerlink" title="8.2 编写"></a>8.2 编写</h3><p>（1）在<code>D:\JavaSE\chapter01</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code>。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136552.png" alt="image-20220801010222222" style="zoom:90%;"><p>（2）用记事本或editplus等文本编辑器打开（虽然记事本也可以，但是没有关键字颜色标识，不利于初学者学习）</p><p>（3）在文件中输入如下代码，并且保存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloChina</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld!!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>友情提示1：每个字母和符号必须与示例代码一模一样，包括大小写在内。</strong></p></li><li><p>友情提示2：</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136020.png" alt="image-20220310230618659" style="zoom:67%;"><p>或</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136482.png" alt="image-20220521173215013" style="zoom:90%;"><p>第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code> 编译成JVM可以看懂的<code>字节码文件</code> ，也就是<code>.class</code>文件。</p><h3 id="8-3-编译"><a href="#8-3-编译" class="headerlink" title="8.3 编译"></a>8.3 编译</h3><p>在DOS命令行中，进入<code>D:\JavaSE\chapter01</code>目录，使用<code>javac</code> 命令进行编译。</p><p>使用文件资源管理器打开<code>D:\JavaSE\chapter01</code>目录，然后在地址栏输入cmd。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136674.png" alt="image-20220801010435144" style="zoom:80%;"><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Java源文件名.后缀名java</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136497.png" alt="image-20220801010840640" style="zoom:80%;"><p>编译成功后，命令行没有任何提示。打开<code>D:\JavaSE\chapter01</code>目录，发现产生了一个新的文件 <code>HelloChina.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。 </p><h3 id="8-4-运行"><a href="#8-4-运行" class="headerlink" title="8.4 运行"></a>8.4 运行</h3><p>在DOS命令行中，在字节码文件目录下，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java 主类名字</span><br></pre></td></tr></table></figure><p>主类是指包含main方法的类，main方法是Java程序的入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloChina</span><br></pre></td></tr></table></figure><blockquote><p>错误演示：</p><p>java HelloChina.class</p></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136633.png" alt="image-20220801011104381" style="zoom:80%;"><h2 id="9-Java开发工具"><a href="#9-Java开发工具" class="headerlink" title="9. Java开发工具"></a>9. Java开发工具</h2><h3 id="9-1-都有哪些开发Java的工具"><a href="#9-1-都有哪些开发Java的工具" class="headerlink" title="9.1 都有哪些开发Java的工具"></a>9.1 都有哪些开发Java的工具</h3><ul><li>级别一：文本开发工具</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136597.png" alt="image-20220513185907022" style="zoom:50%;"><ul><li>级别二：集成开发环境（Integrated Development Environment，IDE）</li></ul><blockquote><p>把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136377.png" alt="image-20220513190655773" style="zoom:50%;"><h3 id="9-2-如何选择"><a href="#9-2-如何选择" class="headerlink" title="9.2 如何选择"></a>9.2 如何选择</h3><p>前期我们先使用文本开发工具，培养<code>代码感</code>，利于公司笔、面试。</p><p>后期我们使用IDE，提供<code>更强大的功能支持</code>。</p><h2 id="10-HelloWorld案例常见错误"><a href="#10-HelloWorld案例常见错误" class="headerlink" title="10. HelloWorld案例常见错误"></a>10. HelloWorld案例常见错误</h2><h3 id="10-1-拼写问题"><a href="#10-1-拼写问题" class="headerlink" title="10.1 拼写问题"></a>10.1 拼写问题</h3><ul><li>单词拼写问题<ul><li>正确：class                 错误：Class</li><li>正确：String                    错误：string</li><li>正确：System                  错误：system</li><li>正确：main                 错误：mian</li></ul></li><li>Java语言是一门严格区分大小写的语言</li><li>标点符号使用问题<ul><li>不能用中文符号，英文半角的标点符号（正确）</li><li>括号问题，成对出现</li></ul></li></ul><h3 id="10-2-编译、运行路径问题"><a href="#10-2-编译、运行路径问题" class="headerlink" title="10.2 编译、运行路径问题"></a>10.2 编译、运行路径问题</h3><p>举例1：</p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136664.png" alt="image-20220310231657692" style="zoom:80%;"><ul><li>源文件名不存在或者写错</li><li>当前路径错误</li><li>后缀名隐藏问题</li></ul><p>举例2：</p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136361.png" alt="image-20220310231717893" style="zoom:80%;"><ul><li>类文件名写错，尤其文件名与类名不一致时，要小心</li><li>类文件不在当前路径下，或者不在classpath指定路径下</li></ul><h3 id="10-3-语法问题"><a href="#10-3-语法问题" class="headerlink" title="10.3 语法问题"></a>10.3 语法问题</h3><p>举例1：</p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136895.png" alt="image-20220310231746581" style="zoom:90%;"><p>声明为public的类应与文件名一致，否知编译失败。</p><p>举例2：</p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212136563.png" alt="image-20220310231815405" style="zoom:80%;"><p>编译失败，注意错误出现的行数，再到源代码中指定位置改错</p><h3 id="10-4-字符编码问题"><a href="#10-4-字符编码问题" class="headerlink" title="10.4 字符编码问题"></a>10.4 字符编码问题</h3><p>当cmd命令行窗口的字符编码与.java源文件的字符编码不一致，如何解决？</p><p> <img src=".images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91%E4%B9%B1%E7%A0%81.png" alt="1557881223916"></p><p>解决方案一：</p><ul><li>在Notepad++等编辑器中，修改源文件的字符编码：</li></ul><img src=".images/Notepad%E4%BF%AE%E6%94%B9%E6%BA%90%E6%96%87%E4%BB%B6%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.png" alt="1557881271819" style="zoom:80%;"><ul><li>在EditPlus中可以将Java源文件另存为ANSI编码方式（中文操作系统下即为GBK字符集）</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137738.png" alt="1658810752424" style="zoom:80%;"><p>解决方案二：</p><pre><code>在使用javac命令式，可以指定源文件的字符编码</code></pre><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -encoding utf-<span class="number">8</span> Review01.java</span><br></pre></td></tr></table></figure><h3 id="10-5-建议"><a href="#10-5-建议" class="headerlink" title="10.5 建议"></a>10.5 建议</h3><ul><li><p>注意缩进!</p><ul><li><p>一定要有缩进。缩进就像人得体的衣着一样！</p></li><li><p>只要遇到{}就缩进，缩进的快捷键tab键。</p></li></ul></li><li><p>必要的空格</p><ul><li>变量类型、变量、赋值符号、变量值之间填充相应空格，更美观。比如： int num = 10;</li></ul></li></ul><h2 id="11-HelloWorld小结"><a href="#11-HelloWorld小结" class="headerlink" title="11. HelloWorld小结"></a>11. HelloWorld小结</h2><h3 id="11-1-Java程序的结构与格式"><a href="#11-1-Java程序的结构与格式" class="headerlink" title="11.1 Java程序的结构与格式"></a>11.1 Java程序的结构与格式</h3><p>结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类&#123;</span><br><span class="line">    方法&#123;</span><br><span class="line">        语句;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式：</p><p>（1）每一级缩进一个Tab键</p><p>（2）{}的左半部分在行尾，右半部分单独一行，与和它成对的”{“的行首对齐</p><h3 id="11-2-Java程序的入口"><a href="#11-2-Java程序的入口" class="headerlink" title="11.2 Java程序的入口"></a>11.2 Java程序的入口</h3><p>Java程序的入口是main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-3-两种常见的输出语句"><a href="#11-3-两种常见的输出语句" class="headerlink" title="11.3 两种常见的输出语句"></a>11.3 两种常见的输出语句</h3><ul><li><p><strong>换行输出语句</strong>：输出内容，完毕后进行换行，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(输出内容);</span><br></pre></td></tr></table></figure></li><li><p><strong>直接输出语句</strong>：输出内容，完毕后不做任何处理，格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(输出内容);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意事项：</p><p>​    换行输出语句，括号内可以什么都不写，只做换行处理</p><p>​    直接输出语句，括号内什么都不写的话，编译报错</p></blockquote><h3 id="11-4-源文件名与类名"><a href="#11-4-源文件名与类名" class="headerlink" title="11.4 源文件名与类名"></a>11.4 源文件名与类名</h3><p>（1）源文件名是否必须与类名一致？public呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果这个类不是<span class="keyword">public</span>，那么源文件名可以和类名不一致。但是不便于代码维护。</span><br><span class="line"></span><br><span class="line">如果这个类是<span class="keyword">public</span>，那么要求源文件名必须与类名一致。否则编译报错。</span><br><span class="line"></span><br><span class="line">我们建议大家，不管是否是<span class="keyword">public</span>，都与源文件名保持一致，而且一个源文件尽量只写一个类，目的是为了好维护。</span><br></pre></td></tr></table></figure><p>（2）一个源文件中是否可以有多个类？public呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个源文件中可以有多个类，编译后会生成多个<span class="class">.<span class="keyword">class</span>字节码文件。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">但是一个源文件只能有一个<span class="title">public</span>的类。</span></span><br></pre></td></tr></table></figure><h2 id="12-注释-comment"><a href="#12-注释-comment" class="headerlink" title="12. 注释(comment)"></a>12. 注释(comment)</h2><ul><li><p>什么是注释？</p><ul><li>源文件中用于解释、说明程序的文字就是注释。</li></ul></li><li><p>注释是一个程序员必须要具有的良好编程习惯。实际开发中，程序员可以先将自己的<code>思想</code>通过注释整理出来，再用<code>代码</code>去体现。</p><blockquote><p>程序员最讨厌两件事：</p><p>一件是自己写代码被要求加注释</p><p>另一件是接手别人代码，发现没有注释</p></blockquote></li><li><p>不加注释的危害</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137056.gif" alt></p></li><li><p>Java中的注释类型：</p><ul><li><p>单行注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注释文字</span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">注释文字1 </span><br><span class="line">注释文字2</span><br><span class="line">注释文字3</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>文档注释 (Java特有)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  @author  指定java程序的作者</span><br><span class="line">  @version  指定源文件的版本</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注释的作用</p><ul><li>它提升了程序的可阅读性。（不加注释的危害性，见图。）</li><li>调试程序的重要方法。</li></ul></li><li><p><strong>具体使用1：单行注释、多行注释</strong></p><ul><li><p>对于单行和多行注释，被注释的文字，不会出现在字节码文件中，进而不会被JVM（java虚拟机）解释执行。</p></li><li><p>多行注释里面不允许有多行注释嵌套。</p></li><li><p>一个段子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">A：嘿 <span class="comment">//是什么意思啊？</span></span><br><span class="line">B：嘿.</span><br><span class="line">A：呃 我问你<span class="comment">//是什么意思？</span></span><br><span class="line">B：问吧.</span><br><span class="line">A：我刚才不是问了么？</span><br><span class="line">B：啊？</span><br><span class="line">A：你再看看记录...</span><br><span class="line">B：看完了.</span><br><span class="line">A：......所以<span class="comment">//是啥？</span></span><br><span class="line">B：所以什么？</span><br><span class="line">A：你存心耍我呢吧？</span><br><span class="line">B：没有啊 你想问什么？</span><br><span class="line">……</span><br><span class="line">不断循环之后，A一气之下和B绝交，自己苦学程序。</span><br><span class="line">N年之后，A终于修成正果，回想起B，又把聊天记录翻出来看，这时，他突然发现B没有耍他……</span><br><span class="line">而他自己也不知道当年他问B的究竟是什么问题……</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>具体使用2：文档注释（Java特有）</strong></p><ul><li><p>文档注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></li><li><p>操作方式。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -d mydoc -author -version HelloWorld.java</span><br></pre></td></tr></table></figure></li></ul></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137940.png" alt="image-20220310232527578" style="zoom:67%;"><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释演示。这是我的第一个Java程序！^_^</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> songhk</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Java程序的入口</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> args main方法的命令参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-Java-API文档"><a href="#13-Java-API文档" class="headerlink" title="13. Java API文档"></a>13. Java API文档</h2><ul><li>API （Application Programming Interface，应用程序编程接口）是 Java 提供的基本编程接口。</li><li>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的说明文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。大多数Java书籍中的类的介绍都要参照它来完成，它是编程者经常查阅的资料。</li><li>Java API文档，即为JDK使用说明书、帮助文档。类似于：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137564.jpg" alt="新华字典" style="zoom:28%;"><ul><li>下载API文档：<ul><li>在线看：<a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/17/docs/api/index.html</a></li><li>离线下载：<a href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html</a></li></ul></li></ul><h2 id="14-Java核心机制：JVM"><a href="#14-Java核心机制：JVM" class="headerlink" title="14. Java核心机制：JVM"></a>14. Java核心机制：JVM</h2><h3 id="14-1-Java语言的优缺点"><a href="#14-1-Java语言的优缺点" class="headerlink" title="14.1 Java语言的优缺点"></a>14.1 Java语言的优缺点</h3><p>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。“青出于蓝，而胜于蓝”。</p><h4 id="14-1-1-优点"><a href="#14-1-1-优点" class="headerlink" title="14.1.1 优点"></a>14.1.1 优点</h4><ul><li><strong>跨平台性：</strong>这是Java的核心优势。Java在最初设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。</li><li>通过Java语言编写的应用程序在不同的系统平台上都可以运行。“<code>Write once , Run Anywhere</code>”。</li><li>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (<code>J</code>VM ，Java <code>V</code>irtual <code>M</code>achine) 即可。由JVM来负责Java程序在该系统中的运行。</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137126.jpeg" alt="JVM的跨平台性" style="zoom:70%;"><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137131.png" alt="image-20211217111217831"></p><ul><li><p><strong>面向对象性：</strong></p><p>面向对象是一种程序设计技术，非常<code>适合大型软件的设计和开发</code>。面向对象编程支持封装、继承、多态等特性，让程序更好达到<code>高内聚</code>，<code>低耦合</code>的标准。</p></li><li><p><strong>健壮性：</strong>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制。</p></li><li><p><strong>安全性高：</strong></p><p>Java适合于网络/分布式环境，需要提供一个安全机制以防恶意代码的攻击。如：<code>安全防范机制</code>（ClassLoader类加载器），可以分配不同的命名空间以防替代本地的同名类、字节代码检查。</p></li><li><p><strong>简单性：</strong></p><p>Java就是C++语法的<code>简化版</code>，我们也可以将Java称之为“<code>C++--</code>”。比如：头文件，指针运算，结构，联合，操作符重载，虚基类等。</p></li><li><p><strong>高性能：</strong></p><ul><li><p>Java最初发展阶段，总是被人诟病“<code>性能低</code>”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了<code>几十倍运行效率</code>。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。</p></li><li><p><code>Java低性能的短腿，已经被完全解决了</code>。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p></li></ul></li></ul><h4 id="14-1-2-缺点"><a href="#14-1-2-缺点" class="headerlink" title="14.1.2 缺点"></a>14.1.2 缺点</h4><ul><li><code>语法过于复杂、严谨</code>，对程序员的约束比较多，与python、php等相比入门较难。但是一旦学会了，就业岗位需求量大，而且<code>薪资待遇节节攀升</code>。</li><li>一般适用于大型网站开发，<code>整个架构会比较重</code>，对于初创公司开发和维护人员的成本比较高（即薪资高），选择用Java语言开发网站或应用系统的需要一定的经济实力。</li><li><code>并非适用于所有领域</code>。比如，Objective C、Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</li></ul><h3 id="14-2-JVM功能说明"><a href="#14-2-JVM功能说明" class="headerlink" title="14.2 JVM功能说明"></a>14.2 JVM功能说明</h3><p><strong>JVM</strong>（<code>J</code>ava <code>V</code>irtual <code>M</code>achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137922.png" alt="image-20220310165805739" style="zoom:67%;"><h4 id="14-2-1-功能1：实现Java程序的跨平台性"><a href="#14-2-1-功能1：实现Java程序的跨平台性" class="headerlink" title="14.2.1 功能1：实现Java程序的跨平台性"></a>14.2.1 功能1：实现Java程序的跨平台性</h4><p>我们编写的Java代码，都运行在<strong>JVM</strong> 之上。正是因为有了JVM，才使得Java程序具备了跨平台性。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137506.png" alt="image-20220513191856727" style="zoom:50%;"><p>使用JVM前后对比：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137465.png" alt="image-20220514151716805"></p><h4 id="14-2-2-功能2：自动内存管理-内存分配、内存回收"><a href="#14-2-2-功能2：自动内存管理-内存分配、内存回收" class="headerlink" title="14.2.2 功能2：自动内存管理(内存分配、内存回收)"></a>14.2.2 功能2：自动内存管理(内存分配、内存回收)</h4><ul><li>Java程序在运行过程中，涉及到运算的<code>数据的分配</code>、<code>存储</code>等都由JVM来完成</li><li>Java消除了程序员回收无用内存空间的职责。提供了一种系统级线程跟踪存储空间的分配情况，在内存空间达到相应阈值时，检查并释放可被释放的存储器空间。</li><li>GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上<code>减少了</code>因为没有释放空间而导致的<code>内存泄漏</code>。</li></ul><blockquote><p>面试题：</p><p>Java程序还会出现内存溢出和内存泄漏问题吗？  Yes!</p></blockquote><h2 id="15-章节案例"><a href="#15-章节案例" class="headerlink" title="15. 章节案例"></a>15. 章节案例</h2><p><strong>案例1：个人信息输出</strong></p><p> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137011.png" alt="image-20220315221336038"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"姓名：康师傅"</span>);</span><br><span class="line">System.out.println();<span class="comment">//换行操作</span></span><br><span class="line">System.out.println(<span class="string">"性别：男"</span>);</span><br><span class="line">System.out.println(<span class="string">"家庭住址：北京程序员聚集地：回龙观"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：输出：心形</strong> </p><p>结合\n(换行)，\t(制表符)，空格等在控制台打印出如下图所示的效果。</p><p><img src=".images/image-20220309004152219-1646757896991.png" alt="image-20220309004152219"> </p><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exercise2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line"><span class="comment">//System.out.print("\t");</span></span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"I love java"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.println(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">System.out.print(<span class="string">"    "</span>);</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exercise3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t\t\t\t\t\t\t\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t"</span>+<span class="string">"\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"*"</span>+<span class="string">"\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t\t\t"</span>+<span class="string">"I love Java"</span>+<span class="string">"\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t\t\t\t\t\t\t\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t"</span>+<span class="string">"\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t\t\t\t\t\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t"</span>+<span class="string">"\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t\t\t\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t"</span>+<span class="string">"\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">""</span>+<span class="string">"\t"</span>+<span class="string">"\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">""</span>+<span class="string">"\t\t"</span>+<span class="string">"\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t\t\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\t\t"</span>+<span class="string">"*"</span>+<span class="string">""</span>+<span class="string">"\t\t"</span>+<span class="string">"\n"</span>);</span><br><span class="line">System.out.print(<span class="string">"\t\t\t\t\t\t\t"</span>+<span class="string">"*"</span>+<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第02章-变量与运算符"><a href="#第02章-变量与运算符" class="headerlink" title="第02章_变量与运算符"></a>第02章_变量与运算符</h1><hr><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137831.png" alt="第1阶段：Java基本语法-第02章" style="zoom:40%;"><h2 id="1-关键字（keyword）"><a href="#1-关键字（keyword）" class="headerlink" title="1. 关键字（keyword）"></a>1. 关键字（keyword）</h2><ul><li>定义：<strong>被Java语言赋予了特殊含义，用做专门用途的字符串（或单词）</strong><ul><li>HelloWorld案例中，出现的关键字有 <code>class</code>、<code>public</code>  、 <code>static</code> 、  <code>void</code>  等，这些单词已经被Java定义好了。</li></ul></li><li>特点：全部关键字都是<code>小写字母</code>。</li><li>关键字比较多，不需要死记硬背，学到哪里记到哪里即可。</li><li>官方地址： <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137898.png" alt="image-20220310234414849"></p><blockquote><p> 说明：</p><ol><li>关键字一共<code>50个</code>，其中<code>const</code>和<code>goto</code>是<code>保留字</code>(reserved word)。</li><li><code>true</code>，<code>false</code>，<code>null</code>不在其中，它们看起来像关键字，其实是字面量，表示特殊的布尔值和空值。</li></ol></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137261.png" alt="image-20220310234557454" style="zoom: 67%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137407.png" alt="image-20220801143635356" style="zoom:66%;"><h2 id="2-标识符-identifier"><a href="#2-标识符-identifier" class="headerlink" title="2. 标识符( identifier)"></a>2. 标识符( identifier)</h2><p>Java中变量、方法、类等要素命名时使用的字符序列，称为标识符。</p><p>技巧：<strong>凡是自己可以起名字的地方都叫标识符。</strong>(自己定义类名/自己定义变量名/自己定义方法名)</p><p><strong>标识符的命名规则</strong>（必须遵守的<code>硬性规定</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 由26个英文字母大小写，0-9 ，_或 $ 组成  </span><br><span class="line">&gt; 数字不可以开头。</span><br><span class="line">&gt; 不可以使用关键字和保留字，但能包含关键字和保留字。</span><br><span class="line">&gt; Java中严格区分大小写，长度无限制。</span><br><span class="line">&gt; 标识符不能包含空格。</span><br></pre></td></tr></table></figure><blockquote><p>练习：miles、Test、a++、 –a、4#R、$4、 #44、apps、class、public、int、x、y、radius</p></blockquote><p><strong>标识符的命名规范</strong>（建议遵守的<code>软性要求</code>，否则工作时容易被鄙视）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 包名：多单词组成时所有字母都小写：xxxyyyzzz。</span><br><span class="line">  例如：java.lang、com.atguigu.bean</span><br><span class="line">  </span><br><span class="line">&gt; 类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</span><br><span class="line">  例如：HelloWorld，String，System等</span><br><span class="line">  </span><br><span class="line">&gt; 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</span><br><span class="line">  例如：age,name,bookName,main,binarySearch,getName</span><br><span class="line">  </span><br><span class="line">&gt; 常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</span><br><span class="line">  例如：MAX_VALUE,PI,DEFAULT_CAPACITY</span><br></pre></td></tr></table></figure><p>注意：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</p><blockquote><p>更多细节详见《代码整洁之道_关于标识符.txt》《阿里巴巴Java开发手册-1.7.1-黄山版》</p></blockquote><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><h3 id="3-1-为什么需要变量"><a href="#3-1-为什么需要变量" class="headerlink" title="3.1 为什么需要变量"></a>3.1 为什么需要变量</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137705.png" alt="image-20220513235020527"></p><p>一花一世界，如果把一个程序看做一个世界或一个社会的话，那么变量就是程序世界的花花草草、万事万物。即，<strong>变量是程序中不可或缺的组成单位，最基本的存储单元</strong>。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137925.png" alt="image-20220513235828042"></p><h3 id="3-2-初识变量"><a href="#3-2-初识变量" class="headerlink" title="3.2 初识变量"></a>3.2 初识变量</h3><ul><li><p>变量的概念：</p><ul><li><p>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</p></li><li><p>变量的构成包含三个要素：<code>数据类型</code>、<code>变量名</code>、<code>存储的值</code></p></li><li><p>Java中变量声明的格式：<code>数据类型 变量名 = 变量值</code></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137457.png" alt="image-20220311000744867" style="zoom:67%;"></li></ul></li><li><p>变量的作用：用于在内存中保存数据。</p></li><li><p>使用变量注意：</p><ul><li>Java中每个变量必须先声明，后使用。   ①先声明后赋值 int age； age=10； ②声明同时赋值 int age=25； </li><li>使用变量名来访问这块区域的数据。</li><li>变量的作用域：其定义所在的一对{ }内。</li><li>变量只有在其<code>作用域</code>内才有效。出了作用域，变量不可以再被调用。</li><li>同一个作用域内，不能定义重名的变量。(不同域可以同名)</li></ul></li></ul><h3 id="3-3-Java中变量的数据类型"><a href="#3-3-Java中变量的数据类型" class="headerlink" title="3.3 Java中变量的数据类型"></a>3.3 Java中变量的数据类型</h3><p>Java中变量的数据类型分为两大类：</p><ul><li><p><strong>基本数据类型</strong>：包括 <code>整数类型</code>、<code>浮点数类型</code>、<code>字符类型</code>、<code>布尔类型</code>。 </p></li><li><p><strong>引用数据类型</strong>：包括<code>数组</code>、 <code>类</code>、<code>接口</code>、<code>枚举</code>、<code>注解</code>、<code>记录</code>。 </p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137578.png" alt="Java的数据类型"></p></li></ul><h3 id="3-4-变量的使用"><a href="#3-4-变量的使用" class="headerlink" title="3.4 变量的使用"></a>3.4 变量的使用</h3><h4 id="3-4-1-步骤1：变量的声明"><a href="#3-4-1-步骤1：变量的声明" class="headerlink" title="3.4.1 步骤1：变量的声明"></a>3.4.1 步骤1：变量的声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：数据类型  变量名;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="comment">//存储一个整数类型的年龄</span></span><br><span class="line"><span class="keyword">int</span> age; </span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个小数类型的体重</span></span><br><span class="line"><span class="keyword">double</span> weight;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个单字符类型的性别 </span></span><br><span class="line"><span class="keyword">char</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个布尔类型的婚姻状态</span></span><br><span class="line"><span class="keyword">boolean</span> marry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个字符串类型的姓名</span></span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明多个同类型的变量</span></span><br><span class="line"><span class="keyword">int</span> a,b,c; <span class="comment">//表示a,b,c三个变量都是int类型。</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：变量的数据类型可以是基本数据类型，也可以是引用数据类型。</p></blockquote><h4 id="3-4-2-步骤2：变量的赋值"><a href="#3-4-2-步骤2：变量的赋值" class="headerlink" title="3.4.2 步骤2：变量的赋值"></a>3.4.2 步骤2：变量的赋值</h4><p>给变量赋值，就是把“值”存到该变量代表的内存空间中。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</p><p><strong>变量赋值的语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 值;</span><br></pre></td></tr></table></figure><p>举例1：可以使用合适类型的<code>常量值</code>给已经声明的变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span>;</span><br><span class="line">weight = <span class="number">109</span>;</span><br><span class="line">gender = <span class="string">'女'</span>;</span><br></pre></td></tr></table></figure><p>举例2：可以使用其他<code>变量</code>或者<code>表达式</code>给变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n = m;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> z = <span class="number">2</span> * x + y;</span><br></pre></td></tr></table></figure><p>3：变量可以反复赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先声明，后初始化</span></span><br><span class="line"><span class="keyword">char</span> gender;</span><br><span class="line">gender = <span class="string">'女'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给变量重新赋值，修改gender变量的值</span></span><br><span class="line">gender = <span class="string">'男'</span>;</span><br><span class="line">System.out.println(<span class="string">"gender = "</span> + gender);<span class="comment">//gender = 男</span></span><br></pre></td></tr></table></figure><p>举例4：也可以将变量的声明和赋值一并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isBeauty = <span class="keyword">true</span>;</span><br><span class="line">String name = <span class="string">"迪丽热巴"</span>;</span><br></pre></td></tr></table></figure><p>内存结构如图：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137017.png" alt="image-20220514152216148" style="zoom: 80%;"><h2 id="4-基本数据类型介绍"><a href="#4-基本数据类型介绍" class="headerlink" title="4. 基本数据类型介绍"></a>4. 基本数据类型介绍</h2><h3 id="4-1-整数类型：byte、short、int-默认-、long"><a href="#4-1-整数类型：byte、short、int-默认-、long" class="headerlink" title="4.1 整数类型：byte、short、int(默认)、long"></a>4.1 整数类型：byte、short、int(默认)、long</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212137897.png" alt="image-20220520111756274" style="zoom: 50%;"><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证Java程序的可移植性。</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138137.png" alt="image-20220311001553945" style="zoom:80%;"><ul><li>定义long类型的变量，赋值时需要以”<code>l</code>“或”<code>L</code>“作为后缀。  – 例如：long age=12l</li><li>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long。</li><li><strong>Java的整型<code>常量默认为 int 型</code>。</strong></li></ul><h4 id="4-1-1-补充：计算机存储单位"><a href="#4-1-1-补充：计算机存储单位" class="headerlink" title="4.1.1 补充：计算机存储单位"></a>4.1.1 补充：计算机存储单位</h4><ul><li><p><strong>字节（Byte）：</strong>是计算机用于<code>计量存储容量</code>的<code>基本</code>单位，一个字节等于8 bit。</p></li><li><p><strong>位（bit）：</strong>是数据存储的<code>最小</code>单位。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</p></li><li><p><strong>转换关系：</strong></p><ul><li>8 bit = 1 Byte</li><li>1024 Byte = 1 KB</li><li>1024 KB = 1 MB</li><li>1024 MB = 1 GB</li><li>1024 GB = 1 TB</li></ul></li></ul><h3 id="4-2-浮点类型：float、double-默认"><a href="#4-2-浮点类型：float、double-默认" class="headerlink" title="4.2 浮点类型：float、double(默认)"></a>4.2 浮点类型：float、double(默认)</h3><ul><li>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138314.png" alt="image-20220311001749699" style="zoom:80%;"><ul><li>浮点型常量有两种表示形式：<ul><li>十进制数形式。如：5.12       512.0f        .512   (必须有小数点）</li><li>科学计数法形式。如：5.12e2      512E2     100E-2</li></ul></li><li>float：<code>单精度</code>，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。    </li><li>double(<strong>通常采用此类型</strong>)：<code>双精度</code>，精度是float的两倍。</li><li>定义float类型的变量，赋值时需要以”<code>f</code>“或”<code>F</code>“作为后缀。 – 例如：float age=12f</li><li><strong>Java 的浮点型<code>常量默认为double型</code>。</strong></li></ul><h4 id="4-2-1-关于浮点型精度的说明"><a href="#4-2-1-关于浮点型精度的说明" class="headerlink" title="4.2.1 关于浮点型精度的说明"></a>4.2.1 关于浮点型精度的说明</h4><ul><li><p>并不是所有的小数都能可以精确的用二进制浮点数表示。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。</p></li><li><p>浮点类型float、double的数据不适合在<code>不容许舍入误差</code>的金融计算领域。<strong>如果需要<code>精确</code>数字计算或保留指定位数的精度，需要使用<code>BigDecimal类</code>。(算法题经常出现)</strong></p></li><li><p>测试用例：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试1：（解释见章末企业真题：为什么0.1 + 0.2不等于0.3）</span></span><br><span class="line">System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);<span class="comment">//0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试2：</span></span><br><span class="line"><span class="keyword">float</span> ff1 = <span class="number">123123123f</span>;</span><br><span class="line"><span class="keyword">float</span> ff2 = ff1 + <span class="number">1</span>;</span><br><span class="line">System.out.println(ff1);</span><br><span class="line">System.out.println(ff2);</span><br><span class="line">System.out.println(ff1 == ff2);  #输出是True  因为精度太差所以竟然是相等的！！！！！</span><br></pre></td></tr></table></figure><h4 id="4-2-2-应用举例"><a href="#4-2-2-应用举例" class="headerlink" title="4.2.2 应用举例"></a>4.2.2 应用举例</h4><p>案例1：定义圆周率并赋值为3.14，现有3个圆的半径分别为1.2、2.5、6，求它们的面积。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">//圆周率</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> radius1 = <span class="number">1.2</span>;</span><br><span class="line">        <span class="keyword">double</span> radius2 = <span class="number">2.5</span>;</span><br><span class="line">        <span class="keyword">int</span> radius3 = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"第1个圆的面积："</span> + PI * radius1 * radius1);</span><br><span class="line">        System.out.println(<span class="string">"第2个圆的面积："</span> + PI * radius2 * radius2);</span><br><span class="line">        System.out.println(<span class="string">"第3个圆的面积："</span> + PI * radius3 * radius3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2：小明要到美国旅游，可是那里的温度是以华氏度为单位记录的。<br>它需要一个程序将华氏温度（80度）转换为摄氏度，并以华氏度和摄氏度为单位分别显示该温度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">℃ &#x3D; (℉ - 32) &#x2F; 1.8</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> hua = <span class="number">80</span>;</span><br><span class="line">        <span class="keyword">double</span> she = (hua-<span class="number">32</span>)/<span class="number">1.8</span>;</span><br><span class="line">        System.out.println(<span class="string">"华氏度"</span> + hua+<span class="string">"℉转为摄氏度是"</span> +she+<span class="string">"℃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-字符类型：char"><a href="#4-3-字符类型：char" class="headerlink" title="4.3 字符类型：char"></a>4.3 字符类型：char</h3><ul><li><p>char 型数据用来表示通常意义上“<code>字符</code>”（占2字节）</p></li><li><p>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</p></li><li><p>字符型变量的三种表现形式：</p><ul><li><p><strong>形式1：</strong>使用单引号(‘ ‘)括起来的<strong>单个字符</strong>。</p><p>例如：char c1 = ‘a’;   char c2 = ‘中’; char c3 =  ‘9’;</p></li><li><p><strong>形式2：</strong>直接使用 <code>Unicode值</code>来表示字符型常量：‘<code>\uXXXX</code>’。其中，XXXX代表一个十六进制整数。</p><p>例如：\u0023 表示 ‘#’。</p></li><li><p><strong>形式3：</strong>Java中还允许使用<code>转义字符‘\’</code>来将其后的字符转变为特殊字符型常量。</p><p>例如：char c3 = ‘\n’;  // ‘\n’表示换行符</p></li></ul><table><thead><tr><th align="center">转义字符</th><th align="center">说明</th><th align="center">Unicode表示方式</th></tr></thead><tbody><tr><td align="center"><code>\n</code></td><td align="center">换行符</td><td align="center">\u000a</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td><td align="center">\u0009</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">单引号</td><td align="center">\u0027</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜线</td><td align="center">\u005c</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格符</td><td align="center">\u0008</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车符</td><td align="center">\u000d</td></tr></tbody></table></li><li><p>char类型是可以进行运算的。因为它都对应有Unicode码，可以看做是一个数值。</p></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentifierTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//形式1 使用单引号(' ')括起来的单个字符</span></span><br><span class="line">        <span class="keyword">char</span> bl=<span class="string">'a'</span>;</span><br><span class="line">        System.out.println(bl);  <span class="comment">// a</span></span><br><span class="line">        <span class="keyword">char</span> zg=<span class="string">'中'</span>;</span><br><span class="line">        System.out.println(zg);  <span class="comment">// 中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//形式2 直接使用 `Unicode值`来表示字符型常量：</span></span><br><span class="line">        <span class="keyword">char</span> qiguai=<span class="string">'\u0036'</span>;</span><br><span class="line">        System.out.println(qiguai); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//形式3 使用`转义字符‘\’`  来将其后的字符转变为特殊字符型常量。</span></span><br><span class="line">        <span class="keyword">char</span> c9=<span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">char</span> c10=<span class="string">'\t'</span>;</span><br><span class="line">        <span class="comment">// hello</span></span><br><span class="line">        <span class="comment">// world</span></span><br><span class="line">        System.out.println(<span class="string">"hello"</span>+c9+<span class="string">"world"</span>);</span><br><span class="line">        <span class="comment">// helloworld</span></span><br><span class="line">        System.out.println(<span class="string">"hello"</span>+c10+<span class="string">"world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-布尔类型：boolean"><a href="#4-4-布尔类型：boolean" class="headerlink" title="4.4 布尔类型：boolean"></a>4.4 布尔类型：boolean</h3><ul><li><p>boolean 类型用来判断逻辑条件，一般用于流程控制语句中：</p><ul><li>if条件控制语句；                  </li><li>while循环控制语句；     </li><li>for循环控制语句；</li><li>do-while循环控制语句； </li></ul></li><li><p><strong>boolean类型数据只有两个值：true、false，无其它。</strong></p><ul><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li>拓展：Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。——《java虚拟机规范 8版》</li></ul></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">    <span class="comment">//true分支</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="comment">//false分支</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经验之谈：</p><p>Less is More！建议不要这样写：if ( isFlag = = true )，只有新手才如此。关键也很容易写错成if(isFlag = true)，这样就变成赋值isFlag为true而不是判断！<code>老鸟的写法</code>是if (isFlag)或者if ( !isFlag)。</p></blockquote><h2 id="5-基本数据类型变量间运算规则"><a href="#5-基本数据类型变量间运算规则" class="headerlink" title="5. 基本数据类型变量间运算规则"></a>5. 基本数据类型变量间运算规则</h2><p>在Java程序中，不同的基本数据类型（只有7种，不包含boolean类型）变量的值经常需要进行相互转换。</p><p>转换的方式有两种：①<code>自动类型提升</code>和②<code>强制类型转换</code>。</p><h3 id="5-1-自动类型提升"><a href="#5-1-自动类型提升" class="headerlink" title="5.1 自动类型提升"></a>5.1 自动类型提升</h3><p><strong>规则：将取值范围小（或容量小）的类型自动提升为取值范围大（或容量大）的类型 。</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138602.png" alt="image-20220523162200891" style="zoom:67%;"><p>基本数据类型的转换规则如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138502.png" alt="image-20220311002543688"></p><p>（1）当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="string">'A'</span>;<span class="comment">//char自动升级为int，其实就是把字符的编码值赋值给i变量了</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">10</span>;<span class="comment">//int自动升级为double</span></span><br><span class="line"><span class="keyword">long</span> num = <span class="number">1234567</span>; <span class="comment">//右边的整数常量值如果在int范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//byte bigB = 130;//错误，右边的整数常量值超过byte范围</span></span><br><span class="line"><span class="keyword">long</span> bigNum = <span class="number">12345678912L</span>;<span class="comment">//右边的整数常量值如果超过int范围，必须加L，显式表示long类型。否则编译不通过</span></span><br></pre></td></tr></table></figure><p>（2）当存储范围小的数据类型与存储范围大的数据类型变量一起混合运算时，会按照其中<strong>最大的类型运算</strong>(自动转换为最大类型)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sum = i + b + d;<span class="comment">//混合运算，升级为double  输出为3.0</span></span><br></pre></td></tr></table></figure><p>（3）当byte,short,char(三个在int之前的不分前后的类型)数据类型的变量进行算术运算时，按照<strong>int类型</strong>处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">byte</span> b3 = b1 + b2;<span class="comment">// byte编译报错，b1 + b2自动升级为int,所以是需要int来接结果!!!!!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'0'</span>; <span class="comment">// int值为48</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'A'</span>; <span class="comment">// int值为65</span></span><br><span class="line"><span class="keyword">int</span> i = c1 + c2;  <span class="comment">//至少需要使用int类型来接收</span></span><br><span class="line">System.out.println(c1 + c2); <span class="comment">//48+65=113</span></span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">设 x 为float型变量，y为double型变量，a为int型变量，b为long型变量，c为char型变量，则表达式</span><br><span class="line">x + y * a &#x2F; x + b &#x2F; y + c的值类型为：</span><br><span class="line">代码如下：</span><br><span class="line">    float x&#x3D;1.0f;</span><br><span class="line">        double y&#x3D;2.0;</span><br><span class="line">        int a&#x3D;1;</span><br><span class="line">        long b&#x3D;3l;</span><br><span class="line">        char c&#x3D;&#39;a&#39;;  &#x2F;&#x2F; int值为97</span><br><span class="line">        double sum &#x3D; x + y * a &#x2F; x + b &#x2F; y + c;</span><br><span class="line">        System.out.println(x+y*a&#x2F;x+b&#x2F;y+c);    &#x2F;&#x2F;101.5</span><br><span class="line"></span><br><span class="line">A. int   B. long  C. double  D. char</span><br></pre></td></tr></table></figure><h3 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h3><p>将<code>3.14</code> 赋值到<code>int</code> 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">3.14</span>; <span class="comment">// 编译报错</span></span><br></pre></td></tr></table></figure><p>想要赋值成功，只有通过<code>强制类型转换</code>，将<code>double</code> 类型强制转换成<code>int</code> 类型才能赋值。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138564.png" alt="image-20220523162407722" style="zoom:67%;"><p><strong>规则：将取值范围大（或容量大）的类型强制转换成取值范围小（或容量小）的类型。</strong></p><blockquote><p>自动类型提升是Java自动执行的，而强制类型转换是自动类型提升的逆运算，需要我们自己手动执行。</p></blockquote><p><strong>转换格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型<span class="number">1</span> 变量名 = (数据类型<span class="number">1</span>)被强转数据值;  <span class="comment">//()中的数据类型必须&lt;=变量值的数据类型</span></span><br></pre></td></tr></table></figure><p>（1）当把存储范围大的值（常量值、变量的值、表达式计算的结果值）强制转换为存储范围小的变量时，<strong>可能会<code>损失精度</code>或<code>溢出</code>。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)<span class="number">3.14</span>;<span class="comment">//损失精度  输出为3 截断了后面的0.14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.2</span>;</span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)d;<span class="comment">//损失精度  输出为1 截断了后面的0.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;<span class="comment">//溢出  输出负56 因为原码补码问题导致</span></span><br></pre></td></tr></table></figure><p>（2）当某个值想要提升数据类型时(本身可以通过自动类型提升完成)，也可以使用强制类型转换。这种情况的强制类型转换是<code>没有风险</code>的，通常省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> bigger = (<span class="keyword">double</span>)(i/j);  <span class="comment">// 0.0</span></span><br><span class="line"><span class="keyword">int</span> bigger2=i/j; <span class="comment">// 0 可能想要一个double类型 所以使用强制类型转换才可以做到成为0.0</span></span><br></pre></td></tr></table></figure><p>（3）声明变量时，long(可以√省略)，float(不可以×省略)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记忆方法：  可以看作long定义的时候可能是int(整数型默认)自动类型转换为long   所以可以省略</span></span><br><span class="line"><span class="comment">//           可以看做float定义的时候可能是double(浮点数默认)没办法自动类型转换为double  所有不可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">123L</span>;</span><br><span class="line"><span class="keyword">long</span> l2 = <span class="number">123</span>;<span class="comment">//如何理解呢？ 此时可以看做是int类型的123自动类型提升为long类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//long l3 = 123123123123; //报错，因为123123123123超出了int的范围。</span></span><br><span class="line"><span class="keyword">long</span> l4 = <span class="number">123123123123L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//float f1 = 12.3; //报错，因为12.3看做是double，不能自动转换为float类型</span></span><br><span class="line"><span class="keyword">float</span> f2 = <span class="number">12.3F</span>;</span><br><span class="line"><span class="keyword">float</span> f3 = (<span class="keyword">float</span>)<span class="number">12.3</span>;</span><br></pre></td></tr></table></figure><p><strong>练习：判断是否能通过编译</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）<span class="keyword">short</span>  s = <span class="number">5</span>;</span><br><span class="line">   s = s-<span class="number">2</span>;                     <span class="comment">//判断：no   因为short-int的结果是一个int(往上自动类型转换) 所以需要强制类型转换</span></span><br><span class="line"><span class="number">2</span>） <span class="keyword">byte</span> b = <span class="number">3</span>;</span><br><span class="line">    b = b + <span class="number">4</span>;                  <span class="comment">//判断：no   因为byte+int的结果是一个int(往上自动类型转换) 所以需要强制类型转换</span></span><br><span class="line">    b = (<span class="keyword">byte</span>)(b+<span class="number">4</span>);            <span class="comment">//判断：yes  要强制类型转换</span></span><br><span class="line"><span class="number">3</span>）<span class="keyword">char</span> c = ‘a’;</span><br><span class="line">   <span class="keyword">int</span>  i = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">float</span> d = .<span class="number">314F</span>;</span><br><span class="line">   <span class="keyword">double</span> result = c+i+d;       <span class="comment">//判断：yes 因为是char+int+float 结果是一个float  可以自动类型转换为double</span></span><br><span class="line"><span class="number">4</span>） <span class="keyword">byte</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">short</span> t = s + b;            <span class="comment">//判断：no  因为当byte,short数据类型进行算术运算时，按照int类型  </span></span><br><span class="line"><span class="comment">//可以改成short t = (short) (s + b);</span></span><br></pre></td></tr></table></figure><p>*<em>问答：为什么标识符的声明规则里要求不能数字开头？ *</em>    — 是本身的数值  /  他是一个变量所对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果允许数字开头，则如下的声明编译就可以通过：</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">123L</span> = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//进而，如下的声明中l的值到底是123？还是变量123L对应的取值12呢？ 出现歧义了。</span></span><br><span class="line"><span class="keyword">long</span> l = <span class="number">123L</span>;  <span class="comment">// 123还是12</span></span><br></pre></td></tr></table></figure><h3 id="5-3-基本数据类型与String的运算"><a href="#5-3-基本数据类型与String的运算" class="headerlink" title="5.3 基本数据类型与String的运算"></a>5.3 基本数据类型与String的运算</h3><h4 id="5-3-1-字符串类型：String"><a href="#5-3-1-字符串类型：String" class="headerlink" title="5.3.1 字符串类型：String"></a>5.3.1 字符串类型：String</h4><ul><li>String不是基本数据类型，属于<strong>引用数据类型</strong>  【所以不能够进行基本数据类型的自动类型转换和强制类型转换】</li><li>使用一对<code>&quot;&quot;</code>来表示一个字符串，内部可以包含<strong>0-n个字符</strong>。</li><li>声明方式与基本数据类型类似。例如：String str = “尚硅谷”;</li></ul><h4 id="5-3-2-运算规则"><a href="#5-3-2-运算规则" class="headerlink" title="5.3.2 运算规则"></a>5.3.2 运算规则</h4><p>1、任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"   "</span> + <span class="number">1</span> + <span class="number">2</span>); <span class="comment">//空格空格空格12  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">String s2 = s1 + num + b1;</span><br><span class="line">System.out.println(s2);  <span class="comment">//abc10true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String s3 = num + b1 + s1;  //编译不通过，因为int类型不能与boolean运算</span></span><br><span class="line">String s4 = num + (b1 + s1); <span class="comment">//编译通过  10trueabc  [b1+s1先成为字符串tureabc,然后int+string成为string]</span></span><br></pre></td></tr></table></figure><p>2、String类型不能通过强制类型()转换，转为其他的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)str;<span class="comment">//错误的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(str);<span class="comment">//借助包装类的方法才能转</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-案例与练习"><a href="#5-3-3-案例与练习" class="headerlink" title="5.3.3 案例与练习"></a>5.3.3 案例与练习</h4><p><strong>案例：公安局身份登记</strong></p><p>要求填写自己的姓名、年龄、性别、体重、婚姻状况（已婚用true表示，单身用false表示）、联系方式等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"康师傅"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">37</span>;</span><br><span class="line">        <span class="keyword">char</span> gender = <span class="string">'男'</span>;</span><br><span class="line">        <span class="keyword">double</span> weight = <span class="number">145.6</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isMarried = <span class="keyword">true</span>;</span><br><span class="line">        String phoneNumber = <span class="string">"13112341234"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"年龄："</span> + age);</span><br><span class="line">        System.out.println(<span class="string">"性别："</span> + gender);</span><br><span class="line">        System.out.println(<span class="string">"体重："</span> + weight);</span><br><span class="line">        System.out.println(<span class="string">"婚否："</span> + isMarried);</span><br><span class="line">        System.out.println(<span class="string">"电话："</span> + phoneNumber);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name + <span class="string">",age = "</span> + age + <span class="string">"，gender = "</span> + </span><br><span class="line">                           gender + <span class="string">",weight = "</span> + weight + <span class="string">",isMarried = "</span> + isMarried +</span><br><span class="line">                           <span class="string">",phoneNumber = "</span> + phoneNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><p>练习1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="number">4</span>;                       <span class="comment">//判断对错： × 可以改为String str1=String.valueOf(4);</span></span><br><span class="line">String str2 = <span class="number">3.5f</span> + <span class="string">""</span>;               <span class="comment">//判断str2对错：对 float+string=string类型</span></span><br><span class="line">System.out.println(str2);              <span class="comment">//输出：3.5 </span></span><br><span class="line">System.out .println(<span class="number">3</span>+<span class="number">4</span>+<span class="string">"Hello!"</span>);     <span class="comment">//输出：7Hello!    注意从左往右先算最后和string变为字符串</span></span><br><span class="line">System.out.println(<span class="string">"Hello!"</span>+<span class="number">3</span>+<span class="number">4</span>);      <span class="comment">//输出：Hello!34    </span></span><br><span class="line">System.out.println(<span class="string">'a'</span>+<span class="number">1</span>+<span class="string">"Hello!"</span>);    <span class="comment">//输出：98Hello!   注意从左往右先算最后和string变为字符串</span></span><br><span class="line">System.out.println(<span class="string">"Hello"</span>+<span class="string">'a'</span>+<span class="number">1</span>);     <span class="comment">//输出：Helloa1</span></span><br></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"*    *"</span>);<span class="comment">//输出： *    *</span></span><br><span class="line">System.out.println(<span class="string">"*\t*"</span>);<span class="comment">//输出： **</span></span><br><span class="line">System.out.println(<span class="string">"*"</span> + <span class="string">"\t"</span> + <span class="string">"*"</span>);<span class="comment">//输出： **</span></span><br><span class="line">System.out.println(<span class="string">'*'</span> + <span class="string">"\t"</span> + <span class="string">"*"</span>);<span class="comment">//输出： **</span></span><br><span class="line">System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">"*"</span>);<span class="comment">//输出： 51*         '*'是char类型在进行算数运算时转为int类型计算！！！</span></span><br><span class="line">System.out.println(<span class="string">'*'</span> + <span class="string">"\t"</span> + <span class="string">'*'</span>);<span class="comment">//输出： *   *</span></span><br><span class="line">System.out.println(<span class="string">"*"</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>);<span class="comment">//输出： *   *</span></span><br><span class="line">System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>);<span class="comment">//输出： 93          '*'是char类型在进行算数运算时转为int类型计算！！！</span></span><br></pre></td></tr></table></figure><h2 id="6-计算机底层如何存储数据"><a href="#6-计算机底层如何存储数据" class="headerlink" title="6. 计算机底层如何存储数据"></a>6. 计算机底层如何存储数据</h2><p>计算机世界中只有二进制，所以计算机中存储和运算的<code>所有数据</code>都要转为<code>二进制</code>。包括数字、字符、图片、声音、视频等。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138502.jpg" alt="010101" style="zoom: 33%;"><p><strong>世界上有10种人 ，认识和不认识二进制的。</strong></p><h3 id="6-1-进制的分类"><a href="#6-1-进制的分类" class="headerlink" title="6.1 进制的分类"></a>6.1 进制的分类</h3><ul><li><p><strong>十进制（decimal）</strong></p><ul><li>数字组成：0-9</li><li>进位规则：满十进一</li></ul></li><li><p><strong>二进制（binary）</strong></p><ul><li>数字组成：0-1</li><li>进位规则：满二进一，以<code>0b</code>或<code>0B</code>开头</li></ul></li><li><p><strong>八进制（octal）：很少使用</strong></p><ul><li>数字组成：0-7</li><li>进位规则：满八进一，以数字<code>0</code>开头表示</li></ul></li><li><p><strong>十六进制</strong></p><ul><li>数字组成：0-9，a-f</li><li>进位规则：满十六进一，以<code>0x</code>或<code>0X</code>开头表示。此处的 a-f 不区分大小写</li></ul></li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n1=<span class="number">123</span>;  <span class="comment">//十进制   1*10^2+2*10^1+3*10^0=100+20+3=</span></span><br><span class="line">        <span class="keyword">int</span> n2=<span class="number">0b11</span>; <span class="comment">//二进制   1*2^1+1*2^0=2+1=3</span></span><br><span class="line">        <span class="keyword">int</span> n3=<span class="number">071</span>;  <span class="comment">//八进制   7*8^1+1*8^0=56+1=57</span></span><br><span class="line">        <span class="keyword">int</span> n4=<span class="number">0x12f</span>;<span class="comment">//十六进制 1*16^2+2*16^1+15*16^0=256+32+15=303</span></span><br><span class="line">System.out.println(<span class="string">"n1:"</span>+n1+<span class="string">"\nn2:"</span>+n2+<span class="string">"\nn3:"</span>+n3+<span class="string">"\nn4:"</span>+n4);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-进制的换算举例"><a href="#6-2-进制的换算举例" class="headerlink" title="6.2 进制的换算举例"></a>6.2 进制的换算举例</h3><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>a或A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>b或B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>c或C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>d或D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>e或E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>f或F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><h3 id="6-3-二进制的由来"><a href="#6-3-二进制的由来" class="headerlink" title="6.3 二进制的由来"></a>6.3 二进制的由来</h3><p>二进制，是计算技术中广泛采用的一种数制，由德国数理哲学大师<code>莱布尼茨</code>于1679年发明。</p><p>二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“<code>逢二进一</code>”。</p><p>二进制广泛应用于我们生活的方方面面。比如，广泛使用的摩尔斯电码（Morse Code），它由两种基本信号组成：短促的点信号“<code>·</code>”，读“<code>滴</code>”；保持一定时间的长信号“<code>—</code>”，读“<code>嗒</code>”。然后，组成了26个字母，从而拼写出相应的单词。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138859.png" alt="image-20220520105721126" style="zoom:67%;"><p>记忆技巧：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138668.jpg" alt="morsecode" style="zoom:50%;"><p>我们偶尔会看到的：SOS，即为：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138723.png" alt="image-20220520110206899"></p><h3 id="6-4-二进制转十进制"><a href="#6-4-二进制转十进制" class="headerlink" title="6.4 二进制转十进制"></a>6.4 二进制转十进制</h3><p><strong>二进制如何表示整数？</strong></p><ul><li>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code>。<ul><li>正数：<code>最高位是0</code></li><li>负数：<code>最高位是1</code></li></ul></li></ul><ul><li>规 定<ul><li>正数：原码=反码=补码</li><li>负数：<ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul></li></ul><p><strong>二进制转十进制：权相加法</strong></p><p>针对于byte数据举例来说：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138225.png" alt="image-20220523114701881"></p><ul><li><p>例如：byte类型（1个字节，8位）</p><p>25 ==&gt; 原码  0001 1001 ==&gt; 反码  0001 1001 –&gt;补码  0001 1001</p><p>-25 ==&gt;原码  1001 1001 ==&gt; 反码1110 0110 ==&gt;补码 1110 0111</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">整数：</span><br><span class="line">正数：<span class="number">25</span>   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">000000000</span> <span class="number">00011001</span>（原码）</span><br><span class="line">正数：<span class="number">25</span>   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">000000000</span> <span class="number">00011001</span>（反码）</span><br><span class="line">正数：<span class="number">25</span>   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">000000000</span> <span class="number">00011001</span>（补码）</span><br><span class="line"></span><br><span class="line">负数：-<span class="number">25</span>  <span class="number">10000000</span> <span class="number">00000000</span> <span class="number">000000000</span> <span class="number">00011001</span>（原码）</span><br><span class="line">负数：-<span class="number">25</span>  <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">111111111</span> <span class="number">11100110</span>（反码）</span><br><span class="line">负数：-<span class="number">25</span>  <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">111111111</span> <span class="number">11100111</span>（补码）</span><br></pre></td></tr></table></figure><p><strong>一个字节可以存储的整数范围是多少？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1个字节：8位</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span>  ~  <span class="number">0111</span> <span class="number">111</span> ==&gt; <span class="number">1</span>~<span class="number">127</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span> <span class="number">0001</span> ~ <span class="number">1111</span> <span class="number">1111</span> ==&gt; -<span class="number">127</span> ~ -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> ==&gt;<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span> <span class="number">0000</span> ==&gt; -<span class="number">128</span>（特殊规定）=-<span class="number">127</span>-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="6-5-十进制转二进制"><a href="#6-5-十进制转二进制" class="headerlink" title="6.5 十进制转二进制"></a>6.5 十进制转二进制</h3><p>十进制转二进制：<code>除2取余的逆</code></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138928.png" alt="image-20220312000042595" style="zoom:67%;"><h3 id="6-6-二进制与八进制、十六进制间的转换"><a href="#6-6-二进制与八进制、十六进制间的转换" class="headerlink" title="6.6 二进制与八进制、十六进制间的转换"></a>6.6 二进制与八进制、十六进制间的转换</h3><p><strong>二进制转八进制(三合一)</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138378.png" alt="image-20220312000233863" style="zoom:80%;"><p><strong>二进制转十六进制(四合一)</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138394.png" alt="image-20220312000251113" style="zoom:80%;"><p><strong>八进制、十六进制转二进制(一拆多)</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138161.png" alt="image-20220312000341297" style="zoom: 67%;"><h3 id="6-7-各进制间的转换"><a href="#6-7-各进制间的转换" class="headerlink" title="6.7 各进制间的转换"></a>6.7 各进制间的转换</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138052.png" alt="image-20220312000143438" style="zoom:80%;"><p><strong>练习：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.将以下十进制数转换为十六进制和二进制</span><br><span class="line">十进制:     123  256  87  62</span><br><span class="line">十六进制:    7b  100  57  3e  从走往左四合一，不够补0</span><br><span class="line">二进制:    1111011 100000000 1010111 111110   除2取余反向读</span><br><span class="line"></span><br><span class="line">2.将以下十六进制数转换为十进制和二进制</span><br><span class="line">十六进制：  0x123   0x25F  0x38  0x62</span><br><span class="line">十进制：     291     607    56    98  拆开按照16^算</span><br><span class="line">二进制：   100100011 1001011111 111000 1100010 一拆四 到时候最前面的0记得删除!!!</span><br></pre></td></tr></table></figure><h2 id="7-运算符（Operator）（掌握）"><a href="#7-运算符（Operator）（掌握）" class="headerlink" title="7. 运算符（Operator）（掌握）"></a>7. 运算符（Operator）（掌握）</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>运算符的分类：</p><ul><li>按照<code>功能</code>分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">算术运算符（7个）</td><td align="center">+、-、*、/、%、++、–</td></tr><tr><td align="center">赋值运算符（12个）</td><td align="center">=、+=、-=、*=、/=、%=、&gt;&gt;=、&lt;&lt;=、&gt;&gt;&gt;=、&amp;=、|=、^=等</td></tr><tr><td align="center">比较(或关系)运算符（6个）</td><td align="center">&gt;、&gt;=、&lt;、&lt;=、==、!=</td></tr><tr><td align="center">逻辑运算符（6个）</td><td align="center">&amp;、|、^、!、&amp;&amp;、||</td></tr><tr><td align="center">位运算符（7个）</td><td align="center">&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td align="center">条件运算符（1个）</td><td align="center">(条件表达式)?结果1:结果2</td></tr><tr><td align="center">Lambda运算符（1个）</td><td align="center">-&gt;（第18章时讲解）</td></tr></tbody></table><ul><li>按照<code>操作数个数</code>分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">一元运算符（单目运算符）</td><td align="center">正号（+）、负号（-）、++、–、!、~</td></tr><tr><td align="center">二元运算符（双目运算符）</td><td align="center">除了一元和三元运算符剩下的都是二元运算符</td></tr><tr><td align="center">三元运算符 （三目运算符）</td><td align="center">(条件表达式)?结果1:结果2</td></tr></tbody></table><h3 id="7-1-算术运算符"><a href="#7-1-算术运算符" class="headerlink" title="7.1 算术运算符"></a>7.1 算术运算符</h3><h4 id="7-1-1-基本语法"><a href="#7-1-1-基本语法" class="headerlink" title="7.1.1 基本语法"></a>7.1.1 基本语法</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138737.png" alt="image-20220312000848332"></p><p>举例1：加减乘除模</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a + b);<span class="comment">// 3+4=7</span></span><br><span class="line">        System.out.println(a - b);<span class="comment">// 3-4=-1</span></span><br><span class="line">        System.out.println(a * b);<span class="comment">// 3*4=12</span></span><br><span class="line">        System.out.println(a / b);<span class="comment">// 3/4=0</span></span><br><span class="line">        System.out.println(a % b);<span class="comment">// 3%4=3 取余为3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//重点：结果与被模数符号相同</span></span><br><span class="line">        System.out.println(<span class="number">5</span>%<span class="number">2</span>);<span class="comment">//1   被模数为5</span></span><br><span class="line">        System.out.println(<span class="number">5</span>%-<span class="number">2</span>);<span class="comment">//1  被模数为5</span></span><br><span class="line">        System.out.println(-<span class="number">5</span>%<span class="number">2</span>);<span class="comment">//-1 被模数为-5</span></span><br><span class="line">        System.out.println(-<span class="number">5</span>%-<span class="number">2</span>);<span class="comment">//-1 被模数为-5</span></span><br><span class="line"><span class="comment">//商*除数 + 余数 = 被除数</span></span><br><span class="line"><span class="comment">//5%-2  ==&gt;商是-2，余数时1    (-2)*(-2)+1 = 5</span></span><br><span class="line"><span class="comment">//-5%2  ==&gt;商是-2，余数是-1   (-2)*2+(-1) = -4-1=-5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：“+”号的两种用法</p><ul><li>第一种：对于<code>+</code>两边都是数值的话，<code>+</code>就是加法的意思     —– 数值+数值=数值</li><li>第二种：对于<code>+</code>两边至少有一边是字符串的话，<code>+</code>就是拼接的意思  —– 字符串+数值=字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 字符串类型的变量基本使用</span></span><br><span class="line"><span class="comment">// 数据类型 变量名称 = 数据值;</span></span><br><span class="line">String str1 = <span class="string">"Hello"</span>;</span><br><span class="line">System.out.println(str1); <span class="comment">// Hello</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Hello"</span> + <span class="string">"World"</span>); <span class="comment">// HelloWorld</span></span><br><span class="line"></span><br><span class="line">String str2 = <span class="string">"Java"</span>;</span><br><span class="line"><span class="comment">// String + int --&gt; String</span></span><br><span class="line">System.out.println(str2 + <span class="number">520</span>); <span class="comment">// Java520</span></span><br><span class="line"><span class="comment">// String + int + int</span></span><br><span class="line"><span class="comment">// String+ int</span></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line">System.out.println(str2 + <span class="number">5</span> + <span class="number">20</span>); <span class="comment">// Java520</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例3：自加自减运算</p><p>理解：<code>++</code>  运算，表示<code>自增1</code>。同理，<code>--</code> 运算，表示<code>自减1</code>，用法与++ 一致。</p><p>1、单独使用</p><ul><li>变量在单独运算的时候，变量<code>前++</code>和变量<code>后++</code>，是没有区别的。</li><li>变量<code>前++</code>   ：例如 <code>++a</code> 。</li><li>变量<code>后++</code>   ：例如 <code>a++</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticTest3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义一个int类型的变量a</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//++a;</span></span><br><span class="line">a++;</span><br><span class="line">        <span class="comment">// 无论是变量前++还是变量后++，结果都是4</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、复合使用</p><ul><li>和<code>其他变量放在一起使用</code>或者和<code>输出语句放在一起使用</code>，<code>前++</code>和<code>后++</code>就产生了不同。</li></ul><ul><li>变量<code>前++</code> ：变量先自增1，然后再运算。</li><li>变量<code>后++</code> ：变量先运算，然后再自增1。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticTest4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 其他变量放在一起使用</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//int y = ++x; // y的值是4，x的值是4，</span></span><br><span class="line"><span class="keyword">int</span> y = x++; <span class="comment">// y的值是3，x的值是4</span></span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 和输出语句一起</span></span><br><span class="line"><span class="keyword">int</span> z = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//System.out.println(++z);// 输出结果是6，z的值也是6</span></span><br><span class="line">System.out.println(z++);<span class="comment">// 输出结果是5，z的值是6</span></span><br><span class="line">System.out.println(z);</span><br><span class="line">        </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-2-案例与练习"><a href="#7-1-2-案例与练习" class="headerlink" title="7.1.2 案例与练习"></a>7.1.2 案例与练习</h4><p><strong>案例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">随意给出一个整数，打印显示它的个位数，十位数，百位数的值。</span><br><span class="line">格式如下：</span><br><span class="line">数字xxx的情况如下：</span><br><span class="line">个位数：</span><br><span class="line">十位数：</span><br><span class="line">百位数：</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">数字153的情况如下：</span><br><span class="line">个位数：3</span><br><span class="line">十位数：5</span><br><span class="line">百位数：1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArithmeticExer1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//随意给出一个整数，打印显示它的个位数，十位数，百位数的值。</span></span><br><span class="line">        <span class="comment">// 主打一个缩小范围然后取余确定最后一位</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1234</span>;</span><br><span class="line">        <span class="keyword">int</span> qian=n/<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> bai=n/<span class="number">100</span>%<span class="number">10</span>;  <span class="comment">// 提示:n/100=12</span></span><br><span class="line">        <span class="keyword">int</span> shi=n/<span class="number">10</span>%<span class="number">10</span>;   <span class="comment">//提示:n/100=123</span></span><br><span class="line">        <span class="keyword">int</span> ge=n%<span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"个位数："</span>+ge);</span><br><span class="line">        System.out.println(<span class="string">"十位数："</span>+shi);</span><br><span class="line">        System.out.println(<span class="string">"百位数："</span>+bai);</span><br><span class="line">        System.out.println(<span class="string">"千位数："</span>+qian);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：获取一个四位数的个位，十位，百位，千位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticExer01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取一个四位数的个位，十位，百位，千位</span></span><br><span class="line">        <span class="comment">// 主打一个缩小范围然后取余确定最后一位</span></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1234</span>;</span><br><span class="line">        <span class="keyword">int</span> qian=n/<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> bai=n/<span class="number">100</span>%<span class="number">10</span>;  <span class="comment">// 提示:n/100=12</span></span><br><span class="line">        <span class="keyword">int</span> shi=n/<span class="number">10</span>%<span class="number">10</span>;   <span class="comment">//提示:n/100=123</span></span><br><span class="line">        <span class="keyword">int</span> ge=n%<span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"个位数："</span>+ge);</span><br><span class="line">        System.out.println(<span class="string">"十位数："</span>+shi);</span><br><span class="line">        System.out.println(<span class="string">"百位数："</span>+bai);</span><br><span class="line">        System.out.println(<span class="string">"千位数："</span>+qian);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 17:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticExer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">89</span>;</span><br><span class="line">        <span class="keyword">int</span> day=<span class="number">89</span>/<span class="number">24</span>;</span><br><span class="line">        <span class="keyword">int</span> hour=<span class="number">89</span>%<span class="number">24</span>;</span><br><span class="line">        System.out.println(<span class="string">"一共"</span>+day+<span class="string">"天"</span>+hour+<span class="string">"小时"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1：算术运算符：自加、自减</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticExer3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> i = i1++;  <span class="comment">// 此时 i=10 i1=11</span></span><br><span class="line">        System.out.print(<span class="string">"i="</span>+i); <span class="comment">// i=10</span></span><br><span class="line">        System.out.println(<span class="string">"i1="</span>+i1);<span class="comment">// i1=11</span></span><br><span class="line">        i = ++i1; <span class="comment">// 此时i1=12 i=12</span></span><br><span class="line">        System.out.print(<span class="string">"i="</span>+i);<span class="comment">// i=12</span></span><br><span class="line">        System.out.println(<span class="string">"i1="</span>+i1);<span class="comment">// i1=12</span></span><br><span class="line">        i = i2--; <span class="comment">// 此时i2=19 i=20</span></span><br><span class="line">        System.out.print(<span class="string">"i="</span>+i);<span class="comment">// i=20</span></span><br><span class="line">        System.out.println(<span class="string">"i2="</span>+i2);<span class="comment">// i2=19</span></span><br><span class="line">        i = --i2;  <span class="comment">// 此时i2=18 i=18</span></span><br><span class="line">        System.out.print(<span class="string">"i="</span>+i);<span class="comment">// i=18</span></span><br><span class="line">        System.out.println(<span class="string">"i2="</span>+i2);<span class="comment">// i2=18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"5+5="</span> + <span class="number">5</span> + <span class="number">5</span>); <span class="comment">//打印结果是？ 5+5=55   因为string+int+int =&gt; string+int =&gt; string</span></span><br></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> bb1 = <span class="number">127</span>;</span><br><span class="line">bb1++;</span><br><span class="line">System.out.println(<span class="string">"bb1 = "</span> + bb1);<span class="comment">//-128</span></span><br></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = i++ + ++i * i++;  <span class="comment">//从左往右 1+3*3=10 最后i等于4 </span></span><br><span class="line">System.out.println(<span class="string">"j = "</span> + j);</span><br></pre></td></tr></table></figure><p>练习5：（企业真题）写出下列程序的输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> j = i++;</span><br><span class="line">System.out.println(j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">m = m++; <span class="comment">//(1)先取b的值“2”放操作数栈 (2)m再自增,m=3 (3)再把操作数栈中的"2"赋值给m,m=2</span></span><br><span class="line">System.out.println(m);  <span class="comment">// 是2!!!!</span></span><br></pre></td></tr></table></figure><h3 id="7-2-赋值运算符"><a href="#7-2-赋值运算符" class="headerlink" title="7.2 赋值运算符"></a>7.2 赋值运算符</h3><h4 id="7-2-1-基本语法"><a href="#7-2-1-基本语法" class="headerlink" title="7.2.1 基本语法"></a>7.2.1 基本语法</h4><ul><li><p>符号：= </p><ul><li>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li>支持<code>连续赋值</code>(先定义好之后才能连续赋值)。</li></ul></li><li><p>扩展赋值运算符： +=、 -=、*=、 /=、%=</p><table><thead><tr><th align="center">赋值运算符</th><th align="center">符号解释</th></tr></thead><tbody><tr><td align="center"><code>+=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相加</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>-=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相减</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>*=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相乘</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>/=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相除</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>%=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>取余</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr></tbody></table></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetValueTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> l1 = i1; <span class="comment">//自动类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> bb1 = (<span class="keyword">byte</span>)i1; <span class="comment">//强制类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = i1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连续赋值的测试</span></span><br><span class="line"><span class="comment">//以前的写法</span></span><br><span class="line"><span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b1 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连续赋值的写法</span></span><br><span class="line"><span class="keyword">int</span> a2,b2;</span><br><span class="line">a2 = b2 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a3 = <span class="number">10</span>,b3 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//举例说明+=  -=  *=  /=   %=  </span></span><br><span class="line"><span class="keyword">int</span> m1 = <span class="number">10</span>;</span><br><span class="line">m1 += <span class="number">5</span>; <span class="comment">//类似于 m1 = m1 + 5的操作，但不等同于。</span></span><br><span class="line">System.out.println(m1);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习1：开发中，如何实现一个变量+2的操作呢？</span></span><br><span class="line"><span class="comment">// += 的操作不会改变变量本身的数据类型。其他拓展的运算符也如此!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line"><span class="comment">//写法1：推荐</span></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">10</span>;</span><br><span class="line">s1 += <span class="number">2</span>; <span class="comment">//编译通过，因为在得到int类型的结果后，JVM自动完成一步强制类型转换，将int类型强转成short</span></span><br><span class="line">System.out.println(s1);<span class="comment">//12</span></span><br><span class="line"><span class="comment">//写法2：</span></span><br><span class="line"><span class="keyword">short</span> s2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//s2 = s2 + 2;//编译报错，因为将int类型的结果赋值给short类型的变量s时，可能损失精度</span></span><br><span class="line">s2 = (<span class="keyword">short</span>)(s2 + <span class="number">2</span>);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习2：开发中，如何实现一个变量+1的操作呢？</span></span><br><span class="line"><span class="comment">//写法1：推荐</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">num1++;</span><br><span class="line">System.out.println(num1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2：</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">num2 += <span class="number">1</span>;</span><br><span class="line">System.out.println(num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法3：</span></span><br><span class="line"><span class="keyword">int</span> num3 = <span class="number">10</span>;</span><br><span class="line">num3 = num3 + <span class="number">1</span>;</span><br><span class="line">System.out.println(num3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-2-练习"><a href="#7-2-2-练习" class="headerlink" title="7.2.2 练习"></a>7.2.2 练习</h4><p>练习1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">3</span>; </span><br><span class="line">s = s+<span class="number">2</span>;  <span class="comment">//① 编译报错   s是一个short short+int=int不能直接给short 需要强制类型转换 s=(short)(s+2);</span></span><br><span class="line">s += <span class="number">2</span>;   <span class="comment">//② 正常执行   short+int=int 自动完成了强制类型转换(+=不改变值的数据类型)</span></span><br></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">i *= <span class="number">0.1</span>;</span><br><span class="line">System.out.println(i);<span class="comment">// 因为*=不改变值的数据类型 0.1就截断为0   [脑子短路]</span></span><br><span class="line">i++;</span><br><span class="line">System.out.println(i);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">        n *= m++; <span class="comment">// 可以看作是 n = n * m++;  n=3*2=6 m=3</span></span><br><span class="line">        System.out.println(<span class="string">"m="</span> + m);<span class="comment">//3</span></span><br><span class="line">        System.out.println(<span class="string">"n="</span> + n);<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">n += (n++) + (++n);  <span class="comment">// 可以看作是 n = n + (n++) + (++n)=10+10+12=32</span></span><br><span class="line">System.out.println(n);<span class="comment">//32</span></span><br></pre></td></tr></table></figure><p>练习5：你有几种办法实现变量值减1？变量值减2呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 16:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinusTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//练习①：变量值减1</span></span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        <span class="comment">//s = (short)(s - 1);</span></span><br><span class="line">        <span class="comment">//方式2：推荐</span></span><br><span class="line">        s--; <span class="comment">//或者 --s</span></span><br><span class="line">        <span class="comment">//方式3：</span></span><br><span class="line">        s -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习②：变量值减2</span></span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        <span class="comment">//s1 = (short)(s1 - 2);</span></span><br><span class="line">        <span class="comment">//方式2：推荐</span></span><br><span class="line">        s1 -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-比较-关系-运算符"><a href="#7-3-比较-关系-运算符" class="headerlink" title="7.3 比较(关系)运算符"></a>7.3 比较(关系)运算符</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212138970.png" alt="image-20220312001742263"></p><ul><li><p>比较运算符的结果都是boolean型，结果只有true/false。</p></li><li><p>&gt;   &lt;   &gt;=  &lt;= ：只适用于基本数据类型（除boolean类型之外）</p><p>==   != ：适用于基本数据类型和引用数据类型</p></li><li><p>比较运算符“<code>==</code>”不能误写成“<code>=</code>” </p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(i1 == i2);<span class="comment">//false</span></span><br><span class="line">System.out.println(i1 != i2);<span class="comment">//true</span></span><br><span class="line">System.out.println(i1 &gt;= i2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">20</span>;</span><br><span class="line">System.out.println(m == n);<span class="comment">//false</span></span><br><span class="line">System.out.println(m = n);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> b2 = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(b1 == b2);<span class="comment">//false</span></span><br><span class="line">System.out.println(b1 = b2);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//区分好==和=的区别。</span></span><br><span class="line"><span class="keyword">if</span>(b1 == <span class="keyword">true</span>)  <span class="comment">//if(b1 = true)</span></span><br><span class="line">System.out.println(<span class="string">"结果为真"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"结果为假"</span>);</span><br></pre></td></tr></table></figure><h3 id="7-4-逻辑运算符"><a href="#7-4-逻辑运算符" class="headerlink" title="7.4 逻辑运算符"></a>7.4 逻辑运算符</h3><h4 id="7-4-1-基本语法"><a href="#7-4-1-基本语法" class="headerlink" title="7.4.1 基本语法"></a>7.4.1 基本语法</h4><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139771.png" alt="image-20220312001943403" style="zoom: 67%;"><ul><li><p>逻辑运算符，boolean 逻辑运算符 boolean =boolean 。</p></li><li><p>运算符说明：</p><ul><li>&amp; 和 &amp;&amp;：表示”且”关系，当符号左右两边布尔值都是true时，结果才能为true。否则，为false。</li><li>| 和 || ：表示”或”关系，当符号两边布尔值有一边为true时，结果为true。当两边都为false时，结果为false。</li><li>! ：表示”非”关系，当变量布尔值为true时，结果为false。当变量布尔值为false时，结果为true。</li><li>^ ：当符号左右两边布尔值不同时，结果为true。当两边布尔值相同时，结果为false。<ul><li>理解：<code>异或，追求的是“异”！</code></li></ul></li></ul></li><li><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成 3 &lt; x &lt; 6，应该写成x &gt; 3 &amp; x &lt; 6 。</p></li></ul><ul><li><p><strong>区分“&amp;”和“&amp;&amp;”：</strong></p><ul><li><p>相同点：如果符号左边是true，则二者都执行符号右边的操作</p></li><li><p>不同点：&amp; ： 如果符号左边是false,则继续执行符号右边的操作</p></li></ul><p>​                     &amp;&amp; ：如果符号左边是false,则不再继续执行符号右边的操作(有一个不符合可以跳过)</p><ul><li>建议：开发中，推荐使用 &amp;&amp; </li></ul></li><li><p><strong>区分“|”和“||”：</strong></p></li></ul><pre><code>- 相同点：如果符号左边是false，则二者都执行符号右边的操作- 不同点：| ： 如果符号左边是true，则继续执行符号右边的操作  ​               || ：如果符号左边是true，则不再继续执行符号右边的操作(有一个符合可以跳过)- 建议：开发中，推荐使用 ||</code></pre><p> 代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp; 与，且；有false则false</span></span><br><span class="line">System.out.println((a &gt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">"==============="</span>);</span><br><span class="line"><span class="comment">// | 或；有true则true</span></span><br><span class="line">System.out.println((a &gt; b) | (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) | (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) | (a &gt; c));</span><br><span class="line">System.out.println((a &lt; b) | (a &lt; c));</span><br><span class="line">System.out.println(<span class="string">"==============="</span>);</span><br><span class="line"><span class="comment">// ^ 异或；相同为false，不同为true  追求异！！！</span></span><br><span class="line">System.out.println((a &gt; b) ^ (a &gt; c));</span><br><span class="line">System.out.println((a &gt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">"==============="</span>);</span><br><span class="line"><span class="comment">// ! 非；非false则true，非true则false</span></span><br><span class="line">System.out.println(!<span class="keyword">false</span>);</span><br><span class="line">System.out.println(!<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//&amp;和&amp;&amp;的区别</span></span><br><span class="line">        System.out.println((a &gt; b) &amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">        System.out.println((a &gt; b) &amp;&amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">        System.out.println((a == b) &amp;&amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//|和||的区别</span></span><br><span class="line">        System.out.println((a &gt; b) | (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">        System.out.println((a &gt; b) || (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">        System.out.println((a == b) || (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-2-案例与练习"><a href="#7-4-2-案例与练习" class="headerlink" title="7.4.2 案例与练习"></a>7.4.2 案例与练习</h4><p><strong>案例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 定义类 CompareLogicExer</span><br><span class="line">2. 定义 main方法</span><br><span class="line">3. 定义一个int类型变量a,变量b,都赋值为20</span><br><span class="line">4. 定义boolean类型变量bo1 , 判断++a 是否被3整除,并且a++ 是否被7整除,将结果赋值给bo1</span><br><span class="line">5. 输出a的值,bo1的值</span><br><span class="line">6. 定义boolean类型变量bo2 , 判断b++ 是否被3整除,并且++b 是否被7整除,将结果赋值给bo2</span><br><span class="line">7. 输出b的值,bo2的值</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareLogicExer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b01=(++a%<span class="number">3</span>==<span class="number">0</span>)&amp;&amp;(a++%<span class="number">7</span>==<span class="number">0</span>);</span><br><span class="line">        System.out.println(a);  <span class="comment">// a=22 先是++a之后成为21 最后a++成为22</span></span><br><span class="line">        System.out.println(b01); <span class="comment">// true</span></span><br><span class="line">        <span class="keyword">boolean</span> b02=(b++%<span class="number">3</span>==<span class="number">0</span>)&amp;&amp;(++b%<span class="number">7</span>==<span class="number">0</span>); <span class="comment">//一定要记得&amp;&amp;是可以跳出来循环的！</span></span><br><span class="line">        System.out.println(b);  <span class="comment">// b=21  先是b++之后成为21 直接&amp;&amp;不成立直接跳出来了!!!! </span></span><br><span class="line">        System.out.println(b02); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习1：</strong>区分 &amp; 和 &amp;&amp; (&amp;&amp;被推荐使用，因为有一个不符合就跳出判断了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++ == <span class="number">2</span> &amp; ++y == <span class="number">2</span>)&#123;  <span class="comment">// 1==2 不成立但是x=2 然后&amp;不能跳过循环继续y=2 2==2成立  但是最终是false&amp;true=false</span></span><br><span class="line"> x = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"x="</span> + x + <span class="string">",y="</span> + y); <span class="comment">// x=2 y=2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++ == <span class="number">2</span> &amp;&amp; ++y == <span class="number">2</span>)&#123; <span class="comment">// 1==2不成立 x=2  因为是&amp;&amp;直接跳出循环</span></span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"x="</span>+x+<span class="string">",y="</span>+y); <span class="comment">// x=2 y=1</span></span><br></pre></td></tr></table></figure><p><strong>练习2：</strong>区分 | 和 ||(||被推荐使用，因为有一个符合就跳出判断了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">1</span> | ++y==<span class="number">1</span>)&#123;  <span class="comment">// 1==1 x=2 左边成立 y=2 2==1不成立  true|false=true</span></span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"x="</span>+x+<span class="string">",y="</span>+y); <span class="comment">// x=7 y=2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">1</span> || ++y==<span class="number">1</span>)&#123; <span class="comment">// 1==1 左边成立 x=2 直接成功</span></span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"x="</span>+x+<span class="string">",y="</span>+y); <span class="comment">// x=7 y=1</span></span><br></pre></td></tr></table></figure><p><strong>练习3：</strong>程序输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Test</span>  </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String []  args)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> x = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> y = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">short</span> z = <span class="number">42</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((z++ == <span class="number">42</span>) &amp;&amp; (y = <span class="keyword">true</span>)) &#123;   <span class="comment">// 42==42 左边成立 z=43  y=true</span></span><br><span class="line">            z++;       <span class="comment">// z=44</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((x = <span class="keyword">false</span>) || (++z == <span class="number">45</span>)) &#123; <span class="comment">// x=false 左边成立 z=45 45==45 不成立</span></span><br><span class="line">            z++; <span class="comment">// z=46</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"z="</span> + z); <span class="comment">// z=46</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结果为：</span></span><br><span class="line"><span class="comment">//z= 46</span></span><br></pre></td></tr></table></figure><h3 id="7-5-位运算符（难点、非重点）"><a href="#7-5-位运算符（难点、非重点）" class="headerlink" title="7.5 位运算符（难点、非重点）"></a>7.5 位运算符（难点、非重点）</h3><h4 id="7-5-1-基本语法"><a href="#7-5-1-基本语法" class="headerlink" title="7.5.1 基本语法"></a>7.5.1 基本语法</h4><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139612.png" alt="image-20220313174721111" style="zoom:75%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139732.png" alt="image-20220312002506339" style="zoom:67%;"><ul><li>位运算符的运算过程都是<strong>基于二进制的补码运算</strong></li></ul><p><strong>（1）左移：&lt;&lt;</strong></p><p>运算规则：在一定范围内，数据<strong>每向左移动n位，相当于原数据*2^n</strong>。（正数、负数都适用）</p><p>【注意】当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>&lt;&lt;<span class="number">4</span>  类似于  <span class="number">3</span>*<span class="number">2</span>^<span class="number">4</span> =&gt; <span class="number">3</span>*<span class="number">16</span> =&gt; <span class="number">48</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139538.png" alt="image-20200225113651675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">3</span>&lt;&lt;<span class="number">4</span>  类似于  -<span class="number">3</span>*<span class="number">2</span>^<span class="number">4</span> =&gt; -<span class="number">3</span>*<span class="number">16</span> =&gt; -<span class="number">48</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139778.png" alt="image-20200225114707524"></p><p><strong>（2）右移：&gt;&gt;</strong></p><p>运算规则：在一定范围内，数据每<strong>向右移动n位，相当于原数据/(2^n)</strong>。（正数、负数都适用）</p><p>【注意】如果不能整除，<code>向下取整</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">69</span>&gt;&gt;<span class="number">4</span>  类似于  <span class="number">69</span>/(<span class="number">2</span>^<span class="number">4</span>) = <span class="number">69</span>/<span class="number">16</span> =<span class="number">4</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139029.png" alt="image-20200225115636844"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-69&gt;&gt;4  类似于  -69&#x2F;(2^4) &#x3D; -69&#x2F;16 &#x3D; -5</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139831.png" alt="image-20200225120112188"></p><p><strong>（3）无符号右移：&gt;&gt;&gt;</strong></p><p>运算规则：<strong>往右移动后，左边空出来的位直接补0</strong>。（正数、负数都适用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">69&gt;&gt;&gt;4  类似于  69&#x2F;2的4次 &#x3D; 69&#x2F;16 &#x3D;4</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139812.png" alt="image-20200225121104734"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-69&gt;&gt;&gt;4   结果：268435451</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139595.png" alt="image-20200225121244290"></p><p><strong>（4）按位与：&amp;</strong></p><p>运算规则：<strong>对应位都是1才为1，否则为0</strong>。</p><ul><li><p>1 &amp; 1 结果为1</p></li><li><p>1 &amp; 0 结果为0</p></li><li><p>0 &amp; 1 结果为0</p></li></ul><ul><li>0 &amp; 0 结果为0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> &amp; <span class="number">7</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139896.png" alt="image-20200225122440953"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">9</span> &amp; <span class="number">7</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139331.png" alt="image-20200225122221616"></p><p><strong>（5）按位或：|</strong></p><p>运算规则：对应位只要<strong>有1即为1，否则为0</strong>。</p><ul><li><p>1 | 1 结果为1</p></li><li><p>1 | 0 结果为1</p></li><li><p>0 | 1 结果为1</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> | <span class="number">7</span>  <span class="comment">//结果： 15</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139690.png" alt="image-20200225122758851"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">9</span> | <span class="number">7</span> <span class="comment">//结果： -9</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139888.png" alt="image-20200225123409130"></p><p><strong>（6）按位异或：^</strong></p><p>运算规则：对应位<strong>一个为1一个为0，才为1，否则为0(找异!)</strong>。</p><ul><li><p>1 ^ 1 结果为0</p></li><li><p>1 ^ 0 结果为1</p></li><li><p>0 ^ 1 结果为1</p></li></ul><ul><li>0 ^ 0 结果为0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> ^ <span class="number">7</span>  <span class="comment">//结果为14</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139281.png" alt="image-20200225123445305"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">9</span> ^ <span class="number">7</span> <span class="comment">//结果为-16</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139689.png" alt="image-20200225133145727"></p><p><strong>（7）按位取反：~</strong></p><p>运算规则：<strong>对应位为1，则结果为0；对应位为0，则结果为1</strong>。</p><ul><li><p>~0就是1  </p></li><li><p>~1就是0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="number">9</span>  <span class="comment">//结果：-10</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139954.png" alt="image-20200225124112662"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~-<span class="number">9</span>  <span class="comment">//结果：8</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139533.png" alt="image-20200225124156862"></p><h4 id="7-5-2-举例"><a href="#7-5-2-举例" class="headerlink" title="7.5.2 举例"></a>7.5.2 举例</h4><p><strong>举例1：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139619.jpg" alt="snipaste_20220312_002549" style="zoom: 67%;"><p><strong>举例2：体会 m = k ^ n = (m ^ n) ^ n</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139121.png" alt="image-20220312002736157" style="zoom:67%;"><h4 id="7-5-3-案例"><a href="#7-5-3-案例" class="headerlink" title="7.5.3 案例"></a>7.5.3 案例</h4><p><strong>案例1：</strong>高效的方式计算2 * 8的值（经典面试题）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案：2 &lt;&lt; 3 、  8  &lt;&lt; 1</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>如何交换两个int型变量的值？String呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 16:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitExer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"m = "</span> + m + <span class="string">", n = "</span> + n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（推荐）实现方式1：优点：容易理解，适用于不同数据类型    缺点：需要额外定义变量</span></span><br><span class="line"><span class="comment">//int temp = m;</span></span><br><span class="line"><span class="comment">//m = n;</span></span><br><span class="line"><span class="comment">//n = temp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现方式2：优点：没有额外定义变量    缺点：可能超出int的范围；只能适用于数值类型</span></span><br><span class="line">m=m+n; <span class="comment">//20+10=30             全上来了m+n</span></span><br><span class="line">        n=m-n; <span class="comment">//30-20=10   n=10      全部的值-右边原来的=剩下的就是左边的(新的右边的)</span></span><br><span class="line">        m=m-n; <span class="comment">//30-20=20   m=20      全部-新的右边的=新的左边的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现方式3：优点：没有额外定义变量    缺点：不易理解；只能适用于数值类型</span></span><br><span class="line">m = m ^ n; </span><br><span class="line">n = m ^ n; <span class="comment">//(m ^ n) ^ n</span></span><br><span class="line">m = m ^ n;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"m = "</span> + m + <span class="string">", n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-条件运算符"><a href="#7-6-条件运算符" class="headerlink" title="7.6 条件运算符"></a>7.6 条件运算符</h3><h4 id="7-6-1-基本语法"><a href="#7-6-1-基本语法" class="headerlink" title="7.6.1 基本语法"></a>7.6.1 基本语法</h4><ul><li>条件运算符格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(条件表达式)? 表达式<span class="number">1</span>:表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><p>说明：条件表达式是boolean类型的结果，根据boolean的值选择表达式1或表达式2</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139707.png" alt="image-20220312002841945" style="zoom:67%;"></li><li><p>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line">    System.out.println(i);<span class="comment">//200</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> marry = <span class="keyword">false</span>;</span><br><span class="line">System.out.println(marry ? <span class="string">"已婚"</span> : <span class="string">"未婚"</span>  );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> d1 = (m1 &gt; m2)? <span class="number">1</span> : <span class="number">2.0</span>;</span><br><span class="line">System.out.println(d1);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">12</span>;</span><br><span class="line">    System.out.println(num &gt; <span class="number">0</span>? <span class="keyword">true</span> : <span class="string">"num非正数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-2-案例"><a href="#7-6-2-案例" class="headerlink" title="7.6.2 案例"></a>7.6.2 案例</h4><p><strong>案例1：</strong>获取两个数中的较大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionExer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取两个数的较大值</span></span><br><span class="line">        <span class="keyword">int</span> m1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> m2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max1 = (m1 &gt; m2)? m1 : m2;</span><br><span class="line">        System.out.println(<span class="string">"m1和m2中的较大值为"</span> + max1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>获取三个数中的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionExer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">13</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">4442</span>;</span><br><span class="line">        <span class="keyword">int</span> c=<span class="number">54</span>;</span><br><span class="line">        <span class="keyword">int</span> secondmax=a&gt;b?a:b;  <span class="comment">//a和b里面的最大数</span></span><br><span class="line">        <span class="keyword">int</span> max=secondmax&gt;c?secondmax:c; <span class="comment">//和c再比较一下</span></span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong>今天是周2，10天以后是周几？</p><p>要求：控制台输出”今天是周2，10天以后是周x”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionExer3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> day=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> tomorrow=<span class="number">2</span>+<span class="number">10</span>%<span class="number">7</span>;  <span class="comment">// 10/7相当于过了几周 现在意思就是10%7就是整周以外过了几天 不用管整7!!</span></span><br><span class="line">        System.out.println(tomorrow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-3-与if-else的转换关系"><a href="#7-6-3-与if-else的转换关系" class="headerlink" title="7.6.3 与if-else的转换关系"></a>7.6.3 与if-else的转换关系</h4><ul><li>条件运算符——-&gt;if-else结构。</li></ul><ul><li>开发中，如果既可以使用条件运算符(执行效率高,推荐!)，又可以使用if-else。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if-else实现获取两个数的较大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max;<span class="comment">//声明变量max，用于记录i1和i2的较大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i1 &gt; i2)&#123;</span><br><span class="line">    max = i1;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    max = i2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><h3 id="7-7-运算符优先级"><a href="#7-7-运算符优先级" class="headerlink" title="7.7 运算符优先级"></a>7.7 运算符优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p>上一行中的运算符总是优先于下一行的。</p><table><thead><tr><th>优先级</th><th align="center">运算符说明</th><th align="center">Java运算符</th></tr></thead><tbody><tr><td>1</td><td align="center">括号</td><td align="center"><code>()</code>、<code>[]</code>、<code>{}</code></td></tr><tr><td>2</td><td align="center">正负号</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>3</td><td align="center">单元运算符</td><td align="center"><code>++</code>、<code>--</code>、<code>~</code>、<code>！</code></td></tr><tr><td>4</td><td align="center">乘法、除法、求余</td><td align="center"><code>*</code>、<code>/</code>、<code>%</code></td></tr><tr><td>5</td><td align="center">加法、减法</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>6</td><td align="center">移位运算符</td><td align="center"><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td></tr><tr><td>7</td><td align="center">关系运算符</td><td align="center"><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>、<code>instanceof</code></td></tr><tr><td>8</td><td align="center">等价运算符</td><td align="center"><code>==</code>、<code>!=</code></td></tr><tr><td>9</td><td align="center">按位与</td><td align="center"><code>&amp;</code></td></tr><tr><td>10</td><td align="center">按位异或</td><td align="center"><code>^</code></td></tr><tr><td>11</td><td align="center">按位或</td><td align="center">`</td></tr><tr><td>12</td><td align="center">条件与</td><td align="center"><code>&amp;&amp;</code></td></tr><tr><td>13</td><td align="center">条件或</td><td align="center">`</td></tr><tr><td>14</td><td align="center">三元运算符</td><td align="center"><code>? :</code></td></tr><tr><td>15</td><td align="center">赋值运算符</td><td align="center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></td></tr><tr><td>16</td><td align="center">位赋值运算符</td><td align="center"><code>&amp;=</code>、`</td></tr></tbody></table><blockquote><p>开发建议：</p><ol><li>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>表达式的执行顺序。</li><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>来完成。例如：<br>​ (num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</li></ol></blockquote><h2 id="8-【拓展】关于字符集"><a href="#8-【拓展】关于字符集" class="headerlink" title="8. 【拓展】关于字符集"></a>8. 【拓展】关于字符集</h2><h3 id="8-1-字符集"><a href="#8-1-字符集" class="headerlink" title="8.1 字符集"></a>8.1 字符集</h3><ul><li><strong>编码与解码</strong></li></ul><p>计算机中储存的信息都是用<code>二进制数</code>表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<code>编码</code> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<code>解码</code> 。</p><ul><li><p><strong>字符编码（Character Encoding）</strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p></li><li><p><strong>字符集</strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p></li></ul><h3 id="8-2-ASCII码"><a href="#8-2-ASCII码" class="headerlink" title="8.2 ASCII码"></a>8.2 ASCII码</h3><ul><li>ASCII码（American Standard Code for Information Interchange，美国信息交换标准代码）：上个世纪60年代，美国制定了一套字符编码，对<code>英语字符</code>与二进制位之间的关系，做了统一规定。这被称为ASCII码。</li><li>ASCII码用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符（最前面的1位统一规定为0），共<code>128个</code>字符。比如：空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。</li><li>缺点：不能表示所有字符。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139241.png" alt="image-20220513095907601"></p><h3 id="8-3-ISO-8859-1字符集"><a href="#8-3-ISO-8859-1字符集" class="headerlink" title="8.3 ISO-8859-1字符集"></a>8.3 ISO-8859-1字符集</h3><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰语、德语、意大利语、葡萄牙语等</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul><h3 id="8-4-GBxxx字符集"><a href="#8-4-GBxxx字符集" class="headerlink" title="8.4 GBxxx字符集"></a>8.4 GBxxx字符集</h3><ul><li>GB就是国标的意思，是为了<code>显示中文</code>而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同，即向下兼容ASCII码。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含<code>7000多个简体汉字</code>，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，这就是常说的”全角”字符，而原来在127号以下的那些符号就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了<code>双字节</code>编码方案，共收录了<code>21003个</code>汉字，完全兼容GB2312标准，同时支持<code>繁体汉字</code>以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字<code>70244个</code>，采用<code>多字节</code>编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul><h3 id="8-5-Unicode码"><a href="#8-5-Unicode码" class="headerlink" title="8.5 Unicode码"></a>8.5 Unicode码</h3><ul><li><p>Unicode编码为表达<code>任意语言的任意字符</code>而设计，也称为统一码、标准万国码。Unicode 将世界上所有的文字用<code>2个字节</code>统一进行编码，为每个字符设定唯一的二进制编码，以满足跨语言、跨平台进行文本处理的要求。</p></li><li><p>Unicode 的缺点：这里有三个问题：</p><ul><li>第一，英文字母只用一个字节表示就够了，如果用更多的字节存储是<code>极大的浪费</code>。</li><li>第二，如何才能<code>区别Unicode和ASCII</code>？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？</li><li>第三，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，<code>不够表示所有字符</code>。</li></ul></li><li><p>Unicode在很长一段时间内无法推广，直到互联网的出现，为解决Unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现。具体来说，有三种编码方案，UTF-8、UTF-16和UTF-32。</p></li></ul><h3 id="8-6-UTF-8"><a href="#8-6-UTF-8" class="headerlink" title="8.6 UTF-8"></a>8.6 UTF-8</h3><ul><li>Unicode是字符集，UTF-8、UTF-16、UTF-32是三种<code>将数字转换到程序数据</code>的编码方案。顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。其中，UTF-8 是在互联网上<code>使用最广</code>的一种 Unicode 的实现方式。</li><li>互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。UTF-8 是一种<code>变长的编码方式</code>。它可以使用 1-4 个字节表示一个符号它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul><ul><li>举例</li></ul><p>Unicode符号范围  | UTF-8编码方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(十六进制)           | （二进制）</span><br><span class="line"></span><br><span class="line">————————————————————|—–—–—–—–—–—–—–—–—–—–—–—–—–—–</span><br><span class="line"></span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx（兼容原来的ASCII）</span><br><span class="line"></span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line"></span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line"></span><br><span class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><p><img src=".images/image-20220525164636164.png" alt="image-20220525164636164"></p><h3 id="8-7-小结"><a href="#8-7-小结" class="headerlink" title="8.7 小结"></a>8.7 小结</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139738.jpg" alt="字符集"></p><blockquote><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p></blockquote><h1 id="第03章-流程控制语句"><a href="#第03章-流程控制语句" class="headerlink" title="第03章_流程控制语句"></a>第03章_流程控制语句</h1><hr><h2 id="本章专题与脉络-1"><a href="#本章专题与脉络-1" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212139394.png" alt="第1阶段：Java基本语法-第03章" style="zoom:45%;"><hr><ul><li><p>流程控制语句是用来控制程序中各<code>语句执行顺序</code>的语句，可以把语句组合成能<code>完成一定功能</code>的小逻辑模块。</p></li><li><p>程序设计中规定的<code>三种</code>流程结构，即：</p><ul><li><strong>顺序结构</strong><ul><li>程序从上到下逐行地执行，中间没有任何判断和跳转。</li></ul></li><li><strong>分支结构</strong><ul><li>根据条件，选择性地执行某段代码。</li><li>有<code>if…else</code>和<code>switch-case</code>两种分支语句。</li></ul></li><li><strong>循环结构</strong><ul><li>根据循环条件，重复性的执行某段代码。</li><li>有<code>for</code>、<code>while</code>、<code>do-while</code>三种循环语句。</li><li>补充：JDK5.0 提供了<code>foreach</code>循环，方便的遍历集合、数组元素。（第12章集合中讲解）</li></ul></li></ul></li><li><p>生活中、工业生产中流程控制举例</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140010.jpg" alt="洗衣流程" style="zoom:100%;"><h2 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1. 顺序结构"></a>1. 顺序结构</h2><p>顺序结构就是程序<code>从上到下逐行</code>地执行。表达式语句都是顺序执行的。并且上一行对某个变量的修改对下一行会产生影响。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140546.png" alt="image-20211218093256771"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatementTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">"x = "</span> + x);</span><br><span class="line">        System.out.println(<span class="string">"y = "</span> + y);</span><br><span class="line">        <span class="comment">//对x、y的值进行修改</span></span><br><span class="line">        x++;</span><br><span class="line">        y = <span class="number">2</span> * x + y;</span><br><span class="line">        x = x * <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x);</span><br><span class="line">        System.out.println(<span class="string">"y = "</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java中定义变量时采用合法的<code>前向引用</code>。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = num1 + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num2 = num1 + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-分支语句"><a href="#2-分支语句" class="headerlink" title="2. 分支语句"></a>2. 分支语句</h2><h3 id="2-1-if-else条件判断结构"><a href="#2-1-if-else条件判断结构" class="headerlink" title="2.1 if-else条件判断结构"></a>2.1 if-else条件判断结构</h3><h4 id="2-1-1-基本语法"><a href="#2-1-1-基本语法" class="headerlink" title="2.1.1 基本语法"></a>2.1.1 基本语法</h4><p><strong>结构1：单分支条件判断：if</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)｛</span><br><span class="line">  语句块;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><code>说明：</code>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）/ 布尔变量。</p><p><code>执行流程：</code></p><ol><li>首先判断条件表达式是true/false</li><li>如果是true就执行语句块</li><li>如果是false就不执行语句块</li></ol><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140267.png" alt="image-20220514160139926"></p><p><strong>结构2：双分支条件判断：if…else</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123; </span><br><span class="line">  语句块<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>执行流程：</code></p><ol><li>首先判断条件表达式看其结果是true还是false</li><li>如果是true就执行语句块1</li><li>如果是false就执行语句块2</li></ol><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140062.png" alt="image-20220514160243421"></p><p><strong>结构3：多分支条件判断：if…else if…else</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">  语句块<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">  语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (条件表达式n) &#123;</span><br><span class="line"> 语句块n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句块n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>说明：</code>一旦条件表达式为true，则进入执行相应的语句块。执行完对应的语句块之后，就跳出当前结构。</p><p><code>执行流程：</code></p><ol><li>首先判断关系表达式1看其结果是true还是false</li><li>如果是true就执行语句块1，然后结束当前多分支</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>如果是true就执行语句块2，然后结束当前多分支</li><li>如果是false就继续判断关系表达式…看其结果是true还是false</li></ol><p>​    …</p><p>   n.  如果没有任何关系表达式为true，就执行语句块n+1，然后结束当前多分支。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140961.png" alt="image-20220514160538651"></p><h4 id="2-1-2-应用举例"><a href="#2-1-2-应用举例" class="headerlink" title="2.1.2 应用举例"></a>2.1.2 应用举例</h4><p><strong>案例1：</strong>成年人心率的正常范围是每分钟60-100次。体检时，如果心率不在此范围内，则提示需要做进一步的检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> heartBeats = <span class="number">89</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(heartBeats &lt; <span class="number">60</span> || heartBeats &gt; <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"你需要做进一步的检查"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"体检结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>定义一个整数，判定是偶数还是奇数    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(a + <span class="string">"是偶数"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(a + <span class="string">"是奇数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">岳小鹏参加Java考试，他和父亲岳不群达成承诺：</span><br><span class="line">如果：</span><br><span class="line">成绩为100分时，奖励一辆跑车；</span><br><span class="line">成绩为(80，99]时，奖励一辆山地自行车；</span><br><span class="line">当成绩为[60,80]时，奖励环球影城一日游；</span><br><span class="line">其它时，胖揍一顿。</span><br><span class="line"></span><br><span class="line">说明：默认成绩是在[0,100]范围内</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">67</span>;<span class="comment">//岳小鹏的期末成绩</span></span><br><span class="line">        <span class="comment">//写法一：默认成绩范围为[0,100]</span></span><br><span class="line">        <span class="keyword">if</span>(score == <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"奖励一辆跑车"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">99</span>)&#123;    <span class="comment">//错误的写法：&#125;else if(80 &lt; score &lt;= 99)&#123;</span></span><br><span class="line">            System.out.println(<span class="string">"奖励一辆山地自行车"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"奖励环球影城玩一日游"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//else&#123;</span></span><br><span class="line">        <span class="comment">//System.out.println("胖揍一顿");</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写法二：</span></span><br><span class="line">        <span class="comment">// 默认成绩范围为[0,100]</span></span><br><span class="line">        <span class="keyword">if</span>(score == <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"奖励一辆跑车"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"奖励一辆山地自行车"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"奖励环球影城玩一日游"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"胖揍一顿"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140722.png" alt="image-20221027185234087"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140126.png" alt="image-20221027185500389"></p><blockquote><p>当条件表达式之间是“<code>互斥</code>”关系时（即彼此没有交集），条件判断语句及执行语句间顺序无所谓。</p><p>当条件表达式之间是“<code>包含</code>”关系时，“<code>小上大下 / 子上父下</code>”，否则范围小的条件表达式将不可能被执行。</p></blockquote><h4 id="2-1-3-if…else嵌套"><a href="#2-1-3-if…else嵌套" class="headerlink" title="2.1.3 if…else嵌套"></a>2.1.3 if…else嵌套</h4><p>在 if 的语句块中，或者是在else语句块中，又包含了另外一个条件判断（可以是单分支、双分支、多分支），就构成了<code>嵌套结构</code>。</p><p><strong>执行的特点：</strong><br>（1）如果是嵌套在if语句块中的，只有当外部的if条件满足，才会去判断内部的条件<br>（2）如果是嵌套在else语句块中的，只有当外部的if条件不满足，进入else后，才会去判断内部的条件</p><p><strong>案例4：</strong>由键盘输入三个整数分别存入变量num1、num2、num3，对它们进行排序(使用 if-else if-else)，并且从小到大输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IfElseTest4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明num1,num2,num3三个变量并赋值</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">23</span>,num2 = <span class="number">32</span>,num3 = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num1 &gt;= num2)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num3 &gt;= num1)</span><br><span class="line">System.out.println(num2 + <span class="string">"-"</span> + num1 + <span class="string">"-"</span> + num3);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num3 &lt;= num2)</span><br><span class="line">System.out.println(num3 + <span class="string">"-"</span> + num2 + <span class="string">"-"</span> + num1);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(num2 + <span class="string">"-"</span> + num3 + <span class="string">"-"</span> + num1);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; <span class="comment">//num1 &lt; num2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num3 &gt;= num2)&#123;</span><br><span class="line">System.out.println(num1 + <span class="string">"-"</span> + num2 + <span class="string">"-"</span> + num3);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num3 &lt;= num1)&#123;</span><br><span class="line">System.out.println(num3 + <span class="string">"-"</span> + num1 + <span class="string">"-"</span> + num2);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(num1 + <span class="string">"-"</span> + num3 + <span class="string">"-"</span> + num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-4-其它说明"><a href="#2-1-4-其它说明" class="headerlink" title="2.1.4 其它说明"></a>2.1.4 其它说明</h4><ul><li>语句块只有一条执行语句时，一对<code>{}可以省略</code>，但建议保留</li><li>当if-else结构是“多选一”时，最后的<code>else是可选的</code>，根据需要可以省略</li></ul><h4 id="2-1-5-练习"><a href="#2-1-5-练习" class="headerlink" title="2.1.5 练习"></a>2.1.5 练习</h4><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1)对下列代码，若有输出，指出输出结果。</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">2</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (y &gt; <span class="number">2</span>) </span><br><span class="line">            System.out.println(x + y);</span><br><span class="line">       System.out.println(<span class="string">"atguigu"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">       System.out.println(<span class="string">"x is "</span> + x);</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//如果写成if(b=false)能编译通过吗？如果能，结果是？</span></span><br><span class="line"><span class="keyword">if</span>(b == <span class="keyword">false</span>)  <span class="comment">//建议：if(!b)</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b)</span><br><span class="line">System.out.println(<span class="string">"b"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!b)</span><br><span class="line">System.out.println(<span class="string">"c"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"d"</span>);</span><br></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>定义两个整数，分别为small 和 big，如果第一个整数small大于第二个整数big，就交换。输出显示small和big变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseExer3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> small = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> big = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (small &gt; big) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = small;</span><br><span class="line">            small = big;</span><br><span class="line">            big = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"small="</span> + small + <span class="string">",big="</span> + big);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习4：</strong>小明参加期末Java考试，通过考试成绩，判断其Java等级，成绩范围[0,100]</p><ul><li>90-100      优秀</li><li>80-89        好</li><li>70-79        良</li><li>60-69        及格</li><li>60以下    不及格</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//写法一：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseExer4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"小明的期末Java成绩是：[0,100]"</span>);</span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">89</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩是错误的"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于优秀"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于好"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于良"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于及格"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于不及格"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//写法二：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseExer4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"小明的期末Java成绩是：[0,100]"</span>);</span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">89</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩是错误的"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于优秀"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于好"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于良"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于及格"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"你的成绩属于不及格"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习5：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编写程序，声明2个int型变量并赋值。判断两数之和，如果大于等于50，打印“hello world!”</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseExer5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">12</span>, num2 = <span class="number">32</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (num1 + num2 &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"hello world!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习6：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编写程序，声明2个double型变量并赋值。判断第一个数大于10.0，且第2个数小于20.0，打印两数之和。否则，打印两数的乘积。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseExer6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">21.2</span>,d2 = <span class="number">12.3</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(d1 &gt; <span class="number">10.0</span> &amp;&amp; d2 &lt; <span class="number">20.0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"两数之和为："</span> + (d1 + d2));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"两数乘积为："</span> + (d1 * d2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习7：判断水的温度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果大于95℃，则打印“开水”；</span><br><span class="line"></span><br><span class="line">如果大于70℃且小于等于95℃，则打印“热水”；</span><br><span class="line"></span><br><span class="line">如果大于40℃且小于等于70℃，则打印“温水”；</span><br><span class="line"></span><br><span class="line">如果小于等于40℃，则打印“凉水”。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElseExer7</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> waterTemperature = <span class="number">85</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(waterTemperature &gt; <span class="number">95</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"开水"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(waterTemperature &gt; <span class="number">70</span> &amp;&amp; waterTemperature &lt;= <span class="number">95</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"热水"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(waterTemperature &gt; <span class="number">40</span> &amp;&amp; waterTemperature &lt;= <span class="number">70</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"温水"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"凉水"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-switch-case选择结构"><a href="#2-2-switch-case选择结构" class="headerlink" title="2.2 switch-case选择结构"></a>2.2 switch-case选择结构</h3><h4 id="2-2-1-基本语法"><a href="#2-2-1-基本语法" class="headerlink" title="2.2.1 基本语法"></a>2.2.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">        语句块<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//break; </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   [<span class="keyword">default</span>:</span><br><span class="line">        语句块n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程图：</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140851.png" alt="image-20220514101841710"></p><p><strong>执行过程：</strong></p><p>第1步：根据switch中表达式的值，依次匹配各个case。如果表达式的值等于某个case中的常量值，则执行对应case中的执行语句。</p><p>第2步：执行完此case的执行语句以后，<br>​              情况1：如果遇到break,则执行break并跳出当前的switch-case结构<br>​                情况2：如果没有遇到break，则会继续执行当前case之后的其它case中的执行语句。—&gt;case穿透<br>​                 …<br>​                直到遇到break关键字或执行完所有的case及default的执行语句，跳出当前的switch-case结构</p><p><strong>使用注意点：</strong></p><ul><li><p>switch(表达式)中表达式的值必须是下述几种类型之一：byte，short，char，int，枚举 (jdk 5.0)，String (jdk 7.0)；</p></li><li><p>case子句中的值必须是常量，不能是变量名或不确定的表达式值或范围；</p></li><li><p>同一个switch语句，所有case子句中的常量值互不相同；</p></li><li><p>break语句用来在执行完一个case分支后使程序跳出switch语句块；</p><p>如果没有break，程序会顺序执行到switch结尾；</p></li><li><p>default子句是可选的。同时，位置也是灵活的。当没有匹配的case时，执行default语句。</p></li></ul><h4 id="2-2-2-应用举例"><a href="#2-2-2-应用举例" class="headerlink" title="2.2.2 应用举例"></a>2.2.2 应用举例</h4><p><strong>案例1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> (num)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:System.out.println(<span class="string">"0"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:System.out.println(<span class="string">"1"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:System.out.println(<span class="string">"2"</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:System.out.println(<span class="string">"other"</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        String season = <span class="string">"summer"</span>;</span><br><span class="line">        <span class="keyword">switch</span> (season) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"spring"</span>:</span><br><span class="line">                System.out.println(<span class="string">"春暖花开"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"summer"</span>:</span><br><span class="line">                System.out.println(<span class="string">"夏日炎炎"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"autumn"</span>:</span><br><span class="line">                System.out.println(<span class="string">"秋高气爽"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"winter"</span>:</span><br><span class="line">                System.out.println(<span class="string">"冬雪皑皑"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"季节输入有误"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> key = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span>(key)&#123;</span><br><span class="line"><span class="keyword">case</span> key &gt; <span class="number">0</span> :</span><br><span class="line">        System.out.println(<span class="string">"正数"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> key &lt; <span class="number">0</span>:</span><br><span class="line">        System.out.println(<span class="string">"负数"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">"零"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong>使用switch-case实现：对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">67</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写法1：极不推荐</span></span><br><span class="line"><span class="comment">switch(score)&#123;</span></span><br><span class="line"><span class="comment">case 0:</span></span><br><span class="line"><span class="comment">System.out.println("不及格");</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">case 1:</span></span><br><span class="line"><span class="comment">System.out.println("不及格");</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">case 60:</span></span><br><span class="line"><span class="comment">System.out.println("及格");</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">//...略...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2：</span></span><br><span class="line"><span class="keyword">switch</span>(score / <span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">System.out.println(<span class="string">"及格"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"输入的成绩有误"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法3：</span></span><br><span class="line"><span class="keyword">switch</span>(score / <span class="number">60</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.println(<span class="string">"及格"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"输入的成绩有误"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-利用case的穿透性"><a href="#2-2-3-利用case的穿透性" class="headerlink" title="2.2.3 利用case的穿透性"></a>2.2.3 利用case的穿透性</h4><p>在switch语句中，如果case的后面不写break，将出现穿透现象，也就是一旦匹配成功，不会在判断下一个case的值，直接向后运行，直到遇到break或者整个switch语句结束，执行终止。</p><p><strong>案例4：</strong>编写程序：从键盘上输入2023年的“month”和“day”，要求通过程序输出输入的日期为2023年的第几天。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入2023年的month:"</span>);</span><br><span class="line"><span class="keyword">int</span> month = scan.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入2023年的day:"</span>);</span><br><span class="line"><span class="keyword">int</span> day = scan.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里就不针对month和day进行合法性的判断了，以后可以使用正则表达式进行校验。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sumDays = <span class="number">0</span>;<span class="comment">//记录总天数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写法1 ：不推荐（存在冗余的数据）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">switch(month)&#123;</span></span><br><span class="line"><span class="comment">case 1:</span></span><br><span class="line"><span class="comment">sumDays = day;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">case 2:</span></span><br><span class="line"><span class="comment">sumDays = 31 + day;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">case 3:</span></span><br><span class="line"><span class="comment">sumDays = 31 + 28 + day;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">case 12:</span></span><br><span class="line"><span class="comment">//sumDays = 31 + 28 + ... + 30 + day;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2：推荐</span></span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">sumDays += <span class="number">30</span>;<span class="comment">//这个30是代表11月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;<span class="comment">//这个31是代表10月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">sumDays += <span class="number">30</span>;<span class="comment">//这个30是代表9月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;<span class="comment">//这个31是代表8月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;<span class="comment">//这个31是代表7月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">sumDays += <span class="number">30</span>;<span class="comment">//这个30是代表6月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;<span class="comment">//这个31是代表5月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">sumDays += <span class="number">30</span>;<span class="comment">//这个30是代表4月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;<span class="comment">//这个31是代表3月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">sumDays += <span class="number">28</span>;<span class="comment">//这个28是代表2月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;<span class="comment">//这个31是代表1月份的满月天数</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">sumDays += day;<span class="comment">//这个day是代表当月的第几天</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(month + <span class="string">"月"</span> + day + <span class="string">"日是2023年的第"</span> + sumDays + <span class="string">"天"</span>);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">scan.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓展：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">从键盘分别输入年、月、日，判断这一天是当年的第几天</span><br><span class="line"> </span><br><span class="line">注：判断一年是否是闰年的标准：</span><br><span class="line">   1）可以被4整除，但不可被100整除</span><br><span class="line">  或</span><br><span class="line">   2）可以被400整除</span><br><span class="line">   </span><br><span class="line">例如：1900，2200等能被4整除，但同时能被100整除，但不能被400整除，不是闰年</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入year:"</span>);</span><br><span class="line">        <span class="keyword">int</span> year = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"请输入month:"</span>);</span><br><span class="line">        <span class="keyword">int</span> month = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"请输入day:"</span>);</span><br><span class="line">        <span class="keyword">int</span> day = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断这一天是当年的第几天==&gt;从1月1日开始，累加到xx月xx日这一天</span></span><br><span class="line">        <span class="comment">//(1)[1,month-1]个月满月天数</span></span><br><span class="line">        <span class="comment">//(2)单独考虑2月份是否是29天（依据是看year是否是闰年）</span></span><br><span class="line">        <span class="comment">//(3)第month个月的day天</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明一个变量days，用来存储总天数</span></span><br><span class="line">        <span class="keyword">int</span> sumDays = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//累加[1,month-1]个月满月天数</span></span><br><span class="line">        <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="comment">//累加的1-11月</span></span><br><span class="line">                sumDays += <span class="number">30</span>;<span class="comment">//这个30是代表11月份的满月天数</span></span><br><span class="line">                <span class="comment">//这里没有break，继续往下走</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="comment">//累加的1-10月</span></span><br><span class="line">                sumDays += <span class="number">31</span>;<span class="comment">//这个31是代表10月的满月天数</span></span><br><span class="line">                <span class="comment">//这里没有break，继续往下走</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                sumDays += <span class="number">30</span>;<span class="comment">//9月</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                sumDays += <span class="number">31</span>;<span class="comment">//8月</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                sumDays += <span class="number">31</span>;<span class="comment">//7月</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                sumDays += <span class="number">30</span>;<span class="comment">//6月</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                sumDays += <span class="number">31</span>;<span class="comment">//5月</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                sumDays += <span class="number">30</span>;<span class="comment">//4月</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                sumDays += <span class="number">31</span>;<span class="comment">//3月</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                sumDays += <span class="number">28</span>;<span class="comment">//2月</span></span><br><span class="line">                <span class="comment">//在这里考虑是否可能是29天</span></span><br><span class="line">                <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    sumDays++;<span class="comment">//多加1天</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                sumDays += <span class="number">31</span>;<span class="comment">//1月</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                sumDays += day;<span class="comment">//第month月的day天</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日是这一年的第"</span> + sumDays + <span class="string">"天"</span>);</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例5：</strong>根据指定的月份输出对应季节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需求：指定一个月份，输出该月份对应的季节。一年有四季:</span></span><br><span class="line"><span class="comment"> * 3,4,5春季</span></span><br><span class="line"><span class="comment"> * 6,7,8夏季</span></span><br><span class="line"><span class="comment"> * 9,10,11秋季</span></span><br><span class="line"><span class="comment"> * 12,1,2冬季</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入月份："</span>);</span><br><span class="line">        <span class="keyword">int</span> month = input.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">switch(month) &#123;</span></span><br><span class="line"><span class="comment">            case 1:</span></span><br><span class="line"><span class="comment">                System.out.println("冬季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 2:</span></span><br><span class="line"><span class="comment">                System.out.println("冬季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 3:</span></span><br><span class="line"><span class="comment">                System.out.println("春季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 4:</span></span><br><span class="line"><span class="comment">                System.out.println("春季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 5:</span></span><br><span class="line"><span class="comment">                System.out.println("春季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 6:</span></span><br><span class="line"><span class="comment">                System.out.println("夏季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 7:</span></span><br><span class="line"><span class="comment">                System.out.println("夏季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 8:</span></span><br><span class="line"><span class="comment">                System.out.println("夏季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 9:</span></span><br><span class="line"><span class="comment">                System.out.println("秋季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 10:</span></span><br><span class="line"><span class="comment">                System.out.println("秋季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 11:</span></span><br><span class="line"><span class="comment">                System.out.println("秋季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 12:</span></span><br><span class="line"><span class="comment">                System.out.println("冬季");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            default:</span></span><br><span class="line"><span class="comment">                System.out.println("你输入的月份有误");</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改进版</span></span><br><span class="line">        <span class="keyword">switch</span>(month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                System.out.println(<span class="string">"冬季"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">"春季"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(<span class="string">"夏季"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                System.out.println(<span class="string">"秋季"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"你输入的月份有误"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见错误实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>:<span class="comment">//3|4|5 用了位运算符，11 | 100 | 101结果是 111是7</span></span><br><span class="line">        System.out.println(<span class="string">"春季"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>:<span class="comment">//6|7|8用了位运算符，110 | 111 | 1000结果是1111是15</span></span><br><span class="line">        System.out.println(<span class="string">"夏季"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>|<span class="number">10</span>|<span class="number">11</span>:<span class="comment">//9|10|11用了位运算符，1001 | 1010 | 1011结果是1011是11</span></span><br><span class="line">        System.out.println(<span class="string">"秋季"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>|<span class="number">1</span>|<span class="number">2</span>:<span class="comment">//12|1|2 用了位运算符，1100 | 1 | 10 结果是1111，是15</span></span><br><span class="line">        System.out.println(<span class="string">"冬季"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">"输入有误"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用if-else实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((month == <span class="number">1</span>) || (month == <span class="number">2</span>) || (month == <span class="number">12</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"冬季"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((month == <span class="number">3</span>) || (month == <span class="number">4</span>) || (month == <span class="number">5</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"春季"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((month == <span class="number">6</span>) || (month == <span class="number">7</span>) || (month == <span class="number">8</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"夏季"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((month == <span class="number">9</span>) || (month == <span class="number">10</span>) || (month == <span class="number">11</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"秋季"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"你输入的月份有误"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-if-else语句与switch-case语句比较"><a href="#2-2-4-if-else语句与switch-case语句比较" class="headerlink" title="2.2.4 if-else语句与switch-case语句比较"></a>2.2.4 if-else语句与switch-case语句比较</h4><ul><li><p>结论：凡是使用switch-case的结构都可以转换为if-else结构。反之，不成立。</p></li><li><p>开发经验：如果既可以使用switch-case，又可以使用if-else，建议使用switch-case。因为效率稍高。</p></li><li><p>细节对比：</p><ul><li>if-else语句优势<ul><li>if语句的条件是一个布尔类型值，if条件表达式为true则进入分支，可以用于范围的判断，也可以用于等值的判断，<code>使用范围更广</code>。</li><li>switch语句的条件是一个常量值（byte,short,int,char,枚举,String），只能判断某个变量或表达式的结果是否等于某个常量值，<code>使用场景较狭窄</code>。</li></ul></li><li>switch语句优势<ul><li>当条件是判断某个变量或表达式是否等于某个固定的常量值时，使用if和switch都可以，习惯上使用switch更多。因为<code>效率稍高</code>。当条件是区间范围的判断时，只能使用if语句。</li><li>使用switch可以利用<code>穿透性</code>，同时执行多个分支，而if…else没有穿透性。</li></ul></li></ul></li><li><p><strong>案例：只能使用 if-else</strong></p><p>从键盘输入一个整数，判断是正数、负数、还是零。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfOrSwitchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"请输入整数："</span>);</span><br><span class="line">        <span class="keyword">int</span> num = input.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(num + <span class="string">"是正整数"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(num + <span class="string">"是负整数"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(num + <span class="string">"是零"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-5-练习"><a href="#2-2-5-练习" class="headerlink" title="2.2.5 练习"></a>2.2.5 练习</h4><p><strong>练习1：</strong>从键盘输入星期的整数值，输出星期的英文单词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseExer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义指定的星期</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入星期值："</span>);</span><br><span class="line">        <span class="keyword">int</span> weekday = input.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//switch语句实现选择</span></span><br><span class="line">        <span class="keyword">switch</span>(weekday) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"Monday"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"Tuesday"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"Wednesday"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">"Thursday"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">"Friday"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">"Saturday"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">"Sunday"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"你输入的星期值有误！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="keyword">switch</span> 把小写类型的 <span class="keyword">char</span>型转为大写。只转换 a, b, c, d, e. 其它的输出 “other”。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseExer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> word = <span class="string">'c'</span>;</span><br><span class="line">        <span class="keyword">switch</span> (word) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                System.out.println(<span class="string">"A"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                System.out.println(<span class="string">"B"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                System.out.println(<span class="string">"C"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                System.out.println(<span class="string">"D"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                System.out.println(<span class="string">"E"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                System.out.println(<span class="string">"other"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">编写程序：从键盘上读入一个学生成绩，存放在变量score中，根据score的值输出其对应的成绩等级：</span><br><span class="line"></span><br><span class="line">score&gt;&#x3D;90           等级:  A</span><br><span class="line">70&lt;&#x3D;score&lt;90        等级:  B    </span><br><span class="line">60&lt;&#x3D;score&lt;70        等级:  C</span><br><span class="line">score&lt;60            等级:  D</span><br><span class="line"></span><br><span class="line">方式一：使用if-else</span><br><span class="line">方式二：使用switch-case:  score &#x2F; 10:   0 - 10</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseExer3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入学生成绩："</span>);</span><br><span class="line">        <span class="keyword">int</span> score = scan.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> grade;<span class="comment">//记录学生等级</span></span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line"><span class="comment">//        if(score &gt;= 90)&#123;</span></span><br><span class="line"><span class="comment">//            grade = 'A';</span></span><br><span class="line"><span class="comment">//        &#125;else if(score &gt;= 70 &amp;&amp; score &lt; 90)&#123;</span></span><br><span class="line"><span class="comment">//            grade = 'B';</span></span><br><span class="line"><span class="comment">//        &#125;else if(score &gt;= 60 &amp;&amp; score &lt; 70)&#123;</span></span><br><span class="line"><span class="comment">//            grade = 'C';</span></span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            grade = 'D';</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        <span class="keyword">switch</span>(score / <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                grade = <span class="string">'A'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                grade = <span class="string">'B'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                grade = <span class="string">'C'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                grade = <span class="string">'D'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"学生成绩为"</span> + score + <span class="string">",对应的等级为"</span> + grade);</span><br><span class="line"></span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编写一个程序，为一个给定的年份找出其对应的中国生肖。中国的生肖基于12年一个周期，每年用一个动物代表：rat、ox、tiger、rabbit、dragon、snake、horse、sheep、monkey、rooster、dog、pig。</span><br><span class="line"></span><br><span class="line">提示：2022年：虎   2022 % 12 &#x3D;&#x3D; 6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140997.png" alt="image-20220314005350344"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 18:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseExer4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//从键盘输入一个年份</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入年份："</span>);</span><br><span class="line">        <span class="keyword">int</span> year = input.nextInt();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">switch</span>(year % <span class="number">12</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是猴年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是鸡年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是狗年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是猪年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是鼠年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是牛年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是虎年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是兔年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是龙年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是蛇年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是马年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"是羊年"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(year + <span class="string">"输入错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习5：押宝游戏</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">随机产生3个1-6的整数，如果三个数相等，那么称为“豹子”，如果三个数之和大于9，称为“大”，如果三个数之和小于等于9，称为“小”，用户从键盘输入押的是“豹子”、“大”、“小”，并判断是否猜对了</span><br><span class="line"></span><br><span class="line">提示：随机数  Math.random()产生 [0,1)范围内的小数</span><br><span class="line">     如何获取[a,b]范围内的随机整数呢？(int)(Math.random() * (b - a + 1)) + a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212140190.png" alt="1659112038716"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseExer5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、随机产生3个1-6的整数</span></span><br><span class="line">        <span class="keyword">int</span> a = (<span class="keyword">int</span>)(Math.random()*<span class="number">6</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> b = (<span class="keyword">int</span>)(Math.random()*<span class="number">6</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> c = (<span class="keyword">int</span>)(Math.random()*<span class="number">6</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、押宝</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请押宝（豹子、大、小）："</span>);</span><br><span class="line">        String ya = input.next();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、判断结果</span></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//switch支持String类型</span></span><br><span class="line">        <span class="keyword">switch</span> (ya)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"豹子"</span>: result = a == b &amp;&amp; b == c; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"大"</span>: result = a + b + c &gt; <span class="number">9</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"小"</span>: result = a + b + c &lt;= <span class="number">9</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:System.out.println(<span class="string">"输入有误！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a,b,c分别是："</span> + a +<span class="string">","</span> + b +<span class="string">","</span> + c );</span><br><span class="line">        System.out.println(result ? <span class="string">"猜中了"</span> : <span class="string">"猜错了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习6：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="keyword">switch</span>语句改写下列<span class="keyword">if</span>语句：</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line">x+=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)</span><br><span class="line">x+=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">3</span>)</span><br><span class="line">x+=<span class="number">16</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x+=<span class="number">34</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        x += <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        x += <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        x += <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        x += <span class="number">34</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3. 循环语句"></a>3. 循环语句</h2><ul><li><p>理解：循环语句具有在<code>某些条件</code>满足的情况下，<code>反复执行</code>特定代码的功能。</p></li><li><p>循环结构分类：</p><ul><li>for 循环</li><li>while 循环</li><li>do-while 循环 </li></ul></li><li><p>循环结构<code>四要素</code>：</p><ul><li>初始化部分</li><li>循环条件部分</li><li>循环体部分</li><li>迭代部分</li></ul></li></ul><h3 id="3-1-for循环"><a href="#3-1-for循环" class="headerlink" title="3.1  for循环"></a>3.1  for循环</h3><h4 id="3-1-1-基本语法"><a href="#3-1-1-基本语法" class="headerlink" title="3.1.1 基本语法"></a>3.1.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (①初始化部分; ②循环条件部分; ④迭代部分)｛</span><br><span class="line">         ③循环体部分;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-[②-③-④]-[②-③-④]-[②-③-④]-…..-直到②不满足</p><p><strong>图示：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141361.png" alt="image-20220315013023236" style="zoom:80%;"><p><strong>说明：</strong></p><ul><li>for(;;)中的两个；不能多也不能少</li><li>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔   –例如:  int i=10,j=12,k=13;</li><li>②循环条件部分为boolean类型表达式，当值为false时，退出循环 </li><li>④可以有多个变量更新，用逗号分隔  –例如:  ;i++,j++,k++;</li></ul><h4 id="3-1-2-应用举例"><a href="#3-1-2-应用举例" class="headerlink" title="3.1.2 应用举例"></a>3.1.2 应用举例</h4><p><strong>案例1：使用for循环重复执行某些语句</strong></p><p>题目：输出5行HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需求1：控制台输出5行Hello World!</span></span><br><span class="line"><span class="comment">//写法1：</span></span><br><span class="line"><span class="comment">//System.out.println("Hello World!");</span></span><br><span class="line"><span class="comment">//System.out.println("Hello World!");</span></span><br><span class="line"><span class="comment">//System.out.println("Hello World!");</span></span><br><span class="line"><span class="comment">//System.out.println("Hello World!");</span></span><br><span class="line"><span class="comment">//System.out.println("Hello World!");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：格式的多样性</strong></p><p>题目：写出输出的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(System.out.print(<span class="string">"a"</span>);num &lt; <span class="number">3</span>;System.out.print(<span class="string">"c"</span>),num++)&#123;</span><br><span class="line">            System.out.print(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：累加的思想</strong></p><p>题目：遍历1-100以内的偶数，并获取偶数的个数，获取所有的偶数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录偶数的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//记录偶数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                count++;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//System.out.println("偶数的个数为：" + count);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"偶数的个数为："</span> + count);</span><br><span class="line">        System.out.println(<span class="string">"偶数的总和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例4：结合分支结构使用</strong></p><p>题目：输出所有的水仙花数，所谓水仙花数是指一个3位数，其各个位上数字立方和等于其本身。例如： <code>153 = 1*1*1 + 3*3*3 + 5*5*5</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//取出每一位</span></span><br><span class="line">            <span class="keyword">int</span> ge=i%<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> shi=i/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> bai=i/<span class="number">100</span>;</span><br><span class="line">            <span class="comment">//System.out.println("此轮的每位数字分别是:"+bai+"  "+shi+"  "+ge);</span></span><br><span class="line">            <span class="keyword">if</span>((ge*ge*ge+shi*shi*shi+bai*bai*bai)==i)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打印出四位数字中“个位+百位”等于“十位+千位”并且个位数为偶数，千位数为奇数的数字，并打印符合条件的数字的个数。</span><br></pre></td></tr></table></figure><p><strong>案例5：结合break的使用</strong></p><p>说明：输入两个正整数m和n，求其最大公约数和最小公倍数。</p><p>比如：12和20的最大公约数是4，最小公倍数是60。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输入两个正整数m和n，求其最大公约数和最小公倍数</span></span><br><span class="line">        <span class="comment">//公约数: 1 2 3 4 6  / 1 2 4 5 10  --最大公约数是4</span></span><br><span class="line">        <span class="comment">//公倍数: 12 24 36 48 60 / 20 40 60 80  --最小公倍数是60</span></span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">12</span>,n=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> maxgy=<span class="number">0</span>; <span class="comment">// 最大公约数</span></span><br><span class="line">        <span class="keyword">int</span> mingb=<span class="number">0</span>; <span class="comment">// 最小公倍数</span></span><br><span class="line">        <span class="keyword">int</span> maxgy2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.考虑找最大公约数的话就要看min 如果min的到头了那就最大了</span></span><br><span class="line">        <span class="keyword">int</span> min=n&gt;m?m:n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=min;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%i==<span class="number">0</span>&amp;&amp;n%i==<span class="number">0</span>)&#123;  <span class="comment">//只要同时能被整除那就是公约数</span></span><br><span class="line">                maxgy=i;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//第一个满足的就是最大的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.2.笨办法就是从1开始到min范围内找</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=min;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%i==<span class="number">0</span>&amp;&amp;n%i==<span class="number">0</span>)&#123;  <span class="comment">//只要同时能被整除那就是公约数</span></span><br><span class="line">                maxgy2=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.考虑找最小公倍数的话就要看max</span></span><br><span class="line">        <span class="keyword">int</span> max=n&gt;m?n:m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&lt;=m*n;i++)&#123;  <span class="comment">//从max-m*n范围内 最差就是m*n</span></span><br><span class="line">            <span class="keyword">if</span>(i%m==<span class="number">0</span>&amp;&amp;i%n==<span class="number">0</span>)&#123;  <span class="comment">//i同时能整除m和n就是公倍数</span></span><br><span class="line">                mingb=i;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//找到第一个就是最小的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最大公约数1方法:"</span>+maxgy);</span><br><span class="line">        System.out.println(<span class="string">"最大公约数2方法:"</span>+maxgy2);</span><br><span class="line">        System.out.println(<span class="string">"最小公倍数:"</span>+mingb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><p>1、我们可以在循环中使用break。一旦执行break，就跳出当前循环结构。</p><p>2、小结：如何结束一个循环结构？</p><p>​      结束情况1：循环结构中的循环条件部分返回false</p><p>​      结束情况2：循环结构中执行了break。</p><p>3、如果一个循环结构不能结束，那就是一个死循环！我们开发中要避免出现死循环。</p></blockquote><h4 id="3-1-3-练习"><a href="#3-1-3-练习" class="headerlink" title="3.1.3 练习"></a>3.1.3 练习</h4><p><strong>练习1：</strong>打印1~100之间所有奇数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForExer1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//记录奇数的和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;  <span class="comment">//不能被2整除就是奇数</span></span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"奇数总和为："</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong>打印1~100之间所有是7的倍数的整数的个数及总和（体会设置计数器的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForExer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//记录总和</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">7</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                sum += i;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"1~100之间所有是7的倍数的整数的和为："</span> + sum);</span><br><span class="line">        System.out.println(<span class="string">"1~100之间所有是7的倍数的整数的个数为："</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>编写程序从1循环到150，并在每行打印一个值，另外在每个3的倍数行上打印出“foo”,在每个5的倍数行上打印“biz”,在每个7的倍数行上打印输出“baz”。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141916.png" alt="image-20220315013722962" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForExer3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; =<span class="number">150</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i+<span class="string">"  foo"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i+<span class="string">"  biz"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i+<span class="string">"  baz"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-while循环"><a href="#3-2-while循环" class="headerlink" title="3.2 while循环"></a>3.2 while循环</h3><h4 id="3-2-1-基本语法"><a href="#3-2-1-基本语法" class="headerlink" title="3.2.1 基本语法"></a>3.2.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①初始化部分</span><br><span class="line"><span class="keyword">while</span>(②循环条件部分)｛</span><br><span class="line">    ③循环体部分;</span><br><span class="line">    ④迭代部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-(②-③-④)-(②-③-④)-(②-③-④)-…-直到②不符合结束</p><p><strong>图示：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141986.png" alt="image-20220315013023236" style="zoom:80%;"><p><strong>说明：</strong></p><ul><li>while(循环条件)中循环条件必须是boolean类型。</li><li>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li><li>for循环和while循环可以相互转换。二者没有性能上的差别。实际开发中，根据具体结构的情况，选择哪个格式更合适、美观。</li><li>for循环与while循环的区别：初始化条件部分的作用域不同。</li></ul><h4 id="3-2-2-应用举例"><a href="#3-2-2-应用举例" class="headerlink" title="3.2.2 应用举例"></a>3.2.2 应用举例</h4><p><strong>案例1：</strong>输出5行HelloWorld!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//记录1-100所有的偶数的和</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录1-100之间偶数的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(num &lt;= <span class="number">100</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">sum += num;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代条件</span></span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"偶数的总和为："</span> + sum);</span><br><span class="line">System.out.println(<span class="string">"偶数的个数为："</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong>猜数字游戏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">随机生成一个100以内的数，猜这个随机数是多少？</span><br><span class="line"></span><br><span class="line">从键盘输入数，如果大了，提示大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。</span><br><span class="line"></span><br><span class="line">提示：生成一个[a,b] 范围的随机数的方式：(int)(Math.random() * (b - a + 1) + a)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 16:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取一个随机数</span></span><br><span class="line">        <span class="keyword">int</span> random = (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录猜的次数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化Scanner</span></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个整数(1-100):"</span>);</span><br><span class="line">        <span class="keyword">int</span> guess = scan.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (guess != random) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (guess &gt; random) &#123;</span><br><span class="line">                System.out.println(<span class="string">"猜大了"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; random) &#123;</span><br><span class="line">                System.out.println(<span class="string">"猜小了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"请输入一个整数(1-100):"</span>);</span><br><span class="line">            guess = scan.nextInt();</span><br><span class="line"><span class="comment">//累加猜的次数</span></span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"猜中了！"</span>);</span><br><span class="line">        System.out.println(<span class="string">"一共猜了"</span> + count + <span class="string">"次"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例4：折纸珠穆朗玛峰</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">世界最高山峰是珠穆朗玛峰，它的高度是8848.86米，假如我有一张足够大的纸，它的厚度是0.1毫米。</span><br><span class="line">请问，我折叠多少次，可以折成珠穆朗玛峰的高度?</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZFTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个计数器，初始值为0</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义珠穆朗玛峰的高度</span></span><br><span class="line">        <span class="keyword">int</span> zf = <span class="number">8848860</span>;<span class="comment">//单位：毫米</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> paper = <span class="number">0.1</span>;<span class="comment">//单位：毫米</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(paper &lt; zf)&#123;</span><br><span class="line">            <span class="comment">//在循环中执行累加，对应折叠了多少次</span></span><br><span class="line">            count++;</span><br><span class="line">            paper *= <span class="number">2</span>;<span class="comment">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印计数器的值</span></span><br><span class="line">        System.out.println(<span class="string">"需要折叠："</span> + count + <span class="string">"次"</span>);</span><br><span class="line">        System.out.println(<span class="string">"折纸的高度为"</span> + paper/<span class="number">1000</span> + <span class="string">"米，超过了珠峰的高度"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-练习"><a href="#3-2-3-练习" class="headerlink" title="3.2.3 练习"></a>3.2.3 练习</h4><p><strong>练习：</strong>从键盘输入整数，输入0结束，统计输入的正数、负数的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05While</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> positive = <span class="number">0</span>; <span class="comment">//记录正数的个数</span></span><br><span class="line">        <span class="keyword">int</span> negative = <span class="number">0</span>;  <span class="comment">//记录负数的个数</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>; <span class="comment">//初始化为特殊值，使得第一次循环条件成立</span></span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">"请输入整数（0表示结束）："</span>);</span><br><span class="line">            num = input.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                positive++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                negative++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"正数个数："</span> + positive);</span><br><span class="line">        System.out.println(<span class="string">"负数个数："</span> + negative);</span><br><span class="line"></span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-do-while循环"><a href="#3-3-do-while循环" class="headerlink" title="3.3 do-while循环"></a>3.3 do-while循环</h3><h4 id="3-3-1-基本语法"><a href="#3-3-1-基本语法" class="headerlink" title="3.3.1 基本语法"></a>3.3.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①初始化部分;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">③循环体部分</span><br><span class="line">④迭代部分</span><br><span class="line">&#125;<span class="keyword">while</span>(②循环条件部分);</span><br></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141268.png" alt="image-20220512165558698" style="zoom:80%;"><p><strong>说明：</strong></p><ul><li>结尾while(循环条件)中循环条件必须是boolean类型</li><li>do{}while();<strong>最后有一个分号</strong></li><li>do-while结构的循环体语句是<strong>至少会执行一次</strong>，这个和for和while是不一样的</li><li>循环的三个结构for、while、do-while三者是可以相互转换的。</li></ul><h4 id="3-3-2-应用举例"><a href="#3-3-2-应用举例" class="headerlink" title="3.3.2 应用举例"></a>3.3.2 应用举例</h4><p><strong>案例1：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoWhileTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span></span><br><span class="line"><span class="comment">//初始化部分</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//记录1-100所有的偶数的和</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录1-100之间偶数的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="comment">//循环体部分</span></span><br><span class="line"><span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">sum += num;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num++;<span class="comment">//迭代部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(num &lt;= <span class="number">100</span>); <span class="comment">//循环条件部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"偶数的总和为："</span> + sum);</span><br><span class="line">System.out.println(<span class="string">"偶数的个数为："</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>体会do-while至少会执行一次循环体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoWhileTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//while循环:</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(num1 &gt; <span class="number">10</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"hello:while"</span>);</span><br><span class="line">num1--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do-while循环:</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello:do-while"</span>);</span><br><span class="line">num2--;</span><br><span class="line">&#125;<span class="keyword">while</span>(num2 &gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：ATM取款</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">声明变量balance并初始化为0，用以表示银行账户的余额，下面通过ATM机程序实现存款，取款等功能。</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ATM&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">   1、存款</span><br><span class="line">   2、取款</span><br><span class="line">   3、显示余额</span><br><span class="line">   4、退出</span><br><span class="line">请选择(1-4)：</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATM</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化条件</span></span><br><span class="line"><span class="keyword">double</span> balance = <span class="number">0.0</span>;<span class="comment">//表示银行账户的余额</span></span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;<span class="comment">//用于控制循环的结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"=========ATM========"</span>);</span><br><span class="line">System.out.println(<span class="string">"\t1、存款"</span>);</span><br><span class="line">System.out.println(<span class="string">"\t2、取款"</span>);</span><br><span class="line">System.out.println(<span class="string">"\t3、显示余额"</span>);</span><br><span class="line">System.out.println(<span class="string">"\t4、退出"</span>);</span><br><span class="line">System.out.print(<span class="string">"请选择(1-4)："</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> selection = scan.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(selection)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.print(<span class="string">"要存款的额度为："</span>);</span><br><span class="line"><span class="keyword">double</span> addMoney = scan.nextDouble();</span><br><span class="line"><span class="keyword">if</span>(addMoney &gt; <span class="number">0</span>)&#123;</span><br><span class="line">balance += addMoney;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.print(<span class="string">"要取款的额度为："</span>);</span><br><span class="line"><span class="keyword">double</span> minusMoney = scan.nextDouble();</span><br><span class="line"><span class="keyword">if</span>(minusMoney &gt; <span class="number">0</span> &amp;&amp; balance &gt;= minusMoney)&#123;</span><br><span class="line">balance -= minusMoney;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"您输入的数据非法或余额不足"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">"当前的余额为："</span> + balance);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.println(<span class="string">"欢迎下次进入此系统。^_^"</span>);</span><br><span class="line">isFlag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"请重新选择！"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(isFlag);</span><br><span class="line"></span><br><span class="line"><span class="comment">//资源关闭</span></span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-练习"><a href="#3-3-3-练习" class="headerlink" title="3.3.3 练习"></a>3.3.3 练习</h4><p><strong>练习1：</strong>随机生成一个100以内的数，猜这个随机数是多少？</p><p>从键盘输入数，如果大了提示，大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileExer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//随机生成一个100以内的整数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Math.random() ==&gt; [0,1)的小数</span></span><br><span class="line"><span class="comment">Math.random()* 100 ==&gt; [0,100)的小数</span></span><br><span class="line"><span class="comment">(int)(Math.random()* 100) ==&gt; [0,100)的整数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">int</span> num = (<span class="keyword">int</span>)(Math.random()* <span class="number">100</span>);</span><br><span class="line">        <span class="comment">//System.out.println(num);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明一个变量，用来存储猜的次数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> guess;<span class="comment">//提升作用域</span></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.print(<span class="string">"请输入100以内的整数："</span>);</span><br><span class="line">            guess = input.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输入一次，就表示猜了一次</span></span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(guess &gt; num)&#123;</span><br><span class="line">                System.out.println(<span class="string">"大了"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guess &lt; num)&#123;</span><br><span class="line">                System.out.println(<span class="string">"小了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(num != guess);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"一共猜了："</span> + count+<span class="string">"次"</span>);</span><br><span class="line"></span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-对比三种循环结构"><a href="#3-4-对比三种循环结构" class="headerlink" title="3.4 对比三种循环结构"></a>3.4 对比三种循环结构</h3><ul><li><strong>三种循环结构都具有四个要素：</strong><ul><li>循环变量的初始化条件</li><li>循环条件</li><li>循环体语句块</li><li>循环变量的修改的迭代表达式</li></ul></li></ul><ul><li><strong>从循环次数角度分析</strong><ul><li>do-while循环至少执行一次循环体语句。</li><li>for和while循环先判断循环条件语句是否成立，然后决定是否执行循环体。</li></ul></li><li><strong>如何选择</strong><ul><li>遍历有明显的循环次数（范围）的需求，选择for循环</li><li>遍历没有明显的循环次数（范围）的需求，选择while循环</li><li>如果循环体语句块至少执行一次，可以考虑使用do-while循环</li><li>本质上：三种循环之间完全可以互相转换，都能实现循环的功能</li></ul></li></ul><h3 id="3-5-“无限”循环"><a href="#3-5-“无限”循环" class="headerlink" title="3.5 “无限”循环"></a>3.5 “无限”循环</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141489.jpg" alt="类似：死循环"></p><h4 id="3-5-1-基本语法"><a href="#3-5-1-基本语法" class="headerlink" title="3.5.1 基本语法"></a>3.5.1 基本语法</h4><p><strong>语法格式：</strong></p><ul><li>最简单”无限”循环格式：<code>while(true)</code> , <code>for(;;)</code> </li></ul><p><strong>适用场景：</strong></p><ul><li>开发中，有时并不确定需要循环多少次，需要根据循环体内部某些条件，来控制循环的结束（使用break）。</li><li>如果此循环结构不能终止，则构成了死循环！开发中要避免出现死循环。</li></ul><h4 id="3-5-2-应用举例"><a href="#3-5-2-应用举例" class="headerlink" title="3.5.2 应用举例"></a>3.5.2 应用举例</h4><p><strong>案例1：</strong>实现爱你到永远…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EndlessFor1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我爱你！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println("end");//永远无法到达的语句，编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EndlessFor2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; <span class="keyword">true</span>;)&#123; <span class="comment">//条件永远成立，死循环</span></span><br><span class="line">            System.out.println(<span class="string">"我爱你！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EndlessFor3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; )&#123; <span class="comment">//循环变量没有修改，条件永远成立，死循环</span></span><br><span class="line">            System.out.println(<span class="string">"我爱你！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：如下代码执行效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EndlessFor4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&gt;=<span class="number">10</span>; )&#123; <span class="comment">//一次都不执行</span></span><br><span class="line">            System.out.println(<span class="string">"我爱你！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositiveNegative</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">int</span> positiveNumber = <span class="number">0</span>;<span class="comment">//统计正数的个数</span></span><br><span class="line"><span class="keyword">int</span> negativeNumber = <span class="number">0</span>;<span class="comment">//统计负数的个数</span></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;  <span class="comment">//while(true)&#123;</span></span><br><span class="line">System.out.println(<span class="string">"请输入一个整数：(输入为0时结束程序)"</span>);</span><br><span class="line"><span class="keyword">int</span> num = scanner.nextInt();</span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line"> positiveNumber++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">0</span>)&#123;</span><br><span class="line"> negativeNumber++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"> System.out.println(<span class="string">"正数的个数为："</span>+ positiveNumber);</span><br><span class="line"> System.out.println(<span class="string">"负数的个数为："</span>+ negativeNumber);  </span><br><span class="line">        </span><br><span class="line">         scanner.close();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-嵌套循环（或多重循环）"><a href="#3-6-嵌套循环（或多重循环）" class="headerlink" title="3.6 嵌套循环（或多重循环）"></a>3.6 嵌套循环（或多重循环）</h3><h4 id="3-6-1-使用说明"><a href="#3-6-1-使用说明" class="headerlink" title="3.6.1 使用说明"></a>3.6.1 使用说明</h4><ul><li><strong>所谓嵌套循环</strong>，是指一个循环结构A的循环体是另一个循环结构B。比如，for循环里面还有一个for循环，就是嵌套循环。其中，for ,while ,do-while均可以作为外层循环或内层循环。<ul><li>外层循环：循环结构A</li><li>内层循环：循环结构B</li></ul></li><li>实质上，<code>嵌套循环就是把内层循环当成外层循环的循环体</code>。只有当内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的外层循环。</li><li>设外层循环次数为<code>m</code>次，内层为<code>n</code>次，则内层循环体实际上需要执行<code>m*n</code>次。</li><li><strong>技巧：</strong>从二维图形的角度看，外层循环控制<code>行数</code>，内层循环控制<code>列数</code>。</li><li><strong>开发经验：</strong>实际开发中，我们最多见到的嵌套循环是两层。一般不会出现超过三层的嵌套循环。如果将要出现，一定要停下来重新梳理业务逻辑，重新思考算法的实现，控制在三层以内。否则，可读性会很差。</li></ul><p>例如：两个for嵌套循环格式    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句①; 循环条件语句②; 迭代语句⑦) &#123;</span><br><span class="line">    <span class="keyword">for</span>(初始化语句③; 循环条件语句④; 迭代语句⑥) &#123;</span><br><span class="line">      循环体语句⑤;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行过程：① - ② - ③ - ④ - ⑤ - ⑥ - ④ - ⑤ - ⑥ - ... - ④ - ⑦ - ② - ③ - ④ - ⑤ - ⑥ - ④..</span></span><br></pre></td></tr></table></figure><p><strong>执行特点：</strong>外层循环执行一次，内层循环执行一轮。</p><h4 id="3-6-2-应用举例"><a href="#3-6-2-应用举例" class="headerlink" title="3.6.2 应用举例"></a>3.6.2 应用举例</h4><p><strong>案例1：</strong>打印5行6个*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForForTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">******</span></span><br><span class="line"><span class="comment">******</span></span><br><span class="line"><span class="comment">******</span></span><br><span class="line"><span class="comment">******</span></span><br><span class="line"><span class="comment">******</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">5</span>;j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">6</span>;i++)&#123;</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>打印5行直角三角形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForForTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong>打印5行倒直角三角形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForForTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">6</span> - i;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例4：打印”菱形”形状的图案</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        * </span><br><span class="line">      * * * </span><br><span class="line">    * * * * * </span><br><span class="line">  * * * * * * * </span><br><span class="line">* * * * * * * * * </span><br><span class="line">  * * * * * * * </span><br><span class="line">    * * * * * </span><br><span class="line">      * * * </span><br><span class="line">        *</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForForTest4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        上半部分im(表示-的个数)    n(表示*的个数)关系式：2*i + m = 10 --&gt; m = 10 - 2*i</span></span><br><span class="line"><span class="comment">    --------*   1   8   1n = 2 * i - 1</span></span><br><span class="line"><span class="comment">    ------* * *   2   6   3</span></span><br><span class="line"><span class="comment">    ----* * * * *   3   4   5</span></span><br><span class="line"><span class="comment">    --* * * * * * *   4   2       7</span></span><br><span class="line"><span class="comment">    * * * * * * * * *  5   0   9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        下半部分         i      m                n              关系式： m = 2 * i</span></span><br><span class="line"><span class="comment">    --* * * * * * *    1       2                7                     n = 9 - 2 * i</span></span><br><span class="line"><span class="comment">    ----* * * * *      2       4                5</span></span><br><span class="line"><span class="comment">    ------* * *        3       6                3</span></span><br><span class="line"><span class="comment">    --------*          4       8                1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="comment">//上半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//-</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span> - <span class="number">2</span> * i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//*</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2</span> * i - <span class="number">1</span>; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//-</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//*</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">9</span> - <span class="number">2</span> * i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例5：九九乘法表</strong></p><p><img src=".images/image-20221113193013204.png" alt="image-20221113193013204"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForForTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + (i * j) + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-3-练习"><a href="#3-6-3-练习" class="headerlink" title="3.6.3 练习"></a>3.6.3 练习</h4><p><strong>练习1：</strong>将一天中的时间打印到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForForDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> hour = <span class="number">0</span>;hour &lt; <span class="number">24</span> ;hour++ ) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>; min &lt; <span class="number">60</span> ; min++) &#123;</span><br><span class="line">System.out.println(hour + <span class="string">"时"</span> + min +<span class="string">"分"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-关键字break和continue的使用"><a href="#4-关键字break和continue的使用" class="headerlink" title="4. 关键字break和continue的使用"></a>4. 关键字break和continue的使用</h2><h3 id="4-1-break和continue的说明"><a href="#4-1-break和continue的说明" class="headerlink" title="4.1 break和continue的说明"></a>4.1 break和continue的说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  适用范围      在循环结构中使用的作用相同点</span><br><span class="line"></span><br><span class="line">breakswitch-case</span><br><span class="line">循环结构一旦执行，就结束(或跳出)当前循环结构    此关键字的后面，不能声明语句</span><br><span class="line"></span><br><span class="line">continue循环结构一旦执行，就结束(或跳出)当次循环结构    此关键字的后面，不能声明语句</span><br></pre></td></tr></table></figure><p>此外，很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它，但使程序容易出错。Java中的break和continue是不同于goto的。</p><h3 id="4-2-应用举例"><a href="#4-2-应用举例" class="headerlink" title="4.2 应用举例"></a>4.2 应用举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreakContinueTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//break;//123</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//123567910</span></span><br><span class="line"><span class="comment">//如下的语句不可能被执行，编译不通过</span></span><br><span class="line"><span class="comment">//System.out.println("今晚迪丽热巴要约我吃饭");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"####"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套循环中的使用</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">4</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//break; //结束的是包裹break关键字的最近的一层循环！</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//结束的是包裹break关键字的最近的一层循环的当次！</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(j);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-带标签的使用"><a href="#4-3-带标签的使用" class="headerlink" title="4.3 带标签的使用"></a>4.3 带标签的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>语句用于终止某个语句块的执行</span><br><span class="line">&#123;    …… </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块 </span><br><span class="line">label1: &#123;   ……        </span><br><span class="line">label2:     &#123;   ……</span><br><span class="line">label3: &#123;   ……</span><br><span class="line">           <span class="keyword">break</span> label2;</span><br><span class="line">           ……</span><br><span class="line"> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>continue语句出现在多层嵌套的循环语句体中时，也可以通过标签指明要跳过的是哪一层循环。</p></li><li><p>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。</p></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreakContinueTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">l:<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">4</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//break l;</span></span><br><span class="line"><span class="keyword">continue</span> l;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(j);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-经典案例"><a href="#4-4-经典案例" class="headerlink" title="4.4 经典案例"></a>4.4 经典案例</h3><p><strong>题目：找出100以内所有的素数（质数）？100000以内的呢？</strong></p><p>目的：不同的代码的实现方式，可以效率差别很大。</p><p>分析：素数（质数）：只能被1和它本身整除的自然数。  —&gt; 从2开始，到这个数-1为止，此范围内没有这个数的约数。则此数是一个质数。<br>比如：2、3、5、7、11、13、17、19、23、…</p><p><strong>实现方式1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isFlag = true; //用于标识i是否被除尽过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis(); <span class="comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录质数的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;  <span class="comment">//i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>; <span class="comment">//用于标识i是否被除尽过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;= i - <span class="number">1</span>;j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//表明i有约数</span></span><br><span class="line">isFlag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断i是否是质数</span></span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123; <span class="comment">//如果isFlag变量没有给修改过值，就意味着i没有被j除尽过。则i是一个质数</span></span><br><span class="line"><span class="comment">//System.out.println(i);</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置isFlag</span></span><br><span class="line"><span class="comment">//isFlag = true;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"质数的个数为："</span> + count);</span><br><span class="line">System.out.println(<span class="string">"执行此程序花费的毫秒数为："</span> + (end - start)); <span class="comment">//16628</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方式2：</strong>针对实现方式1进行优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis(); <span class="comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录质数的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;  <span class="comment">//i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>; <span class="comment">//用于标识i是否被除尽过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123; <span class="comment">//优化2：将循环条件中的i改为Math.sqrt(i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//表明i有约数</span></span><br><span class="line">isFlag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//优化1：主要针对非质数起作用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断i是否是质数</span></span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123; <span class="comment">//如果isFlag变量没有给修改过值，就意味着i没有被j除尽过。则i是一个质数</span></span><br><span class="line"><span class="comment">//System.out.println(i);</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"质数的个数为："</span> + count);</span><br><span class="line">System.out.println(<span class="string">"执行此程序花费的毫秒数为："</span> + (end - start));<span class="comment">//1062</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方式3（选做）：</strong>使用continue + 标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis(); <span class="comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录质数的个数</span></span><br><span class="line"></span><br><span class="line">label:<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;  <span class="comment">//i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123; <span class="comment">//优化2：将循环条件中的i改为Math.sqrt(i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//表明i有约数</span></span><br><span class="line"><span class="keyword">continue</span> label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一旦程序能执行到此位置，说明i就是一个质数</span></span><br><span class="line">System.out.println(i);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"质数的个数为："</span> + count);</span><br><span class="line">System.out.println(<span class="string">"执行此程序花费的毫秒数为："</span> + (end - start));<span class="comment">//1062</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-练习"><a href="#4-5-练习" class="headerlink" title="4.5 练习"></a>4.5 练习</h3><p><strong>练习1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">生成 1-100 之间的随机数，直到生成了 97 这个数，看看一共用了几次？</span><br><span class="line"></span><br><span class="line">提示：使用 (int)(Math.random() * 100) + 1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberGuessTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录循环的次数（或生成随机数进行比较的次数）</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> random = (<span class="keyword">int</span>)(Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(random == <span class="number">97</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"直到生成随机数97，一共比较了"</span> + count + <span class="string">"次"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Scanner：键盘输入功能的实现"><a href="#5-Scanner：键盘输入功能的实现" class="headerlink" title="5. Scanner：键盘输入功能的实现"></a>5. Scanner：键盘输入功能的实现</h2><ul><li><p>如何从键盘获取不同类型（基本数据类型、String类型）的变量：使用Scanner类。</p></li><li><p>键盘输入代码的四个步骤：</p><ol><li>导包：<code>import java.util.Scanner;</code></li><li>创建Scanner类型的对象：<code>Scanner scan = new Scanner(System.in);</code></li><li>调用Scanner类的相关方法（<code>next() / nextXxx()</code>），来获取指定类型的变量</li><li>释放资源：<code>scan.close();</code></li></ol></li><li><p>注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配时，会报异常导致程序终止。</p></li></ul><h3 id="5-1-各种类型的数据输入"><a href="#5-1-各种类型的数据输入" class="headerlink" title="5.1 各种类型的数据输入"></a>5.1 各种类型的数据输入</h3><p><strong>案例：</strong>小明注册某交友网站，要求录入个人相关信息。如下：</p><p>请输入你的网名、你的年龄、你的体重、你是否单身、你的性别等情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//① 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//② 创建Scanner的对象</span></span><br><span class="line">        <span class="comment">//Scanner是一个引用数据类型，它的全名称是java.util.Scanner</span></span><br><span class="line">        <span class="comment">//scanner就是一个引用数据类型的变量了，赋给它的值是一个对象（对象的概念我们后面学习，暂时先这么叫）</span></span><br><span class="line">        <span class="comment">//new Scanner(System.in)是一个new表达式，该表达式的结果是一个对象</span></span><br><span class="line">        <span class="comment">//引用数据类型  变量 = 对象;</span></span><br><span class="line">        <span class="comment">//这个等式的意思可以理解为用一个引用数据类型的变量代表一个对象，所以这个变量的名称又称为对象名</span></span><br><span class="line">        <span class="comment">//我们也把scanner变量叫做scanner对象</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//System.in默认代表键盘输入</span></span><br><span class="line">        </span><br><span class="line">       Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//网名 string</span></span><br><span class="line">        String name=input.next();</span><br><span class="line">        <span class="comment">//年龄 int</span></span><br><span class="line">        <span class="keyword">int</span> age=input.nextInt();</span><br><span class="line">        <span class="comment">//体重 double</span></span><br><span class="line">        <span class="keyword">double</span> weight=input.nextDouble();</span><br><span class="line">        <span class="comment">//单身 string</span></span><br><span class="line">        String ismarried=input.next();</span><br><span class="line">        <span class="comment">//性别 string</span></span><br><span class="line">        String sex=input.next();</span><br><span class="line">        System.out.println(<span class="string">"网名："</span> + name + <span class="string">"\n年龄："</span> + age + <span class="string">"\n体重："</span> + weight +<span class="string">"\n单身："</span> + ismarried + <span class="string">"\n性别："</span> + sex);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//④ 关闭资源</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-练习"><a href="#5-2-练习" class="headerlink" title="5.2 练习"></a>5.2 练习</h3><p><strong>练习1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件：高：180cm以上；富：财富1千万以上；帅：是。</span><br><span class="line"></span><br><span class="line">如果这三个条件同时满足，则：“我一定要嫁给他!!!”</span><br><span class="line">如果三个条件有为真的情况，则：“嫁吧，比上不足，比下有余。”</span><br><span class="line">如果三个条件都不满足，则：“不嫁！”</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">System.out.println(“身高: (cm));</span><br><span class="line">scanner.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(“财富: (千万));</span><br><span class="line">scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">System.out.println(“帅否: (true&#x2F;false));   </span><br><span class="line">scanner.nextBoolean();  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(“帅否: (是&#x2F;否));</span><br><span class="line">scanner.next();   &quot;是&quot;.equals(str)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScannerExer1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入你的身高：(cm)"</span>);</span><br><span class="line"><span class="keyword">int</span> height = scan.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入你的财富：(以千万为单位)"</span>);</span><br><span class="line"><span class="keyword">double</span> wealth = scan.nextDouble();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方式1：关于是否帅问题，我们使用boolean类型接收</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">System.out.println("帅否？(true/false)");</span></span><br><span class="line"><span class="comment">boolean isHandsome = scan.nextBoolean();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="comment">if(height &gt;= 180 &amp;&amp; wealth &gt;= 1.0 &amp;&amp; isHandsome)&#123; //不建议isHandsome == true</span></span><br><span class="line"><span class="comment">System.out.println("我一定要嫁给他!!!");</span></span><br><span class="line"><span class="comment">&#125;else if(height &gt;= 180 || wealth &gt;= 1.0 || isHandsome)&#123;</span></span><br><span class="line"><span class="comment">System.out.println("嫁吧，比上不足，比下有余。");</span></span><br><span class="line"><span class="comment">&#125;else&#123;</span></span><br><span class="line"><span class="comment">System.out.println("不嫁");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：关于是否帅问题，我们使用String类型接收</span></span><br><span class="line">System.out.println(<span class="string">"帅否？(是/否)"</span>);</span><br><span class="line">String isHandsome = scan.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span>(height &gt;= <span class="number">180</span> &amp;&amp; wealth &gt;= <span class="number">1.0</span> &amp;&amp; isHandsome == <span class="string">"是"</span>)&#123;  <span class="comment">//知识点：判断两个字符串是否相等，使用String的equals()</span></span><br><span class="line">System.out.println(<span class="string">"我一定要嫁给他!!!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(height &gt;= <span class="number">180</span> || wealth &gt;= <span class="number">1.0</span> || isHandsome == <span class="string">"是"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"嫁吧，比上不足，比下有余。"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"不嫁"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">scan.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我家的狗5岁了，5岁的狗相当于人类多大呢？其实，狗的前两年每一年相当于人类的10.5岁，之后每增加一年就增加四岁。那么5岁的狗相当于人类多少年龄呢？应该是：10.5 + 10.5 + 4 + 4 + 4 &#x3D; 33岁。</span><br><span class="line"></span><br><span class="line">编写一个程序，获取用户输入的狗的年龄，通过程序显示其相当于人类的年龄。如果用户输入负数，请显示一个提示信息。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScannerExer2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入狗狗的年龄："</span>);</span><br><span class="line"><span class="keyword">int</span> dogAge = scan.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过分支语句，判断狗狗相当于人的年龄</span></span><br><span class="line"><span class="keyword">if</span>(dogAge &lt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"你输入的狗狗的年龄不合法"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dogAge &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"相当于人的年龄："</span> + (dogAge * <span class="number">10.5</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"相当于人的年龄："</span> + (<span class="number">2</span> * <span class="number">10.5</span> + (dogAge - <span class="number">2</span>) * <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-如何获取一个随机数-Math-random"><a href="#6-如何获取一个随机数-Math-random" class="headerlink" title="6. 如何获取一个随机数(Math.random())"></a>6. 如何获取一个随机数(Math.random())</h2><p>如何产生一个指定范围的随机整数？</p><p>1、Math类的random()的调用，会返回一个[0,1)范围的一个double型值</p><p>2、Math.random() * 100  —&gt;  [0,100)<br>      (int)(Math.random() * 100)    —&gt; [0,99]<br>      (int)(Math.random() * 100) + 5  —-&gt; [5,104]</p><p>3、如何获取<code>[a,b]</code>范围内的随机整数呢？<code>(int)(Math.random() * (b - a + 1)) + a</code></p><p>4、举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathRandomTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">double</span> value1=Math.random();  <span class="comment">// [0,1)随机一个double值</span></span><br><span class="line">       System.out.println(value1);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">double</span> value100d=Math.random()*<span class="number">100</span>; <span class="comment">// [0,100)随机一个double值</span></span><br><span class="line">       System.out.println(value100d);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> value100i=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>); <span class="comment">// [0,100)随机一个int值</span></span><br><span class="line">       System.out.println(value100i);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">       <span class="keyword">int</span> b=<span class="number">10</span>;</span><br><span class="line">       <span class="keyword">int</span> valueab=(<span class="keyword">int</span>)(Math.random()*(b-a+<span class="number">1</span>))+a;  <span class="comment">// [a,b]范围内的随机整数</span></span><br><span class="line">       System.out.println(valueab);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第05章-数组"><a href="#第05章-数组" class="headerlink" title="第05章_数组"></a>第05章_数组</h1><hr><h2 id="本章专题与脉络-2"><a href="#本章专题与脉络-2" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141556.png" alt="第1阶段：Java基本语法-第05章" style="zoom:45%;"><h2 id="1-数组的概述"><a href="#1-数组的概述" class="headerlink" title="1. 数组的概述"></a>1. 数组的概述</h2><h3 id="1-1-为什么需要数组"><a href="#1-1-为什么需要数组" class="headerlink" title="1.1 为什么需要数组"></a>1.1 为什么需要数组</h3><p><strong>需求分析1：</strong></p><p>需要统计某公司50个员工的工资情况，例如计算平均工资、找到最高工资等。用之前知识，首先需要声明<code>50个变量</code>来分别记录每位员工的工资，这样会很麻烦。因此我们可以将所有的数据全部存储到一个容器中统一管理，并使用容器进行计算。</p><p><strong>需求分析2：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141113.jpg" alt="snipaste_20220317_000101" style="zoom: 50%;"><p>容器的概念：</p><ul><li><strong>生活中的容器：</strong>水杯（装水等液体），衣柜（装衣服等物品），集装箱（装货物等）。</li><li><strong>程序中的容器：</strong>将多个数据存储到一起，每个数据称为该容器的元素。</li></ul><h3 id="1-2-数组的概念"><a href="#1-2-数组的概念" class="headerlink" title="1.2 数组的概念"></a>1.2 数组的概念</h3><ul><li><p>数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p></li><li><p>数组中的概念</p><ul><li>数组名</li><li>下标（或索引）</li><li>元素</li><li>数组的长度</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141163.png" alt="image-20220317000952499"></p><p><strong>数组的特点：</strong></p><ul><li>数组本身是<code>引用数据类型</code>，而数组中的元素可以是<code>任何数据类型</code>，包括基本数据类型和引用数据类型。</li><li>创建数组对象会在内存中开辟一整块<code>连续的空间</code>。占据的空间的大小，取决于数组的长度和数组中元素的类型。</li><li>数组中的元素在内存中是依次紧密排列的，有序的。</li><li>数组，一旦初始化完成，其长度就是确定的。数组的<code>长度一旦确定，就不能修改</code>。</li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li><li>数组名中引用的是这块连续空间的首地址。</li></ul><h3 id="1-3-数组的分类"><a href="#1-3-数组的分类" class="headerlink" title="1.3 数组的分类"></a>1.3 数组的分类</h3><p><strong>1、按照元素类型分：</strong></p><ul><li>基本数据类型元素的数组：每个元素位置存储基本数据类型的值</li><li>引用数据类型元素的数组：每个元素位置存储对象（本质是存储对象的首地址）（在面向对象部分讲解）</li></ul><p><strong>2、按照维度分：</strong></p><ul><li>一维数组：存储一组数据</li><li>二维数组：存储多组数据，相当于二维表，一行代表一组数据，只是这里的二维表每一行长度不要求一样。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212141144.png" alt="image-20211221164709624"></p><h2 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2. 一维数组的使用"></a>2. 一维数组的使用</h2><h3 id="2-1-一维数组的声明"><a href="#2-1-一维数组的声明" class="headerlink" title="2.1 一维数组的声明"></a>2.1 一维数组的声明</h3><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐</span></span><br><span class="line">元素的数据类型[] 一维数组的名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型  一维数组名[];</span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line"><span class="keyword">int</span> arr1[];</span><br><span class="line"><span class="keyword">double</span>[] arr2;</span><br><span class="line">String[] arr3;  <span class="comment">//引用类型变量数组</span></span><br></pre></td></tr></table></figure><p><strong>数组的声明，需要明确：</strong></p><p>（1）数组的维度：在Java中数组的符号是[]，[]表示一维，[][]表示二维。</p><p>（2）数组的元素类型：即创建的数组容器可以存储什么数据类型的数据。元素的类型可以是任意的Java的数据类型。例如：int、String、Student等。</p><p>（3）数组名：就是代表某个数组的标识符，数组名其实也是变量名，按照变量的命名规范来命名。数组名是个引用数据类型的变量，因为它代表一组数据。</p><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//比如，要存储一个小组的成绩</span></span><br><span class="line">        <span class="keyword">int</span>[] scores;</span><br><span class="line">        <span class="keyword">int</span> grades[];</span><br><span class="line"><span class="comment">//        System.out.println(scores);//未初始化不能使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如，要存储一组字母</span></span><br><span class="line">        <span class="keyword">char</span>[] letters;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如，要存储一组姓名</span></span><br><span class="line">        String[] names;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如，要存储一组价格</span></span><br><span class="line">        <span class="keyword">double</span>[] prices;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Java语言中声明数组时不能指定其长度(数组中元素的个数)。 例如： int a[5]; //非法</p><h3 id="2-2-一维数组的初始化"><a href="#2-2-一维数组的初始化" class="headerlink" title="2.2 一维数组的初始化"></a>2.2 一维数组的初始化</h3><h4 id="2-2-1-静态初始化"><a href="#2-2-1-静态初始化" class="headerlink" title="2.2.1 静态初始化"></a>2.2.1 静态初始化</h4><ul><li><p>如果数组变量的初始化和数组元素的赋值操作<strong>同时进行</strong>，那就称为静态初始化。</p></li><li><p>静态初始化，本质是用静态数据（编译时已知）为数组初始化。此时数组的长度=sum(静态数据)。</p></li><li><p><strong>一维数组声明和静态初始化格式1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元 素<span class="number">2</span>,元素<span class="number">3</span>,...&#125;;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">    </span><br><span class="line">数据类型[] 数组名;</span><br><span class="line">数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,...&#125;;</span><br></pre></td></tr></table></figure><ul><li>new：关键字，创建数组使用的关键字。因为数组本身是引用数据类型，所以要用new创建数组实体。</li></ul></li></ul><p>例如，定义存储1，2，3，4，5整数的数组容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//正确</span></span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure><ul><li><strong>一维数组声明和静态初始化格式2：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;<span class="comment">//必须在一个语句中完成，不能分成两个语句写</span></span><br></pre></td></tr></table></figure><p>例如，定义存储1，2，3，4，5整数的数组容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//右边不需要写new int[]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] nums;</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;; <span class="comment">//声明和初始化在两个语句完成，就不能使用new int[]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] word = &#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line"></span><br><span class="line">        String[] heros = &#123;<span class="string">"袁隆平"</span>,<span class="string">"邓稼先"</span>,<span class="string">"钱学森"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"arr数组："</span> + arr);<span class="comment">//arr数组：[I@1b6d3586</span></span><br><span class="line">        System.out.println(<span class="string">"nums数组："</span> + nums);<span class="comment">//nums数组：[I@4554617c</span></span><br><span class="line">        System.out.println(<span class="string">"word数组："</span> + word);<span class="comment">//word数组：[C@74a14482</span></span><br><span class="line">        System.out.println(<span class="string">"heros数组："</span> + heros);<span class="comment">//heros数组：[Ljava.lang.String;@1540e19d</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-动态初始化"><a href="#2-2-2-动态初始化" class="headerlink" title="2.2.2 动态初始化"></a>2.2.2 动态初始化</h4><p>数组变量的初始化和数组元素的赋值操作<strong>分开进行</strong>，即为动态初始化。</p><p>动态初始化中，只确定了元素的个数（即数组的长度），而元素值此时只是默认值，还并未真正赋自己期望的值。真正期望的数据需要后续单独一个一个赋值。</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组存储的元素的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的元素的数据类型[长度];</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">数组存储的数据类型[] 数组名字;</span><br><span class="line">数组名字 = <span class="keyword">new</span> 数组存储的数据类型[长度];</span><br></pre></td></tr></table></figure><ul><li><p>[长度]：数组的长度，表示数组容器中可以最多存储多少个元素。</p></li><li><p><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong>和水杯道理相同，买了一个2升的水杯，总容量就是2升是固定的。</p></li></ul><p><strong>举例1：正确写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p><strong>举例2：错误写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//错误的，后面有&#123;&#125;指定元素列表，就不需要在[]中指定元素个数了。</span></span><br></pre></td></tr></table></figure><h3 id="2-3-一维数组的使用"><a href="#2-3-一维数组的使用" class="headerlink" title="2.3 一维数组的使用"></a>2.3 一维数组的使用</h3><h4 id="2-3-1-数组的长度"><a href="#2-3-1-数组的长度" class="headerlink" title="2.3.1  数组的长度"></a>2.3.1  数组的长度</h4><ul><li>数组的元素总个数，即数组的长度</li><li>每个数组都有一个属性length指明它的长度，例如：arr.length 指明数组arr的长度(即元素个数)</li><li>每个数组都具有长度，而且一旦初始化，其长度就是确定，且是不可变的。</li></ul><h4 id="2-3-2-数组元素的引用"><a href="#2-3-2-数组元素的引用" class="headerlink" title="2.3.2 数组元素的引用"></a>2.3.2 数组元素的引用</h4><p><strong>如何表示数组中的一个元素？</strong></p><p>每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为<code>数组索引(index)或下标</code>，可以通过数组的索引/下标访问到数组中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引/下标]</span><br></pre></td></tr></table></figure><p><strong>数组的下标范围？</strong></p><p>Java中数组的下标从[0]开始，下标范围是[0, 数组的长度-1]，即[0, 数组名.length-1]</p><p>数组元素下标可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i];</p><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"arr数组的长度："</span> + arr.length);</span><br><span class="line">        System.out.println(<span class="string">"arr数组的第1个元素："</span> + arr[<span class="number">0</span>]);<span class="comment">//下标从0开始</span></span><br><span class="line">        System.out.println(<span class="string">"arr数组的第2个元素："</span> + arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">"arr数组的第3个元素："</span> + arr[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(<span class="string">"arr数组的第4个元素："</span> + arr[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(<span class="string">"arr数组的第5个元素："</span> + arr[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改第1个元素的值</span></span><br><span class="line">        <span class="comment">//此处arr[0]相当于一个int类型的变量</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">"arr数组的第1个元素："</span> + arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-一维数组的遍历"><a href="#2-4-一维数组的遍历" class="headerlink" title="2.4 一维数组的遍历"></a>2.4 一维数组的遍历</h3><p>将数组中的每个元素分别获取出来，就是<code>遍历</code>。for循环与数组的遍历是绝配。</p><p><strong>举例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//打印数组的属性，输出结果是5</span></span><br><span class="line">        System.out.println(<span class="string">"数组的长度："</span> + arr.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历输出数组中的元素</span></span><br><span class="line">        System.out.println(<span class="string">"数组的元素有："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"arr数组的长度："</span> + arr.length);</span><br><span class="line">        System.out.print(<span class="string">"存储数据到arr数组之前：["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">","</span> + arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment"> arr[0] = 2;</span></span><br><span class="line"><span class="comment">        arr[1] = 4;</span></span><br><span class="line"><span class="comment">        arr[2] = 6;</span></span><br><span class="line"><span class="comment">        arr[3] = 8;</span></span><br><span class="line"><span class="comment">        arr[4] = 10;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = (i+<span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"存储数据到arr数组之后：["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">","</span> + arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-数组元素的默认值"><a href="#2-5-数组元素的默认值" class="headerlink" title="2.5 数组元素的默认值"></a>2.5 数组元素的默认值</h3><p>数组是引用类型，当我们使用动态初始化方式创建数组时，元素值只是默认值。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest6</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[]= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; </span><br><span class="line">System.out.println(a[<span class="number">3</span>]); <span class="comment">//a[3]的默认值为0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于基本数据类型而言，默认初始化值各有不同。</p><p>对于引用数据类型而言，默认初始化值为null（注意与0不同！)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142284.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存储26个字母</span></span><br><span class="line">        <span class="keyword">char</span>[] letters = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">26</span>];</span><br><span class="line">        System.out.println(<span class="string">"letters数组的长度："</span> + letters.length);</span><br><span class="line">        System.out.print(<span class="string">"存储字母到letters数组之前：["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(letters[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">","</span> + letters[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//存储5个姓名</span></span><br><span class="line">        String[] names = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">        System.out.println(<span class="string">"names数组的长度："</span> + names.length);</span><br><span class="line">        System.out.print(<span class="string">"存储姓名到names数组之前：["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(names[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">","</span> + names[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-一维数组内存分析"><a href="#3-一维数组内存分析" class="headerlink" title="3. 一维数组内存分析"></a>3. 一维数组内存分析</h2><h3 id="3-1-Java虚拟机的内存划分"><a href="#3-1-Java虚拟机的内存划分" class="headerlink" title="3.1 Java虚拟机的内存划分"></a>3.1 Java虚拟机的内存划分</h3><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142472.png" alt="JVM架构-简图"></p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td><code>虚拟机栈</code></td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度<br>的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr><tr><td><code>堆内存</code></td><td>存储对象（包括数组对象），new来创建的，都存储在<strong>堆内存</strong>。</td></tr><tr><td><code>方法区</code></td><td>存储已被虚拟机加载的类信息、常量、（静态变量）、即时编译器编译后的代码等数据。</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr></tbody></table><h3 id="3-2-一维数组在内存中的存储"><a href="#3-2-一维数组在内存中的存储" class="headerlink" title="3.2 一维数组在内存中的存储"></a>3.2 一维数组在内存中的存储</h3><h4 id="1、一个一维数组内存图"><a href="#1、一个一维数组内存图" class="headerlink" title="1、一个一维数组内存图"></a>1、一个一维数组内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">  System.out.println(arr);<span class="comment">//[I@5f150435</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142699.jpg" alt></p><h4 id="2、数组下标为什么是0开始"><a href="#2、数组下标为什么是0开始" class="headerlink" title="2、数组下标为什么是0开始"></a>2、数组下标为什么是0开始</h4><p>因为第一个元素距离数组首地址间隔0个单元格。</p><h4 id="3、两个一维数组内存图"><a href="#3、两个一维数组内存图" class="headerlink" title="3、两个一维数组内存图"></a>3、两个一维数组内存图</h4><p>两个数组独立</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    System.out.println(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142304.jpg" style="zoom:67%;"><h4 id="4、两个变量指向一个一维数组"><a href="#4、两个变量指向一个一维数组" class="headerlink" title="4、两个变量指向一个一维数组"></a>4、两个变量指向一个一维数组</h4><p>两个数组变量本质上代表同一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义数组，存储3个元素</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//数组索引进行赋值</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">7</span></span><br><span class="line">    <span class="comment">//定义数组变量arr2，将arr的地址赋值给arr2</span></span><br><span class="line">    <span class="keyword">int</span>[] arr2 = arr;</span><br><span class="line">    arr2[<span class="number">1</span>] = <span class="number">9</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);  <span class="comment">// 输出9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142284.jpg" style="zoom:67%;"><h2 id="4-一维数组的应用"><a href="#4-一维数组的应用" class="headerlink" title="4. 一维数组的应用"></a>4. 一维数组的应用</h2><p><strong>案例1：</strong>升景坊单间短期出租4个月，550元/月（水电煤公摊，网费35元/月），空调、卫生间、厨房齐全。屋内均是IT行业人士，喜欢安静。所以要求来租者最好是同行或者刚毕业的年轻人，爱干净、安静。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>&#125;;</span><br><span class="line">      <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">      String tel = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; index.length;i++)&#123;</span><br><span class="line">            tel += arr[index[i]];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"联系方式："</span> + tel);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2：输出英文星期几</p><p>用一个数组，保存星期一到星期天的7个英语单词，从键盘输入1-7，显示对应的单词<br>{“Monday”,”Tuesday”,”Wednesday”,”Thursday”,”Friday”,”Saturday”,”Sunday”}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 14:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeekArrayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 声明并初始化星期的数组</span></span><br><span class="line">        String[] weeks = &#123;<span class="string">"Monday"</span>,<span class="string">"Tuesday"</span>,<span class="string">"Wednesday"</span>,<span class="string">"Thursday"</span>,<span class="string">"Friday"</span>,<span class="string">"Saturday"</span>,<span class="string">"Sunday"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 使用Scanner从键盘获取1-7范围的整数</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入[1-7]范围的整数："</span>);</span><br><span class="line">        <span class="keyword">int</span> number = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(number &lt; <span class="number">1</span> || number &gt; <span class="number">7</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"你输入的输入非法"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 根据输入的整数，到数组中相应的索引位置获取指定的元素（即：星期几）</span></span><br><span class="line">            System.out.println(<span class="string">"对应的星期为："</span> + weeks[number - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong>从键盘读入学生成绩，找出最高分，并输出学生成绩等级。</p><ul><li><p>成绩&gt;=最高分-10  等级为’A’  </p></li><li><p>成绩&gt;=最高分-20  等级为’B’</p></li><li><p>成绩&gt;=最高分-30  等级为’C’  </p></li><li><p>其余            等级为’D’</p></li></ul><p>提示：先读入学生人数，根据人数创建int数组，存放学生成绩。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142206.png" alt="image-20220317004637748" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 根据提示，获取学生人数</span></span><br><span class="line">        System.out.print(<span class="string">"请输入学生人数："</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> count = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 根据学生人数，创建指定长度的数组 (使用动态初始化)</span></span><br><span class="line">        <span class="keyword">int</span>[] scores = <span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 使用循环，依次给数组的元素赋值</span></span><br><span class="line">        <span class="keyword">int</span> maxScore = <span class="number">0</span>; <span class="comment">//记录最高分</span></span><br><span class="line">        System.out.println(<span class="string">"请输入"</span> + count + <span class="string">"个成绩"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">            scores[i] = scanner.nextInt();</span><br><span class="line">            <span class="comment">//4. 获取数组中元素的最大值，即为最高分</span></span><br><span class="line">            <span class="keyword">if</span>(maxScore &lt; scores[i])&#123;</span><br><span class="line">                maxScore = scores[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"最高分是："</span> + maxScore);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 遍历数组元素，输出各自的分数，并根据其分数与最高分的差值，获取各自的等级</span></span><br><span class="line">        <span class="keyword">char</span> grade;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(scores[i] &gt;= maxScore - <span class="number">10</span>)&#123;</span><br><span class="line">                grade = <span class="string">'A'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(scores[i] &gt;= maxScore - <span class="number">20</span>)&#123;</span><br><span class="line">                grade = <span class="string">'B'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(scores[i] &gt;= maxScore - <span class="number">30</span>)&#123;</span><br><span class="line">                grade = <span class="string">'C'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                grade = <span class="string">'D'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"student "</span> + i + <span class="string">" socre is "</span> + scores[i] + <span class="string">", grade is "</span> + grade);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-多维数组的使用"><a href="#5-多维数组的使用" class="headerlink" title="5. 多维数组的使用"></a>5. 多维数组的使用</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><ul><li>Java 语言里提供了支持多维数组的语法。</li></ul><ul><li><p>如果说可以把一维数组当成几何中的<code>线性图形</code>，那么二维数组就相当于是<code>一个表格</code>，像Excel中的表格、围棋棋盘一样。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142781.png" alt="image-20220317004810263" style="zoom:80%;"></li><li><p><strong>应用举例1：</strong></p><p>某公司2022年全年各个月份的销售额进行登记。按月份存储，可以使用一维数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] monthData = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">23</span>,<span class="number">43</span>,<span class="number">22</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">65</span>,<span class="number">44</span>,<span class="number">67</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">67</span>,<span class="number">66</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果改写为按<code>季度</code>为单位存储怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] quarterData = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">23</span>,<span class="number">43</span>,<span class="number">22</span>&#125;,&#123;<span class="number">34</span>,<span class="number">55</span>,<span class="number">65</span>&#125;,&#123;<span class="number">44</span>,<span class="number">67</span>,<span class="number">45</span>&#125;,&#123;<span class="number">78</span>,<span class="number">67</span>,<span class="number">66</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>应用举例2：</strong></li></ul><p>高一年级三个班级均由多个学生姓名构成一个个数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] class1 = <span class="keyword">new</span> String[]&#123;<span class="string">"段誉"</span>,<span class="string">"令狐冲"</span>,<span class="string">"任我行"</span>&#125;;</span><br><span class="line"></span><br><span class="line">String[] class2 = <span class="keyword">new</span> String[]&#123;<span class="string">"张三丰"</span>,<span class="string">"周芷若"</span>&#125;;</span><br><span class="line"></span><br><span class="line">String[] class3 = <span class="keyword">new</span> String[]&#123;<span class="string">"赵敏"</span>,<span class="string">"张无忌"</span>,<span class="string">"韦小宝"</span>,<span class="string">"杨过"</span>&#125;;</span><br></pre></td></tr></table></figure><p>那从整个年级看，我们可以声明一个二维数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[][] grade = <span class="keyword">new</span> String[][]&#123;&#123;<span class="string">"段誉"</span>,<span class="string">"令狐冲"</span>,<span class="string">"任我行"</span>&#125;,&#123;<span class="string">"张三丰"</span>,<span class="string">"周芷若"</span>&#125;,&#123;<span class="string">"赵敏"</span>,<span class="string">"张无忌"</span>,<span class="string">"韦小宝"</span>,<span class="string">"杨过"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><strong>应用举例3：</strong></p><p><img src=".images/image-20220516095701345.png" alt="image-20220516095701345"></p></li></ul><p>蓝框的几个元素，可以使用一维数组来存储。但现在发现每个元素下还有下拉框，其内部还有元素，那就需要使用二维数组来存储：</p><p>  <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142975.png" alt="image-20220516095829526"></p><ul><li><p>使用说明</p><p><img src=".images/1561524724397-1647707344971.png" alt="1561524724397"></p></li></ul><blockquote><ul><li>对于二维数组的理解，可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。</li><li>其实，从数组底层的运行机制来看，其实没有多维数组。</li></ul></blockquote><h3 id="5-2-声明与初始化"><a href="#5-2-声明与初始化" class="headerlink" title="5.2 声明与初始化"></a>5.2 声明与初始化</h3><h4 id="5-2-1-声明"><a href="#5-2-1-声明" class="headerlink" title="5.2.1 声明"></a>5.2.1 声明</h4><p>二维数组声明的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐</span></span><br><span class="line">元素的数据类型[][] 二维数组的名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型  二维数组名[][];</span><br><span class="line"><span class="comment">//不推荐</span></span><br><span class="line">元素的数据类型[]  二维数组名[];</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test20TwoDimensionalArrayDefine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存储多组成绩</span></span><br><span class="line">        <span class="keyword">int</span>[][] grades;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储多组姓名</span></span><br><span class="line">        String[][] names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] x, y[];</span><br><span class="line">&#x2F;&#x2F;x是一维数组，y是二维数组  相当于 int[]x  int[] y[];</span><br></pre></td></tr></table></figure><h4 id="5-2-2-静态初始化"><a href="#5-2-2-静态初始化" class="headerlink" title="5.2.2 静态初始化"></a>5.2.2 静态初始化</h4><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>定义一个名称为arr的二维数组，二维数组中有三个一维数组</p><ul><li>每一个一维数组中具体元素也都已初始化<ul><li>第一个一维数组 arr[0] = {3,8,2};</li><li>第二个一维数组 arr[1] = {2,7};</li><li>第三个一维数组 arr[2] = {9,0,1,6};</li></ul></li><li>第三个一维数组的长度表示方式：arr[2].length;</li></ul><blockquote><ul><li>注意特殊写法情况：int[] x,y[]; x是一维数组，y是二维数组。</li></ul></blockquote><ul><li>举例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;&#125;;<span class="comment">//声明与初始化必须在一句完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;&#125;;<span class="comment">//错误，静态初始化右边new 数据类型[][]中不能写数字</span></span><br></pre></td></tr></table></figure><ul><li>举例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDimensionalArrayInitialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存储多组成绩</span></span><br><span class="line">        <span class="keyword">int</span>[][] grades = &#123;</span><br><span class="line">                    &#123;<span class="number">89</span>,<span class="number">75</span>,<span class="number">99</span>,<span class="number">100</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">88</span>,<span class="number">96</span>,<span class="number">78</span>,<span class="number">63</span>,<span class="number">100</span>,<span class="number">86</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">56</span>,<span class="number">63</span>,<span class="number">58</span>&#125;,</span><br><span class="line">                    &#123;<span class="number">99</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>&#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储多组姓名</span></span><br><span class="line">        String[][] names = &#123;</span><br><span class="line">            &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"赵六"</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"刘备"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>,<span class="string">"诸葛亮"</span>,<span class="string">"赵云"</span>,<span class="string">"马超"</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"曹丕"</span>,<span class="string">"曹植"</span>,<span class="string">"曹冲"</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"孙权"</span>,<span class="string">"周瑜"</span>,<span class="string">"鲁肃"</span>,<span class="string">"黄盖"</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-动态初始化"><a href="#5-2-3-动态初始化" class="headerlink" title="5.2.3 动态初始化"></a>5.2.3 动态初始化</h4><p>如果二维数组的每一个数据，甚至是每一行的列数，需要后期单独确定，那么就只能使用动态初始化方式了。动态初始化方式分为两种格式：</p><p><strong>格式1：规则二维表：每一行的列数是相同的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）确定行数和列数</span></span><br><span class="line">元素的数据类型[][] 二维数组名 = <span class="keyword">new</span> 元素的数据类型[m][n];</span><br><span class="line"><span class="comment">//其中，m:表示这个二维数组有多少个一维数组。或者说一共二维表有几行</span></span><br><span class="line"><span class="comment">//其中，n:表示每一个一维数组的元素有多少个。或者说每一行共有一个单元格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时创建完数组，行数、列数确定，而且元素也都有默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）再为元素赋新值</span></span><br><span class="line">二维数组名[行下标][列下标] = 值;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure><ul><li><p>定义了名称为arr的二维数组</p></li><li><p>二维数组中有3个一维数组</p></li><li><p>每一个一维数组中有2个元素</p></li><li><p>一维数组的名称分别为arr[0], arr[1], arr[2]</p></li><li><p>给第一个一维数组1脚标位赋值为78写法是：<code>arr[0][1] = 78;</code></p></li></ul><p><strong>格式2：不规则：每一行的列数不一样</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）先确定总行数</span></span><br><span class="line">元素的数据类型[][] 二维数组名 = <span class="keyword">new</span> 元素的数据类型[总行数][]; <span class="comment">//行一定知道 但是列不一定知道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时只是确定了总行数，每一行里面现在是null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）再确定每一行的列数，创建每一行的一维数组</span></span><br><span class="line">二维数组名[行下标] = <span class="keyword">new</span> 元素的数据类型[该行的总列数];</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时已经new完的行的元素就有默认值了，没有new的行还是null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)再为元素赋值</span></span><br><span class="line">二维数组名[行下标][列下标] = 值;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br></pre></td></tr></table></figure><ul><li>二维数组中有3个一维数组。</li><li>每个一维数组都是默认初始化值null (注意：区别于格式1）</li><li>可以对这个三个一维数组分别进行初始化：arr[0] = new int[3];    arr[1] = new int[1];   arr[2] = new int[2];</li><li>注：<code>int[][]arr = new int[][3];</code> //非法</li></ul><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> 2 2</span></span><br><span class="line"><span class="comment"> 3 3 3</span></span><br><span class="line"><span class="comment"> 4 4 4 4</span></span><br><span class="line"><span class="comment"> 5 5 5 5 5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test25DifferentElementCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1、声明一个二维数组，并且确定行数</span></span><br><span class="line">        <span class="comment">//因为每一行的列数不同，这里无法直接确定列数</span></span><br><span class="line">        <span class="keyword">int</span>[][]  arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、确定每一行的列数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr[0] 的列数是1</span></span><br><span class="line"><span class="comment">arr[1] 的列数是2</span></span><br><span class="line"><span class="comment">arr[2] 的列数是3</span></span><br><span class="line"><span class="comment">arr[3] 的列数是4</span></span><br><span class="line"><span class="comment">arr[4] 的列数是5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            arr[i] = <span class="keyword">new</span> <span class="keyword">int</span>[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、确定元素的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">                arr[i][j] = i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、遍历显示</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">                System.out.print(arr[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-数组的长度和角标"><a href="#5-3-数组的长度和角标" class="headerlink" title="5.3 数组的长度和角标"></a>5.3 数组的长度和角标</h3><ul><li>二维数组的长度/行数：二维数组名.length</li><li>二维数组的某一行：二维数组名[行下标]，此时相当于获取其中一组数据。它本质上是一个一维数组。行下标的范围：[0, 二维数组名.length-1]。此时把二维数组看成一维数组的话，元素是行对象。</li><li>某一行的列数：二维数组名[行下标].length，因为二维数组的每一行是一个一维数组。</li><li>某一个元素：二维数组名[行下标][列下标]，即先确定行/组，再确定列。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test22TwoDimensionalArrayUse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//存储3个小组的学员的成绩，分开存储，使用二维数组。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int[][] scores1;</span></span><br><span class="line"><span class="comment">int scores2[][];</span></span><br><span class="line"><span class="comment">int[] scores3[];*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] scores = &#123;</span><br><span class="line">                &#123;<span class="number">85</span>,<span class="number">96</span>,<span class="number">85</span>,<span class="number">75</span>&#125;,</span><br><span class="line">                &#123;<span class="number">99</span>,<span class="number">96</span>,<span class="number">74</span>,<span class="number">72</span>,<span class="number">75</span>&#125;,</span><br><span class="line">                &#123;<span class="number">52</span>,<span class="number">42</span>,<span class="number">56</span>,<span class="number">75</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(scores);<span class="comment">//[[I@15db9742</span></span><br><span class="line">        System.out.println(<span class="string">"一共有"</span> + scores.length +<span class="string">"组成绩."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[[：代表二维数组，I代表元素类型是int</span></span><br><span class="line">        System.out.println(scores[<span class="number">0</span>]);<span class="comment">//[I@6d06d69c</span></span><br><span class="line">        <span class="comment">//[：代表一维数组，I代表元素类型是int</span></span><br><span class="line">        System.out.println(scores[<span class="number">1</span>]);<span class="comment">//[I@7852e922</span></span><br><span class="line">        System.out.println(scores[<span class="number">2</span>]);<span class="comment">//[I@4e25154f</span></span><br><span class="line">        <span class="comment">//System.out.println(scores[3]);//ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"第1组有"</span> + scores[<span class="number">0</span>].length +<span class="string">"个学员."</span>);</span><br><span class="line">        System.out.println(<span class="string">"第2组有"</span> + scores[<span class="number">1</span>].length +<span class="string">"个学员."</span>);</span><br><span class="line">        System.out.println(<span class="string">"第3组有"</span> + scores[<span class="number">2</span>].length +<span class="string">"个学员."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"第1组的每一个学员成绩如下："</span>);</span><br><span class="line">        <span class="comment">//第一行的元素</span></span><br><span class="line">        System.out.println(scores[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//85</span></span><br><span class="line">        System.out.println(scores[<span class="number">0</span>][<span class="number">1</span>]);<span class="comment">//96</span></span><br><span class="line">        System.out.println(scores[<span class="number">0</span>][<span class="number">2</span>]);<span class="comment">//85</span></span><br><span class="line">        System.out.println(scores[<span class="number">0</span>][<span class="number">3</span>]);<span class="comment">//75</span></span><br><span class="line">        <span class="comment">//System.out.println(scores[0][4]);//java.lang.ArrayIndexOutOfBoundsException: 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-二维数组的遍历"><a href="#5-4-二维数组的遍历" class="headerlink" title="5.4 二维数组的遍历"></a>5.4 二维数组的遍历</h3><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;二维数组名.length; i++)&#123; <span class="comment">//二维数组对象.length</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;二维数组名[i].length; j++)&#123;<span class="comment">//二维数组行对象.length</span></span><br><span class="line">        System.out.print(二维数组名[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test23TwoDimensionalArrayIterate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存储3个小组的学员的成绩，分开存储，使用二维数组。</span></span><br><span class="line">        <span class="keyword">int</span>[][] scores = &#123;</span><br><span class="line">                &#123;<span class="number">85</span>,<span class="number">96</span>,<span class="number">85</span>,<span class="number">75</span>&#125;,</span><br><span class="line">                &#123;<span class="number">99</span>,<span class="number">96</span>,<span class="number">74</span>,<span class="number">72</span>,<span class="number">75</span>&#125;,</span><br><span class="line">                &#123;<span class="number">52</span>,<span class="number">42</span>,<span class="number">56</span>,<span class="number">75</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"一共有"</span> + scores.length +<span class="string">"组成绩."</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">"第"</span> + (i+<span class="number">1</span>) +<span class="string">"组有"</span> + scores[i].length + <span class="string">"个学员，成绩如下："</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; scores[i].length; j++) &#123;</span><br><span class="line">                System.out.print(scores[i][j]+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-内存解析"><a href="#5-5-内存解析" class="headerlink" title="5.5 内存解析"></a>5.5 内存解析</h3><p>二维数组本质上是元素类型是一维数组的一维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142460.png" alt="1562112672215"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、声明二维数组，并确定行数和列数</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、确定元素的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        arr[i][j] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142941.png" alt="1562113179785"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、声明一个二维数组，并且确定行数</span></span><br><span class="line"><span class="comment">//因为每一行的列数不同，这里无法直接确定列数</span></span><br><span class="line"><span class="keyword">int</span>[][]  arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、确定每一行的列数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">arr[0] 的列数是1</span></span><br><span class="line"><span class="comment">arr[1] 的列数是2</span></span><br><span class="line"><span class="comment">arr[2] 的列数是3</span></span><br><span class="line"><span class="comment">arr[3] 的列数是4</span></span><br><span class="line"><span class="comment">arr[4] 的列数是5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    arr[i] = <span class="keyword">new</span> <span class="keyword">int</span>[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、确定元素的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)&#123;</span><br><span class="line">        arr[i][j] = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142907.png" alt="1562113981079"></p><h3 id="5-6-应用举例"><a href="#5-6-应用举例" class="headerlink" title="5.6 应用举例"></a>5.6 应用举例</h3><p><strong>案例1：</strong>获取arr数组中所有元素的和。</p><p>提示：使用for的嵌套循环即可。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142988.png" alt="image-20220317005436209"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Exercise3 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        int[][] arr&#x3D;new int[][]&#123;&#123;3,5,8,0&#125;,&#123;12,9,0,0&#125;,&#123;7,0,6,4&#125;&#125;;</span><br><span class="line">        int sum&#x3D;0;</span><br><span class="line">        System.out.println(arr.length);  &#x2F;&#x2F;行的长度</span><br><span class="line">        System.out.println(arr[0].length); &#x2F;&#x2F;列的长度</span><br><span class="line">        &#x2F;&#x2F;两层循环</span><br><span class="line">        for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            for(int j&#x3D;0;j&lt;arr[0].length;j++)&#123;</span><br><span class="line">                sum+&#x3D;arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>声明：int[] x,y[]; 在给x,y变量赋值以后，以下选项允许通过编译的是： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">声明：<span class="keyword">int</span>[] x,y[]; 在给x,y变量赋值以后，以下选项允许通过编译的是：</span><br><span class="line">a)    x[<span class="number">0</span>] = y;                 <span class="comment">//no</span></span><br><span class="line">b)    y[<span class="number">0</span>] = x;                 <span class="comment">//yes</span></span><br><span class="line">c)    y[<span class="number">0</span>][<span class="number">0</span>] = x;              <span class="comment">//no</span></span><br><span class="line">d)    x[<span class="number">0</span>][<span class="number">0</span>] = y;              <span class="comment">//no</span></span><br><span class="line">e)    y[<span class="number">0</span>][<span class="number">0</span>] = x[<span class="number">0</span>];           <span class="comment">//yes</span></span><br><span class="line">f)    x = y;                    <span class="comment">//no</span></span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">一维数组：<span class="keyword">int</span>[] x  或者<span class="keyword">int</span> x[]   </span><br><span class="line">二维数组：<span class="keyword">int</span>[][] y 或者  <span class="keyword">int</span>[] y[]  或者 <span class="keyword">int</span>  y[][]</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong>使用二维数组打印一个 10 行杨辉三角。</p><p>提示：</p><ol><li><p>第一行有 1 个元素, 第 n 行有 n 个元素</p></li><li><p>每一行的第一个元素和最后一个元素都是 1</p></li><li><p>从第三行开始, 对于非第一个元素和最后一个元素的元素。即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yanghui[i][j] &#x3D; yanghui[i-1][j-1] + yanghui[i-1][j];</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142332.png" alt="image-20220317005549522"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 10:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YangHuiTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = <span class="keyword">new</span> <span class="keyword">int</span>[i+<span class="number">1</span>]; <span class="comment">//每一行都多一列</span></span><br><span class="line">            <span class="comment">//每一行的第一个元素和对角线元素都是1</span></span><br><span class="line">            arr[i][<span class="number">0</span>] = arr[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; arr[i].length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                arr[i][j] = arr[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                System.out.print(arr[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(); <span class="comment">//每一行换行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-数组的常见算法"><a href="#6-数组的常见算法" class="headerlink" title="6. 数组的常见算法"></a>6. 数组的常见算法</h2><h3 id="6-1-数值型数组特征值统计"><a href="#6-1-数值型数组特征值统计" class="headerlink" title="6.1 数值型数组特征值统计"></a>6.1 数值型数组特征值统计</h3><ul><li>这里的特征值涉及到：平均值、最大值、最小值、总和等</li></ul><p><strong>举例1：</strong>数组统计：求总和、均值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayElementSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//求总和、均值</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//因为0加上任何数都不影响结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> avg = (<span class="keyword">double</span>)sum/arr.length;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">        System.out.println(<span class="string">"avg = "</span> + avg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例2：</strong>求数组元素的总乘积</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayElementMul</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求总乘积</span></span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">1</span>;<span class="comment">//因为1乘以任何数都不影响结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            result *= arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例3：</strong>求数组元素中偶数的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayElementEvenCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//统计偶数个数</span></span><br><span class="line">        <span class="keyword">int</span> evenCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                evenCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"evenCount = "</span> + evenCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例4：</strong>求数组元素的最大值</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142092.png" alt="1574577970893"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayMax</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//找最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;<span class="comment">//此处i从1开始，是max不需要与arr[0]再比较一次了</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"max = "</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例5：</strong>找最值及其第一次出现的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMaxIndex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//找最大值以及第一个最大值下标</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"max = "</span> + max);</span><br><span class="line">        System.out.println(<span class="string">"index = "</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例6：</strong>找最值及其所有最值的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test13AllMaxIndex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//找最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最大值是："</span> + max);</span><br><span class="line">        System.out.print(<span class="string">"最大值的下标有："</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组，看哪些元素和最大值是一样的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max == arr[i])&#123;</span><br><span class="line">                System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test13AllMaxIndex2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//找最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        String index = <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">                index = i + <span class="string">""</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[i] == max)&#123;</span><br><span class="line">                index += <span class="string">","</span> + i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"最大值是"</span> + max);</span><br><span class="line">        System.out.println(<span class="string">"最大值的下标是["</span> + index+<span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例7(难)：</strong>输入一个整形数组，数组里有正数也有负数。数组中连续的一个或多个整数组成一个子数组，每个子数组都有一个和。求所有子数组的和的最大值。要求时间复杂度为O(n)。<br>例如：输入的数组为1, -2, 3, -10, -4, 7, 2, -5，和最大的子数组为3, 10, -4, 7, 2，因此输出为该子数组的和18。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, -<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, -<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = getGreatestSum(arr);</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getGreatestSum</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> greatestSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = greatestSum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">temp += arr[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">temp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp &gt; greatestSum)&#123;</span><br><span class="line">greatestSum = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(greatestSum == <span class="number">0</span>)&#123;</span><br><span class="line">greatestSum = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(greatestSum &lt; arr[i])&#123;</span><br><span class="line">greatestSum = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> greatestSum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例8：评委打分</strong></p><p>分析以下需求，并用代码实现：</p><p>（1）在编程竞赛中，有10位评委为参赛的选手打分，分数分别为：5，4，6，8，9，0，1，2，7，3</p><p>（2）求选手的最后得分（去掉一个最高分和一个最低分后其余8位评委打分的平均值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 10:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayExer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//最高分</span></span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">                max=arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最低分</span></span><br><span class="line">        <span class="keyword">int</span> min=arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;min)</span><br><span class="line">                min=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//算平均分 [所有的-MAX-MIN再除以总数-2]</span></span><br><span class="line">        <span class="keyword">int</span> average=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            average+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println((<span class="keyword">double</span>)(average-max-min)/(arr.length-<span class="number">2</span>));  <span class="comment">//要考虑最终结果可能是一个浮点数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-数组元素的赋值与数组复制"><a href="#6-2-数组元素的赋值与数组复制" class="headerlink" title="6.2 数组元素的赋值与数组复制"></a>6.2 数组元素的赋值与数组复制</h3><p><strong>举例1：</strong>杨辉三角（见二维数组课后案例）</p><p><strong>举例2：</strong>使用简单数组</p><p>(1)创建一个名为ArrayTest的类，在main()方法中声明array1和array2两个变量，他们是int[]类型的数组。</p><p>(2)使用大括号{}，把array1初始化为8个素数：2,3,5,7,11,13,17,19。</p><p>(3)显示array1的内容。</p><p>(4)赋值array2变量等于array1，修改array2中的偶索引元素，使其等于索引值(如array[0]=0,array[2]=2)。打印出array1。  array2 = array1;</p><blockquote><p><strong>思考：</strong>array1和array2是什么关系？</p><p><strong>拓展：</strong>修改题目，实现array2对array1数组的复制</p></blockquote><p><img src="F:/%25E5%25B0%259A%25E7%25A1%2585%25E8%25B0%25B7java2023/01_%25E8%25AF%25BE%25E4%25BB%25B6%25E4%25B8%258E%25E7%2594%25B5%25E5%25AD%2590%25E6%2595%2599%25E6%259D%2590/%25E5%25B0%259A%25E7%25A1%2585%25E8%25B0%25B7_%25E7%25AC%25AC05%25E7%25AB%25A0_%25E6%2595%25B0%25E7%25BB%2584/images/snipaste_20220317_225346.jpg" alt="snipaste_20220317_225346" style="zoom:80%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142207.jpg" alt="snipaste_20220317_225359"></p><p><strong>举例3：</strong>一个数组，让数组的每个元素去除第一个元素，得到的商作为被除数所在位置的新值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">12</span>,<span class="number">43</span>,<span class="number">65</span>,<span class="number">3</span>,-<span class="number">8</span>,<span class="number">64</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(int i = 0;i &lt; arr.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//arr[i] = arr[i] / arr[0];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length -<span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">arr[i] = arr[i] / arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历arr</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例4：</strong>创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值。同时，要求元素的值各不相同。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"><span class="comment">// 5-67 Math.random() * 63 + 5;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;<span class="comment">// [0,1) [0,30) [1,31)</span></span><br><span class="line">arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">30</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == arr[j]) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">30</span>) + <span class="number">1</span>;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更优的方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;<span class="comment">// [0,1) [0,30) [1,31)</span></span><br><span class="line">arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">30</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == arr[j]) &#123;</span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举例5：</strong>扑克牌</p><p>案例：遍历扑克牌</p><p>遍历扑克牌，效果如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142349.png" alt="1659199523932"></p><p>提示：使用两个字符串数组，分别保存花色和点数，再用一个字符串数组保存最后的扑克牌。<br>String[] hua = {“黑桃”,”红桃”,”梅花”,”方片”};<br>String[] dian = {“A”,”2”,”3”,”4”,”5”,”6”,”7”,”8”,”9”,”10”,”J”,”Q”,”K”};</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu3.common_algorithm.exer5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 17:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayExer05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] hua = &#123;<span class="string">"黑桃"</span>,<span class="string">"红桃"</span>,<span class="string">"梅花"</span>,<span class="string">"方片"</span>&#125;;</span><br><span class="line">        String[] dian = &#123;<span class="string">"A"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String[] pai = <span class="keyword">new</span> String[hua.length * dian.length];</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; hua.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; dian.length;j++)&#123;</span><br><span class="line">                pai[k++] = hua[i] + dian[j];  <span class="comment">//添加花色和字母</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pai.length; i++) &#123;</span><br><span class="line">            System.out.print(pai[i] + <span class="string">"  "</span>);</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">13</span> == <span class="number">12</span>)&#123;</span><br><span class="line">                System.out.println();  <span class="comment">//12个为一行 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：在上述基础上，增加大王、小王。</p><p><strong>举例6：</strong>回形数</p><p>从键盘输入一个整数（1~20） ，则以该数字为矩阵的大小，把1,2,3…n*n 的数字按照顺时针螺旋的形式填入其中。</p><p>例如： 输入数字2，则程序输出：<br>1 2<br>4 3 </p><p>输入数字3，则程序输出：<br>1 2 3<br>8 9 4<br>7 6 5<br>输入数字4， 则程序输出：<br>1    2    3    4<br>12  13  14  5<br>11  16  15  6<br>10   9   8    7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"输入一个数字"</span>);</span><br><span class="line"><span class="keyword">int</span> len = scanner.nextInt();</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[len][len];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s = len * len;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * k = 1:向右</span></span><br><span class="line"><span class="comment"> * k = 2:向下</span></span><br><span class="line"><span class="comment"> * k = 3:向左</span></span><br><span class="line"><span class="comment"> * k = 4:向上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">1</span>;m &lt;= s;m++)&#123;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt; len &amp;&amp; arr[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">arr[i][j++] = m;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">k = <span class="number">2</span>;</span><br><span class="line">i++;  </span><br><span class="line">j--;</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt; len &amp;&amp; arr[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">arr[i++][j] = m;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">k = <span class="number">3</span>;</span><br><span class="line">i--;</span><br><span class="line">j--;</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;= <span class="number">0</span> &amp;&amp; arr[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">arr[i][j--] = m;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">k = <span class="number">4</span>;</span><br><span class="line">i--;</span><br><span class="line">j++;</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; arr[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">arr[i--][j] = m;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>;m &lt; arr.length;m++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>;n &lt; arr[m].length;n++)&#123;</span><br><span class="line">System.out.print(arr[m][n] + <span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">01 02 03 04 05 06 07 </span></span><br><span class="line"><span class="comment">24 25 26 27 28 29 08 </span></span><br><span class="line"><span class="comment">23 40 41 42 43 30 09 </span></span><br><span class="line"><span class="comment">22 39 48 49 44 31 10 </span></span><br><span class="line"><span class="comment">21 38 47 46 45 32 11 </span></span><br><span class="line"><span class="comment">20 37 36 35 34 33 12 </span></span><br><span class="line"><span class="comment">19 18 17 16 15 14 13 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//要显示的数据</span></span><br><span class="line"><span class="keyword">int</span> maxX = n-<span class="number">1</span>; <span class="comment">//x轴的最大下标</span></span><br><span class="line"><span class="keyword">int</span> maxY = n-<span class="number">1</span>; <span class="comment">//Y轴的最大下标</span></span><br><span class="line"><span class="keyword">int</span> minX = <span class="number">0</span>; <span class="comment">//x轴的最小下标</span></span><br><span class="line"><span class="keyword">int</span> minY = <span class="number">0</span>; <span class="comment">//Y轴的最小下标</span></span><br><span class="line"><span class="keyword">while</span>(minX&lt;=maxX)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=minX;x&lt;=maxX;x++) &#123;</span><br><span class="line">                arr[minY][x] = ++count;  <span class="comment">//横着从左往右 01开始</span></span><br><span class="line">            &#125;</span><br><span class="line">            minY++;  <span class="comment">//下一循环就是下一行的横</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=minY;y&lt;=maxY;y++) &#123;</span><br><span class="line">                arr[y][maxX] = ++count;  <span class="comment">//竖着从上往下 08开始</span></span><br><span class="line">            &#125;</span><br><span class="line">            maxX--; <span class="comment">//往前挪一个</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=maxX;x&gt;=minX;x--) &#123;</span><br><span class="line">                arr[maxY][x] = ++count;  <span class="comment">//横着从右往左 14开始</span></span><br><span class="line">            &#125;</span><br><span class="line">            maxY--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=maxY;y&gt;=minY;y--) &#123;</span><br><span class="line">                arr[y][minX] = ++count; <span class="comment">//竖着从下往上 20开始</span></span><br><span class="line">            &#125;</span><br><span class="line">            minX++; <span class="comment">//下一个循环就是下一行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length;j++) &#123;</span><br><span class="line">String space = (arr[i][j]+<span class="string">""</span>).length()==<span class="number">1</span> ? <span class="string">"0"</span>:<span class="string">""</span>;</span><br><span class="line">System.out.print(space+arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-数组元素的反转"><a href="#6-3-数组元素的反转" class="headerlink" title="6.3 数组元素的反转"></a>6.3 数组元素的反转</h3><p><strong>实现思想：</strong>数组对称位置的元素互换。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142883.png" alt="image-20221117195931777" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayReverse1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"反转之前："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">        思路：首尾对应位置的元素交换</span></span><br><span class="line"><span class="comment">        （1）确定交换几次</span></span><br><span class="line"><span class="comment">           次数 = 数组.length / 2</span></span><br><span class="line"><span class="comment">        （2）谁和谁交换</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;次数; i++)&#123;</span></span><br><span class="line"><span class="comment">             int temp = arr[i];</span></span><br><span class="line"><span class="comment">             arr[i] = arr[arr.length-1-i];</span></span><br><span class="line"><span class="comment">             arr[arr.length-1-i] = temp;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length/<span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[arr.length-<span class="number">1</span>-i];</span><br><span class="line">            arr[arr.length-<span class="number">1</span>-i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"反转之后："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212142787.png" alt="1561469087319"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayReverse2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"反转之前："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> left=<span class="number">0</span>,right=arr.length-<span class="number">1</span>;left&lt;=right;left++,right--)&#123;</span><br><span class="line">            <span class="comment">//两个数做交换</span></span><br><span class="line">            <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">            temp=arr[left];</span><br><span class="line">            arr[left]=arr[right];</span><br><span class="line">            arr[right]=temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"反转之后："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-数组的扩容与缩容"><a href="#6-4-数组的扩容与缩容" class="headerlink" title="6.4 数组的扩容与缩容"></a>6.4 数组的扩容与缩容</h3><p><strong>数组的扩容</strong></p><p>题目：现有数组 int[] arr = new int[]{1,2,3,4,5}; ，现将数组长度扩容1倍，并将10,20,30三个数据添加到arr数组中，如何操作？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length &lt;&lt; <span class="number">1</span>]; <span class="comment">//位运算符相当于乘2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            newArr[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newArr[arr.length] = <span class="number">10</span>;</span><br><span class="line">        newArr[arr.length + <span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">        newArr[arr.length + <span class="number">2</span>] = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        arr = newArr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历arr</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组的缩容</strong></p><p>题目：现有数组 int[] arr={1,2,3,4,5,6,7}。现需删除数组中索引为4的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="comment">//删除数组中索引为4的元素</span></span><br><span class="line">        <span class="keyword">int</span> delIndex = <span class="number">4</span>;</span><br><span class="line">        <span class="comment">//方案1：</span></span><br><span class="line">        <span class="comment">/*//创建新数组</span></span><br><span class="line"><span class="comment">        int[] newArr = new int[arr.length - 1];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; delIndex; i++) &#123;</span></span><br><span class="line"><span class="comment">            newArr[i] = arr[i];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for (int i = delIndex + 1; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            newArr[i - 1] = arr[i];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        arr = newArr;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(arr[i]);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方案2：</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=delIndex-<span class="number">1</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"本轮要替换的是"</span>+arr[i]+<span class="string">" "</span>+arr[i+<span class="number">1</span>]);</span><br><span class="line">            arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//只遍历前6个 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-数组的元素查找"><a href="#6-5-数组的元素查找" class="headerlink" title="6.5 数组的元素查找"></a>6.5 数组的元素查找</h3><p><strong>1、顺序查找</strong></p><p>顺序查找：挨个查看</p><p>要求：对数组元素的顺序没要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayOrderSearch</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找value第一次在数组中出现的index</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == value)&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index==-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(value + <span class="string">"不存在"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(value + <span class="string">"的下标是"</span> + index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、二分查找</strong></p><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143876.png" alt="image-20220317230955644"></p><p>实现步骤：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143716.png" alt="image-20220623210601915" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分法查找：要求此数组必须是有序的。</span></span><br><span class="line"><span class="keyword">int</span>[] arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">99</span>,-<span class="number">54</span>,-<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">43</span>,<span class="number">256</span>,<span class="number">999</span>&#125;;</span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">256</span>;</span><br><span class="line"><span class="comment">//int value = 25;</span></span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//首索引位置</span></span><br><span class="line"><span class="keyword">int</span> end = arr3.length - <span class="number">1</span>;<span class="comment">//尾索引位置</span></span><br><span class="line"><span class="keyword">while</span>(head &lt;= end)&#123;</span><br><span class="line">    <span class="keyword">int</span> middle = (head + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(arr3[middle] == value)&#123;</span><br><span class="line">        System.out.println(<span class="string">"找到指定的元素，索引为："</span> + middle);</span><br><span class="line">        isFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr3[middle] &gt; value)&#123;</span><br><span class="line">        end = middle - <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//arr3[middle] &lt; value</span></span><br><span class="line">        head = middle + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">    System.out.println(<span class="string">"未找打指定的元素"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-数组元素排序"><a href="#6-6-数组元素排序" class="headerlink" title="6.6 数组元素排序"></a>6.6 数组元素排序</h3><h4 id="6-6-1-算法概述"><a href="#6-6-1-算法概述" class="headerlink" title="6.6.1 算法概述"></a>6.6.1 算法概述</h4><ul><li><p><strong>定义</strong></p><ul><li>排序：假设含有n个记录的序列为{R1，R2，…,Rn},其相应的关键字序列为{K1，K2，…,Kn}。将这些记录重新排序为{Ri1,Ri2,…,Rin},使得相应的关键字值满足条Ki1&lt;=Ki2&lt;=…&lt;=Kin,这样的一种操作称为排序。</li><li>通常来说，排序的目的是快速查找。</li></ul></li><li><p><strong>衡量排序算法的优劣：</strong></p><ul><li><p><code>时间复杂度</code>：分析关键字的比较次数和记录的移动次数</p></li><li><p>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n<sup>2</sup>)＜Ο(n<sup>3</sup>)＜…＜Ο(2<sup>n</sup>)＜Ο(n!)&lt;O(n<sup>n</sup>)</p></li><li><p><code>空间复杂度</code>：分析排序算法中需要多少辅助内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</span><br></pre></td></tr></table></figure></li><li><p><code>稳定性</code>：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，则称这种排序算法是稳定的。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143852.png" alt="image-20211222113701365"></p></li></ul></li></ul><h4 id="6-6-2-排序算法概述"><a href="#6-6-2-排序算法概述" class="headerlink" title="6.6.2 排序算法概述"></a>6.6.2 排序算法概述</h4><ul><li><p><strong>排序算法分类：内部排序和外部排序</strong></p><ul><li><code>内部排序</code>：整个排序过程不需要借助于外部存储器（如磁盘等），所有排序操作都在内存中完成。</li><li><code>外部排序</code>：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助于外部存储器（如磁盘）。外部排序最常见的是多路归并排序。可以认为外部排序是由多次内部排序组成。</li></ul></li><li><p><strong>十大内部排序算法</strong></p></li></ul><p>​       数组的排序算法很多，实现方式各不相同，时间复杂度、空间复杂度、稳定性也各不相同：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143783.png" alt="image-20211222111142684"></p><p>常见时间复杂度所消耗的时间从小到大排序：</p><p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</strong></p><p>注意，经常将以2为底n的对数简写成logn。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143915.png" alt="image-20220824003440106"></p><h4 id="6-6-3-冒泡排序（Bubble-Sort）"><a href="#6-6-3-冒泡排序（Bubble-Sort）" class="headerlink" title="6.6.3 冒泡排序（Bubble Sort）"></a>6.6.3 冒泡排序（Bubble Sort）</h4><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143778.png" alt="image-20220516094637228" style="zoom:67%;"><p><strong>排序思想：</strong></p><ol><li><p>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</p></li><li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较为止。</p></li></ol><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143522.png" alt="BubbleSort"></p><p><strong>动态演示：</strong><a href="https://visualgo.net/zh/sorting" target="_blank" rel="noopener">https://visualgo.net/zh/sorting</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、冒泡排序（最经典）</span></span><br><span class="line"><span class="comment">思想：每一次比较“相邻（位置相邻）”元素，如果它们不符合目标顺序（例如：从小到大），</span></span><br><span class="line"><span class="comment">     就交换它们，经过多轮比较，最终实现排序。</span></span><br><span class="line"><span class="comment"> （例如：从小到大） 每一轮可以把最大的沉底，或最小的冒顶。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">过程：arr&#123;6,9,2,9,1&#125;  目标：从小到大</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第一轮：</span></span><br><span class="line"><span class="comment">第1次，arr[0]与arr[1]，6&gt;9不成立，满足目标要求，不交换</span></span><br><span class="line"><span class="comment">第2次，arr[1]与arr[2]，9&gt;2成立，不满足目标要求，交换arr[1]与arr[2] &#123;6,2,9,9,1&#125;</span></span><br><span class="line"><span class="comment">第3次，arr[2]与arr[3]，9&gt;9不成立，满足目标要求，不交换</span></span><br><span class="line"><span class="comment">第4次，arr[3]与arr[4]，9&gt;1成立，不满足目标要求，交换arr[3]与arr[4] &#123;6,2,9,1,9&#125;</span></span><br><span class="line"><span class="comment">第一轮所有元素&#123;6,9,2,9,1&#125;已经都参与了比较，结束。</span></span><br><span class="line"><span class="comment">第一轮的结果：第“一”最大值9沉底（本次是后面的9沉底），即到&#123;6,2,9,1,9&#125;元素的最右边</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二轮：</span></span><br><span class="line"><span class="comment">第1次，arr[0]与arr[1]，6&gt;2成立，不满足目标要求，交换arr[0]与arr[1] &#123;2,6,9,1,9&#125;</span></span><br><span class="line"><span class="comment">第2次，arr[1]与arr[2]，6&gt;9不成立，满足目标要求，不交换</span></span><br><span class="line"><span class="comment">第3次：arr[2]与arr[3]，9&gt;1成立，不满足目标要求，交换arr[2]与arr[3] &#123;2,6,1,9,9&#125;</span></span><br><span class="line"><span class="comment">第二轮未排序的所有元素 &#123;6,2,9,1&#125;已经都参与了比较，结束。</span></span><br><span class="line"><span class="comment">第二轮的结果：第“二”最大值9沉底（本次是前面的9沉底），即到&#123;2,6,1,9&#125;元素的最右边</span></span><br><span class="line"><span class="comment">第三轮：</span></span><br><span class="line"><span class="comment">第1次，arr[0]与arr[1]，2&gt;6不成立，满足目标要求，不交换</span></span><br><span class="line"><span class="comment">第2次，arr[1]与arr[2]，6&gt;1成立，不满足目标要求，交换arr[1]与arr[2] &#123;2,1,6,9,9&#125;</span></span><br><span class="line"><span class="comment">第三轮未排序的所有元素&#123;2,6,1&#125;已经都参与了比较，结束。</span></span><br><span class="line"><span class="comment">第三轮的结果：第三最大值6沉底，即到 &#123;2,1,6&#125;元素的最右边</span></span><br><span class="line"><span class="comment">第四轮：</span></span><br><span class="line"><span class="comment">第1次，arr[0]与arr[1]，2&gt;1成立，不满足目标要求，交换arr[0]与arr[1] &#123;1,2,6,9,9&#125;</span></span><br><span class="line"><span class="comment">第四轮未排序的所有元素&#123;2,1&#125;已经都参与了比较，结束。</span></span><br><span class="line"><span class="comment">第四轮的结果：第四最大值2沉底，即到&#123;1,2&#125;元素的最右边</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test19BubbleSort</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">6</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//目标：从小到大</span></span><br><span class="line">        <span class="comment">//冒泡排序的轮数 = 元素的总个数 - 1</span></span><br><span class="line">        <span class="comment">//轮数是多轮，每一轮比较的次数是多次，需要用到双重循环，即循环嵌套</span></span><br><span class="line">        <span class="comment">//外循环控制 轮数，内循环控制每一轮的比较次数和过程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123; <span class="comment">//循环次数是arr.length-1次/轮</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设arr.length=5</span></span><br><span class="line"><span class="comment">i=1,第1轮，比较4次</span></span><br><span class="line"><span class="comment">arr[0]与arr[1]</span></span><br><span class="line"><span class="comment">arr[1]与arr[2]</span></span><br><span class="line"><span class="comment">arr[2]与arr[3]</span></span><br><span class="line"><span class="comment">arr[3]与arr[4]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">arr[j]与arr[j+1]，int j=0;j&lt;4; j++</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i=2,第2轮，比较3次</span></span><br><span class="line"><span class="comment">arr[0]与arr[1]</span></span><br><span class="line"><span class="comment">arr[1]与arr[2]</span></span><br><span class="line"><span class="comment">arr[2]与arr[3]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">arr[j]与arr[j+1]，int j=0;j&lt;3; j++</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i=3,第3轮，比较2次</span></span><br><span class="line"><span class="comment">arr[0]与arr[1]</span></span><br><span class="line"><span class="comment">arr[1]与arr[2]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">arr[j]与arr[j+1]，int j=0;j&lt;2; j++</span></span><br><span class="line"><span class="comment">i=4,第4轮，比较1次</span></span><br><span class="line"><span class="comment">arr[0]与arr[1]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">arr[j]与arr[j+1]，int j=0;j&lt;1; j++</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int j=0; j&lt;arr.length-i; j++</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length-i; j++)&#123;</span><br><span class="line">                <span class="comment">//希望的是arr[j] &lt; arr[j+1]</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//交换arr[j]与arr[j+1]</span></span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成排序，遍历结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>冒泡排序优化（选讲）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思考：冒泡排序是否可以优化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test19BubbleSort2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从小到大排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//假设数组已经是有序的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//希望的是arr[j] &lt; arr[j+1]</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">//交换arr[j]与arr[j+1]</span></span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">                    flag = <span class="keyword">false</span>;<span class="comment">//如果元素发生了交换，那么说明数组还没有排好序</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成排序，遍历结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-6-4-快速排序"><a href="#6-6-4-快速排序" class="headerlink" title="6.6.4 快速排序"></a>6.6.4 快速排序</h4><p>快速排序（Quick Sort）由<code>图灵奖</code>获得者<code>Tony Hoare</code>发明，被列为<code>20世纪十大算法之一</code>，是迄今为止所有内排序算法中速度最快的一种，快速排序的时间复杂度为O(nlog(n))。</p><p>快速排序通常明显比同为O(nlogn)的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。</p><p>排序思想：</p><ol><li><p>从数列中挑出一个元素，称为”基准”（pivot），</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p></li><li><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p></li><li><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p></li></ol><p><strong>动态演示：</strong><a href="https://visualgo.net/zh/sorting" target="_blank" rel="noopener">https://visualgo.net/zh/sorting</a></p><p>图示1：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143755.png" alt="image-20220317235922776"></p><p>图示2：</p><p>第一轮操作：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143706.png" alt="image-20221117205612230"></p><p>第二轮操作：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143990.png" alt="image-20221117205719427"></p><h4 id="6-6-5-内部排序性能比较与选择"><a href="#6-6-5-内部排序性能比较与选择" class="headerlink" title="6.6.5 内部排序性能比较与选择"></a>6.6.5 内部排序性能比较与选择</h4><ul><li><p>性能比较</p><ul><li><strong>从平均时间而言</strong>：快速排序最佳。但在最坏情况下时间性能不如堆排序和归并排序。</li><li><strong>从算法简单性看</strong>：由于直接选择排序、直接插入排序和冒泡排序的算法比较简单，将其认为是简单算法。对于Shell排序、堆排序、快速排序和归并排序算法，其算法比较复杂，认为是复杂排序。</li><li><strong>从稳定性看</strong>：直接插入排序、冒泡排序和归并排序时稳定的；而直接选择排序、快速排序、 Shell排序和堆排序是不稳定排序</li><li><strong>从待排序的记录数n的大小看</strong>，n较小时，宜采用简单排序；而n较大时宜采用改进排序。</li></ul></li><li><p>选择</p><ul><li>若n较小(如n≤50)，可采用直接插入或直接选择排序。<br>当记录规模较小时，直接插入排序较好；否则因为直接选择移动的记录数少于直接插入，应选直接选择排序为宜。</li><li>若文件初始状态基本有序(指正序)，则应选用直接插入、冒泡或随机的快速排序为宜；</li><li>若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。</li></ul></li></ul><h2 id="7-Arrays工具类的使用"><a href="#7-Arrays工具类的使用" class="headerlink" title="7. Arrays工具类的使用"></a>7. Arrays工具类的使用</h2><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法。 比如：</p><ul><li><code>数组元素拼接</code><ul><li>static String toString(int[] a) ：字符串表示形式由数组的元素列表组成，括在方括号（”[]”）中。相邻元素用字符 “, “（逗号加空格）分隔。形式为：[元素1，元素2，元素3。。。]</li><li>static String toString(Object[] a) ：字符串表示形式由数组的元素列表组成，括在方括号（”[]”）中。相邻元素用字符 “, “（逗号加空格）分隔。元素将自动调用自己从Object继承的toString方法将对象转为字符串进行拼接，如果没有重写，则返回类型@hash值，如果重写则按重写返回的字符串进行拼接。</li></ul></li><li><code>数组排序</code> <strong>sort</strong><ul><li>static void sort(int[] a) ：将a数组按照从小到大进行排序</li><li>static void sort(int[] a, int fromIndex, int toIndex) ：将a数组的[fromIndex, toIndex)部分按照升序排列</li><li>static void sort(Object[] a) ：根据元素的自然顺序对指定对象数组按升序进行排序。</li><li>static <T> void sort(T[] a, Comparator&lt;? super T&gt; c) ：根据指定比较器产生的顺序对指定对象数组进行排序。</T></li></ul></li><li><code>数组元素的二分查找</code> <strong>binarySearch</strong><ul><li>static int binarySearch(int[] a, int key)  、static int binarySearch(Object[] a, Object key) ：要求数组有序，在数组中查找key是否存在，如果存在返回第一次找到的下标，不存在返回负数。</li></ul></li><li><code>数组的复制</code> <strong>copyof</strong><ul><li>static int[] copyOf(int[] original, int newLength)  ：根据original原数组复制一个长度为newLength的新数组，并返回新数组</li><li>static <T> T[] copyOf(T[] original,int newLength)：根据original原数组复制一个长度为newLength的新数组，并返回新数组</T></li><li>static int[] copyOfRange(int[] original, int from, int to) ：复制original原数组的[from,to)构成新数组，并返回新数组</li><li>static <T> T[] copyOfRange(T[] original,int from,int to)：复制original原数组的[from,to)构成新数组，并返回新数组</T></li></ul></li><li><code>比较两个数组是否相等</code> <strong>equals</strong><ul><li>static boolean equals(int[] a, int[] a2) ：比较两个数组的长度、元素是否完全相同</li><li>static boolean equals(Object[] a,Object[] a2)：比较两个数组的长度、元素是否完全相同</li></ul></li><li><code>填充数组</code> <strong>fill</strong><ul><li>static void fill(int[] a, int val) ：用val值填充整个a数组</li><li>static void fill(Object[] a,Object val)：用val对象填充整个a数组</li><li>static void fill(int[] a, int fromIndex, int toIndex, int val)：将a数组[fromIndex,toIndex)部分填充为val值</li><li>static void fill(Object[] a, int fromIndex, int toIndex, Object val) ：将a数组[fromIndex,toIndex)部分填充为val对象</li></ul></li></ul><p>举例：java.util.Arrays类的sort()方法提供了数组元素排序功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前"</span> + Arrays.toString(arr));</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">"排序后"</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-数组中的常见异常"><a href="#8-数组中的常见异常" class="headerlink" title="8. 数组中的常见异常"></a>8. 数组中的常见异常</h2><h3 id="8-1-数组角标越界异常"><a href="#8-1-数组角标越界异常" class="headerlink" title="8.1 数组角标越界异常"></a>8.1 数组角标越界异常</h3><p>当访问数组元素时，下标指定超出[0, 数组名.length-1]的范围时，就会报数组下标越界异常：ArrayIndexOutOfBoundsException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayIndexOutOfBoundsException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">       <span class="comment">// System.out.println("最后一个元素：" + arr[3]);//错误，下标越界</span></span><br><span class="line">      <span class="comment">//  System.out.println("最后一个元素：" + arr[arr.length]);//错误，下标越界</span></span><br><span class="line">        System.out.println(<span class="string">"最后一个元素："</span> + arr[arr.length-<span class="number">1</span>]);<span class="comment">//对</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出 <code>ArrayIndexOutOfBoundsException</code>  数组越界异常。在开发中，数组的越界异常是<strong>不能出现</strong>的，一旦出现了，就必须要修改我们编写的代码。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143068.jpg" alt></p><h3 id="8-2-空指针异常"><a href="#8-2-空指针异常" class="headerlink" title="8.2 空指针异常"></a>8.2 空指针异常</h3><p>观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNullPointerException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line"></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为此时数组的每一行还未分配具体存储元素的空间，此时arr[0]是null，此时访问arr[0][0]会抛出<code>NullPointerException</code> 空指针异常。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202310212143127.jpg" alt></p><p><strong>空指针异常在内存图中的表现</strong></p><p><img src=".images/1572338767825-1647708157678.png" alt="1572338767825"></p><p><strong>小结：空指针异常情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例一：</span></span><br><span class="line"><span class="comment">//int[] arr1 = new int[10];</span></span><br><span class="line"><span class="comment">//arr1 = null;</span></span><br><span class="line"><span class="comment">//System.out.println(arr1[9]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//举例二：</span></span><br><span class="line"><span class="comment">//int[][] arr2 = new int[5][];</span></span><br><span class="line"><span class="comment">////arr2[3] = new int[10];</span></span><br><span class="line"><span class="comment">//System.out.println(arr2[3][3]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//举例三：</span></span><br><span class="line">String[] arr3 = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">System.out.println(arr3[<span class="number">2</span>].toString());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第01章-Java语言概述&quot;&gt;&lt;a href=&quot;#第01章-Java语言概述&quot; class=&quot;headerlink&quot; title=&quot;第01章_Java语言概述&quot;&gt;&lt;/a&gt;第01章_Java语言概述&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-Java知识脉络图&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>尚硅谷JAVA基础</title>
    <link href="https://larkkkkkkk.github.io/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7java/"/>
    <id>https://larkkkkkkk.github.io/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7java/</id>
    <published>2023-09-19T02:25:04.000Z</published>
    <updated>2023-10-20T06:38:24.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA学习路线"><a href="#JAVA学习路线" class="headerlink" title="JAVA学习路线"></a>JAVA学习路线</h1><h2 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA学习路线&quot;&gt;&lt;a href=&quot;#JAVA学习路线&quot; class=&quot;headerlink&quot; title=&quot;JAVA学习路线&quot;&gt;&lt;/a&gt;JAVA学习路线&lt;/h1&gt;&lt;h2 id=&quot;JAVA基础&quot;&gt;&lt;a href=&quot;#JAVA基础&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>pytorch小土堆</title>
    <link href="https://larkkkkkkk.github.io/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/"/>
    <id>https://larkkkkkkk.github.io/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/</id>
    <published>2023-07-18T09:20:31.000Z</published>
    <updated>2023-10-21T13:47:08.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习链接"><a href="#学习链接" class="headerlink" title="学习链接"></a>学习链接</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.哔哩哔哩视频</span><br><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1hE411t7RN?p&#x3D;18&amp;spm_id_from&#x3D;pageDriver&amp;vd_source&#x3D;f2ebbaf7e4283edae08088dbbbaff299</span><br><span class="line"></span><br><span class="line">2.pytorch官网</span><br><span class="line">https:&#x2F;&#x2F;pytorch.org&#x2F;docs&#x2F;stable&#x2F;generated&#x2F;torch.nn.functional.conv2d.html#torch.nn.functional.conv2d</span><br><span class="line"></span><br><span class="line">3.小土堆的资料链接</span><br><span class="line">土堆B站视频课件：https:&#x2F;&#x2F;pan.baidu.com&#x2F;wap&#x2F;init?surl&#x3D;moZb_eKmVCcRHS49IPKHQw#&#x2F; 提取码：t3st</span><br><span class="line"></span><br><span class="line">4.我自己电脑是tuduipytorch2环境(python3.8)</span><br><span class="line"></span><br><span class="line">5.配置pytorch用的链接里面的11.3版本</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_45334223&#x2F;article&#x2F;details&#x2F;128772572?ops_request_misc&#x3D;%257B%2522request%255Fid%2522%253A%2522168974940216800227485583%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id&#x3D;168974940216800227485583&amp;biz_id&#x3D;0&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2~blog~top_positive~default-2-128772572-null-null.268^v1^control&amp;utm_term&#x3D;%E5%AE%89%E8%A3%85pytorch&amp;spm&#x3D;1018.2226.3001.4450</span><br></pre></td></tr></table></figure><h1 id="p16神经网络的基本骨架-nn-Module"><a href="#p16神经网络的基本骨架-nn-Module" class="headerlink" title="p16神经网络的基本骨架(nn.Module)"></a>p16神经网络的基本骨架(nn.Module)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line"></span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()  #重写父类</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        output &#x3D; input + 1  #计数</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">tudui &#x3D; Tudui()</span><br><span class="line">x &#x3D; torch.tensor(1.0)</span><br><span class="line">output &#x3D; tudui(x)</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/1.png" alt></p><hr><h1 id="p17卷积操作"><a href="#p17卷积操作" class="headerlink" title="p17卷积操作"></a>p17卷积操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line"></span><br><span class="line">#输入图像 5*5</span><br><span class="line">input&#x3D;torch.tensor([[1,2,0,3,1],</span><br><span class="line">                    [0,1,2,3,1],</span><br><span class="line">                    [1,2,1,0,0],</span><br><span class="line">                    [5,2,3,1,1],</span><br><span class="line">                    [2,1,0,1,1]])</span><br><span class="line">#卷积核 3*3</span><br><span class="line">kernel&#x3D;torch.tensor([1,2,1],</span><br><span class="line">                    [0,1,0],</span><br><span class="line">                    [2,1,0])</span><br><span class="line"></span><br><span class="line">#将输入图像更改为1个数据1个通道  高度5宽度5      input要求为(minibatch,in_channels,iH,iW)</span><br><span class="line">input&#x3D;torch.reshape(input,(1,1,5,5))</span><br><span class="line">kernel&#x3D;kernel.reshape(input,(1,1,3,3))</span><br><span class="line"></span><br><span class="line">print(input.shape)</span><br><span class="line">print(kernel.shape)</span><br><span class="line"></span><br><span class="line">#步长为1 就是每次移动一位</span><br><span class="line">output&#x3D;F.conv2d(input,kernel,stride&#x3D;1)</span><br><span class="line">print(output)</span><br><span class="line"></span><br><span class="line">output2&#x3D;F.conv2d(input,kernel,stride&#x3D;2)</span><br><span class="line">print(output2)</span><br><span class="line"></span><br><span class="line">#填充为1</span><br><span class="line">output3&#x3D;F.conv2d(input,kernel,stride&#x3D;1,padding&#x3D;1)</span><br><span class="line">print(output3)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/2.png" alt></p><hr><h1 id="p18卷积层"><a href="#p18卷积层" class="headerlink" title="p18卷积层"></a>p18卷积层</h1><p><strong>动画</strong><br><a href="https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md" target="_blank" rel="noopener" title="卷积层参数的影响">https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">from torch.nn import Conv2d</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line">from torch import nn</span><br><span class="line">dataset&#x3D;torchvision.datasets.CIFAR10(&quot;..&#x2F;data&quot;,train&#x3D;False,transform&#x3D;torchvision.transforms.ToTensor(),download&#x3D;True)</span><br><span class="line">dataloader&#x3D;DataLoader(dataset,batch_size&#x3D;64)</span><br><span class="line"></span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui,self).__init__()  #重写父类</span><br><span class="line">        self.conv1&#x3D;Conv2d(in_channels&#x3D;3,out_channels&#x3D;6,kernel_size&#x3D;3,stride&#x3D;1,padding&#x3D;0)  #设置一个卷积层</span><br><span class="line"></span><br><span class="line">    def forward(self,x):</span><br><span class="line">        x&#x3D;self.conv1(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">tudui&#x3D;Tudui()</span><br><span class="line">print(tudui)  #conv1:conv2d(3,6,kernel_size&#x3D;(3,3),stride&#x3D;(1,1))</span><br><span class="line"></span><br><span class="line">for data in dataloader:</span><br><span class="line">    imgs,target&#x3D;data</span><br><span class="line">    output&#x3D;tudui(imgs) #把数据集的照片放进去</span><br><span class="line">    #图片开始的格式</span><br><span class="line">    print(imgs.shape) #【64,4,32，32】</span><br><span class="line">    #图片最终的格式</span><br><span class="line">    print(output.shape)#【64,3,30，30】</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/3.png" alt></p><hr><h1 id="p19最大池化层"><a href="#p19最大池化层" class="headerlink" title="p19最大池化层"></a>p19最大池化层</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.nn import MaxPool2d</span><br><span class="line"></span><br><span class="line">#输入图像 5*5</span><br><span class="line">input&#x3D;torch.tensor([[1,2,0,3,1],</span><br><span class="line">                    [0,1,2,3,1],</span><br><span class="line">                    [1,2,1,0,0],</span><br><span class="line">                    [5,2,3,1,1],</span><br><span class="line">                    [2,1,0,1,1]],dtype&#x3D;torch.float32)</span><br><span class="line"></span><br><span class="line">input &#x3D; torch.reshape(input, (-1, 1, 5, 5))  #-1就是根据其他设置，自动计算</span><br><span class="line">print(input)</span><br><span class="line">print(input.shape)</span><br><span class="line"></span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui,self).__init__()  #重写父类</span><br><span class="line">        #池化层就是减少参数 让模型更简略更小</span><br><span class="line">        self.maxpool1&#x3D;MaxPool2d(kernel_size&#x3D;3,ceil_mode&#x3D;True)   #设置一个池化层 ceil_mode&#x3D;True能够保证不够池化核大小的时候可以出结果</span><br><span class="line"></span><br><span class="line">    def forward(self,input):</span><br><span class="line">        output&#x3D;self.maxpool1(input)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">tudui&#x3D;Tudui()</span><br><span class="line">output&#x3D;tudui(input)</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/4.png" alt></p><hr><h1 id="p20非线性激活"><a href="#p20非线性激活" class="headerlink" title="p20非线性激活"></a>p20非线性激活</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#主要介绍relu和sigmoid</span><br><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.nn import ReLU, Sigmoid</span><br><span class="line"></span><br><span class="line">input&#x3D;torch.tensor([[1,-0.5],</span><br><span class="line">                    [-1,3]])</span><br><span class="line"></span><br><span class="line">input&#x3D;torch.reshape(input,(-1,1,2,2))</span><br><span class="line">print(input)</span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui, self).__init__()</span><br><span class="line">        self.relu1 &#x3D; ReLU()</span><br><span class="line">        self.sigmoid1 &#x3D; Sigmoid()</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        output &#x3D; self.relu1(input)</span><br><span class="line">        #output &#x3D; self.sigmoid1(input)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">tudui &#x3D; Tudui()</span><br><span class="line">output&#x3D;tudui(input)</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/5.png" alt></p><hr><h1 id="p21线性层和其它层介绍"><a href="#p21线性层和其它层介绍" class="headerlink" title="p21线性层和其它层介绍"></a>p21线性层和其它层介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.nn import Linear</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line"></span><br><span class="line">dataset &#x3D; torchvision.datasets.CIFAR10(&quot;..&#x2F;data&quot;, train&#x3D;False, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                       download&#x3D;True)</span><br><span class="line"></span><br><span class="line">dataloader &#x3D; DataLoader(dataset, batch_size&#x3D;64)</span><br><span class="line"></span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui, self).__init__()</span><br><span class="line">        self.linear1 &#x3D; Linear(196608, 10)  #输入 输出</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        output &#x3D; self.linear1(input) #经过线性层</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line">tudui &#x3D; Tudui()</span><br><span class="line"></span><br><span class="line">for data in dataloader:</span><br><span class="line">    imgs, targets &#x3D; data</span><br><span class="line">    print(imgs.shape)</span><br><span class="line">    output &#x3D; torch.flatten(imgs)  #展开成一行</span><br><span class="line">    print(output.shape)</span><br><span class="line">    output &#x3D; tudui(output)</span><br><span class="line">    print(output.shape)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/6.png" alt></p><hr><h1 id="p22实战和sequential的使用"><a href="#p22实战和sequential的使用" class="headerlink" title="p22实战和sequential的使用"></a>p22实战和sequential的使用</h1><p><strong>要参考的模型图:</strong></p><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/8.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.nn import Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line">#from torch.utils.tensorboard import SummaryWriter</span><br><span class="line"></span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui, self).__init__()</span><br><span class="line">        #直接做成一个系列</span><br><span class="line">        self.model1 &#x3D; Sequential(</span><br><span class="line">            Conv2d(in_channels&#x3D;3, out_channels&#x3D;32,kernel_size&#x3D;5, padding&#x3D;2),  #padding&#x3D;2是根据输入输出的HW公式推出来   输入3个通道 输出维度32池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Conv2d(in_channels&#x3D;32, out_channels&#x3D;32,kernel_size&#x3D;5, padding&#x3D;2), #padding&#x3D;2是根据输入输出的HW公式推出来   输入32个通道 输出维度32 池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Conv2d(in_channels&#x3D;32, out_channels&#x3D;64,kernel_size&#x3D;5, padding&#x3D;2), #padding&#x3D;2是根据输入输出的HW公式推出来   输入32个通道 输出维度64 池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Flatten(),  #展开</span><br><span class="line">            Linear(1024, 64),  #展开之后64*4*4&#x3D;1024个 一共有64个</span><br><span class="line">            Linear(64, 10)  #展开之后64个 一共10个</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.model1(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">@初始化看看</span><br><span class="line">tudui &#x3D; Tudui()</span><br><span class="line">print(tudui)</span><br><span class="line"></span><br><span class="line">#假设有一个</span><br><span class="line">input &#x3D; torch.ones((64, 3, 32, 32)) #相当于64张图 每张图有3个通道 32*32的</span><br><span class="line">output &#x3D; tudui(input)</span><br><span class="line">print(output.shape)</span><br><span class="line"></span><br><span class="line">#可视化</span><br><span class="line">#writer &#x3D; SummaryWriter(&quot;..&#x2F;logs_seq&quot;)</span><br><span class="line">#writer.add_graph(tudui, input)</span><br><span class="line">#writer.close()</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/7.png" alt></p><hr><h1 id="p23损失函数-误差-和反向传播-计算误差提供可以优化的点"><a href="#p23损失函数-误差-和反向传播-计算误差提供可以优化的点" class="headerlink" title="p23损失函数(误差)和反向传播(计算误差提供可以优化的点)"></a>p23损失函数(误差)和反向传播(计算误差提供可以优化的点)</h1><h2 id="两种损失函数和交叉熵"><a href="#两种损失函数和交叉熵" class="headerlink" title="两种损失函数和交叉熵"></a>两种损失函数和交叉熵</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">from torch.nn import L1Loss</span><br><span class="line">from torch import nn</span><br><span class="line"></span><br><span class="line">#输入和目标</span><br><span class="line">inputs &#x3D; torch.tensor([1, 2, 3], dtype&#x3D;torch.float32)</span><br><span class="line">targets &#x3D; torch.tensor([1, 2, 5], dtype&#x3D;torch.float32)</span><br><span class="line">#规定想要的输入和目标的结果</span><br><span class="line">inputs &#x3D; torch.reshape(inputs, (1, 1, 1, 3))  #1个样本 通道为1 宽度为1*3</span><br><span class="line">targets &#x3D; torch.reshape(targets, (1, 1, 1, 3))</span><br><span class="line"></span><br><span class="line">loss&#x3D;L1Loss()</span><br><span class="line">result&#x3D;loss(inputs,targets) #tensor(0.6667)</span><br><span class="line">print(result) #[(1-1)+(2-2)+(5-3)]&#x2F;3</span><br><span class="line"></span><br><span class="line">loss2&#x3D;nn.MSELoss()</span><br><span class="line">result2&#x3D;loss2(inputs,targets) #tensor(1.3333)</span><br><span class="line">print(result2) #[(1-1)+(2-2)+(5-3)^2]&#x2F;3</span><br><span class="line"></span><br><span class="line">#交叉熵</span><br><span class="line">#使用在分类问题时候,有很多个类别</span><br><span class="line">x&#x3D;torch.tensor([0.1, 0.2, 0.3])</span><br><span class="line">y&#x3D;torch.tensor([1])</span><br><span class="line">x&#x3D;torch.reshape(x,(1, 3))  #3类</span><br><span class="line">loss_cross&#x3D;nn.CrossEntropyLoss()</span><br><span class="line">result3&#x3D;loss_cross(x,y) #tensor(1.1019)</span><br><span class="line">print(result3)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/9.png" alt></p><h2 id="带网络的"><a href="#带网络的" class="headerlink" title="带网络的"></a>带网络的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torchvision</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line"></span><br><span class="line">#数据集</span><br><span class="line">dataset &#x3D; torchvision.datasets.CIFAR10(&quot;..&#x2F;data&quot;, train&#x3D;False, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                       download&#x3D;True)</span><br><span class="line"></span><br><span class="line">dataloader &#x3D; DataLoader(dataset, batch_size&#x3D;1)</span><br><span class="line"></span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui, self).__init__()</span><br><span class="line">        #直接做成一个系列</span><br><span class="line">        self.model1 &#x3D; Sequential(</span><br><span class="line">            Conv2d(in_channels&#x3D;3, out_channels&#x3D;32,kernel_size&#x3D;5, padding&#x3D;2),  #padding&#x3D;2是根据输入输出的HW公式推出来   输入3个通道 输出维度32池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Conv2d(in_channels&#x3D;32, out_channels&#x3D;32,kernel_size&#x3D;5, padding&#x3D;2), #padding&#x3D;2是根据输入输出的HW公式推出来   输入32个通道 输出维度32 池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Conv2d(in_channels&#x3D;32, out_channels&#x3D;64,kernel_size&#x3D;5, padding&#x3D;2), #padding&#x3D;2是根据输入输出的HW公式推出来   输入32个通道 输出维度64 池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Flatten(),  #展开</span><br><span class="line">            Linear(1024, 64),  #展开之后64*4*4&#x3D;1024个 一共有64个</span><br><span class="line">            Linear(64, 10)  #展开之后64个 一共10个</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.model1(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">#交叉熵</span><br><span class="line">loss &#x3D; nn.CrossEntropyLoss()</span><br><span class="line">tudui &#x3D; Tudui()</span><br><span class="line">for data in dataloader:</span><br><span class="line">    imgs, targets &#x3D; data</span><br><span class="line">    outputs &#x3D; tudui(imgs)</span><br><span class="line">    result_loss &#x3D; loss(outputs, targets)</span><br><span class="line">    print(result_loss)</span><br><span class="line">    print(&quot;ok&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/10.png" alt></p><hr><h1 id="p24优化器-让loss变小"><a href="#p24优化器-让loss变小" class="headerlink" title="p24优化器(让loss变小)"></a>p24优化器(让loss变小)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch.optim</span><br><span class="line">import torchvision</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.nn import Sequential, Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line"></span><br><span class="line">#数据集</span><br><span class="line">dataset &#x3D; torchvision.datasets.CIFAR10(&quot;..&#x2F;data&quot;, train&#x3D;False, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                       download&#x3D;True)</span><br><span class="line"></span><br><span class="line">dataloader &#x3D; DataLoader(dataset, batch_size&#x3D;1)</span><br><span class="line"></span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui, self).__init__()</span><br><span class="line">        #直接做成一个系列</span><br><span class="line">        self.model1 &#x3D; Sequential(</span><br><span class="line">            Conv2d(in_channels&#x3D;3, out_channels&#x3D;32,kernel_size&#x3D;5, padding&#x3D;2),  #padding&#x3D;2是根据输入输出的HW公式推出来   输入3个通道 输出维度32池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Conv2d(in_channels&#x3D;32, out_channels&#x3D;32,kernel_size&#x3D;5, padding&#x3D;2), #padding&#x3D;2是根据输入输出的HW公式推出来   输入32个通道 输出维度32 池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Conv2d(in_channels&#x3D;32, out_channels&#x3D;64,kernel_size&#x3D;5, padding&#x3D;2), #padding&#x3D;2是根据输入输出的HW公式推出来   输入32个通道 输出维度64 池化核5*5</span><br><span class="line">            MaxPool2d(2),  #默认池化层的stride步长&#x3D;池化核维度</span><br><span class="line">            Flatten(),  #展开</span><br><span class="line">            Linear(1024, 64),  #展开之后64*4*4&#x3D;1024个 一共有64个</span><br><span class="line">            Linear(64, 10)  #展开之后64个 一共10个</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.model1(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">#交叉熵</span><br><span class="line">loss &#x3D; nn.CrossEntropyLoss()</span><br><span class="line">tudui &#x3D; Tudui()</span><br><span class="line"></span><br><span class="line">#设置优化器</span><br><span class="line">optim&#x3D;torch.optim.SGD(tudui.parameters(),lr&#x3D;0.01) #入门设置两个参数 模型参数和学习速率</span><br><span class="line"></span><br><span class="line">for epoch in range(20):  #套循环</span><br><span class="line">    wucha&#x3D;0.0</span><br><span class="line">    for data in dataloader:</span><br><span class="line">        imgs, targets &#x3D; data</span><br><span class="line">        outputs &#x3D; tudui(imgs)</span><br><span class="line">        result_loss &#x3D; loss(outputs, targets)</span><br><span class="line">        </span><br><span class="line">#增加优化器的部分</span><br><span class="line">        optim.zero_grad() #每次循环梯度清0</span><br><span class="line">        result_loss.backward()  #获取每个data计算grad</span><br><span class="line">        optim.step()  #进行优化  --&gt;最终将loss差距变小</span><br><span class="line">        #计算每一轮误差优化多少</span><br><span class="line">        wucha&#x3D;wucha+result_loss</span><br><span class="line"></span><br><span class="line">    print(result_loss)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/11.png" alt></p><hr><h1 id="p25现有模型"><a href="#p25现有模型" class="headerlink" title="p25现有模型"></a>p25现有模型</h1><h2 id="使用和修改"><a href="#使用和修改" class="headerlink" title="使用和修改"></a>使用和修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torchvision</span><br><span class="line">from torch import nn</span><br><span class="line"></span><br><span class="line">vgg16_false &#x3D; torchvision.models.vgg16(pretrained&#x3D;False)  #会下载到c盘 我的到C:\Users\larkkkkkkk\.cache\torch\hub\checkpoints</span><br><span class="line">vgg16_true &#x3D; torchvision.models.vgg16(pretrained&#x3D;True)</span><br><span class="line"></span><br><span class="line">print(vgg16_true)</span><br><span class="line"></span><br><span class="line">train_data &#x3D; torchvision.datasets.CIFAR10(&#39;.&#x2F;data&#39;, train&#x3D;True, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download&#x3D;True)</span><br><span class="line"></span><br><span class="line">#修改点！！！</span><br><span class="line"># (6): Linear(in_features&#x3D;4096, out_features&#x3D;1000, bias&#x3D;True)</span><br><span class="line"></span><br><span class="line">#要么加一层线性层输出10</span><br><span class="line">vgg16_true.add_module(&#39;add_Linear&#39;,nn.Linear(1000,10))     #在原来的classifier外面加</span><br><span class="line">#vgg16_true.classifier.add_module(&#39;add_Linear&#39;,nn.Linear(1000,10))  #在原来的classifier里面加</span><br><span class="line">print(vgg16_true)</span><br><span class="line"></span><br><span class="line">#要么将输出层改为10</span><br><span class="line">vgg16_false.classifier[6]&#x3D;nn.Linear(4096,10)</span><br><span class="line">print(vgg16_false)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/12.png" alt></p><h2 id="p26保存"><a href="#p26保存" class="headerlink" title="p26保存"></a>p26保存</h2><h3 id="保存方法1-模型结构-模型参数"><a href="#保存方法1-模型结构-模型参数" class="headerlink" title="保存方法1(模型结构+模型参数)"></a>保存方法1(模型结构+模型参数)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line"></span><br><span class="line">vgg16&#x3D; torchvision.models.vgg16(pretrained&#x3D;False)  #会下载到c盘 我的到C:\Users\larkkkkkkk\.cache\torch\hub\checkpoints</span><br><span class="line"></span><br><span class="line">#保存</span><br><span class="line">torch.save(vgg16,&quot;vgg16_method1.pth&quot;)  #模型结构+模型参数</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/13.png" alt></p><h3 id="保存方法2-模型参数"><a href="#保存方法2-模型参数" class="headerlink" title="保存方法2(模型参数)"></a>保存方法2(模型参数)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line"></span><br><span class="line">vgg16&#x3D; torchvision.models.vgg16(pretrained&#x3D;False)  #会下载到c盘 我的到C:\Users\larkkkkkkk\.cache\torch\hub\checkpoints</span><br><span class="line"></span><br><span class="line">#保存</span><br><span class="line">torch.save(vgg16.state_dict(),&quot;vgg16_method2.pth&quot;) #模型参数  是字典形式!!!!</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/15.png" alt></p><h2 id="p26读取"><a href="#p26读取" class="headerlink" title="p26读取"></a>p26读取</h2><h3 id="读取方法1-load"><a href="#读取方法1-load" class="headerlink" title="读取方法1(load)"></a>读取方法1(load)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">##读取方式1</span><br><span class="line">model&#x3D;torch.load(&quot;vgg16_method1.pth&quot;)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/14.png" alt></p><h3 id="读取方法2-考虑字典形式"><a href="#读取方法2-考虑字典形式" class="headerlink" title="读取方法2(考虑字典形式)"></a>读取方法2(考虑字典形式)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line"></span><br><span class="line">#读取方式2</span><br><span class="line">vgg16&#x3D;torchvision.models.vgg16(pretrained&#x3D;False)</span><br><span class="line">vgg16.load_state_dict(torch.load(&quot;vgg16_method2.pth&quot;))</span><br><span class="line">print(vgg16)</span><br><span class="line">print(&quot;-----------------------------------------------------------------&quot;)</span><br><span class="line">#如果不使用加载dict 那么输出就是字典形式</span><br><span class="line">model2&#x3D;torch.load(&quot;vgg16_method2.pth&quot;)</span><br><span class="line">print(model2)</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/16.png" alt></p><hr><h1 id="p27完整模型训练套路"><a href="#p27完整模型训练套路" class="headerlink" title="p27完整模型训练套路"></a>p27完整模型训练套路</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torchvision</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line">from model import *  # 引入model.py里的模型</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line"></span><br><span class="line"># 1.数据集</span><br><span class="line">##1.1准备数据集</span><br><span class="line">train_data &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;True, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download&#x3D;True)</span><br><span class="line">test_data &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;False, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download&#x3D;True)</span><br><span class="line">##1.2查看数据集内容</span><br><span class="line">train_data_size &#x3D; len(train_data)</span><br><span class="line">test_data_size &#x3D; len(test_data)</span><br><span class="line">print(&quot;训练集长度:&quot;, train_data_size)  # 训练集长度: 50000</span><br><span class="line">print(&quot;测试集长度:&quot;, test_data_size)  # 测试集长度: 10000</span><br><span class="line">##1.3加载数据集</span><br><span class="line">train_dataloader &#x3D; DataLoader(train_data, batch_size&#x3D;64)</span><br><span class="line">test_dataloader &#x3D; DataLoader(test_data, batch_size&#x3D;64)</span><br><span class="line"></span><br><span class="line"># 2.创建网络模型</span><br><span class="line">tudui &#x3D; Tudui()  # 引用model.py文件下的模型</span><br><span class="line">##2.1损失函数</span><br><span class="line">loss_fn &#x3D; nn.CrossEntropyLoss()</span><br><span class="line">##2.2优化器(反向传播时候用)</span><br><span class="line">optimizer &#x3D; torch.optim.SGD(tudui.parameters(), lr&#x3D;0.01)</span><br><span class="line"></span><br><span class="line"># 3.训练网络</span><br><span class="line">##3.1记录训练的次数</span><br><span class="line">total_train_step &#x3D; 0</span><br><span class="line">##3.2记录测试的次数</span><br><span class="line">total_test_step &#x3D; 0</span><br><span class="line">##3.3训练的轮数</span><br><span class="line">epoch &#x3D; 10</span><br><span class="line"></span><br><span class="line"># 添加tensorboard</span><br><span class="line">writer &#x3D; SummaryWriter(&quot;.&#x2F;logs_train&quot;)</span><br><span class="line"></span><br><span class="line">for i in range(epoch):</span><br><span class="line">    print(&quot;-------第 &#123;&#125; 轮训练开始-------&quot;.format(i + 1))</span><br><span class="line">    # 训练</span><br><span class="line">    tudui.train()  #有些特殊层需要调用(一般写上去也没事)</span><br><span class="line">    for data in train_dataloader:</span><br><span class="line">        imgs, targets &#x3D; data  # 图片和标签</span><br><span class="line">        outputs &#x3D; tudui(imgs)</span><br><span class="line">        loss &#x3D; loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        # 优化器</span><br><span class="line">        optimizer.zero_grad()  # 每一轮梯度清0</span><br><span class="line">        loss.backward()  # 反向传播 计算出要优化的值</span><br><span class="line">        optimizer.step()  # 优化器优化</span><br><span class="line"></span><br><span class="line">        total_train_step &#x3D; total_train_step + 1</span><br><span class="line">        if total_train_step % 100 &#x3D;&#x3D; 0:</span><br><span class="line">            print(&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;.format(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(&quot;train_loss&quot;, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    # 测试</span><br><span class="line">    tudui.eval()  #有些特殊层需要调用(一般写上去也没事)</span><br><span class="line">    total_test_loss &#x3D; 0  #整体loss</span><br><span class="line">    total_accuracy &#x3D; 0  #整体准确率</span><br><span class="line">    with torch.no_grad():  #在训练之后没有梯度了才可以进循环</span><br><span class="line">        for data in test_dataloader:</span><br><span class="line">            imgs, targets &#x3D; data  # 图片和标签</span><br><span class="line">            outputs &#x3D; tudui(imgs)</span><br><span class="line">            # 一部分数据的损失</span><br><span class="line">            loss &#x3D; loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss &#x3D; total_test_loss + loss.item()  # 每次损失增加</span><br><span class="line">            accuracy &#x3D; (outputs.argmax(1) &#x3D;&#x3D; targets).sum()  #整体准确率 用argmax可以判断[False,True].sum()&#x3D;1</span><br><span class="line">            total_accuracy &#x3D; total_accuracy + accuracy</span><br><span class="line"></span><br><span class="line">    print(&quot;整体测试集上的Loss: &#123;&#125;&quot;.format(total_test_loss))</span><br><span class="line">    print(&quot;整体测试集上的正确率: &#123;&#125;&quot;.format(total_accuracy &#x2F; test_data_size))</span><br><span class="line">    writer.add_scalar(&quot;test_loss&quot;, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(&quot;test_accuracy&quot;, total_accuracy &#x2F; test_data_size, total_test_step)</span><br><span class="line">    total_test_step &#x3D; total_test_step + 1</span><br><span class="line"></span><br><span class="line">    torch.save(tudui, &quot;tudui_&#123;&#125;.pth&quot;.format(i))</span><br><span class="line">    print(&quot;模型已保存&quot;)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/17.png" alt></p><hr><h1 id="p30利用GPU训练"><a href="#p30利用GPU训练" class="headerlink" title="p30利用GPU训练"></a>p30利用GPU训练</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">在上一轮的代码中添加gpu训练</span><br></pre></td></tr></table></figure><p><strong>两者的区别和加入的位置:</strong></p><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/20.png" alt></p><h2 id="cuda"><a href="#cuda" class="headerlink" title=".cuda()"></a>.cuda()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torchvision</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line">from model import *  # 引入model.py里的模型</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line"></span><br><span class="line"># 1.数据集</span><br><span class="line">##1.1准备数据集</span><br><span class="line">train_data &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;True, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download&#x3D;True)</span><br><span class="line">test_data &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;False, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download&#x3D;True)</span><br><span class="line">##1.2查看数据集内容</span><br><span class="line">train_data_size &#x3D; len(train_data)</span><br><span class="line">test_data_size &#x3D; len(test_data)</span><br><span class="line">print(&quot;训练集长度:&quot;, train_data_size)  # 训练集长度: 50000</span><br><span class="line">print(&quot;测试集长度:&quot;, test_data_size)  # 测试集长度: 10000</span><br><span class="line">##1.3加载数据集</span><br><span class="line">train_dataloader &#x3D; DataLoader(train_data, batch_size&#x3D;64)</span><br><span class="line">test_dataloader &#x3D; DataLoader(test_data, batch_size&#x3D;64)</span><br><span class="line"></span><br><span class="line"># 2.创建网络模型</span><br><span class="line">##2.1搭建神经网络</span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui, self).__init__()</span><br><span class="line">        self.model &#x3D; nn.Sequential(</span><br><span class="line">            nn.Conv2d(3, 32, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Conv2d(32, 32, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Conv2d(32, 64, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(64 * 4 * 4, 64),</span><br><span class="line">            nn.Linear(64, 10)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.model(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">tudui &#x3D; Tudui()  # 引用model.py文件下的模型</span><br><span class="line">tudui&#x3D;tudui.cuda()</span><br><span class="line"></span><br><span class="line">##2.2损失函数</span><br><span class="line">loss_fn &#x3D; nn.CrossEntropyLoss()</span><br><span class="line">loss_fn&#x3D;loss_fn.cuda()</span><br><span class="line"></span><br><span class="line">##2.3优化器(反向传播时候用)</span><br><span class="line">optimizer &#x3D; torch.optim.SGD(tudui.parameters(), lr&#x3D;0.01)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3.训练网络</span><br><span class="line">##3.1记录训练的次数</span><br><span class="line">total_train_step &#x3D; 0</span><br><span class="line">##3.2记录测试的次数</span><br><span class="line">total_test_step &#x3D; 0</span><br><span class="line">##3.3训练的轮数</span><br><span class="line">epoch &#x3D; 10</span><br><span class="line"></span><br><span class="line"># 添加tensorboard</span><br><span class="line">writer &#x3D; SummaryWriter(&quot;.&#x2F;logs_train&quot;)</span><br><span class="line"></span><br><span class="line">for i in range(epoch):</span><br><span class="line">    print(&quot;-------第 &#123;&#125; 轮训练开始-------&quot;.format(i + 1))</span><br><span class="line">    # 训练</span><br><span class="line">    tudui.train()  #有些特殊层需要调用(一般写上去也没事)</span><br><span class="line">    for data in train_dataloader:</span><br><span class="line">        imgs, targets &#x3D; data  # 图片和标签</span><br><span class="line">        imgs&#x3D;imgs.cuda()</span><br><span class="line">        targets&#x3D;targets.cuda()</span><br><span class="line">        outputs &#x3D; tudui(imgs)</span><br><span class="line">        loss &#x3D; loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        # 优化器</span><br><span class="line">        optimizer.zero_grad()  # 每一轮梯度清0</span><br><span class="line">        loss.backward()  # 反向传播 计算出要优化的值</span><br><span class="line">        optimizer.step()  # 优化器优化</span><br><span class="line"></span><br><span class="line">        total_train_step &#x3D; total_train_step + 1</span><br><span class="line">        if total_train_step % 100 &#x3D;&#x3D; 0:</span><br><span class="line">            print(&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;.format(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(&quot;train_loss&quot;, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    # 测试</span><br><span class="line">    tudui.eval()  #有些特殊层需要调用(一般写上去也没事)</span><br><span class="line">    total_test_loss &#x3D; 0  #整体loss</span><br><span class="line">    total_accuracy &#x3D; 0  #整体准确率</span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        for data in test_dataloader:</span><br><span class="line">            imgs, targets &#x3D; data  # 图片和标签</span><br><span class="line">            imgs &#x3D; imgs.cuda()</span><br><span class="line">            targets &#x3D; targets.cuda()</span><br><span class="line">            outputs &#x3D; tudui(imgs)</span><br><span class="line">            # 一部分数据的损失</span><br><span class="line">            loss &#x3D; loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss &#x3D; total_test_loss + loss.item()  # 每次损失增加</span><br><span class="line">            accuracy &#x3D; (outputs.argmax(1) &#x3D;&#x3D; targets).sum()  #整体准确率 用argmax可以判断[False,True].sum()&#x3D;1</span><br><span class="line">            total_accuracy &#x3D; total_accuracy + accuracy</span><br><span class="line"></span><br><span class="line">    print(&quot;整体测试集上的Loss: &#123;&#125;&quot;.format(total_test_loss))</span><br><span class="line">    print(&quot;整体测试集上的正确率: &#123;&#125;&quot;.format(total_accuracy &#x2F; test_data_size))</span><br><span class="line">    writer.add_scalar(&quot;test_loss&quot;, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(&quot;test_accuracy&quot;, total_accuracy &#x2F; test_data_size, total_test_step)</span><br><span class="line">    total_test_step &#x3D; total_test_step + 1</span><br><span class="line"></span><br><span class="line">    torch.save(tudui, &quot;tudui_&#123;&#125;.pth&quot;.format(i))</span><br><span class="line">    print(&quot;模型已保存&quot;)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><strong>更改位置:</strong></p><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/18.png" alt></p><h2 id="torch-device-“cuda-0”"><a href="#torch-device-“cuda-0”" class="headerlink" title=".torch.device(“cuda:0”)"></a>.torch.device(“cuda:0”)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import torchvision</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line">from model import *  # 引入model.py里的模型</span><br><span class="line">from torch import nn</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line"></span><br><span class="line">#设置GPU</span><br><span class="line">device&#x3D;torch.device(&quot;cuda:0&quot;) #要考虑有几张卡</span><br><span class="line"></span><br><span class="line"># 1.数据集</span><br><span class="line">##1.1准备数据集</span><br><span class="line">train_data &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;True, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download&#x3D;True)</span><br><span class="line">test_data &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&quot;..&#x2F;data&quot;, train&#x3D;False, transform&#x3D;torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download&#x3D;True)</span><br><span class="line">##1.2查看数据集内容</span><br><span class="line">train_data_size &#x3D; len(train_data)</span><br><span class="line">test_data_size &#x3D; len(test_data)</span><br><span class="line">print(&quot;训练集长度:&quot;, train_data_size)  # 训练集长度: 50000</span><br><span class="line">print(&quot;测试集长度:&quot;, test_data_size)  # 测试集长度: 10000</span><br><span class="line">##1.3加载数据集</span><br><span class="line">train_dataloader &#x3D; DataLoader(train_data, batch_size&#x3D;64)</span><br><span class="line">test_dataloader &#x3D; DataLoader(test_data, batch_size&#x3D;64)</span><br><span class="line"></span><br><span class="line"># 2.创建网络模型</span><br><span class="line">##2.1搭建神经网络</span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui, self).__init__()</span><br><span class="line">        self.model &#x3D; nn.Sequential(</span><br><span class="line">            nn.Conv2d(3, 32, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Conv2d(32, 32, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Conv2d(32, 64, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(64 * 4 * 4, 64),</span><br><span class="line">            nn.Linear(64, 10)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.model(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">tudui &#x3D; Tudui()  # 引用model.py文件下的模型</span><br><span class="line">#tudui&#x3D;tudui.cuda()</span><br><span class="line">tudui&#x3D;tudui.to(device)</span><br><span class="line"></span><br><span class="line">##2.2损失函数</span><br><span class="line">loss_fn &#x3D; nn.CrossEntropyLoss()</span><br><span class="line">#loss_fn&#x3D;loss_fn.cuda()</span><br><span class="line">loss_fn&#x3D;loss_fn.to(device)</span><br><span class="line"></span><br><span class="line">##2.3优化器(反向传播时候用)</span><br><span class="line">optimizer &#x3D; torch.optim.SGD(tudui.parameters(), lr&#x3D;0.01)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3.训练网络</span><br><span class="line">##3.1记录训练的次数</span><br><span class="line">total_train_step &#x3D; 0</span><br><span class="line">##3.2记录测试的次数</span><br><span class="line">total_test_step &#x3D; 0</span><br><span class="line">##3.3训练的轮数</span><br><span class="line">epoch &#x3D; 10</span><br><span class="line"></span><br><span class="line"># 添加tensorboard</span><br><span class="line">writer &#x3D; SummaryWriter(&quot;.&#x2F;logs_train&quot;)</span><br><span class="line"></span><br><span class="line">for i in range(epoch):</span><br><span class="line">    print(&quot;-------第 &#123;&#125; 轮训练开始-------&quot;.format(i + 1))</span><br><span class="line">    # 训练</span><br><span class="line">    tudui.train()  #有些特殊层需要调用(一般写上去也没事)</span><br><span class="line">    for data in train_dataloader:</span><br><span class="line">        imgs, targets &#x3D; data  # 图片和标签</span><br><span class="line">        #imgs&#x3D;imgs.cuda()</span><br><span class="line">        #targets&#x3D;targets.cuda()</span><br><span class="line">        imgs&#x3D;imgs.to(device)</span><br><span class="line">        targets&#x3D;targets.to(device)</span><br><span class="line">        outputs &#x3D; tudui(imgs)</span><br><span class="line">        loss &#x3D; loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        # 优化器</span><br><span class="line">        optimizer.zero_grad()  # 每一轮梯度清0</span><br><span class="line">        loss.backward()  # 反向传播 计算出要优化的值</span><br><span class="line">        optimizer.step()  # 优化器优化</span><br><span class="line"></span><br><span class="line">        total_train_step &#x3D; total_train_step + 1</span><br><span class="line">        if total_train_step % 100 &#x3D;&#x3D; 0:</span><br><span class="line">            print(&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;.format(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(&quot;train_loss&quot;, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    # 测试</span><br><span class="line">    tudui.eval()  #有些特殊层需要调用(一般写上去也没事)</span><br><span class="line">    total_test_loss &#x3D; 0  #整体loss</span><br><span class="line">    total_accuracy &#x3D; 0  #整体准确率</span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        for data in test_dataloader:</span><br><span class="line">            imgs, targets &#x3D; data  # 图片和标签</span><br><span class="line">            # imgs&#x3D;imgs.cuda()</span><br><span class="line">            # targets&#x3D;targets.cuda()</span><br><span class="line">            imgs &#x3D; imgs.to(device)</span><br><span class="line">            targets &#x3D; targets.to(device)</span><br><span class="line">            outputs &#x3D; tudui(imgs)</span><br><span class="line">            # 一部分数据的损失</span><br><span class="line">            loss &#x3D; loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss &#x3D; total_test_loss + loss.item()  # 每次损失增加</span><br><span class="line">            accuracy &#x3D; (outputs.argmax(1) &#x3D;&#x3D; targets).sum()  #整体准确率 用argmax可以判断[False,True].sum()&#x3D;1</span><br><span class="line">            total_accuracy &#x3D; total_accuracy + accuracy</span><br><span class="line"></span><br><span class="line">    print(&quot;整体测试集上的Loss: &#123;&#125;&quot;.format(total_test_loss))</span><br><span class="line">    print(&quot;整体测试集上的正确率: &#123;&#125;&quot;.format(total_accuracy &#x2F; test_data_size))</span><br><span class="line">    writer.add_scalar(&quot;test_loss&quot;, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(&quot;test_accuracy&quot;, total_accuracy &#x2F; test_data_size, total_test_step)</span><br><span class="line">    total_test_step &#x3D; total_test_step + 1</span><br><span class="line"></span><br><span class="line">    torch.save(tudui, &quot;tudui_&#123;&#125;.pth&quot;.format(i))</span><br><span class="line">    print(&quot;模型已保存&quot;)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><strong>更改位置:</strong></p><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/19.png" alt></p><hr><h1 id="p32完整模型验证套路"><a href="#p32完整模型验证套路" class="headerlink" title="p32完整模型验证套路"></a>p32完整模型验证套路</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line">from PIL import Image</span><br><span class="line">from torch import nn</span><br><span class="line"></span><br><span class="line">#读取图片</span><br><span class="line">image_path &#x3D; &quot;.&#x2F;imgs&#x2F;dog.png&quot;</span><br><span class="line">image &#x3D; Image.open(image_path)</span><br><span class="line">print(image)   #&lt;PIL.PngImagePlugin.PngImageFile image mode&#x3D;RGB size&#x3D;1053x825 at 0x26FB60DF880&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#png格式是四个通道，除了RGB以外还有一个透明度通道</span><br><span class="line">image&#x3D;image.convert(&#39;RGB&#39;)#保留其颜色通道</span><br><span class="line"></span><br><span class="line">transform &#x3D; torchvision.transforms.Compose([torchvision.transforms.Resize((32, 32)),  #网络输入是32*32维</span><br><span class="line">                                            torchvision.transforms.ToTensor()])</span><br><span class="line">image&#x3D;transform(image)</span><br><span class="line">print(image.shape)  #torch.Size([3, 32, 32])</span><br><span class="line"></span><br><span class="line">#模型</span><br><span class="line">class Tudui(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Tudui, self).__init__()</span><br><span class="line">        self.model &#x3D; nn.Sequential(</span><br><span class="line">            nn.Conv2d(3, 32, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Conv2d(32, 32, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Conv2d(32, 64, 5, 1, 2),</span><br><span class="line">            nn.MaxPool2d(2),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(64*4*4, 64),</span><br><span class="line">            nn.Linear(64, 10)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.model(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">model &#x3D; torch.load(&quot;tudui_29_gpu.pth&quot;, map_location&#x3D;torch.device(&#39;cpu&#39;))</span><br><span class="line">#print(model)</span><br><span class="line"></span><br><span class="line">#开始验证</span><br><span class="line">#输入时候记得设置batch_size</span><br><span class="line">image &#x3D; torch.reshape(image, (1, 3, 32, 32))</span><br><span class="line">model.eval()  #有些特殊层需要</span><br><span class="line"></span><br><span class="line">with torch.no_grad():</span><br><span class="line">    output &#x3D; model(image)</span><br><span class="line">print(&quot;预测结果是:&quot;,output)</span><br><span class="line"></span><br><span class="line">print(&quot;最大的可能是:&quot;,output.argmax(1))</span><br></pre></td></tr></table></figure><p><img src="/2023/07/18/pytorch%E5%B0%8F%E5%9C%9F%E5%A0%86/D:%5Cblog%5CLarkkkkkkk%5Csource_posts%5Cpytorch%E5%B0%8F%E5%9C%9F%E5%A0%86%5C21.png" alt></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;学习链接&quot;&gt;&lt;a href=&quot;#学习链接&quot; class=&quot;headerlink&quot; title=&quot;学习链接&quot;&gt;&lt;/a&gt;学习链接&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://Larkkkkkkk.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python打包</title>
    <link href="https://larkkkkkkk.github.io/2023/06/04/python%E6%89%93%E5%8C%85/"/>
    <id>https://larkkkkkkk.github.io/2023/06/04/python%E6%89%93%E5%8C%85/</id>
    <published>2023-06-04T12:20:31.000Z</published>
    <updated>2023-06-04T13:37:12.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python打包"><a href="#python打包" class="headerlink" title="python打包"></a>python打包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.pyinstaller</span><br><span class="line">2.</span><br></pre></td></tr></table></figure><h1 id="pyinstaller使用"><a href="#pyinstaller使用" class="headerlink" title="pyinstaller使用"></a>pyinstaller使用</h1><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://blog.csdn.net/weixin_40829804/article/details/129412968?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129412968-blog-105585426.235%5Ev36%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129412968-blog-105585426.235%5Ev36%5Epc_relevant_default_base3&utm_relevant_index=2" target="_blank" rel="noopener" title="参考博客">https://blog.csdn.net/weixin_40829804/article/details/129412968?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129412968-blog-105585426.235%5Ev36%5Epc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129412968-blog-105585426.235%5Ev36%5Epc_relevant_default_base3&amp;utm_relevant_index=2</a></p><h2 id="pyinstaller安装"><a href="#pyinstaller安装" class="headerlink" title="pyinstaller安装"></a>pyinstaller安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install pyinstaller  (在conda环境&#x2F;pycharm进入之后找到解释器位置搜索安装也行)</span><br></pre></td></tr></table></figure><h2 id="pyinstaller遇到的问题"><a href="#pyinstaller遇到的问题" class="headerlink" title="pyinstaller遇到的问题"></a>pyinstaller遇到的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.conda自带的pathlib包和pyinstaller冲突 --&gt;直接 conda remove pathlib</span><br></pre></td></tr></table></figure><p><img src="/2023/06/04/python%E6%89%93%E5%8C%85/remove.png" alt></p><h2 id="打包单个文件步骤"><a href="#打包单个文件步骤" class="headerlink" title="打包单个文件步骤"></a>打包单个文件步骤</h2><ul><li>1.进入代码路径 –&gt;打开终端输入  pyinstaller -F -w API.py</li></ul><p><img src="/2023/06/04/python%E6%89%93%E5%8C%85/step1.png" alt></p><ul><li>2.更新出一个dist文件夹，打开之后出现一个exe文件</li></ul><p><img src="/2023/06/04/python%E6%89%93%E5%8C%85/step2.png" alt></p><h2 id="打包整个项目步骤"><a href="#打包整个项目步骤" class="headerlink" title="打包整个项目步骤"></a>打包整个项目步骤</h2><ul><li>1.进入代码路径 –&gt;打开终端输入  pyi-makespec 要执行的.py</li></ul><p><img src="/2023/06/04/python%E6%89%93%E5%8C%85/step21.png" alt></p><ul><li>2.打开app.spec文件，进行参数修改，主要修改a = Analysis的模块即可，说明如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a &#x3D; Analysis(</span><br><span class="line">   [&#39;app.py&#39;,&#39;app_rating.py&#39;,&#39;config.py&#39;,&#39;exts.py&#39;,&#39;models.py&#39;], </span><br><span class="line">   #要打包的.py文件列表，同级文件不需要添加</span><br><span class="line">   pathex&#x3D;[&#39;D:\Project Management System\Program\beta1.2_Problems&#39;], </span><br><span class="line">   #项目路径</span><br><span class="line">   binaries&#x3D;[],</span><br><span class="line">   datas&#x3D;[(&#39;.&#x2F;templates&#39;,&#39;templates&#39;),(&#39;.&#x2F;static&#39;,&#39;static&#39;)],</span><br><span class="line">   # 程序调用外部pyd、dll文件（二进制文件路径）以数组形式传入,数组第一个参数传本地文件的绝对路径，第二参数传打包文件夹所在路径,打点为根目录;</span><br><span class="line">   hiddenimports&#x3D;[],</span><br><span class="line">   hookspath&#x3D;[],</span><br><span class="line">   hooksconfig&#x3D;&#123;&#125;,</span><br><span class="line">   runtime_hooks&#x3D;[],</span><br><span class="line">   excludes&#x3D;[],</span><br><span class="line">   win_no_prefer_redirects&#x3D;False,</span><br><span class="line">   win_private_assemblies&#x3D;False,</span><br><span class="line">   cipher&#x3D;block_cipher,</span><br><span class="line">   noarchive&#x3D;False,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/2023/06/04/python%E6%89%93%E5%8C%85/step22.png" alt></p><ul><li>3.终端执行 pyinstaller 要执行的.spec</li></ul><p><img src="/2023/06/04/python%E6%89%93%E5%8C%85/step23.png" alt></p><ul><li>4.在与要执行的.py相同的文件路径下，找到dist文件夹，即可找到打包好的app.exe</li></ul><p><img src="/2023/06/04/python%E6%89%93%E5%8C%85/step24.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python打包&quot;&gt;&lt;a href=&quot;#python打包&quot; class=&quot;headerlink&quot; title=&quot;python打包&quot;&gt;&lt;/a&gt;python打包&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pytorch</title>
    <link href="https://larkkkkkkk.github.io/2023/05/25/pytorch/"/>
    <id>https://larkkkkkkk.github.io/2023/05/25/pytorch/</id>
    <published>2023-05-25T06:45:59.000Z</published>
    <updated>2023-05-25T09:00:11.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pytorch汇总"><a href="#pytorch汇总" class="headerlink" title="pytorch汇总"></a>pytorch汇总</h1><h1 id="pytorch加载数据初认识"><a href="#pytorch加载数据初认识" class="headerlink" title="pytorch加载数据初认识"></a>pytorch加载数据初认识</h1><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载位置:https:&#x2F;&#x2F;download.pytorch.org&#x2F;tutorial&#x2F;hymenoptera_data.zip</span><br></pre></td></tr></table></figure><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src alt></p><h2 id><a href="#" class="headerlink" title="##"></a>##</h2><h1 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pytorch汇总&quot;&gt;&lt;a href=&quot;#pytorch汇总&quot; class=&quot;headerlink&quot; title=&quot;pytorch汇总&quot;&gt;&lt;/a&gt;pytorch汇总&lt;/h1&gt;&lt;h1 id=&quot;pytorch加载数据初认识&quot;&gt;&lt;a href=&quot;#pytorch加载数据
      
    
    </summary>
    
    
    
      <category term="pytorch" scheme="https://Larkkkkkkk.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>django</title>
    <link href="https://larkkkkkkk.github.io/2023/05/23/django/"/>
    <id>https://larkkkkkkk.github.io/2023/05/23/django/</id>
    <published>2023-05-23T09:53:14.000Z</published>
    <updated>2023-05-31T13:15:19.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.Django是python下的Web框架，许多网站和APP都基于它，</span><br><span class="line">2.Django是一个开放源代码的Web应用框架，遵守BSD版本，</span><br><span class="line">3.Django可以通过很少的代码完成一个正式网站需要的大部分内容，</span><br><span class="line">4.Django基于MVC模式，可以方便对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能，</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.Django是python下的Web框架，许多网站和APP都基于它，</span><br><span class="line">2.Django是一个开放源代码的Web应用框架，遵守BSD版本，</span><br><span class="line">3.Django可以通过很少的代码完成一个正式网站需要的大部分内容，</span><br><span class="line">4.Django基于MVC模式，可以方便对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能，</span><br></pre></td></tr></table></figure><h2 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h2><p><img src="/2023/05/23/django/mvc.png" alt></p><h2 id="MTV模型"><a href="#MTV模型" class="headerlink" title="MTV模型"></a>MTV模型</h2><p><img src="/2023/05/23/django/mtv.png" alt></p><h1 id="安装和创建第一个项目"><a href="#安装和创建第一个项目" class="headerlink" title="安装和创建第一个项目"></a>安装和创建第一个项目</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.参考文件:https:&#x2F;&#x2F;www.runoob.com&#x2F;django&#x2F;django-install.html</span><br><span class="line">2.步骤:</span><br><span class="line">2.1 安装python:记得配置path</span><br><span class="line">2.2 安装django:使用pip install Django</span><br></pre></td></tr></table></figure><h2 id="创建-pycharm"><a href="#创建-pycharm" class="headerlink" title="创建(pycharm)"></a>创建(pycharm)</h2><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p><strong>代码结构:</strong></p><p><img src="/2023/05/23/django/sturture.png" alt></p><h3 id="创建项目步骤"><a href="#创建项目步骤" class="headerlink" title="创建项目步骤"></a>创建项目步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#项目名称假如是：mysite</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h
      
    
    </summary>
    
    
    
      <category term="django" scheme="https://Larkkkkkkk.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>flask接口</title>
    <link href="https://larkkkkkkk.github.io/2023/05/22/flask%E6%8E%A5%E5%8F%A3/"/>
    <id>https://larkkkkkkk.github.io/2023/05/22/flask%E6%8E%A5%E5%8F%A3/</id>
    <published>2023-05-22T12:00:50.000Z</published>
    <updated>2023-05-22T13:16:30.876Z</updated>
    
    <content type="html"><![CDATA[<p><strong>介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Falsk是由python开发的轻量的web框架，小巧，灵活，一个脚本就可以启动一个web项目， 开发的难度比较大，flask好多的模块是按照django的思路开发的。和flask类似的框架还有web.py,</span><br></pre></td></tr></table></figure><p><strong>具体代码:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from flask import Flask,request,jsonify,make_response,redirect</span><br><span class="line"></span><br><span class="line">def result(value,txt):</span><br><span class="line">    user&#x3D;&quot; &quot;</span><br><span class="line">    print(&quot;传进来结果是:&quot;,value)</span><br><span class="line">    print(&quot;传进来要判断的功能是:&quot;,txt)</span><br><span class="line">    if value&#x3D;&#x3D;&#39;1&#39;:   #抽取特定json格式</span><br><span class="line">        print(&quot;进入了:&quot;,value)</span><br><span class="line">        res&#x3D;caozuo1(txt[&#39;text&#39;])  #根据前端给的报文的格式要用txt[&#39;text&#39;]</span><br><span class="line">        print(&quot;结果是:&quot;, res)</span><br><span class="line">        user&#x3D;res #这里可以将res的结果拆分开给user 做一个&#123;&#125;</span><br><span class="line">    elif value&#x3D;&#x3D;&#39;2&#39;:  #抽取雷达</span><br><span class="line">        print(&quot;进入了:&quot;, value)</span><br><span class="line">        res&#x3D;caozuo2(txt[&#39;text&#39;])</span><br><span class="line">        print(&quot;结果是:&quot;, res)</span><br><span class="line">        user&#x3D;res #这里可以将res的结果拆分开给user 做一个&#123;&#125;</span><br><span class="line">    elif value&#x3D;&#x3D;&#39;3&#39;:  #抽取高亮的营地</span><br><span class="line">        print(&quot;进入了:&quot;, value)</span><br><span class="line">        res&#x3D;caozuo3(txt[&#39;text&#39;])</span><br><span class="line">        print(&quot;结果是:&quot;,res)</span><br><span class="line">        user&#x3D;res #这里可以将res的结果拆分开给user 做一个&#123;&#125;</span><br><span class="line">    return user</span><br><span class="line"></span><br><span class="line">#创建Flask应用程序实例</span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config.from_object(__name__)</span><br><span class="line">app.config[&quot;JSON_AS_ASCII&quot;] &#x3D; False  #返回中文时候要考虑设定为False</span><br><span class="line"></span><br><span class="line">#定义一个路由来处理请求,接受json数据</span><br><span class="line">#第一个参数 地址之后要加的</span><br><span class="line">#第二个参数 访问的get&#x2F;post请求</span><br><span class="line">@app.route(&quot;&#x2F;json&quot;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])  #局域网内其他电脑可以通过IP:5000&#x2F;json访问和传入参数</span><br><span class="line">def edit_user():</span><br><span class="line">    response&#x3D;jsonify(result(request.form.todict()[&#39;type&#39;],request.form.to_dict()))  #对应进行序列化</span><br><span class="line">    #解决前后端跨域问题!(不添加会导致可以接受但是结果无法返回到前端json里面)</span><br><span class="line">    response.headers.add(&#39;Access-Control-Allow-Origin&#39;,&#39;*&#39;)</span><br><span class="line">    response.headers.add(&#39;Access-Control-Allow-Methods&#39;,&#39;PUT,GET,POST,DELETE&#39;)</span><br><span class="line">    return response</span><br><span class="line"></span><br><span class="line">#配置host才可以让局域网内的其他电脑访问!!!!!!!!!!!!!!!!! 一个大bug!!!!!!</span><br><span class="line">app.run(host&#x3D;&#39;0.0.0.0&#39;,port&#x3D;5000,debug&#x3D;True)</span><br></pre></td></tr></table></figure><p><strong>具体截图如下:</strong></p><p><img src="/2023/05/22/flask%E6%8E%A5%E5%8F%A3/1.png" alt></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
    
      <category term="flask框架" scheme="https://Larkkkkkkk.github.io/tags/flask%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://larkkkkkkk.github.io/2023/05/22/Docker/"/>
    <id>https://larkkkkkkk.github.io/2023/05/22/Docker/</id>
    <published>2023-05-22T11:43:54.000Z</published>
    <updated>2023-10-09T08:16:34.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.第一个是我用chatgpt生成的手册</span><br><span class="line">2.第二个是我在开发过程中自己写的一个手册</span><br></pre></td></tr></table></figure><h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><h2 id="Docker的由来"><a href="#Docker的由来" class="headerlink" title="Docker的由来"></a>Docker的由来</h2><p>1.1.1    Docker是一个开源的应用容器引擎，是基于Go语言+Apache2.0协议开源。</p><p>1.1.2    Docker可以让开发者直接打包他们的应用和依赖包到一个容器之中。</p><p>1.1.3  Docker分为CE(社区版本)和EE(企业版本)两个版本。</p><h2 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h2><p><img src=".images/clip_image002.jpg" alt="img"></p><h2 id="Docker的优势"><a href="#Docker的优势" class="headerlink" title="Docker的优势"></a>Docker的优势</h2><p>1.1.3    能够快速、一致地交付应用程序</p><p>Docker能够让开发人员使用我提供的应用程序/本地的容器在标准化环境中工作，能够减少开发的时间。</p><p>1.1.4    能够响应式部署和扩展</p><p>Docker能够在开发人员的本机上，数据中心的物理/虚拟机上/云服务上/混合环境中运行。</p><p>Docker还可以根据业务需求指示，动态拆除和扩展应用程序和服务。</p><p>1.1.5    在同一个硬件上运行更多工作负载</p><p>   Docker能够减少资源做更多的事情。</p><h2 id="Docker的架构"><a href="#Docker的架构" class="headerlink" title="Docker的架构"></a>Docker的架构</h2><p><img src=".images/clip_image004.jpg" alt="img"></p><p>1.1.6    镜像(image):相当于一个root文件夹，或者说是java语言中的类。（静态的定义）</p><p>1.1.7    容器(container):相当于一个文件，或者说是java语言中的实例。(镜像运行时的实体)。容器可以被创建、启动、停止、删除、暂停等。</p><p>1.1.8    仓库(repository):仓库可以看作是像github一样代码托管中心，可以用来保存镜像。</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>Docker可以安装在Ubuntu/linux/windows/MacOS/CentOS等等上面。</p><p>可以参考本篇博客<a href="https://docker.easydoc.net/doc/81170005/cCewZWoN/lTKfePfP" target="_blank" rel="noopener">🎉 Docker 简介和安装 - Docker 快速入门 - 易文档 (easydoc.net)</a> 桌面版: <a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">https://www.docker.com/products/docker-desktop</a></p><h1 id="Docker操作"><a href="#Docker操作" class="headerlink" title="Docker操作"></a>Docker操作</h1><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><p>1.1.9    启动容器 <strong>docker run</strong></p><p>docker run -itd –name 容器名 镜像名</p><p>按照顺序加一个可有的参数</p><table><thead><tr><th>-i</th><th>交互式操作</th><th></th><th></th></tr></thead><tbody><tr><td>-t</td><td>终端</td><td></td><td></td></tr><tr><td>-d</td><td>定义docker网络类型</td><td>Bridge/overlay</td><td></td></tr><tr><td>-P/p</td><td>-P大写</td><td>随机映射</td><td></td></tr><tr><td>-p小写</td><td>5000:5000</td><td>Docker开放5000端口映射到主机端口5000上</td><td></td></tr><tr><td>-p小写</td><td>127.0.0.1:5001:5000</td><td>绑定网络地址和端口</td><td></td></tr><tr><td>-p小写</td><td>127.0.0.1:5001:5000/udp</td><td>可以更改默认的tcp</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>–name</td><td>给容器设定名称</td><td></td><td></td></tr><tr><td>–network</td><td>设定网络(可以用于容器连接)</td><td></td><td></td></tr></tbody></table><p>1.1.10  停止容器 <strong>docker stop</strong></p><p>docker stop 容器名</p><p>1.1.11  启动已经停止运行的一个/多个容器 <strong>docker start</strong> </p><p>docker start 容器名</p><p><strong>1.1.12</strong>  删除容器 <strong>docker rm(容器必须是stop状态)</strong></p><p>docker rm -f 容器名</p><p>1.1.13  重启已经停止运行的一个容器 <strong>docker restart</strong></p><p>docker restart 容器名</p><p>1.1.14  导出容器 <strong>docker import</strong></p><p>docker import 容器名/http地址名</p><p>1.1.15  导入容器 <strong>docker export</strong></p><p>docker export 容器名 </p><p>1.1.16  进入容器 </p><p><strong>1.1.16.1</strong>    <strong>docker exec</strong></p><p> docker exec -it ID /bin/bash </p><p> ls(查看容器目录)</p><p>1.1.16.2 <strong>docker cp</strong>(只能将文件复制到容器对应位置，但是镜像不更新!)</p><p>  docker cp 本地文件路径 容器名/ID：容器路径</p><p>1.1.16.3 <strong>docker -v挂载</strong>(可以将本地主机上的文件直接暴露给容器使用)</p><p>  (将/aaa目录映射到主机的/a/b/c目录)</p><p>docker run -it -v /a/b/c:/aaa –name test image </p><p>1.1.17  容器常用指令</p><p><strong>1.1.17.1</strong>    查看容器<strong>docker ps</strong></p><p>docker ps -a(所有的容器)</p><p>​            docker ps (正在运行的容器)</p><p>docker ps -l (最后一次创建的容器)</p><p>docker port 容器名(查看容器的端口)</p><p>docker logs -f 容器名(查看容器的日志文件)</p><p>docker inspect 容器名(查看容器的底层信息json文件)</p><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>1.1.18  获取镜像 <strong>docker pull</strong></p><p>docker pull 镜像名:tag(不写默认是latest标签)</p><p>1.1.19  查询镜像 <strong>docker search</strong></p><p>docker search 镜像名</p><p>1.1.20  删除镜像 <strong>docker rmi</strong></p><p>docker rmi 镜像名</p><p>1.1.21  创建镜像</p><p>1.1.21.1 从已有的容器中更新镜像，并且提交这个镜像 <strong>docker commit</strong></p><p>先创建一个容器</p><p>docker run -it ubuntu:15.10 /bin/bash</p><p>docker commit -m=”提交的描述信息” -a=”指定镜像作者” 容器ID 目标镜像名</p><p><strong>1.1.21.2</strong>    <strong>docker build</strong></p><p> docker build -t 镜像名 . (一定注意最后有一个.表示这个dockerfile文件的绝对路径)     </p><h2 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h2><p>1.1.22  登录账号 docker login</p><p>1.1.23  注销账号 docker logout </p><h1 id="Dockerfile使用-封装tar文件"><a href="#Dockerfile使用-封装tar文件" class="headerlink" title="Dockerfile使用(封装tar文件)"></a>Dockerfile使用(封装tar文件)</h1><p>参考本篇博客<a href="https://blog.csdn.net/u010095372/article/details/125961361" target="_blank" rel="noopener">简单Win10版Docker+Python封装_docker封装python程序_赫凯的博客-CSDN博客</a></p><h2 id="在执行代码路径下创建Dockerfile文件-一定要是文件而不是其他类型-和requirements文件"><a href="#在执行代码路径下创建Dockerfile文件-一定要是文件而不是其他类型-和requirements文件" class="headerlink" title="在执行代码路径下创建Dockerfile文件(一定要是文件而不是其他类型)和requirements文件"></a>在执行代码路径下创建Dockerfile文件(一定要是文件而不是其他类型)和requirements文件</h2><p><img src=".images/clip_image006.jpg" alt="img"></p><p>然后根据自己的需求编写dockerfile内容和代码所需的requirements内容</p><h2 id="其中dockerfile内容的格式如下"><a href="#其中dockerfile内容的格式如下" class="headerlink" title="其中dockerfile内容的格式如下:"></a>其中dockerfile内容的格式如下:</h2><p>步骤可以参考本篇博客<a href="https://blog.csdn.net/sinat_37935727/article/details/125875287" target="_blank" rel="noopener">将把python项目打包成Docker镜像（linux版）_python打包docker镜像_monkey_susu的博客-CSDN博客</a></p><p><img src=".images/clip_image008.jpg" alt="img"></p><p>例如：</p><p><img src=".images/clip_image010.jpg" alt="img"></p><h2 id="Requirements内容可以根据如下步骤得出"><a href="#Requirements内容可以根据如下步骤得出" class="headerlink" title="Requirements内容可以根据如下步骤得出:"></a>Requirements内容可以根据如下步骤得出:</h2><p>步骤可以参考本篇博客<a href="https://blog.csdn.net/COCO56/article/details/117452383" target="_blank" rel="noopener">如何使用PyCharm自动生成requirements.txt_pycharm requirements_COCO56（徐可可）的博客-CSDN博客</a></p><p><img src="file:///C:/Users/LARKKK~1/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" alt="img"></p><h2 id="在Dockerfile文件目录下右键选择在终端中打开："><a href="#在Dockerfile文件目录下右键选择在终端中打开：" class="headerlink" title="在Dockerfile文件目录下右键选择在终端中打开："></a>在Dockerfile文件目录下右键选择在终端中打开：</h2><p><img src="file:///C:/Users/LARKKK~1/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img"></p><h2 id="使用docker-build语句生成docker镜像"><a href="#使用docker-build语句生成docker镜像" class="headerlink" title="使用docker build语句生成docker镜像"></a>使用docker build语句生成docker镜像</h2><p>docker build -t demo_leida2:v0 .</p><p><img src="file:///C:/Users/LARKKK~1/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" alt="img"></p><h2 id="docker-images-查看是否生成成功"><a href="#docker-images-查看是否生成成功" class="headerlink" title="docker images 查看是否生成成功"></a>docker images 查看是否生成成功</h2><p>docker images </p><p> <img src="file:///C:/Users/LARKKK~1/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" alt="img"></p><h2 id="docker-run-it-–name-容器名-镜像名-启动一下"><a href="#docker-run-it-–name-容器名-镜像名-启动一下" class="headerlink" title="docker run -it -–name 容器名 镜像名 启动一下"></a>docker run -it -–name 容器名 镜像名 启动一下</h2><p>docker run -it –name testleida demo_leida2:V0 </p><p><img src="file:///C:/Users/LARKKK~1/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" alt="img"></p><p>​       要想退出就按Ctrl+v</p><h2 id="docker-save-o-自定名-tar-镜像名"><a href="#docker-save-o-自定名-tar-镜像名" class="headerlink" title="docker save -o 自定名.tar 镜像名"></a>docker save -o 自定名.tar 镜像名</h2><p>docker save -o leida.tar demo_leida2:v0 </p><p><img src="file:///C:/Users/LARKKK~1/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg" alt="img"></p><p><img src="file:///C:/Users/LARKKK~1/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考文件&quot;&gt;&lt;a href=&quot;#参考文件&quot; class=&quot;headerlink&quot; title=&quot;参考文件&quot;&gt;&lt;/a&gt;参考文件&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://Larkkkkkkk.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>JQ实现表单校验/style</title>
    <link href="https://larkkkkkkk.github.io/2023/05/22/JQ%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/style/"/>
    <id>https://larkkkkkkk.github.io/2023/05/22/JQ%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/style/</id>
    <published>2023-05-22T02:48:30.372Z</published>
    <updated>2020-02-10T05:31:20.000Z</updated>
    
    <content type="html"><![CDATA[body { font:12px/19px Arial, Helvetica, sans-serif; color:#666;}form div { margin:5px 0;}.int label { float:left; width:100px; text-align:right;}.int input { padding:1px 1px; border:1px solid #ccc;height:16px;}.sub { padding-left:100px;}.sub input { margin-right:10px; }.formtips{width: 200px;margin:2px;padding:2px;}.onError{    background:#FFE0E9 url(../img/reg3.gif) no-repeat 0 center;padding-left:25px;}.onSuccess{    background:#E9FBEB url(../img/reg4.gif) no-repeat 0 center;padding-left:25px;}.high{    color:red;}/*  div,span,p {    width:140px;    height:140px;    margin:5px;    background:#aaa;border:#000 1px solid;    float:left;    font-size:17px;    font-family:Verdana;  }  */  div.mini {     width:55px;    height:55px;    background-color: #aaa;    font-size:12px;  }  div.hide {     display:none;  }table{ border:0;border-collapse:collapse;}td{ font:normal 12px/17px Arial;padding:2px;width:100px;}th{ font:bold 12px/17px Arial;text-align:left;padding:4px;border-bottom:1px solid #333;}.even{ background:#FFF38F;}  /* 偶数行样式*/.odd{ background:#FFFFEE;}  /* 奇数行样式*/.selected{ background:#FF6500;color:#fff;}]]></content>
    
    <summary type="html">
    
      
      
        body { font:12px/19px Arial, Helvetica, sans-serif; color:#666;}
form div { margin:5px 0;}
.int label { float:left; width:100px; text-align:
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
