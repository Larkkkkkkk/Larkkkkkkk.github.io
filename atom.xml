<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Larkkkkkkk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://larkkkkkkk.github.io/"/>
  <updated>2024-05-29T03:21:24.182Z</updated>
  <id>https://larkkkkkkk.github.io/</id>
  
  <author>
    <name>Larkkkkkkk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务-黑马商城为例</title>
    <link href="https://larkkkkkkk.github.io/2024/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E4%B8%BA%E4%BE%8B/"/>
    <id>https://larkkkkkkk.github.io/2024/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E4%B8%BA%E4%BE%8B/</id>
    <published>2024-05-28T06:23:36.000Z</published>
    <updated>2024-05-29T03:21:24.182Z</updated>
    
    <content type="html"><![CDATA[<p>前提：我们以单体架构的黑马商城为例</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281424756.png" alt="image-20240528142451641" style="zoom: 50%;"><p>代码结构如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281426453.png" alt="image-20240528142611395" style="zoom:67%;"><h1 id="服务拆分"><a href="#服务拆分" class="headerlink" title="==服务拆分=="></a>==服务拆分==</h1><h1 id="1-微服务拆分"><a href="#1-微服务拆分" class="headerlink" title="1.微服务拆分"></a>1.微服务拆分</h1><p>拆分工程结构有两种：</p><ul><li>1.独立project：总黑马商城设置一个空项目(各个模块都在这个目录下) –不怎么美观和使用</li><li>2.Maven聚合：总黑马商城设置一个空项目(各个模块成为一个module模块，根据maven管理) –只是代码放一起但是各自可以打包开发编译</li></ul><p><strong>我们以第二种Maven聚合方式进行拆分</strong></p><h2 id="1-1-新建项目"><a href="#1-1-新建项目" class="headerlink" title="1.1 新建项目"></a>1.1 新建项目</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281656699.png" alt="image-20240528165608489"></p><h2 id="1-2-导入依赖"><a href="#1-2-导入依赖" class="headerlink" title="1.2 导入依赖"></a>1.2 导入依赖</h2><p>直接从hm-service中导入，然后删除一些不需要的依赖</p><h2 id="1-3-编写启动类"><a href="#1-3-编写启动类" class="headerlink" title="1.3 编写启动类"></a>1.3 编写启动类</h2><p><strong>一定记得和其他包是同一级，不然他妈的扫描不到报bean冲突！！！！！</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281657536.png" alt="image-20240528165703436"></p><h2 id="1-4-编写yml配置文件"><a href="#1-4-编写yml配置文件" class="headerlink" title="1.4 编写yml配置文件"></a>1.4 编写yml配置文件</h2><p>直接从hm-service中导入，然后删除和修改一些配置</p><h2 id="1-5-挪动代码"><a href="#1-5-挪动代码" class="headerlink" title="1.5 挪动代码"></a>1.5 挪动代码</h2><p>①domain实体，②mapper数据库打交道的，③service和serviceimpl，④controller</p><p>==在这一步拆分多个子项目之后，我们可能会发现cart购物车服务会调用查询item商品服务，之前我们可以在一个模块中直接调用mapper，但是分开之后只能发送请求访问==</p><h1 id="2-远程调用-RestTemplate"><a href="#2-远程调用-RestTemplate" class="headerlink" title="2.远程调用-RestTemplate"></a>2.远程调用-RestTemplate</h1><p>之前通过调用item的mapper层方法即可，现在需要通过RestTemplate发送http请求给item服务获取数据。【但是有个致命问题是，exchange方法的url是写死的就很麻烦】</p><p>使用方法：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405291107820.png" alt="image-20240529110754747"></p><p>具体操作：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405291104162.png" alt="image-20240529110418958"></p><h1 id="服务治理"><a href="#服务治理" class="headerlink" title="==服务治理=="></a>==服务治理==</h1><h1 id="1-注册中心-动态变化"><a href="#1-注册中心-动态变化" class="headerlink" title="1.注册中心(动态变化)"></a>1.注册中心(动态变化)</h1><p>为了解决RestTemplate发送http请求时会写死url问题【如果被调用服务有多台负载均衡，就会报错更改也很麻烦】</p><h2 id="1-1-注册中心原理"><a href="#1-1-注册中心原理" class="headerlink" title="1.1 注册中心原理"></a>1.1 注册中心原理</h2><h2 id="1-2注册中心方式"><a href="#1-2注册中心方式" class="headerlink" title="1.2注册中心方式"></a>1.2注册中心方式</h2><h3 id="1-1-1-Eureka-之前使用"><a href="#1-1-1-Eureka-之前使用" class="headerlink" title="1.1.1 Eureka(之前使用)"></a>1.1.1 Eureka(之前使用)</h3><h3 id="1-1-2-Nacos-目前使用"><a href="#1-1-2-Nacos-目前使用" class="headerlink" title="1.1.2 Nacos(目前使用)"></a>1.1.2 Nacos(目前使用)</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前提：我们以单体架构的黑马商城为例&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281424756.png&quot; alt=&quot;image-20
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客报错github传输大文件GH001异常</title>
    <link href="https://larkkkkkkk.github.io/2024/05/28/Hexo%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99github%E4%BC%A0%E8%BE%93%E5%A4%A7%E6%96%87%E4%BB%B6GH001%E5%BC%82%E5%B8%B8/"/>
    <id>https://larkkkkkkk.github.io/2024/05/28/Hexo%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99github%E4%BC%A0%E8%BE%93%E5%A4%A7%E6%96%87%E4%BB%B6GH001%E5%BC%82%E5%B8%B8/</id>
    <published>2024-05-28T02:51:54.000Z</published>
    <updated>2024-05-28T03:02:45.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-报错原因"><a href="#1-报错原因" class="headerlink" title="1.报错原因"></a>1.报错原因</h1><p>我在Docker文件夹下上传了一个iso文件，这个文件大于了github的100M大小报错。</p><p>在我hexo g的时候没问题，但是hexo d的时候会出错。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281055923.png" alt="image-20240528105520819"></p><p>但是本地删除了iso文件还是不行，最后查询意思是之前的记录仍然存在，只能从本地仓库删除并且把以前的提交记录全部修改</p><h1 id="2-修改办法"><a href="#2-修改办法" class="headerlink" title="2.修改办法"></a>2.修改办法</h1><p>2.1 在此目录下打开git bash</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281057150.png" alt="image-20240528105706115"></p><p>2.2 输入指令 git log通过此处找到报错前最新的版本</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281059890.png" alt="image-20240528105915849"></p><p>2.2 还有一种办法就是通过github查看版本</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281101521.png" alt="image-20240528110139383"></p><p>2.3 至此直接git reset id 就可以恢复到对应版本</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281102890.png" alt="image-20240528110223842"></p><h1 id="3-参考办法"><a href="#3-参考办法" class="headerlink" title="3.参考办法"></a>3.参考办法</h1><p><a href="https://rimbaud-lee.github.io/2021/08/25/blog_deploy_2/" target="_blank" rel="noopener">记一次异常艰难的博客部署（二）—— hexo d 指令向GitHub传输大文件导致的 GH001 报错解决 | 邓小闲的小楼 (rimbaud-lee.github.io)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-报错原因&quot;&gt;&lt;a href=&quot;#1-报错原因&quot; class=&quot;headerlink&quot; title=&quot;1.报错原因&quot;&gt;&lt;/a&gt;1.报错原因&lt;/h1&gt;&lt;p&gt;我在Docker文件夹下上传了一个iso文件，这个文件大于了github的100M大小报错。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
      <category term="Hexo博客" scheme="https://Larkkkkkkk.github.io/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>微服务-分布式事务</title>
    <link href="https://larkkkkkkk.github.io/2024/05/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>https://larkkkkkkk.github.io/2024/05/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2024-05-27T08:58:36.000Z</published>
    <updated>2024-05-27T09:46:33.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-分布式事务"><a href="#1-分布式事务" class="headerlink" title="1.分布式事务"></a>1.分布式事务</h1><p>我们现在</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-分布式事务&quot;&gt;&lt;a href=&quot;#1-分布式事务&quot; class=&quot;headerlink&quot; title=&quot;1.分布式事务&quot;&gt;&lt;/a&gt;1.分布式事务&lt;/h1&gt;&lt;p&gt;我们现在&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务-服务保护</title>
    <link href="https://larkkkkkkk.github.io/2024/05/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4/"/>
    <id>https://larkkkkkkk.github.io/2024/05/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4/</id>
    <published>2024-05-27T08:58:27.000Z</published>
    <updated>2024-05-27T08:59:13.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-服务保护"><a href="#1-服务保护" class="headerlink" title="1.服务保护"></a>1.服务保护</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-服务保护&quot;&gt;&lt;a href=&quot;#1-服务保护&quot; class=&quot;headerlink&quot; title=&quot;1.服务保护&quot;&gt;&lt;/a&gt;1.服务保护&lt;/h1&gt;
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="https://larkkkkkkk.github.io/2024/04/25/MybatisPlus/"/>
    <id>https://larkkkkkkk.github.io/2024/04/25/MybatisPlus/</id>
    <published>2024-04-25T08:17:17.000Z</published>
    <updated>2024-05-28T07:27:47.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Mybatis介绍"><a href="#1-Mybatis介绍" class="headerlink" title="1.Mybatis介绍"></a>1.Mybatis介绍</h1><p>在日常开发中应该能发现，单表的CRUD功能代码重复度很高，也没有什么难度。而这部分代码量往往比较大，开发起来比较费时。</p><p>因此，目前企业中都会使用一些组件来简化或省略单表的CRUD开发工作。目前在国内使用较多的一个组件就是MybatisPlus。</p><p>官方网站如下：</p><p>当然，MybatisPlus不仅仅可以简化单表操作，而且还对Mybatis的功能有很多的增强。</p><h1 id="Mybatis——-基础使用"><a href="#Mybatis——-基础使用" class="headerlink" title="==Mybatis——-基础使用=="></a>==Mybatis——-基础使用==</h1><h2 id="1-1-pom-xml引入依赖"><a href="#1-1-pom-xml引入依赖" class="headerlink" title="1.1 pom.xml引入依赖"></a>1.1 pom.xml引入依赖</h2><p>MybatisPlus提供了starter，实现了自动Mybatis以及MybatisPlus的自动装配功能，坐标如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251623535.png" alt="image-20240425162339464"></p><p>如图所示，由于这个starter包含对mybatis的自动装配，因此完全可以替换掉Mybatis的starter</p><h2 id="1-2-定义Mapper层"><a href="#1-2-定义Mapper层" class="headerlink" title="1.2 定义Mapper层"></a>1.2 定义Mapper层</h2><p>为了简化单表CRUD，MybatisPlus提供了一个基础的<code>BaseMapper</code>接口，其中已经实现了单表的CRUD：</p><p>我们直接==实现BaseMapper接口==即可</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251730201.png" alt="image-20240425173015132"></p><h2 id="1-3-对比"><a href="#1-3-对比" class="headerlink" title="1.3 对比"></a>1.3 对比</h2><p>我们可以看出这样直接调用简单的CRUD方法即可，就不用自己去mapper层写方法和对应xml文件了。==只需要继承BaseMapper就能省去所有的单表CRUD==。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251731200.png" alt="image-20240425173132151"></p><h2 id="1-4-底层实现原理"><a href="#1-4-底层实现原理" class="headerlink" title="1.4 底层实现原理"></a>1.4 底层实现原理</h2><p>刚才①引入依赖和②mapper层继承BaseMapper接口就可以进行CRUD，那MP怎么知道是哪张表？表中有哪些字段？</p><p>这也是因为UserMapper在继承BaseMapper的时候指定了一个泛型和数据库对应的实体类</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556323.png" alt="image-20240425174306575"></p><p>MybatisPlus就是根据PO实体的信息来推断出表的信息，从而生成SQL的。默认情况下：</p><ul><li>MybatisPlus会把PO实体的类名驼峰转下划线作为表名</li><li>MybatisPlus会把PO实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li><li>MybatisPlus会把名为id的字段作为主键</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251748690.png" alt="image-20240425174818635"></p><p>但很多情况下，默认的实现与实际场景不符，因此MybatisPlus提供一些注解便于我们声明表信息</p><h1 id="2-常见注解-解决po和mysql字段映射"><a href="#2-常见注解-解决po和mysql字段映射" class="headerlink" title="2.常见注解==解决po和mysql字段映射=="></a>2.常见注解==解决po和mysql字段映射==</h1><p>==如果不按照约定的话，需要使用以下三种注解来解决：==  </p><p>MybatisPlus中比较常用的几个注解如下：</p><p>•<strong>@TableName</strong>：用来指定表名</p><p>•<strong>@TableId</strong>：用来指定表中的主键字段信息</p><p>•<strong>@TableField</strong>：用来指定表中的普通字段信息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556542.png" alt="image-20240425175502493"></p><p>其中，具体的细节如图所示：==使用查看==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556898.png" alt="image-20240425175807030"></p><h2 id="2-1-TableName"><a href="#2-1-TableName" class="headerlink" title="2.1 @TableName"></a>2.1 @TableName</h2><ul><li>描述：表名注解，标识实体类对应的表</li><li>使用位置：实体类</li></ul><p>所有属性:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251805672.png" alt="image-20240425180531600"></p><h2 id="2-2-TableId"><a href="#2-2-TableId" class="headerlink" title="2.2 @TableId"></a>2.2 @TableId</h2><ul><li>描述：主键注解，标识实体类中的主键字段</li><li>使用位置：实体类的主键字段</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556871.png" alt="image-20240425180555143"></p><p>其中type=IdType.xxxx取值范围：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556553.png" alt="image-20240425180718677" style="zoom:67%;"><h2 id="2-3-TableField"><a href="#2-3-TableField" class="headerlink" title="2.3 @TableField"></a>2.3 @TableField</h2><p>描述：普通字段注解</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556013.png" alt="image-20240425180842453"></p><h1 id="3-yml常见配置"><a href="#3-yml常见配置" class="headerlink" title="3.yml常见配置"></a>3.yml常见配置</h1><p>在application.yml文件配置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251719086.png" alt="image-20240425171943982"></p><h1 id="Mybatis——-核心功能"><a href="#Mybatis——-核心功能" class="headerlink" title="==Mybatis——-核心功能=="></a>==Mybatis——-核心功能==</h1><p>刚才都是以id为条件的简单CRUD,一些复杂的SQL语句就需要用到一些高级功能。</p><h1 id="1-条件构造器-提供复杂where语句"><a href="#1-条件构造器-提供复杂where语句" class="headerlink" title="1.条件构造器==提供复杂where语句=="></a>1.条件构造器==提供复杂where语句==</h1><p>修改、删除、查询的SQL语句都需要<strong>指定where条件</strong></p><p>因此BaseMapper中提供的相关方法除了以<code>id</code>作为<code>where</code>条件以外，还支持更加复杂的<code>where</code>条件。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556460.png" alt="image-20240425181511109"></p><p>参数中的<code>Wrapper</code>就是条件构造的抽象类，其下有很多默认实现，继承关系如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251813468.png" alt="image-20240425181331409"></p><p>其中，<code>Wrapper</code>的子类<code>AbstractWrapper</code>提供了where中包含的所有条件构造方法：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557411.png" alt="image-20240425181538417"></p><p>而QueryWrapper在AbstractWrapper的基础上拓展了一个select方法，允许指定查询字段：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251815330.png" alt="image-20240425181553298"></p><p>而UpdateWrapper在AbstractWrapper的基础上拓展了一个set方法，允许指定SQL中的SET部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251816541.png" alt="image-20240425181601512"></p><h2 id="1-1-QueryWrapper"><a href="#1-1-QueryWrapper" class="headerlink" title="1.1 QueryWrapper"></a>1.1 QueryWrapper</h2><p>==主要对where语句的条件进行设置==</p><p>对于查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id,username,info,balance</span><br><span class="line">from user</span><br><span class="line">where name like &quot;%o%&quot; AND balance &gt;&#x3D; 1000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557952.png" alt="image-20240426152253324"></p><p>对于修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update </span><br><span class="line">set balance&#x3D;2000</span><br><span class="line">where username&#x3D;&#39;Jack&#39;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261525035.png" alt="image-20240426152523969"></p><h2 id="1-2-UpdateWrapper"><a href="#1-2-UpdateWrapper" class="headerlink" title="1.2 UpdateWrapper"></a>1.2 UpdateWrapper</h2><p>==弥补BaseMapper中update()只能写 set Xxx==，提出的updatewrapper可以写成set balance=balance-xx这种形式</p><p>以更新多个id为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update user</span><br><span class="line">set balance&#x3D;balance-200</span><br><span class="line">where id in(1,2,3)</span><br></pre></td></tr></table></figure><p>这个set的赋值结果是基于字段现有值，这时候需要使用UpdateWrapper中的==setSql功能：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557927.png" alt="image-20240426153602036"></p><h2 id="1-3-LambdaQueryWrapper"><a href="#1-3-LambdaQueryWrapper" class="headerlink" title="1.3 LambdaQueryWrapper"></a>1.3 LambdaQueryWrapper</h2><p>==1.1和1.2会在构造条件时候写死字段名称==，现在1.3就可以通过变量的getter方法结合反射获取</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557838.png" alt="image-20240426154148926"></p><h1 id="2-自定义SQL"><a href="#2-自定义SQL" class="headerlink" title="2.自定义SQL"></a>2.自定义SQL</h1><p>1.2中演示了一个修改余额-200的时候将sql维护应该放在持久层，而不是业务层：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261543946.png" alt="image-20240426154345876"></p><p>==利用Wrapper生成查询条件，然后再结合mapper自定义xml文件编写sql==</p><h2 id="2-1-原位置变化"><a href="#2-1-原位置变化" class="headerlink" title="2.1 原位置变化"></a>2.1 原位置变化</h2><p>以刚才案例为例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261545351.png" alt="image-20240426154550302"></p><h2 id="2-2-Mapper层方法定义"><a href="#2-2-Mapper层方法定义" class="headerlink" title="2.2 Mapper层方法定义"></a>2.2 Mapper层方法定义</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557154.png" alt="image-20240426154750747"></p><h2 id="2-3-写sql语句"><a href="#2-3-写sql语句" class="headerlink" title="2.3 写sql语句"></a>2.3 写sql语句</h2><p>方式一：直接在mapper的方法上写@Select方法</p><p>方式二：在mapper.xml文件中写动态sql</p><p>和以往的区别就是：==where语句直接用${ew.customSqlSegment}替换==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557847.png" alt="image-20240426154956395"></p><p><strong>总结如下</strong>：</p><p>与以往的变化就是我传入参数和where判断条件，mapper方法加一个@Param(“ew”)标志，然后sql里面就直接用${ew.customSqlSegment}替换</p><h1 id="3-Service接口"><a href="#3-Service接口" class="headerlink" title="3.Service接口"></a>3.Service接口</h1><p>通用接口为==Iservice==，默认实现为==ServiceImpl==。其中封装方法可以分为：</p><ul><li><code>save</code>：新增</li><li><code>remove</code>：删除</li><li><code>update</code>：更新</li><li><code>get</code>：查询单个结果</li><li><code>list</code>：查询集合结果</li><li><code>count</code>：计数</li><li><code>page</code>：分页查询</li></ul><h2 id="3-1-五大类方法解释"><a href="#3-1-五大类方法解释" class="headerlink" title="3.1 五大类方法解释"></a>3.1 五大类方法解释</h2><h3 id="3-1-1-新增-save"><a href="#3-1-1-新增-save" class="headerlink" title="3.1.1 新增(save)"></a>3.1.1 新增(save)</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557861.png" alt="image-20240426155746820"></p><h3 id="3-1-2-删除-remove"><a href="#3-1-2-删除-remove" class="headerlink" title="3.1.2 删除(remove)"></a>3.1.2 删除(remove)</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261558520.png" alt="image-20240426155808475"></p><h3 id="3-1-3-修改-update"><a href="#3-1-3-修改-update" class="headerlink" title="3.1.3 修改(update)"></a>3.1.3 修改(update)</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261558839.png" alt="image-20240426155852795"></p><h3 id="3-1-4-查询"><a href="#3-1-4-查询" class="headerlink" title="3.1.4 查询"></a>3.1.4 查询</h3><h4 id="3-4-1-查询一条-get"><a href="#3-4-1-查询一条-get" class="headerlink" title="3.4.1 查询一条(get)"></a>3.4.1 查询一条(get)</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261559663.png" alt="image-20240426155954622"></p><h4 id="3-4-2-查询多条-list"><a href="#3-4-2-查询多条-list" class="headerlink" title="3.4.2 查询多条(list)"></a>3.4.2 查询多条(list)</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261600209.png" alt="image-20240426160001166"></p><h4 id="3-4-3-计数-count"><a href="#3-4-3-计数-count" class="headerlink" title="3.4.3 计数(count)"></a>3.4.3 计数(count)</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261600943.png" alt="image-20240426160025902"></p><h3 id="3-1-5调用mapper层自定义sql"><a href="#3-1-5调用mapper层自定义sql" class="headerlink" title="3.1.5调用mapper层自定义sql"></a>3.1.5调用mapper层自定义sql</h3><p>通过getBaseMapper获取Mapper，然后就mapper.自定义sql()</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261601255.png" alt="image-20240426160126219"></p><h2 id="3-6-基本用法"><a href="#3-6-基本用法" class="headerlink" title="3.6 基本用法"></a>3.6 基本用法</h2><p>现在的变化就是，==拿现成的直接用==:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261605501.png" alt="image-20240426160527425"></p><p>具体操作就是：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261606835.png" alt="image-20240426160603797"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--保证自定义mapper继承basemapper 【底层使用时候直接还是调用basemapper的方法】</span><br></pre></td></tr></table></figure><h2 id="3-7-快速搭建-直接看"><a href="#3-7-快速搭建-直接看" class="headerlink" title="3.7 快速搭建(直接看)"></a>3.7 快速搭建(直接看)</h2><p>==1.业务简单的话直接调用mp方法；==</p><p>==2.业务复杂的话就跟原来方式一样，controller调用service方法，然后在mapper层写具体sql==</p><h3 id="3-7-1-简单业务-直接调用mp方法"><a href="#3-7-1-简单业务-直接调用mp方法" class="headerlink" title="3.7.1 简单业务-直接调用mp方法"></a>3.7.1 简单业务-直接调用mp方法</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261703070.png" alt="image-20240426170341983"></p><h3 id="3-7-2-复杂业务-原始模式优化"><a href="#3-7-2-复杂业务-原始模式优化" class="headerlink" title="3.7.2 复杂业务-原始模式优化"></a>3.7.2 复杂业务-原始模式优化</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261711105.png" alt="image-20240426171113039"></p><p>之后调用mapper层的sql：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261707032.png" alt="image-20240426170626547"></p><h2 id="3-8-Lambda查询"><a href="#3-8-Lambda查询" class="headerlink" title="3.8 Lambda查询"></a>3.8 Lambda查询</h2><p>就是在基本的方法上(属性，最新值)再多使用一个属性(==判断条件==，属性，最新值)</p><p>这样就可以把动态sql里面<if>标签这种麻烦的操作放在serviceImpl类上进行操作</if></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261752712.png" alt="image-20240426175243646"></p><h2 id="3-9-批量新增"><a href="#3-9-批量新增" class="headerlink" title="3.9 批量新增"></a>3.9 批量新增</h2><p>三种方案：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404272308413.png" alt="image-20240427230857329"></p><p>最推荐第三种我们在yml配置文件中添加&amp;rewriteBatchedStatements=true</p><h1 id="Mybatis——-扩展功能"><a href="#Mybatis——-扩展功能" class="headerlink" title="==Mybatis——-扩展功能=="></a>==Mybatis——-扩展功能==</h1><h1 id="1-代码生成"><a href="#1-代码生成" class="headerlink" title="1.代码生成"></a>1.代码生成</h1><p>在使用MybatisPlus以后，基础的<code>Mapper</code>、<code>Service</code>、<code>PO</code>代码相对固定，重复编写也比较麻烦</p><p>==为了方便生成基本固定的代码==</p><h2 id="1-1-下载插件"><a href="#1-1-下载插件" class="headerlink" title="1.1 下载插件"></a>1.1 下载插件</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281818769.png" alt="image-20240428181825670"></p><h2 id="1-2-配置数据库"><a href="#1-2-配置数据库" class="headerlink" title="1.2 配置数据库"></a>1.2 配置数据库</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281820612.png" alt="image-20240428182003520"></p><h2 id="1-3-配置信息生成代码"><a href="#1-3-配置信息生成代码" class="headerlink" title="1.3 配置信息生成代码"></a>1.3 配置信息生成代码</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281823255.png" alt="image-20240428182342159"></p><h2 id="1-4查看代码"><a href="#1-4查看代码" class="headerlink" title="1.4查看代码"></a>1.4查看代码</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281824739.png" alt="image-20240428182458664"></p><h1 id="2-静态工具—-Db"><a href="#2-静态工具—-Db" class="headerlink" title="2.静态工具—-Db"></a>2.静态工具—-Db</h1><p>有一种可能就是有AService用来查询用户和BService用来查询地址，他们都实现了Iservice可以实现一些简单的CRUD。现在需要查询用户和对应的地址，就可能AService调用BService，然后BService也要调用AService就会导致@Autowired时候<strong>循环依赖</strong></p><p>MybatisPlus提供一个静态工具类:==Db==，==就是用来解决多个service层互相调用导致的循环依赖==，其中一些静态方法与IService中的方法签名基本一致，也可以帮助我们实现CRUD的功能</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281835860.png" alt="image-20240428183527812"></p><p>在使用的时候，就可以直接像平时书写习惯直接调用</p><h1 id="3-逻辑删除"><a href="#3-逻辑删除" class="headerlink" title="3.逻辑删除"></a>3.逻辑删除</h1><p>多表查询时删除A表的数据同时也会删除B数据，但是B里面有一些比较重要的数据我们不想删除。因此，我们采用==逻辑删除==的方案：</p><p>可以考虑在表中添加一个字段flag(标记数据是否被删除)，这样我们在删除数据的时候还需要将flag设置为true，如果在查询数据的时候还需要添加一个and flag=xxx的条件。<strong>这样的话就会让之前的查询和删除逻辑都要跟着变化，非常麻烦。</strong></p><p>因此，MybatisPlus就添加了对逻辑删除的支持。</p><blockquote><p>只有MybatisPlus生成的SQL语句才支持自动的逻辑删除【就是直接拿来用的哪些CRUD方法】</p><p>自定义SQL就需要自己手动处理逻辑删除</p></blockquote><h2 id="3-1-配置逻辑删除"><a href="#3-1-配置逻辑删除" class="headerlink" title="3.1 配置逻辑删除"></a>3.1 配置逻辑删除</h2><p>我们对于Address表添加一个字段deleted用于判断是否删除：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291709199.png" alt="image-20240429170953086"></p><h2 id="3-2-底层实现"><a href="#3-2-底层实现" class="headerlink" title="3.2 底层实现"></a>3.2 底层实现</h2><p>我们在使用MybatisPlus自己的CRUD方法时候支持自动逻辑删除：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291211605.png" alt="image-20240429121132491"></p><p>具体的两个语法操作：</p><p>1.删除的时候我们就会将delete更改为一个update语句拼接一个deleted=false未被删除的判断</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291715300.png" alt="image-20240429171532251"></p><p>2.查询的时候我们就会在where语句拼接一个deleted=false未被删除的判断</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291715596.png" alt="image-20240429171544562"></p><h2 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h2><p>开启逻辑删除功能之后，可以像普通删除一样做CRUD，基本不用考虑代码逻辑功能问题。</p><p>但是，逻辑删除本身也有缺点：</p><ul><li>会导致数据库表垃圾数据越来越多，从而影响查询效率</li><li>sql中全都需要对逻辑删除字段做判断，影响查询效率</li></ul><p>==因此，不太建议采用逻辑删除功能，如果数据不能删除，可以采用数据迁移到其他表的办法==</p><h1 id="4-枚举处理器-字段有多个值"><a href="#4-枚举处理器-字段有多个值" class="headerlink" title="4.枚举处理器(字段有多个值)"></a>4.枚举处理器(字段有多个值)</h1><p>对某个字段(0是正常，1是不正常)判断时候如果写==1这样很不美观，并且如果0和1的含义修改了要修改很多地方，因此我们可以使用枚举(很像c语言的参数宏定义)来处理</p><p>针对于之前案例User类的status属性，就可以这样修改：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291637868.png" alt="image-20240429163735826"></p><p>在原始的mybatis底层帮我们把Java中的类型和数据库的类型一一对应，但是对于枚举类型和Json类型无法解决。因此mybatisplus针对枚举和Json类型提出了新的处理器：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291643419.png" alt="image-20240429164303308"></p><h2 id="4-1-配置枚举处理器"><a href="#4-1-配置枚举处理器" class="headerlink" title="4.1 配置枚举处理器"></a>4.1 配置枚举处理器</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291640002.png" alt="image-20240429164034948"></p><h2 id="4-2-定义枚举类"><a href="#4-2-定义枚举类" class="headerlink" title="4.2 定义枚举类"></a>4.2 定义枚举类</h2><p>这样就可以将1和2分别代表正常和冻结，我们在使用的时候只需要调用UserStatus.NORMAL就可以对比了</p><p>此外，@EnumValue可以保证我们可以按照value的类型和数据库一一对应；而@JsonValue可以保证我们输出给前端的时候可以将描述词/对应值返回(而不是返回NORMAL/FORZEN这种类型)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291652755.png" alt="image-20240429165234689"></p><h2 id="4-3-修改PO和VO类型"><a href="#4-3-修改PO和VO类型" class="headerlink" title="4.3 修改PO和VO类型"></a>4.3 修改PO和VO类型</h2><p>主要是将类型Integer改为UserStatus枚举类</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291655394.png" alt="image-20240429165517353"></p><h2 id="4-4-修改具体逻辑位置"><a href="#4-4-修改具体逻辑位置" class="headerlink" title="4.4 修改具体逻辑位置"></a>4.4 修改具体逻辑位置</h2><p>原来位置是用数字比对，可读性太差，现在就可以优雅地使用枚举类</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291656672.png" alt="image-20240429165653581"></p><h1 id="5-Json类型处理器-字段是Json类型"><a href="#5-Json类型处理器-字段是Json类型" class="headerlink" title="5.Json类型处理器(字段是Json类型)"></a>5.Json类型处理器(字段是Json类型)</h1><p>如果实体类有一个属性是Json类型，那么Java中的Json类型和数据库中的匹配就有问题：<br>就跟4枚举处理器里面将的，MybatisPlus在Myabtis的基础上提供了Json类型处理器</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291721065.png" alt="image-20240429172137951" style="zoom: 67%;"><h2 id="5-1-配置Json类型处理器"><a href="#5-1-配置Json类型处理器" class="headerlink" title="5.1 配置Json类型处理器"></a>5.1 配置Json类型处理器</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301426197.png" alt="image-20240430142629145" style="zoom: 67%;"><p>因为没有提供在application.yml配置的方式，只能通过给实体类属性添加注解</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301424410.png" alt="image-20240430142453316"></p><h2 id="5-2-测试查看"><a href="#5-2-测试查看" class="headerlink" title="5.2 测试查看"></a>5.2 测试查看</h2><p>info字段已经改成了一个Json类型</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301427801.png" alt="image-20240430142717732"></p><h1 id="6-配置加密"><a href="#6-配置加密" class="headerlink" title="6.配置加密"></a>6.配置加密</h1><p>目前我们配置文件中很多参数都是明文存储，如果开发人员跑路很容易导致敏感信息泄露。</p><p>MyBatisPlus从3.3.2版本开始提供了一个==基于AES算法的加密工具==，帮助我们对配置中的敏感信息做加密处理。</p><h2 id="6-1-生成秘钥"><a href="#6-1-生成秘钥" class="headerlink" title="6.1 生成秘钥"></a>6.1 生成秘钥</h2><p>以数据库的账户密码为例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301432687.png" alt="image-20240430143223630"></p><h2 id="6-2-配置秘钥"><a href="#6-2-配置秘钥" class="headerlink" title="6.2 配置秘钥"></a>6.2 配置秘钥</h2><p>在application.yml文件中修改：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301435095.png" alt="image-20240430143508047"></p><h2 id="6-3-测试"><a href="#6-3-测试" class="headerlink" title="6.3 测试"></a>6.3 测试</h2><p>测试类：在测试类的注解上配置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301438113.png" alt="image-20240430143859062"></p><p>启动项目：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301440705.png" alt="image-20240430144043661"></p><h1 id="Mybatis——-插件功能"><a href="#Mybatis——-插件功能" class="headerlink" title="==Mybatis——-插件功能=="></a>==Mybatis——-插件功能==</h1><p>其实MybatisPlus提供了多个插件，而我们重点关注分页插件</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301647585.png" alt="image-20240430164735500"></p><h1 id="1-分页插件"><a href="#1-分页插件" class="headerlink" title="1.分页插件"></a>1.分页插件</h1><h2 id="1-1-配置分页功能"><a href="#1-1-配置分页功能" class="headerlink" title="1.1 配置分页功能"></a>1.1 配置分页功能</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301523505.png" alt="image-20240430152339416"></p><h2 id="1-2-测试简单分页"><a href="#1-2-测试简单分页" class="headerlink" title="1.2 测试简单分页"></a>1.2 测试简单分页</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301522267.png" alt="image-20240430152253190"></p><h2 id="1-3-测试复杂分页"><a href="#1-3-测试复杂分页" class="headerlink" title="1.3 测试复杂分页"></a>1.3 测试复杂分页</h2><p>针对于1.2的话其实就是更针对业务逻辑：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301643474.png" alt="image-20240430164354320"></p><h1 id="Mybatis——-使用操作"><a href="#Mybatis——-使用操作" class="headerlink" title="==Mybatis——-使用操作=="></a>==Mybatis——-使用操作==</h1><p>1.可以创建好数据库表</p><p>2.根据mybatis插件生成:</p><p>​    po(可以添加注解保证数据库和Java实体类对应，对于枚举和Json类型都有新推出的处理器解决)，</p><p>​    service(extends IService<Xxx>)，</Xxx></p><p>​    serviceImpl( extends ServiceImpl&lt;XxxMapper, Xxx&gt; implements IAddressService)，</p><p>​    controller，</p><p>​    mapper(extends BaseMapper<Xxx>)</Xxx></p><p>3.按照原有的设计思路写代码：</p><p>​    3.1 简单的就直接调用service的CRUD方法【service接口默认也有实现类ServiceImpl&lt;XXXMapper,实体类&gt;，这样也说明底层还是直接调用BaseMapper方法】</p><p>​    3.2 复杂的话就还是原来的动态sql书写</p><p>【只不过在书写过程中有很多好用的扩展功能】</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Mybatis介绍&quot;&gt;&lt;a href=&quot;#1-Mybatis介绍&quot; class=&quot;headerlink&quot; title=&quot;1.Mybatis介绍&quot;&gt;&lt;/a&gt;1.Mybatis介绍&lt;/h1&gt;&lt;p&gt;在日常开发中应该能发现，单表的CRUD功能代码重复度很高，也没有什么
      
    
    </summary>
    
    
    
      <category term="MybatisPlus" scheme="https://Larkkkkkkk.github.io/tags/MybatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="https://larkkkkkkk.github.io/2024/04/17/Elasticsearch/"/>
    <id>https://larkkkkkkk.github.io/2024/04/17/Elasticsearch/</id>
    <published>2024-04-17T13:58:55.000Z</published>
    <updated>2024-05-23T07:57:18.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-使用场景"><a href="#0-使用场景" class="headerlink" title="0.使用场景"></a>0.使用场景</h1><p>数据库的模糊搜索功能单一，匹配条件非常苛刻，必须恰好包含用户搜索的关键字。</p><p>而在搜索引擎中，用户输入出现个别错字，或者用拼音搜索、同义词搜索都能正确匹配到数据。</p><p>综上，在面临海量数据的搜索，或者有一些复杂搜索需求的时候，推荐使用专门的搜索引擎来实现搜索功能。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405171647803.png" alt="image-20240517164744539"></p><h2 id="0-1-全文搜索"><a href="#0-1-全文搜索" class="headerlink" title="0.1 全文搜索"></a>0.1 全文搜索</h2><p>Elasticsearch 凭借其强大、可扩展和快速的搜索功能，在全文搜索场景中表现出色。</p><p>它通常用于支持大型网站和应用程序的搜索功能，允许用户执行复杂的查询并获得<strong>近乎实时的响应</strong>。</p><h2 id="0-2-实时分析"><a href="#0-2-实时分析" class="headerlink" title="0.2 实时分析"></a>0.2 实时分析</h2><p>Elasticsearch 能够实时执行分析，因此适用于跟踪实时数据（如用户活动、交易或传感器输出）的仪表盘。这种能力使企业能够根据最新信息及时做出决策。</p><h2 id="0-3-机器学习"><a href="#0-3-机器学习" class="headerlink" title="0.3 机器学习"></a>0.3 机器学习</h2><p>通过在 X-Pack 中添加机器学习功能，Elasticsearch 可以<strong>自动检测数据中的异常、模式和趋势</strong>。这对于预测分析、个性化和提高运营效率非常有用。</p><h2 id="0-4-地理数据应用"><a href="#0-4-地理数据应用" class="headerlink" title="0.4 地理数据应用"></a>0.4 地理数据应用</h2><p>Elasticsearch 通过地理空间索引和搜索功能支持地理数据。这对于需要管理和可视化地理信息（如地图和基于位置的服务）的应用非常有用，使执行<strong>邻近搜索</strong>和基于位置的数据可视化成为可能。</p><h2 id="0-5-日志和事件数据分析"><a href="#0-5-日志和事件数据分析" class="headerlink" title="0.5 日志和事件数据分析"></a>0.5 日志和事件数据分析</h2><p>企业使用 Elasticsearch 聚合、监控和分析各种来源的日志和事件数据。它是 ELK 堆栈（Elasticsearch、Logstash、Kibana）的关键组件，该堆栈常用于管理系统和应用程序日志，以发现问题并监控系统健康状况。</p><h2 id="0-6-安全信息和事件管理（SIEM）"><a href="#0-6-安全信息和事件管理（SIEM）" class="headerlink" title="0.6 安全信息和事件管理（SIEM）"></a>0.6 安全信息和事件管理（SIEM）</h2><p>Elasticsearch 可用作 SIEM 的工具，帮助企业实时分析安全事件。这对于检测、分析和响应安全事件和漏洞至关重要。</p><p>上述每个用例都利用了 Elasticsearch 的优势（如可扩展性、速度和灵活性）来处理不同的数据类型和复杂的查询，为数据驱动型应用提供了重要价值。</p><h1 id="1-Elasticsearch-ES"><a href="#1-Elasticsearch-ES" class="headerlink" title="1.Elasticsearch(ES)"></a>1.Elasticsearch(ES)</h1><p>ES是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容。</p><p>Elasticsearch结合Kibana，Logstash，beats是一整套技术栈，被叫做==ELK==。经常用来做日志收集、系统监控和状态分析等等：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301712288.png" alt="image-20240430171212212"></p><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><h3 id="1-1-1-安装elasticsearch"><a href="#1-1-1-安装elasticsearch" class="headerlink" title="1.1.1 安装elasticsearch"></a>1.1.1 安装elasticsearch</h3><p>通过下面的Docker命令即可安装单机版本的elasticsearch：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#先在tar所在目录下打开cmd</span><br><span class="line">docker load -i es.tar</span><br><span class="line"></span><br><span class="line">#创建一个网络【不然kibana不能连接es，踩坑了！！】</span><br><span class="line">docker network create elastic</span><br><span class="line"></span><br><span class="line">#黑马安装：</span><br><span class="line">docker run -d \</span><br><span class="line">  --name es \</span><br><span class="line">  -e &quot;ES_JAVA_OPTS&#x3D;-Xms512m -Xmx512m&quot; \        #配置jvm的内存</span><br><span class="line">  -e &quot;discovery.type&#x3D;single-node&quot; \            #配置运行模式【单点模式&#x2F;集群模式】</span><br><span class="line">  -v es-data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data \   #挂载</span><br><span class="line">  -v es-plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network hm-net \   </span><br><span class="line">  -p 9200:9200 \  #访问http端口</span><br><span class="line">  -p 9300:9300 \  #集群使用</span><br><span class="line">  elasticsearch:7.12.1</span><br><span class="line">  </span><br><span class="line">#csdn安装:</span><br><span class="line">docker run -d --name es -e ES_JAVA_OPTS&#x3D;&quot;-Xms512m -Xmx512m&quot; -e &quot;discovery.type&#x3D;single-node&quot; --privileged --network elastic -p 9200:9200 -p 9300:9300 elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><p>启动之后访问<a href="http://localhost:9200/就可以看到elasticsearch信息：" target="_blank" rel="noopener">http://localhost:9200/就可以看到elasticsearch信息：</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072044725.png" alt="image-20240507204417602" style="zoom:67%;"><h3 id="1-1-2-安装Kibana"><a href="#1-1-2-安装Kibana" class="headerlink" title="1.1.2 安装Kibana"></a>1.1.2 安装Kibana</h3><p>通过下面的Docker命令，即可部署Kibana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#先在tar所在目录下打开cmd</span><br><span class="line">docker load -i kibana.tar</span><br><span class="line"></span><br><span class="line">#黑马安装：</span><br><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es:9200 \   #es的地址，这里的es要和es配置docker的时候--name一致</span><br><span class="line">--network&#x3D;hm-net \  #网络和es一个网络</span><br><span class="line">-p 5601:5601  \</span><br><span class="line">kibana:7.12.1  #要保证和es版本一致！！！</span><br><span class="line"></span><br><span class="line">#csdn安装：</span><br><span class="line">docker run -d --name kibana -e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es:9200 --network elastic -p 5601:5601  kibana:7.12.1</span><br></pre></td></tr></table></figure><p>启动之后访问<a href="http://localhost:5601/就可以通过kibana数据化访问elasticsearch：" target="_blank" rel="noopener">http://localhost:5601/就可以通过kibana数据化访问elasticsearch：</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072046111.png" alt="image-20240507204635028" style="zoom:80%;"><p>可以点击右上角Dev tools，进入开发工具页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221602466.png" alt="image-20240507204914788"></p><p>点击之后：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072051099.png" alt="image-20240507205135009"></p><h1 id="2-倒排索引"><a href="#2-倒排索引" class="headerlink" title="2.倒排索引"></a>2.倒排索引</h1><p>elasticsearch的高性能搜索表现，因为底层的倒排索引技术解决的就是根据==部分词条模糊匹配==的问题。【Innodb底层就是用倒排索引做的全文索引】</p><h2 id="2-1-正向索引-精准匹配"><a href="#2-1-正向索引-精准匹配" class="headerlink" title="2.1 正向索引(精准匹配)"></a>2.1 正向索引(精准匹配)</h2><p>我们有一张名为tb_goods的表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072100540.png" alt="image-20240507210036497"></p><p>其中，id字段已经创建了索引（底层使用b+树）所以根据id搜索的速度会非常快。但是其他字段例如title只在叶子结点上存在。</p><p>比如用户的sql语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from tb_goods</span><br><span class="line">where title like &#39;%手机%&#39;;</span><br></pre></td></tr></table></figure><p>搜索大概流程如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072124917.png" alt="image-20240507212400849"></p><p>说明：</p><ul><li>1）检查到搜索条件为<code>like &#39;%手机%&#39;</code>，需要找到<code>title</code>中包含<code>手机</code>的数据</li><li>2）逐条遍历每行数据（每个叶子节点），比如第1次拿到<code>id</code>为1的数据</li><li>3）判断数据中的<code>title</code>字段值是否符合条件</li><li>4）如果符合则放入结果集，不符合则丢弃</li><li>5）回到步骤1</li></ul><p>综上，根据id搜索条件为精确匹配时，可以走索引，查询效率较高。而当搜索条件为模糊匹配时，由于索引无法生效，导致从索引查询退化为全表扫描，效率很差。</p><p>因此，正向索引适合于根据索引字段的精确搜索，不适合基于部分词条的模糊匹配。</p><p>而倒排索引恰好解决的就是根据部分词条模糊匹配的问题。</p><h2 id="2-2-倒排索引-模糊匹配"><a href="#2-2-倒排索引-模糊匹配" class="headerlink" title="2.2 倒排索引(模糊匹配)"></a>2.2 倒排索引(模糊匹配)</h2><h3 id="2-2-1-基本概念"><a href="#2-2-1-基本概念" class="headerlink" title="2.2.1 基本概念"></a>2.2.1 基本概念</h3><p>倒排索引中两个重要的概念：</p><ul><li><p><strong>文档(Document):</strong>用来搜索的数据，<strong>每一条数据</strong>就是一个文档【一个网页，一个商品信息】</p></li><li><p><strong>词条(Term):</strong>对文档数据/用户搜索数据，利用某种算法分词，得到的<strong>具备含义的词语</strong>就是词条【我是中国人，就可以分为：我，是，中国人，国人，人这几个词条】</p></li></ul><h3 id="2-2-2-创建流程"><a href="#2-2-2-创建流程" class="headerlink" title="2.2.2 创建流程"></a>2.2.2 创建流程</h3><p>创建倒排索引是对正向索引的一种特殊处理和应用，流程如下：</p><ul><li><p>将每个文档的数据利用<strong>分词算法</strong>根据语义拆分得到一个个词条</p></li><li><p>创建表，表中每行数据：{词条，词条所在文档id，词条位置}</p></li><li><p>因为词条唯一性，可以给词条创建正向索引(唯一索引)</p></li></ul><p>此时形成的这张以词条为索引的表就是倒排索引表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221602499.png" alt="image-20240507214322180"></p><h3 id="2-2-3-搜索流程"><a href="#2-2-3-搜索流程" class="headerlink" title="2.2.3 搜索流程"></a>2.2.3 搜索流程</h3><p>以搜索”华为手机”为例，如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072150690.png" alt="image-20240507215033610"></p><p>流程描述：</p><p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。</p><p>2）对用户输入条件<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。</p><p>3）拿着词条在倒排索引中查找（<strong>由于词条有唯一索引，查询效率很高</strong>），即可得到包含词条的文档id：<code>1、2、3</code>。</p><p>4）拿着文档<code>id</code>到正向索引中查找具体文档即可（由于<strong><code>id</code>也有索引</strong>，查询效率也很高）</p><p>==根据条件先分词，每个词条去倒排索引查询【词条有唯一索引】找到对应文档id，根据文档id到正向索引【id有索引】查询具体文档(一条数据)==</p><h3 id="2-2-4-两者对比"><a href="#2-2-4-两者对比" class="headerlink" title="2.2.4 两者对比"></a>2.2.4 两者对比</h3><ul><li><strong>正向索引</strong>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。 </li><li>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是<strong>根据词条找文档的过程</strong>。 </li></ul><p>两者优缺点：</p><table><thead><tr><th></th><th>正向索引</th><th>倒排索引</th></tr></thead><tbody><tr><td>优点</td><td>1.可以给多个字段创建索引<br>2.根据索引字段搜索和排序速度非常快</td><td>部分词条查询效率高【创建唯一索引】</td></tr><tr><td>缺点</td><td>部分词条查询效率不高，只能全表扫描</td><td>1.只能给词条创建索引，而不是字段<br>2.无法根据字段做排序</td></tr></tbody></table><h1 id="3-基础概念"><a href="#3-基础概念" class="headerlink" title="3.基础概念"></a>3.基础概念</h1><h2 id="3-1-文档-一行数据-和字段-一个列"><a href="#3-1-文档-一行数据-和字段-一个列" class="headerlink" title="3.1 文档(一行数据)和字段(一个列)"></a>3.1 文档(一行数据)和字段(一个列)</h2><p>elasticsearch是面向<strong>文档（Document）</strong>存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为<code>json</code>格式存储在<code>elasticsearch</code>中：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072305342.png" alt="image-20240507230531294"></p><p>因此， 数据库中一行数据 &lt;==&gt; ES中一个JSON文档；</p><p>而数据库中每行数据都包含很多列，这些列就转换为JSON文档中的<strong>字段（Field）</strong></p><h2 id="3-2-索引-数据库的表-和映射-数据库表结构约束"><a href="#3-2-索引-数据库的表-和映射-数据库表结构约束" class="headerlink" title="3.2 索引(数据库的表)和映射(数据库表结构约束)"></a>3.2 索引(数据库的表)和映射(数据库表结构约束)</h2><p>随着业务发展，需要在es中存储的文档也会越来越多，比如有商品的文档，用户的文档，订单的文档等等；</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405082235832.png" alt="image-20240508223520776"></p><p>所有文档都散乱存放显然非常混乱，也不方便管理。</p><p>因此，我们要将==类型相同的文档==(一行数据)集中在一起管理，称为<strong>索引（Index）</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405082238659.png" alt="image-20240508223847616"></p><p>因此，==索引(类型相同的很多行文档) &lt;—-&gt;数据库中的表==</p><p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。</p><p>因此，索引库中就有==<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束==</p><h2 id="3-3-Mysql和Elasticsearch对比"><a href="#3-3-Mysql和Elasticsearch对比" class="headerlink" title="3.3 Mysql和Elasticsearch对比"></a>3.3 Mysql和Elasticsearch对比</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405082256502.png" alt="image-20240508225648423"></p><blockquote><p>注意：mysql的语法就是sql，而es的语法是dsl【提供json风格的请求语句，用来操作es进行crud】</p></blockquote><ul><li>Mysql：擅长事务类型操作，可以确保数据的安全和一致性 </li><li>Elasticsearch：擅长海量数据的搜索、分析、计算 </li></ul><p>因此在企业中，往往是两者结合使用：</p><ul><li>对安全性要求较高的写操作，使用mysql实现</li><li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405082312525.png" alt="image-20240508231244479"></p><h1 id="4-IK分词器-ikun"><a href="#4-IK分词器-ikun" class="headerlink" title="4.IK分词器(ikun)"></a>4.IK分词器(ikun)</h1><p>Elasticsearch的关键就是倒排索引，而倒排索引依赖于对文档内容的分词情况(分词好那就效率高)，而分词则需要高效、精准的分词算法，IK分词器就是这样一个中文分词算法</p><h2 id="4-1-安装IK分词器"><a href="#4-1-安装IK分词器" class="headerlink" title="4.1 安装IK分词器"></a>4.1 安装IK分词器</h2><p>方案一：在线安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it es .&#x2F;bin&#x2F;elasticsearch-plugin  install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v7.12.1&#x2F;elasticsearch-analysis-ik-7.12.1.zip</span><br></pre></td></tr></table></figure><p>方案二：离线安装</p><p>首先，查看之前安装的elasticsearch容器的plugins数据卷目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221602482.png" alt="image-20240507221107758"></p><p>可以看到elasticsearch的插件挂载到了<code>/var/lib/docker/volumes/es-plugins/_data</code>这个目录。我们需要把IK分词器上传至这个目录</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072216972.png" alt="image-20240507221628934"></p><h2 id="4-2-使用IK分词器"><a href="#4-2-使用IK分词器" class="headerlink" title="4.2 使用IK分词器"></a>4.2 使用IK分词器</h2><h3 id="4-2-1-官方标准分词器-standard"><a href="#4-2-1-官方标准分词器-standard" class="headerlink" title="4.2.1 官方标准分词器(standard)"></a>4.2.1 官方标准分词器(standard)</h3><p>我们在Kibana的DevTools上来测试分词器，首先测试Elasticsearch官方提供的标准分词器：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072218254.png" alt="image-20240507221852165" style="zoom: 67%;"><p>我们可以看到，标准分词器只能1个字作为一个1个词条，无法正取对中文做分词</p><h3 id="4-2-2-IK分词器-ik-smart智能语义切分"><a href="#4-2-2-IK分词器-ik-smart智能语义切分" class="headerlink" title="4.2.2 IK分词器(ik_smart智能语义切分)"></a>4.2.2 IK分词器(ik_smart智能语义切分)</h3><p>这种情况下，可以智能的将词语切分。但是像程序员这种词可以拆分为程序员，程序，员</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072222404.png" alt="image-20240507222246345"></p><h3 id="4-2-3-IK分词器-ik-max-word最细粒度切分"><a href="#4-2-3-IK分词器-ik-max-word最细粒度切分" class="headerlink" title="4.2.3 IK分词器(ik_max_word最细粒度切分)"></a>4.2.3 IK分词器(ik_max_word最细粒度切分)</h3><p>这种情况下，可以在4.2.2的前提下继续细分【程序员这种词可以拆分为程序员，程序，员】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072225864.png" alt="image-20240507222545813"></p><h2 id="4-3-扩展词典"><a href="#4-3-扩展词典" class="headerlink" title="4.3 扩展词典"></a>4.3 扩展词典</h2><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“泰裤辣”，“传智播客” 等</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072226525.png" alt="image-20240507222659451" style="zoom:80%;"><p>所以想要正确分词，<strong>IK分词器的词库也需要不断地更新</strong>，IK分词器提供了扩展词汇的功能：</p><p>我们可以在ik-config文件夹下的<code>IkAnalyzer.cfg.xml</code>文件添加拓展词典和停用词典，这样我们再调用的时候，宋亚翔和传智播客就可以被认为是一个词语作为词条</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072244524.png" alt="image-20240507224408412"></p><h1 id="基础操作-对索引库和文档基础操作"><a href="#基础操作-对索引库和文档基础操作" class="headerlink" title="==基础操作(对索引库和文档基础操作)=="></a>==基础操作(对索引库和文档基础操作)==</h1><h1 id="方式一：通过Elasticsearch手动创建–很繁琐"><a href="#方式一：通过Elasticsearch手动创建–很繁琐" class="headerlink" title="==方式一：通过Elasticsearch手动创建–很繁琐=="></a>==方式一：通过Elasticsearch手动创建–很繁琐==</h1><h1 id="5-索引库操作-数据库表"><a href="#5-索引库操作-数据库表" class="headerlink" title="5.索引库操作(数据库表)"></a>5.索引库操作(数据库表)</h1><p>index类似数据库表，映射类似表的结构。我们要向es中存储数据，必须先创建索引(数据库表)和映射(数据库定义)</p><h2 id="5-1-Mapping映射属性"><a href="#5-1-Mapping映射属性" class="headerlink" title="5.1 Mapping映射属性"></a>5.1 Mapping映射属性</h2><p>Mapping是对索引库的文档设置约束，常见的mapping属性包括：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201506907.png" alt="image-20240520150601809"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;age&quot;: 21,</span><br><span class="line">    &quot;weight&quot;: 52.1,</span><br><span class="line">    &quot;isMarried&quot;: false,</span><br><span class="line">    &quot;info&quot;: &quot;黑马程序员Java讲师&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;zy@itcast.cn&quot;,</span><br><span class="line">    &quot;score&quot;: [99.1, 99.5, 98.9],</span><br><span class="line">    &quot;name&quot;: &#123;</span><br><span class="line">        &quot;firstName&quot;: &quot;云&quot;,</span><br><span class="line">        &quot;lastName&quot;: &quot;赵&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的每个字段映射(Mapping)：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201510959.png" alt="image-20240520151047898"></p><h2 id="5-2-索引库的CRUD"><a href="#5-2-索引库的CRUD" class="headerlink" title="5.2 索引库的CRUD"></a>5.2 索引库的CRUD</h2><p>由于Elasticsearch采用的是Restful风格的API，因此其请求方式和路径相对都比较规范，而且请求参数也都采用JSON风格。</p><p>我们直接基于Kibana的DevTools来编写请求做测试，由于有语法提示，会非常方便。</p><h3 id="5-2-1-创建索引库和映射"><a href="#5-2-1-创建索引库和映射" class="headerlink" title="5.2.1 创建索引库和映射"></a>5.2.1 创建索引库和映射</h3><p><strong>基本语法</strong>：</p><ul><li>请求方式：<code>PUT</code></li><li>请求路径：<code>/索引库名</code>，可以自定义</li><li>请求参数：<code>mapping</code>映射</li></ul><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;索引库名称</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;字段名&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名2&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;false&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名3&quot;:&#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;子字段&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; ...略</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201510959.png" alt="image-20240520151047898"></p><h3 id="5-2-2-查询索引库"><a href="#5-2-2-查询索引库" class="headerlink" title="5.2.2 查询索引库"></a>5.2.2 查询索引库</h3><p><strong>基本语法</strong>：</p><ul><li>请求方式：GET </li><li>请求路径：/索引库名 </li><li>请求参数：无 </li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201513186.png" alt="image-20240520151340133"></p><h3 id="5-2-3-修改索引库"><a href="#5-2-3-修改索引库" class="headerlink" title="5.2.3 修改索引库"></a>5.2.3 修改索引库</h3><p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改mapping</strong></p><p>虽然==无法修改mapping中已有字段，却允许添加新的字段到mapping==，因为不会对倒排索引产生影响。因此修改索引库能做的就是向索引库中添加新字段，或者更新索引库的基础属性。</p><p><strong>基本语法</strong>：</p><ul><li>请求方式：PUT</li><li>请求路径：/索引库名 </li><li>请求参数：/_mapping</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201516998.png" alt="image-20240520151647929"></p><h3 id="5-2-4-删除索引库"><a href="#5-2-4-删除索引库" class="headerlink" title="5.2.4 删除索引库"></a>5.2.4 删除索引库</h3><p><strong>基本语法：</strong></p><ul><li>请求方式：DELETE </li><li>请求路径：/索引库名 </li><li>请求参数：无 </li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201514822.png" alt="image-20240520151416751"></p><h3 id="5-2-5-索引库操作总结"><a href="#5-2-5-索引库操作总结" class="headerlink" title="==5.2.5 索引库操作总结=="></a>==5.2.5 索引库操作总结==</h3><p>索引库操作：</p><ul><li>创建索引库：PUT /索引库名{“mappings”:{“properties”:{部分新字段信息}}}}</li><li>查询索引库：GET /索引库名</li><li>删除索引库：DELETE /索引库名</li><li>修改索引库【添加字段】：PUT /索引库名/_mapping{“properties”:{部分新字段信息}}</li></ul><p>可以看到，对索引库的操作基本遵循的Restful的风格，因此API接口非常统一，方便记忆。</p><h1 id="6-文档操作-一行数据"><a href="#6-文档操作-一行数据" class="headerlink" title="6.文档操作(一行数据)"></a>6.文档操作(一行数据)</h1><p>有了索引库，接下来就可以向索引库中添加数据。而ElasticSearch数据就是JSON风格的文档。</p><h2 id="6-1-新增文档"><a href="#6-1-新增文档" class="headerlink" title="6.1 新增文档"></a>6.1 新增文档</h2><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;索引库名&#x2F;_doc&#x2F;文档id</span><br><span class="line">&#123;</span><br><span class="line">    &quot;字段1&quot;: &quot;值1&quot;,</span><br><span class="line">    &quot;字段2&quot;: &quot;值2&quot;,</span><br><span class="line">    &quot;字段3&quot;: &#123;</span><br><span class="line">        &quot;子属性1&quot;: &quot;值3&quot;,</span><br><span class="line">        &quot;子属性2&quot;: &quot;值4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，目前要新增id=1的文档：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201536525.png" alt="image-20240520153641479"></p><h2 id="6-2-查询文档"><a href="#6-2-查询文档" class="headerlink" title="6.2 查询文档"></a>6.2 查询文档</h2><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;&#123;索引库名称&#125;&#x2F;_doc&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure><p>例如，查询id=1的文档：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201538769.png" alt="image-20240520153813733"></p><h2 id="6-3-删除文档"><a href="#6-3-删除文档" class="headerlink" title="6.3 删除文档"></a>6.3 删除文档</h2><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /&#123;索引库名&#125;/_doc/id值</span><br></pre></td></tr></table></figure><p>例如，删除id=1的文档：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201539097.png" alt="image-20240520153911052"></p><h2 id="6-4-修改文档"><a href="#6-4-修改文档" class="headerlink" title="6.4 修改文档"></a>6.4 修改文档</h2><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档【会删除旧文档，添加新文档(如果没有就直接删除)】</li><li>局部修改：修改文档中的部分字段</li></ul><h3 id="6-4-1-全量修改"><a href="#6-4-1-全量修改" class="headerlink" title="6.4.1 全量修改"></a>6.4.1 全量修改</h3><p>全量修改是覆盖原来的文档，其本质是两步操作：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /&#123;索引库名&#125;/_doc/文档id</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"字段1"</span>: <span class="string">"值1"</span>,</span><br><span class="line">    <span class="attr">"字段2"</span>: <span class="string">"值2"</span>,</span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201542046.png" alt="image-20240520154216989"></p><h3 id="6-4-2-局部修改"><a href="#6-4-2-局部修改" class="headerlink" title="6.4.2 局部修改"></a>6.4.2 局部修改</h3><p>局部修改是只修改指定id匹配的文档中的部分字段。【<strong>注意：局部修改是POST</strong>】</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /&#123;索引库名&#125;/_update/文档id</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"doc"</span>: &#123;</span><br><span class="line">         <span class="attr">"字段名"</span>: <span class="string">"新的值"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201542149.png" alt="image-20240520154237114"></p><h2 id="6-5-批处理"><a href="#6-5-批处理" class="headerlink" title="6.5 批处理"></a>6.5 批处理</h2><p>类似于Mysql数据库，可以进行多条数据一次性操作【感觉很麻烦，主要是可读性很差】</p><p>批处理采用==POST请求==，基本语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line"># 1.修改 --如果文档id存在就覆盖，不存在就创建</span><br><span class="line"># index代表新增操作  _index表示索引库名 _id表示要操作的文档id  </span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"test"</span>, <span class="string">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line"># 代表新增的文档内容</span><br><span class="line">&#123; <span class="string">"field1"</span> : <span class="string">"value1"</span> &#125;</span><br><span class="line"></span><br><span class="line"># 2.删除</span><br><span class="line">&#123; <span class="string">"delete"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"test"</span>, <span class="string">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"># 3.新增 --如果文档id存在就报错</span><br><span class="line">&#123; <span class="string">"create"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"test"</span>, <span class="string">"_id"</span> : <span class="string">"3"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="string">"field1"</span> : <span class="string">"value3"</span> &#125;</span><br><span class="line"></span><br><span class="line"># 4.更新</span><br><span class="line">&#123; <span class="string">"update"</span> : &#123;<span class="string">"_id"</span> : <span class="string">"1"</span>, <span class="string">"_index"</span> : <span class="string">"test"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="string">"doc"</span> : &#123;<span class="string">"field2"</span> : <span class="string">"value2"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="6-6-文档操作总结"><a href="#6-6-文档操作总结" class="headerlink" title="==6.6 文档操作总结=="></a>==6.6 文档操作总结==</h2><p>相对于索引库创建，大致就是中间多了一个_doc路径，修改文档类似于修改索引库比较特殊。</p><ul><li>创建文档：<code>POST /{索引库名}/_doc/文档id   { json文档 }</code></li><li>查询文档：<code>GET /{索引库名}/_doc/文档id</code></li><li>删除文档：<code>DELETE /{索引库名}/_doc/文档id</code></li><li>修改文档： <ul><li>全量修改：<code>PUT /{索引库名}/_doc/文档id { json文档 }</code></li><li>局部修改：<code>POST /{索引库名}/_update/文档id { &quot;doc&quot;: {字段}}</code></li></ul></li></ul><p>==索引库操作和文档操作对比：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211500548.png" alt="image-20240521150017482"></p><p>5和6步骤主要是在网页端进行设置，因此提出了一个Java的客户端—==JavaRestClient==</p><h1 id="方式二：通过Java实现—不用繁琐的手动创建"><a href="#方式二：通过Java实现—不用繁琐的手动创建" class="headerlink" title="==方式二：通过Java实现—不用繁琐的手动创建=="></a>==方式二：通过Java实现—不用繁琐的手动创建==</h1><h1 id="7-JavaRestClient"><a href="#7-JavaRestClient" class="headerlink" title="7.JavaRestClient"></a>7.JavaRestClient</h1><p>提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是==组装DSL语句==，通过http请求发送给ES。</p><p>由于ES目前最新版本是8.8，提供了全新版本的客户端，老版本的客户端已经被标记为过时。而我们采用的是7.12版本，因此只能使用老版本客户端：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201555388.png" alt="image-20240520155549341"></p><p>然后选择7.12版本，HighLevelRestClient版本：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201556867.png" alt="image-20240520155613826"></p><h2 id="7-1-初始化RestClient"><a href="#7-1-初始化RestClient" class="headerlink" title="==7.1 初始化RestClient=="></a>==7.1 初始化RestClient==</h2><p>在Elasticsearch提供的API中，与Elasticsearch一切交互都封装在一个名为<code>RestHighLevelClient</code>的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。</p><h3 id="7-1-1-引入RestHighLevelClient依赖"><a href="#7-1-1-引入RestHighLevelClient依赖" class="headerlink" title="7.1.1 引入RestHighLevelClient依赖"></a>7.1.1 引入RestHighLevelClient依赖</h3><p>在<code>item-service</code>模块中引入<code>es</code>的<code>RestHighLevelClient</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-1-2-覆盖ES版本"><a href="#7-1-2-覆盖ES版本" class="headerlink" title="7.1.2 覆盖ES版本"></a>7.1.2 覆盖ES版本</h3><p>因为SpringBoot默认的ES版本是<code>7.17.10</code>，所以我们需要覆盖默认的ES版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--覆盖成7.12.1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-1-3-初始化RestHighLevelClient"><a href="#7-1-3-初始化RestHighLevelClient" class="headerlink" title="7.1.3 初始化RestHighLevelClient"></a>7.1.3 初始化RestHighLevelClient</h3><p>初始化的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">    <span class="comment">//使用RestClient的builder方法创建</span></span><br><span class="line">    RestClient.builder(</span><br><span class="line">        HttpHost.create(<span class="string">"http://192.168.xxx.xxx:9200"</span>)</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="7-2-商品Mapping映射"><a href="#7-2-商品Mapping映射" class="headerlink" title="==7.2 商品Mapping映射=="></a>==7.2 商品Mapping映射==</h2><p>我们针对购物车数据库进行分析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201728989.png" alt="image-20240520172813812"></p><p>我们可以对购物车的所有字段进行分析，判断哪些字段必须添加到ElasticSearch中，判断哪些字段必须添加搜索功能。从而进行新建索引库和映射：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201717606.png" alt="image-20240520171754450"></p><p>在网页上的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;items</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;stock&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;image&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;category&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;sold&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;commentCount&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;isAD&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;boolean&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;updateTime&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-索引库操作"><a href="#7-3-索引库操作" class="headerlink" title="7.3 索引库操作"></a>7.3 索引库操作</h2><p>创建索引库的JavaAPI和Restful接口API对比：</p><h3 id="7-3-1-创建索引库"><a href="#7-3-1-创建索引库" class="headerlink" title="7.3.1 创建索引库"></a>7.3.1 创建索引库</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201733352.png" alt="image-20240520173351287"></p><p>具体代码如下:</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211350671.png" alt="image-20240521135017531" style="zoom:80%;"><p>创建索引库：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211351676.png" alt="image-20240521135105629" style="zoom:80%;"><h3 id="7-3-2-删除索引库"><a href="#7-3-2-删除索引库" class="headerlink" title="7.3.2 删除索引库"></a>7.3.2 删除索引库</h3><p>具体代码如下:</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211351946.png" alt="image-20240521135115905" style="zoom:80%;"><h3 id="7-3-3-查询索引库"><a href="#7-3-3-查询索引库" class="headerlink" title="7.3.3 查询索引库"></a>7.3.3 查询索引库</h3><p>具体代码如下:</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211351275.png" style="zoom:80%;"><h3 id="7-3-4-索引库操作总结"><a href="#7-3-4-索引库操作总结" class="headerlink" title="==7.3.4 索引库操作总结=="></a>==7.3.4 索引库操作总结==</h3><p>JavaRestClient操作elasticsearch的流程基本类似。核心是<code>client.indices()</code>方法来获取索引库的操作对象。</p><p>索引库操作的基本步骤：</p><ul><li><p>1.初始化RestHighLevelClient类对象client【创建客户端】</p></li><li><p>2.创建XxxIndexRequest对象request【XXX是<code>Create</code>、<code>Get</code>、<code>Delete</code>】</p></li><li><p>3.准备请求参数request.source()方法【<code>Create</code>时需要参数，其他情况不需要】</p></li><li><p>4.发送请求client.indices().xxx()方法【xxx是<code>create</code>、<code>exists</code>、<code>delete</code>】</p></li></ul><h2 id="7-4-文档操作"><a href="#7-4-文档操作" class="headerlink" title="7.4 文档操作"></a>7.4 文档操作</h2><h3 id="7-4-1-新增文档"><a href="#7-4-1-新增文档" class="headerlink" title="7.4.1 新增文档"></a>7.4.1 新增文档</h3><ul><li>1.创建Request对象，这里是<code>IndexRequest</code>，因为添加文档就是创建倒排索引的过程</li><li>2.准备请求参数，本例中就是Json文档</li><li>3.发送请求【client.index()方法就好了】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211427513.png" alt="image-20240521142712455"></p><h3 id="7-4-2-查询文档"><a href="#7-4-2-查询文档" class="headerlink" title="7.4.2 查询文档"></a>7.4.2 查询文档</h3><p>与之前的流程类似，代码大概分2步：</p><ul><li>创建Request对象</li><li>准备请求参数，这里是无参，【直接省略】</li><li>发送请求</li><li>解析结果【因为结果在_source部分内】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211428059.png" alt="image-20240521142844007"></p><p>可以看到，响应结果是一个JSON，其中文档放在一个<code>_source</code>属性中，因此解析就是拿到<code>_source</code>，反序列化为Java对象即可</p><h3 id="7-4-3-删除文档"><a href="#7-4-3-删除文档" class="headerlink" title="7.4.3 删除文档"></a>7.4.3 删除文档</h3><p>与查询相比，仅仅是请求方式从<code>DELETE</code>变成<code>GET</code>，可以想象Java代码应该依然是2步走：</p><ul><li>1）准备Request对象，因为是删除，这次是<code>DeleteRequest</code>对象。要指定索引库名和id</li><li>2）准备参数，无参，直接省略</li><li>3）发送请求。因为是删除，所以是<code>client.delete()</code>方法</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211430055.png" alt="image-20240521143043972"></p><h3 id="7-4-4-修改文档"><a href="#7-4-4-修改文档" class="headerlink" title="7.4.4 修改文档"></a>7.4.4 修改文档</h3><p>修改我们讲过两种方式：</p><ul><li>全量修改：本质是先根据id删除，再新增【与7.4.1一致】</li><li>局部修改：修改文档中的指定字段值</li></ul><p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：</p><ul><li>如果新增时，ID已经存在，则修改</li><li>如果新增时，ID不存在，则新增</li></ul><p>这里不再赘述，我们主要关注局部修改的API即可</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211431593.png" alt="image-20240521143147541"></p><p>与之前类似，也是三步走：</p><ul><li>1）准备<code>Request</code>对象。【这次是修改，所以是<code>UpdateRequest</code>】</li><li>2）准备参数。【也就是JSON文档，里面包含要修改的字段】</li><li>3）更新文档。【这里调用<code>client.update()</code>方法】</li></ul><h3 id="7-4-5-批量导入文档"><a href="#7-4-5-批量导入文档" class="headerlink" title="7.4.5 批量导入文档"></a>7.4.5 批量导入文档</h3><p>7.4.1-7.4.4的单条处理通过<strong>BulkRequest</strong>解决。因此<code>BulkRequest</code>中提供了<code>add</code>方法，用以添加其它CRUD的请求：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211441488.png" alt="image-20240521144140401"></p><p>具体代码：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211439619.png" alt="image-20240521143955532"></p><h3 id="7-4-6-文档操作总结"><a href="#7-4-6-文档操作总结" class="headerlink" title="==7.4.6 文档操作总结=="></a>==7.4.6 文档操作总结==</h3><p>文档操作的基本步骤：</p><ul><li>1.初始化RestHighLevelClient类对象client【创建客户端】</li><li>2.创建XxxRequest对象request【Xxx是<code>Index</code>、<code>Update</code>、<code>Delete</code>、<code>Bulk</code>】</li><li>3.准备请求参数request.source()方法（<code>Index</code>、<code>Update</code>、<code>Bulk</code>时需要）</li><li>4.发送请求client.Xxx()方法【Xxx是<code>index</code>、<code>get</code>、<code>update</code>、<code>delete</code>、<code>bulk</code>】</li><li>5.解析结果（<code>Get</code>查询时需要，数据在_source内部）</li></ul><p>上述的操作都是围绕id来进行的，只能进行简单查询不符合我们所预期的搜索</p><h1 id="进阶操作-DSL查询，更高级的查询"><a href="#进阶操作-DSL查询，更高级的查询" class="headerlink" title="==进阶操作(DSL查询，更高级的查询)=="></a>==进阶操作(DSL查询，更高级的查询)==</h1><p>Elasticsearch提供基于JSON的<strong>DSL（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl.html" target="_blank" rel="noopener">Domain Specific Language</a>）语句</strong>来定义查询条件，其JavaAPI就是在组织DSL条件。</p><p>Elasticsearch的查询可以分为两大类：</p><ul><li><strong>叶子查询（Leaf</strong> <strong>query</strong> <strong>clauses）</strong>：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。</li><li><strong>复合查询（Compound</strong> <strong>query</strong> <strong>clauses）</strong>：以逻辑方式组合多个叶子查询/更改叶子查询的行为方式。</li></ul><p>在查询以后，还可以对查询的结果做处理，包括：</p><p>• <strong>排序</strong>：按照1个或多个字段值做排序</p><p>• <strong>分页</strong>：根据from和size做分页，类似MySQL</p><p>• <strong>高亮</strong>：对搜索结果中的关键字添加特殊样式，使其更加醒目</p><p>• <strong>聚合</strong>：对搜索结果做数据统计以形成报表</p><p>==后续内容总结图：==  </p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221649088.png" alt="image-20240522164945976" style="zoom:150%;"><h1 id="方式一：通过手动创建–DSL查询"><a href="#方式一：通过手动创建–DSL查询" class="headerlink" title="==方式一：通过手动创建–DSL查询=="></a>==方式一：通过手动创建–DSL查询==</h1><h1 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h1><p>查询的语法结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search   #_search是固定路径，不能修改</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"查询类型"</span>: &#123;</span><br><span class="line">      <span class="comment">// .. 查询条件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，我们以最简单的无条件查询为例【查询类型=match_all】:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /items/_search  #_search是固定路径，不能修改</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    "match_all": &#123;  #查询类型=match_all</span><br><span class="line">         #match_all无条件，所以条件位置不写即可         </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211543976.png" alt="image-20240521154302865"></p><p>虽然是match_all，但是响应结果中并不会包含索引库中的所有文档，而是仅有10条。这是因为处于安全考虑，elasticsearch设置了默认的查询页数</p><h1 id="2-查询—-叶子查询"><a href="#2-查询—-叶子查询" class="headerlink" title="2.查询—-叶子查询"></a>2.查询—-叶子查询</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211544349.png" alt="image-20240521154435190"></p><h2 id="2-1-全文检索–-分词"><a href="#2-1-全文检索–-分词" class="headerlink" title="2.1 全文检索–(分词)"></a>2.1 全文检索–(分词)</h2><p>全文检索的种类也很多，详情可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/full-text-queries.html" target="_blank" rel="noopener">官方文档</a>：</p><h3 id="2-1-1-match–检索一个字段"><a href="#2-1-1-match–检索一个字段" class="headerlink" title="2.1.1 match–检索一个字段"></a>2.1.1 match–检索一个字段</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"字段名"</span>: <span class="string">"搜索条件"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211623220.png" alt="image-20240521162042810"></p><h3 id="2-1-2-multi-match–检索多个字段"><a href="#2-1-2-multi-match–检索多个字段" class="headerlink" title="2.1.2 multi_match–检索多个字段"></a>2.1.2 multi_match–检索多个字段</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"搜索条件"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"字段1"</span>, <span class="string">"字段2"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211620893.png" alt="image-20240521162042810"></p><h2 id="2-2-精确查询–-不分词"><a href="#2-2-精确查询–-不分词" class="headerlink" title="2.2 精确查询–(不分词)"></a>2.2 精确查询–(不分词)</h2><p>精确查询，英文是<code>Term-level query</code>，顾名思义，词条级别的查询。也就是说不会对用户输入的搜索条件再分词，而是作为一个词条，与搜索的字段内容精确值匹配。因此推荐查找<code>keyword</code>、数值、日期、<code>boolean</code>类型的字段。例如：</p><ul><li>id</li><li>price</li><li>城市</li><li>地名</li><li>人名</li></ul><p>等等，作为一个整体才有含义的字段。</p><p>详情可以查看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/term-level-queries.html" target="_blank" rel="noopener">官方文档</a>：</p><h3 id="2-2-1-term–根据词条精确匹配"><a href="#2-2-1-term–根据词条精确匹配" class="headerlink" title="2.2.1 term–根据词条精确匹配"></a>2.2.1 term–根据词条精确匹配</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"字段名"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"搜索条件"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211638230.png" alt="image-20240521163826141"></p><h3 id="2-2-2-range–根据数值范围查询"><a href="#2-2-2-range–根据数值范围查询" class="headerlink" title="2.2.2 range–根据数值范围查询"></a>2.2.2 range–根据数值范围查询</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"字段名"</span>: &#123;</span><br><span class="line">        "gte": &#123;最小值&#125;,</span><br><span class="line">        "lte": &#123;最大值&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211639643.png" alt="image-20240521163921559"></p><h2 id="2-3-地理-geo-查询"><a href="#2-3-地理-geo-查询" class="headerlink" title="2.3 地理(geo)查询"></a>2.3 地理(geo)查询</h2><p>未涉及，用到了补充</p><h1 id="3-查询—-复合查询"><a href="#3-查询—-复合查询" class="headerlink" title="3.查询—-复合查询"></a>3.查询—-复合查询</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211642708.png" alt="image-20240521164256532"></p><p>其他符合查询和相关语法可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/compound-queries.html" target="_blank" rel="noopener">官方文档</a>：</p><h2 id="3-1-布尔查询–-与-或-非"><a href="#3-1-布尔查询–-与-或-非" class="headerlink" title="3.1 布尔查询– 与/或/非"></a>3.1 布尔查询– 与/或/非</h2><p>bool查询，即布尔查询。就是利用逻辑运算来组合一个或多个查询子句的组合。bool查询支持的逻辑运算有：</p><ul><li>must：必须匹配每个子查询，类似“与”  【输入框的搜索条件肯定要参与相关性算分】</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li><li>filter：必须匹配，<strong>不参与算分</strong> 【其他的过滤条件就可以不参与算分】</li></ul><p>bool查询的语法如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211705511.png" alt="image-20240521170512412"></p><p>出于性能考虑，与搜索关键字无关的查询尽量采用must_not或filter逻辑运算，避免参与相关性算分</p><h2 id="3-2-function-score查询–人为修改相关性算分"><a href="#3-2-function-score查询–人为修改相关性算分" class="headerlink" title="3.2 function_score查询–人为修改相关性算分"></a>3.2 function_score查询–人为修改相关性算分</h2><h3 id="3-2-1-相关性算分介绍"><a href="#3-2-1-相关性算分介绍" class="headerlink" title="3.2.1 相关性算分介绍"></a>3.2.1 相关性算分介绍</h3><p>当我们利用match进行叶子查询，文档结果会根据与搜索词条的<strong>关联度打分</strong>（<strong>_score</strong>），返回结果时按照分值降序排列</p><p>例如，我们搜索”手机”，结果如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211713118.png" alt="image-20240521171322014"></p><p>从Elasticsearch5.1开始，采用的相关性打分算法是BM25算法，其公式如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211714744.png" alt="image-20240521171415660"></p><p>基于这套公式，就可以判断出<strong>某个文档</strong>与<strong>用户搜索的关键字</strong>之间的关联度，还是比较准确的。但是，在实际业务需求中，常常会有竞价排名的功能。不是相关度越高排名越靠前，而是掏的钱多的排名靠前。</p><p>例如在百度中搜索Java培训，排名靠前的就是广告推广</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211715630.png" alt="image-20240521171538540"></p><p>要想人为控制相关性算法【添加一个过滤条件，增加一个算分函数得到一个值，然后和原始相关性算分运算一下得到新的】，就需要利用Elasticsearch的<strong>function_score查询</strong>：</p><h3 id="3-2-2-function-score介绍"><a href="#3-2-2-function-score介绍" class="headerlink" title="3.2.2 function_score介绍"></a>3.2.2 function_score介绍</h3><p>function score 查询中包含四部分内容：</p><ul><li><strong>1.原始查询</strong>条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，<strong>原始算分</strong>（query score)</li><li><strong>2.过滤条件</strong>：filter部分，符合该条件的文档才会重新算分</li><li><strong>3.算分函数</strong>：符合filter条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数 <ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数算法</li></ul></li><li>4.<strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： <ul><li>multiply：相乘</li><li>replace：用function score替换query score</li><li>其它，例如：sum、avg、max、min</li></ul></li></ul><p>==【大致就是在原有BM25算法得到相关性算分，然后根据符合filter条件的文档根据算分函数得到一个值，最后两者进行一些运算方式得到最终值】==</p><p>function score的运行流程如下：</p><ul><li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li><li>2）根据<strong>过滤条件</strong>，过滤文档</li><li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li><li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li></ul><p>举例：给IPhone这个品牌的手机算分提高十倍，分析如下：</p><ul><li>过滤条件：品牌必须为IPhone</li><li>算分函数：常量weight，值为10</li><li>算分模式：相乘multiply</li></ul><p>对应代码：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211729636.png" alt="image-20240521172952514"></p><h1 id="4-排序和分页"><a href="#4-排序和分页" class="headerlink" title="4.排序和分页"></a>4.排序和分页</h1><p>1.默认排序：Elasticsearch支持对搜索结果根据相关度算分(_score)进行排序，按照分值降序排列。</p><p>2.指定字段排序：Elasticsearch支持对keyword类型，数值类型，地理坐标类型，日期类型等。</p><h2 id="4-1-指定排序"><a href="#4-1-指定排序" class="headerlink" title="4.1 指定排序"></a>4.1 指定排序</h2><p>基本语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"排序字段"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"排序方式asc和desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221601389.png" alt="image-20240522160121221"></p><h2 id="4-2-分页"><a href="#4-2-分页" class="headerlink" title="4.2 分页"></a>4.2 分页</h2><p>elasticsearch 【默认】只返回==top10数据==。而如果要查询更多数据就需要修改分页参数了</p><p>elasticsearch中通过修改<code>from</code>、<code>size</code>参数来控制要返回的分页结果：</p><ul><li><code>from</code>：从第几个文档开始</li><li><code>size</code>：总共查询几个文档</li></ul><p>类似于mysql中的<code>limit ?, ?</code></p><p>基本语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">0</span>, <span class="comment">// 分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">10</span>,  <span class="comment">// 每页文档数量，默认10</span></span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221604381.png" alt="image-20240522160315919"></p><p>elasticsearch的数据一般会采用<strong>分片存储</strong>，也就是把一个索引中的数据分成N份，存储到不同节点上。这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。</p><p>举例如下：</p><p>如果一个索引库有100000条数据，分别存储到4个分片中，每个分片有25000条数据。现在每页查询10条，查询第99页。那分页查询条件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">990</span>, <span class="comment">// 从第990条开始查询</span></span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">10</span>, <span class="comment">// 每页查询10条</span></span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="string">"asc"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从语句分析来讲：要查询的是第990-1000名数据。</p><p>从实现思路分析来讲：①将所有数据排序，找出前1000名②取出其中990-1000的部分</p><p>这样来看操作很复杂，因为每个片的数据不是顺序存储的，只能所有拿到一起再重新排序，才能找到最终前1000名截取出990-1000数据</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221608493.png" alt="image-20240522160808390"></p><p>因此，<strong>Elasticsearch对普通分页会有一个设置：(from+size)&lt;10000</strong></p><h2 id="4-3-深度分页-解决普通分页"><a href="#4-3-深度分页-解决普通分页" class="headerlink" title="4.3 深度分页(解决普通分页)"></a>4.3 深度分页(解决普通分页)</h2><p>针对深度分页，elasticsearch提供了两种解决方案：</p><ul><li><code>search after</code>：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li><li><code>scroll</code>：原理将排序后的文档id形成快照，保存下来，基于快照做分页。官方已经不推荐使用。</li></ul><p>以search after为例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221614507.png" alt="image-20240522161437320"></p><p>优点：没有查询上限，支持深度分页【更智能，无上限】</p><p>缺点：只能向后逐页查询，不能随机翻页【一页一页查询】</p><p>场景：数据大规模顺序迁移、手机滚动查询【一页一页】</p><p><strong>适用建议：</strong></p><ul><li><p>大多数情况下，我们采用普通分页就可以了。查看百度、京东等网站，会发现其分页都有限制。例如百度最多支持77页，每页不足20条。京东最多100页，每页最多60条。</p></li><li><p>因此，一般我们采用限制分页深度的方式即可，无需实现深度分页。</p></li></ul><h1 id="5-高亮显示"><a href="#5-高亮显示" class="headerlink" title="5.高亮显示"></a>5.高亮显示</h1><h2 id="5-1-高亮原理"><a href="#5-1-高亮原理" class="headerlink" title="5.1 高亮原理"></a>5.1 高亮原理</h2><p>我们在百度，京东搜索时，关键字会变成红色，比较醒目，这叫高亮显示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221620058.png" alt="image-20240522162022778"></p><p>css样式肯定是前端实现页面的时候写好的，但是前端编写页面的时候是不知道页面要展示什么数据的，不可能给数据加标签。而服务端实现搜索功能，要是有<code>elasticsearch</code>做分词搜索，是知道哪些词条需要高亮的。</p><p>因此词条的<strong>高亮标签肯定是由服务端提供数据的时候已经加上的</strong></p><h2 id="5-2-高亮操作"><a href="#5-2-高亮操作" class="headerlink" title="5.2 高亮操作"></a>5.2 高亮操作</h2><p>高亮的思路就是：</p><ul><li>用户输入搜索关键字搜索数据</li><li>服务端根据搜索关键字到Elasticsearch搜索，并给搜索结果中的关键字词条添加<code>html</code>标签</li><li>前端提前给约定好的<code>html</code>标签添加<code>CSS</code>样式</li></ul><p>基本语法：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221624880.png" alt="image-20240522162432699"></p><p>注意：</p><ul><li>搜索必须有查询条件，而且是叶子查询的全文检索类型的查询条件(有分词)，例如<code>match</code></li><li>参与高亮的字段必须是<code>text</code>类型的字段</li><li>默认情况下参与高亮的字段要与搜索字段一致，除非添加：<code>required_field_match=false</code></li></ul><h1 id="6-聚合"><a href="#6-聚合" class="headerlink" title="6.聚合"></a>6.聚合</h1><p>聚合（<code>aggregations</code>）可以让我们极其方便的实现对数据的统计、分析、运算。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现≈<strong>实时搜索</strong>效果。</p><p><strong>聚合分类</strong>：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231432297.png" alt="image-20240523143246188"></p><p>==【注意】：参与聚合的字段必须是Keyword、数值、日期、布尔的类型的字段(这些字段一般不分词)==</p><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231454009.png" alt></p><p>具体位置解释：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231455468.png" alt="image-20240523145507262"></p><h1 id="DSL手写规则总结"><a href="#DSL手写规则总结" class="headerlink" title="==DSL手写规则总结=="></a>==DSL手写规则总结==</h1><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221649088.png" alt="image-20240522164945976" style="zoom:150%;"><h1 id="方式二：通过Java实现—RestClient查询"><a href="#方式二：通过Java实现—RestClient查询" class="headerlink" title="==方式二：通过Java实现—RestClient查询=="></a>==方式二：通过Java实现—RestClient查询==</h1><h1 id="0-总体对照分析"><a href="#0-总体对照分析" class="headerlink" title="==0.总体对照分析=="></a>==0.总体对照分析==</h1><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>我们可以分三步拼凑DSL语句和发起请求获取相应结果：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221720814.png" alt="image-20240522172046658"></p><p>其中2.组织DSL参数的步骤中source()方法下面对应的查询/高亮/分页/排序/聚合：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221728464.png" alt="image-20240522172832347"></p><p>在查询方面我们直接可以通过QueryBuilders类调用对应的叶子查询/复杂查询</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221729417.png" alt="image-20240522172921305"></p><h2 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h2><p>我们可以通过响应结果和Elasticsearch页面返回结果获取具体细节: 【<strong>可以扩展很多，但其实就是对照DSL查询结果写</strong>】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221738726.png" alt="image-20240522173851593"></p><p>黑马的图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221739571.png" alt="image-20240522173920457"></p><h2 id="整体步骤"><a href="#整体步骤" class="headerlink" title="整体步骤"></a>整体步骤</h2><p>文档搜索的基本步骤是：</p><ol><li>创建<code>SearchRequest</code>对象实例request</li><li>准备<code>request.source()</code>，也就是DSL语句【这个位置可以创建查询，分页，排序，聚合，高亮等操作】<ol><li><code>QueryBuilders</code>来构建查询条件</li><li>传入<code>request.source()</code> 的<code>query()</code>方法</li></ol></li><li>发送请求，得到结果</li><li>解析结果（参考DSL查询得到的JSON结果，从外到内，逐层解析）</li></ol><h1 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h1><p>上述手动创建DSL查询的时候讲过查询的分类：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231356476.png" alt="image-20240523135626365"></p><h2 id="1-1-叶子查询"><a href="#1-1-叶子查询" class="headerlink" title="1.1 叶子查询"></a>1.1 叶子查询</h2><h3 id="1-1-1-全文检索"><a href="#1-1-1-全文检索" class="headerlink" title="1.1.1 全文检索"></a>1.1.1 全文检索</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231357981.png" alt="image-20240523135752868"></p><h3 id="1-1-2-精确查询"><a href="#1-1-2-精确查询" class="headerlink" title="1.1.2 精确查询"></a>1.1.2 精确查询</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231358697.png" alt="image-20240523135825592"></p><h2 id="1-2-复合查询"><a href="#1-2-复合查询" class="headerlink" title="1.2 复合查询"></a>1.2 复合查询</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231359487.png" alt="image-20240523135928266"></p><h2 id="1-3-举例"><a href="#1-3-举例" class="headerlink" title="1.3 举例"></a>1.3 举例</h2><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231415435.png" alt="image-20240523141521261"></p><p>具体代码如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231415153.png" alt="image-20240523141510018"></p><h1 id="2-分页和排序"><a href="#2-分页和排序" class="headerlink" title="2.分页和排序"></a>2.分页和排序</h1><h2 id="2-1-基础API"><a href="#2-1-基础API" class="headerlink" title="2.1 基础API"></a>2.1 基础API</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231427552.png" alt="image-20240523142727445"></p><h1 id="3-高亮"><a href="#3-高亮" class="headerlink" title="3.高亮"></a>3.高亮</h1><ul><li>条件同样是在<code>request.source()</code>中指定，只不过高亮条件要基于<code>HighlightBuilder</code>来构造</li><li>高亮响应结果与搜索的文档结果不在一起，需要单独解析</li></ul><h2 id="3-1-基础API"><a href="#3-1-基础API" class="headerlink" title="3.1 基础API"></a>3.1 基础API</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231425033.png" alt="image-20240523142500909"></p><h2 id="3-2-获取高亮值"><a href="#3-2-获取高亮值" class="headerlink" title="3.2 获取高亮值"></a>3.2 获取高亮值</h2><p>每一条hits信息原始数据在_source部分，而高亮部分在同级highlight内部：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231424188.png" alt="image-20240523142428052"></p><p>在整体代码的位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231426493.png" alt="image-20240523142651360"></p><p>代码解读：</p><ul><li>从结果中获取<code>_source</code>。<code>hit.getSourceAsString()</code>，这部分是非高亮结果，json字符串。还需要反序列为<code>ItemDoc</code>对象</li><li>获取高亮结果。<code>hit.getHighlightFields()</code>，返回值是一个<code>Map</code>，key是高亮字段名称，值是<code>HighlightField</code>对象，代表高亮值</li><li>从<code>Map</code>中根据高亮字段名称，获取高亮字段值对象<code>HighlightField</code></li><li>从<code>HighlightField</code>中获取<code>Fragments</code>，并且转为字符串。这部分就是真正的高亮字符串了</li><li>最后：用高亮的结果替换<code>ItemDoc</code>中的非高亮结果</li></ul><h1 id="4-聚合"><a href="#4-聚合" class="headerlink" title="4.聚合"></a>4.聚合</h1><p>我们以品牌聚合为例:</p><h2 id="4-1-基础API"><a href="#4-1-基础API" class="headerlink" title="4.1 基础API"></a>4.1 基础API</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231500598.png" alt="image-20240523150059473"></p><p>在Java代码中位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231502329.png" alt="image-20240523150224095"></p><h2 id="4-2-获取桶结果"><a href="#4-2-获取桶结果" class="headerlink" title="4.2 获取桶结果"></a>4.2 获取桶结果</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231508702.png" alt="image-20240523150857573"></p><p>在Java代码中位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231509794.png" alt="image-20240523150938582"></p><h1 id="Elasticsearch学习总结"><a href="#Elasticsearch学习总结" class="headerlink" title="==Elasticsearch学习总结=="></a>==Elasticsearch学习总结==</h1><h1 id="1-基本使用思路："><a href="#1-基本使用思路：" class="headerlink" title="==1.基本使用思路：=="></a>==1.基本使用思路：==</h1><p>1.创建索引库和映射   –有了类似于数据库的表和表定义</p><p>2.对文档进行CRUD  –有了类似于数据库的一行行数据</p><p>3.在对应位置进行复杂的DSL查询  –我们可以进行高级的查询，分页，排序，高亮，聚合操作</p><h1 id="2-如果写Java代码的话："><a href="#2-如果写Java代码的话：" class="headerlink" title="==2.如果写Java代码的话：=="></a>==2.如果写Java代码的话：==</h1><p>1.pom.xml导入RestHighLevelClient依赖，然后在父工程覆盖ES版本，初始化RestHighLevelClient依赖</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231551904.png" alt="image-20240523155157771"></p><p>2.分析Mysql哪些字段需要搜索和必须存在，然后Elasticsearch在网页上进行手动设定索引库映射</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231552362.png" alt="image-20240523155251252"></p><p>3.对索引库进行操作【不过我认为网页上更方便】 —到这一步类似于完成了数据库的表和表定义</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231553363.png" alt="image-20240523155356214"></p><p>4.对文档操作【不过我认为网页上更方便】   —到这一步类似于有了数据库的数据</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231555759.png" alt="image-20240523155503652"></p><p>5.在具体位置就可以进行复杂的DSL查询【可以进行查询，分页，排序，高亮，聚合等操作】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231556637.png" alt="image-20240523155632499"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-使用场景&quot;&gt;&lt;a href=&quot;#0-使用场景&quot; class=&quot;headerlink&quot; title=&quot;0.使用场景&quot;&gt;&lt;/a&gt;0.使用场景&lt;/h1&gt;&lt;p&gt;数据库的模糊搜索功能单一，匹配条件非常苛刻，必须恰好包含用户搜索的关键字。&lt;/p&gt;
&lt;p&gt;而在搜索引擎中，用
      
    
    </summary>
    
    
    
      <category term="Elasticsearch" scheme="https://Larkkkkkkk.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="https://larkkkkkkk.github.io/2024/04/01/Zookeeper/"/>
    <id>https://larkkkkkkk.github.io/2024/04/01/Zookeeper/</id>
    <published>2024-04-01T02:58:23.000Z</published>
    <updated>2024-04-17T08:09:30.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Zookeeper"><a href="#1-Zookeeper" class="headerlink" title="1.Zookeeper"></a>1.Zookeeper</h1><p>学完dubbo来看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Zookeeper&quot;&gt;&lt;a href=&quot;#1-Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;1.Zookeeper&quot;&gt;&lt;/a&gt;1.Zookeeper&lt;/h1&gt;&lt;p&gt;学完dubbo来看&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Zookeeper" scheme="https://Larkkkkkkk.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://larkkkkkkk.github.io/2024/03/18/RabbitMQ-0/"/>
    <id>https://larkkkkkkk.github.io/2024/03/18/RabbitMQ-0/</id>
    <published>2024-03-18T11:43:04.000Z</published>
    <updated>2024-04-30T09:24:24.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-同步调用和异步调用"><a href="#1-同步调用和异步调用" class="headerlink" title="1.同步调用和异步调用"></a>1.同步调用和异步调用</h1><h2 id="1-1-同步调用"><a href="#1-1-同步调用" class="headerlink" title="1.1 同步调用"></a>1.1 同步调用</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407480.png" alt="image-20240319100914998"></p><p>综上，同步调用的方式存在下列问题：</p><ul><li>拓展性差(新增业务和逻辑就要修改，不符合开闭原则)</li><li>性能下降</li><li>级联失败</li></ul><p>而要解决这些问题，我们就必须用<strong>异步调用</strong>的方式来代替<strong>同步调用</strong></p><h2 id="1-2-异步调用"><a href="#1-2-异步调用" class="headerlink" title="1.2 异步调用"></a>1.2 异步调用</h2><p>  异步调用方式其实就是==基于消息通知的方式==，一般包含三个角色：</p><ul><li>消息发送者：投递消息的人，就是原来的调用方</li><li>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</li><li>消息接收者：接收和处理消息的人，就是原来的服务提供方</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071403552.png" alt="image-20240319143703635"></p><p>异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker(消息代理)。然后接收者根据自己的需求从消息Broker那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理  —&gt;  发送消息的人和接收消息的人就完全解耦了</p><p>如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071404220.png" alt="image-20240319144436498"></p><p>综上，异步调用的优势包括：</p><ul><li>耦合度更低</li><li>性能更好</li><li>业务拓展性强</li><li>故障隔离，避免级联失败</li></ul><p>当然，异步通信也并非完美无缺，它存在下列缺点：</p><ul><li><p>完全依赖于Broker的可靠性、安全性和性能</p></li><li><p>架构复杂，后期维护和调试麻烦</p></li></ul><h2 id="1-3-MQ技术选型"><a href="#1-3-MQ技术选型" class="headerlink" title="1.3 MQ技术选型"></a>1.3 MQ技术选型</h2><p>消息Broker，目前常见的实现方案就是消息队列（MessageQueue），简称为MQ.<br>目比较常见的MQ实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP  XMPP  SMTP  STOMP</td><td>OpenWire  STOMP  REST  XMPP  AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ<br>追求可靠性：RabbitMQ、RocketMQ<br>追求吞吐能力：RocketMQ、Kafka<br>追求消息低延迟：RabbitMQ、Kafka</p><p>据统计，目前国内消息队列使用最多的还是RabbitMQ，再加上其各方面都比较均衡，稳定性也好</p><h1 id="2-RabbitMQ"><a href="#2-RabbitMQ" class="headerlink" title="2.RabbitMQ"></a>2.RabbitMQ</h1><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407789.png" alt="image-20240319093425166" style="zoom:80%;"><p>RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：<a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">Messaging that just works — RabbitMQ</a></p><h2 id="2-1-RabbitMQ安装"><a href="#2-1-RabbitMQ安装" class="headerlink" title="2.1 RabbitMQ安装"></a>2.1 RabbitMQ安装</h2><p>基于Docker来安装RabbitMQ，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run </span><br><span class="line">-e RABBITMQ_DEFAULT_USER&#x3D;larkkkkkkk   #设置默认用户名</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS&#x3D;123456   #设置默认密码</span><br><span class="line">-v mq-plugins:&#x2F;plugins   #将本地主机上的mq-plugins目录挂载到容器内部的&#x2F;plugins目录，可以存放插件</span><br><span class="line">--name mq    #指定容器名</span><br><span class="line">--hostname mq  #指定容器的主机名</span><br><span class="line">-p 15672:15672 #RabbitMQ管理页面登录的端口号 [浏览器输入http:&#x2F;&#x2F;localhost:15672&#x2F;即可进入]</span><br><span class="line">-p 5672:5672  #RabbitMQ用于AMQP协议通信 [SpringAMQP配置时候用]</span><br><span class="line">--network hmall #将容器连接到名字为hmall的网络中  [如果没有就使用命令创建hmall网络 docker network create hmall]</span><br><span class="line">-d  #在后台运行容器</span><br><span class="line">rabbitmq:3.8-management  #使用RabbitMQ 3.8版本带有管理界面的镜像来创建容器</span><br></pre></td></tr></table></figure><p>可以看到在安装命令中有两个映射的端口：</p><ul><li>15672：RabbitMQ提供的管理控制台的端口</li><li>5672：RabbitMQ的消息发送处理接口</li></ul><p>通过访问 <a href="http://localhost:15672即可看到管理控制台。首次访问登录，需要配置文件中设定的用户名和密码">http://localhost:15672即可看到管理控制台。首次访问登录，需要配置文件中设定的用户名和密码</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407126.png" alt="image-20240319192803935"></p><h2 id="2-2-RabbitMQ架构"><a href="#2-2-RabbitMQ架构" class="headerlink" title="2.2 RabbitMQ架构"></a>2.2 RabbitMQ架构</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071410365.png" alt="image-20240319193424489"></p><p>其中包含几个概念：</p><ul><li><code>**publisher**</code>：生产者，也就是发送消息的一方</li><li><code>**consumer**</code>：消费者，也就是消费消息的一方</li><li><code>**queue**</code>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li><li><code>**exchange**</code>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li><li><code>**virtual host**</code>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li></ul><p>上述这些东西都可以在RabbitMQ的管理控制台来管理</p><h1 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3.SpringAMQP"></a>3.SpringAMQP</h1><p>RabbitMQ采用AMQP协议，因此具有跨语言的特性。任何语言只要遵循AMQP协议收发消息，都可以与RabbitMQ交互【RabbitMQ官方提供了各种不同语言的客户端】</p><p>但是RabbitMQ官方提供的Java客户端编码复杂，一般生产环境下我们更多会结合Spring来使用,Spring提供模板工具和SpringBoot自动装配 –&gt; ==SpringAMQP==</p><p>提供三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息 -rabbitTemplate.convertAndSend(队列名,发送信息);</li></ul><h2 id="3-1-生产者-消费者-1-1"><a href="#3-1-生产者-消费者-1-1" class="headerlink" title="3.1 生产者-消费者(1-1)"></a>3.1 生产者-消费者(1-1)</h2><h3 id="3-1-1-导入Demo工程"><a href="#3-1-1-导入Demo工程" class="headerlink" title="3.1.1 导入Demo工程"></a>3.1.1 导入Demo工程</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407932.png" alt="image-20240319195614981"></p><h3 id="3-1-2-导入maven坐标"><a href="#3-1-2-导入maven坐标" class="headerlink" title="3.1.2 导入maven坐标"></a>3.1.2 导入maven坐标</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407671.png" alt="image-20240319195708883"></p><h3 id="3-1-3-新建队列"><a href="#3-1-3-新建队列" class="headerlink" title="3.1.3  新建队列"></a>3.1.3  新建队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407672.png" alt="image-20240319200226308"></p><h3 id="3-1-4-每个子工程配置RabbitMQ信息"><a href="#3-1-4-每个子工程配置RabbitMQ信息" class="headerlink" title="3.1.4  每个子工程配置RabbitMQ信息"></a>3.1.4  每个子工程配置RabbitMQ信息</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407634.png" alt="image-20240319200405081"></p><h3 id="3-1-5-生产者发送消息"><a href="#3-1-5-生产者发送消息" class="headerlink" title="3.1.5 生产者发送消息"></a>3.1.5 生产者发送消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.注入RabbitTemplate对象</span><br><span class="line">2.对象调用convertAndSend(队列名，信息)方法</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407159.png" alt="image-20240319200946446" style="zoom:150%;"><h3 id="3-1-6-消费者接收消息"><a href="#3-1-6-消费者接收消息" class="headerlink" title="3.1.6 消费者接收消息"></a>3.1.6 消费者接收消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.使用注解RabbitListener(队列名&#x3D;“xxx”)</span><br><span class="line">2.启动当前消费者子工程(SpringBoot工程)</span><br><span class="line">3.生产者发送一次消息，消费者就会接收到一次消息</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407040.png" alt="image-20240319201418364"></p><h2 id="3-2-生产者-消费者-1-n-WorkQueues任务模型"><a href="#3-2-生产者-消费者-1-n-WorkQueues任务模型" class="headerlink" title="3.2 生产者-消费者(1-n) -WorkQueues任务模型"></a>3.2 生产者-消费者(1-n) -WorkQueues任务模型</h2><p>Work queues任务模型    –&gt;   让多个消费者绑定到一个队列，共同消费队列中的消息   –&gt;   ==解决消息堆积太多==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407290.png" alt="image-20240319202054225"></p><h3 id="3-2-1-新建队列"><a href="#3-2-1-新建队列" class="headerlink" title="3.2.1 新建队列"></a>3.2.1 新建队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407109.png" alt="image-20240320091336394"></p><h3 id="3-2-2-生产者发送消息"><a href="#3-2-2-生产者发送消息" class="headerlink" title="3.2.2 生产者发送消息"></a>3.2.2 生产者发送消息</h3><p>一个发送者，循环发送50次消息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407815.png" alt="image-20240320091703762"></p><h3 id="3-2-3-消费者接收消息"><a href="#3-2-3-消费者接收消息" class="headerlink" title="3.2.3 消费者接收消息"></a>3.2.3 消费者接收消息</h3><p>两个消费者接收消息，一个休眠20ms(每秒钟处理50个消息)，一个休眠200ms(每秒钟处理5个消息)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071410175.png" alt="image-20240320092251196"></p><h3 id="3-2-4-均匀分配"><a href="#3-2-4-均匀分配" class="headerlink" title="3.2.4 均匀分配"></a>3.2.4 均匀分配</h3><p>启动消费者子工程项目，再发送消息就可以接受消息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407287.png" alt="image-20240320092647584"></p><p>可以看到消费者1和消费者2竟然每人消费了25条消息：</p><ul><li>消费者1很快完成了自己的25条消息</li><li>消费者2却在缓慢的处理自己的25条消息。</li></ul><p>也就是说消息是==平均分配==给每个消费者，并没有考虑到消费者的处理能力。导致1个消费者空闲，另一个消费者忙的不可开交。没有充分利用每一个消费者的能力，最终消息处理的耗时远远超过了1秒。这样显然是有问题的  </p><h3 id="3-2-5-能者多劳-prefetch"><a href="#3-2-5-能者多劳-prefetch" class="headerlink" title="3.2.5 能者多劳(prefetch)"></a>3.2.5 能者多劳(prefetch)</h3><p>修改==listener.simple.prefetch:1==可以保证==能者多劳==，每个消费者每次只能获取一条消息，处理完成才能获取下一条消息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407470.png" alt="image-20240320093106144"></p><p>更改之后重新发送消息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407467.png" alt="image-20240320093225443"></p><p>可以发现，由于消费者1处理速度较快，所以处理了更多的消息；消费者2处理速度较慢，只处理了6条消息。而最终总的执行耗时也在1秒左右，大大提升。<br>正所谓能者多劳，这样充分利用了每一个消费者的处理能力，可以有效避免消息积压问题</p><h1 id="4-交换机-Exchange"><a href="#4-交换机-Exchange" class="headerlink" title="4.交换机(Exchange)"></a>4.交换机(Exchange)</h1><p>在3.1和3.2部分没有添加交换机，生产者直接发送消息到队列。但是引入交换机之后消息发送的模式会有很大的变化：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407236.png" alt="image-20240320093715426"></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li><strong>Publisher</strong>：生产者，不再发送消息到队列中，而是发给交换机</li><li><strong>Exchange</strong>：交换机，一方面，接收生产者发送的消息。另一方面，知道如何处理消息(递交给某个特别队列、递交给所有队列、或是将消息丢弃)</li><li><strong>Queue</strong>：消息队列也与以前一样，接收消息、缓存消息。不过队列一定要与交换机绑定。</li><li><strong>Consumer</strong>：消费者，与以前一样，订阅队列，没有变化</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><p>Exchange（交换机）的类型有四种：</p><ul><li><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机</li><li><strong>Direct</strong>：订阅，基于RoutingKey（路由key）发送给订阅了消息的队列</li><li><strong>Topic</strong>：通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符</li><li><strong>Headers</strong>：头匹配，基于MQ的消息头匹配，用的较少</li></ul><h2 id="4-1-Fanout交换机-广播"><a href="#4-1-Fanout交换机-广播" class="headerlink" title="4.1 Fanout交换机(广播)"></a>4.1 Fanout交换机(广播)</h2><p>在广播(Fanout)模式下，消息发送流程是这样的</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407800.png" alt="image-20240320094830771"></p><h3 id="4-1-1-声明交换机和队列"><a href="#4-1-1-声明交换机和队列" class="headerlink" title="4.1.1 声明交换机和队列"></a>4.1.1 声明交换机和队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407936.png" alt="image-20240320095902006"></p><h3 id="4-1-2-消息发送"><a href="#4-1-2-消息发送" class="headerlink" title="4.1.2 消息发送"></a>4.1.2 消息发送</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407284.png" alt="image-20240320095942536"></p><h3 id="4-1-3-消息接收"><a href="#4-1-3-消息接收" class="headerlink" title="4.1.3 消息接收"></a>4.1.3 消息接收</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407340.png" alt="image-20240320100056347"></p><p>启动消费者子工程之后发送消息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071412799.png" alt="image-20240320100134844"></p><h2 id="4-2-Direct交换机-订阅"><a href="#4-2-Direct交换机-订阅" class="headerlink" title="4.2 Direct交换机(订阅)"></a>4.2 Direct交换机(订阅)</h2><h3 id="4-2-1-声明交换机和队列"><a href="#4-2-1-声明交换机和队列" class="headerlink" title="4.2.1 声明交换机和队列"></a>4.2.1 声明交换机和队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071412758.png" alt="image-20240320200427090"></p><p>官网在线创建：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407754.png" alt="image-20240320200530874"></p><h3 id="4-2-2-消息发送"><a href="#4-2-2-消息发送" class="headerlink" title="4.2.2 消息发送"></a>4.2.2 消息发送</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407619.png" alt="image-20240320200725027"></p><h3 id="4-2-3-消息接收"><a href="#4-2-3-消息接收" class="headerlink" title="4.2.3 消息接收"></a>4.2.3 消息接收</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407860.png" alt="image-20240320200746903"></p><h3 id="4-2-4-总结"><a href="#4-2-4-总结" class="headerlink" title="4.2.4 总结"></a>4.2.4 总结</h3><h2 id="4-3-Topic交换机-通配符订阅"><a href="#4-3-Topic交换机-通配符订阅" class="headerlink" title="4.3 Topic交换机(通配符订阅)"></a>4.3 Topic交换机(通配符订阅)</h2><h3 id="4-3-1-声明交换机和队列"><a href="#4-3-1-声明交换机和队列" class="headerlink" title="4.3.1 声明交换机和队列"></a>4.3.1 声明交换机和队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407415.png" alt="image-20240320200956679"></p><p>官网在线创建：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071412374.png" alt="image-20240320200925685"></p><h3 id="4-3-2-消息发送"><a href="#4-3-2-消息发送" class="headerlink" title="4.3.2 消息发送"></a>4.3.2 消息发送</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407499.png" alt="image-20240320200802564"></p><h3 id="4-3-3-消息接收"><a href="#4-3-3-消息接收" class="headerlink" title="4.3.3 消息接收"></a>4.3.3 消息接收</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407834.png" alt="image-20240320200816573"></p><h3 id="4-3-4-总结"><a href="#4-3-4-总结" class="headerlink" title="4.3.4 总结"></a>4.3.4 总结</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>BindingKey</code> 的时候使用==通配符==！</p><p>BindingKey一般是一个/多个单词组成，多个单词之间用.分割</p><p>通配符规则：</p><p>通配符规则：</p><ul><li><code>#</code>：匹配一个或多个词</li><li><code>*</code>：匹配一个词</li></ul><p>举例：</p><ul><li><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code>  (#可以是一个词/多个词)</li><li><code>item.*</code>：只能匹配<code>item.spu</code>  （*只能是一个词）</li></ul><h1 id="5-API-队列和交换机-替换手动创建"><a href="#5-API-队列和交换机-替换手动创建" class="headerlink" title="5. API-队列和交换机(替换手动创建)"></a>5. API-队列和交换机(替换手动创建)</h1><p>SpringAMQP提供了声明队列，交换机和绑定关系的API：</p><ul><li>Queue：</li><li>Exchange：</li><li>Binding：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408736.png" alt="image-20240320203603754"></p><h2 id="5-1-Bean方式声明-不推荐"><a href="#5-1-Bean方式声明-不推荐" class="headerlink" title="5.1 @Bean方式声明(不推荐)"></a>5.1 @Bean方式声明(不推荐)</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408875.png" alt="image-20240320215605011"></p><p>这样创建很繁琐，因此提供了基于注解的方式</p><h2 id="5-2-注解方式声明-推荐"><a href="#5-2-注解方式声明-推荐" class="headerlink" title="5.2 注解方式声明(推荐)"></a>5.2 注解方式声明(推荐)</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408708.png" alt="image-20240320220328866"></p><p>其实就是@RabbitListener注解里面配置关系(@QueueBinding)具体的就是交换机(@Exchange)，队列(@Queue)以及路由key(key)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071412958.png" alt="image-20240320221056179"></p><h1 id="6-消息转换器"><a href="#6-消息转换器" class="headerlink" title="6.消息转换器"></a>6.消息转换器</h1><p>Spring的convertAndSend()方法接收的是一个Object类型：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408190.png" alt="image-20240320221749744"></p><p>而在数据传输时，可能会因为默认的==JDK序列化==导致数据体积过大(乱码一样的序列化结果)，安全漏洞，可读性差等问题。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408420.png" alt="image-20240320222347892"></p><p>因此可以考虑使用==Json序列化和反序列化==：</p><h2 id="6-1-配置JSON转换器"><a href="#6-1-配置JSON转换器" class="headerlink" title="6.1 配置JSON转换器"></a>6.1 配置JSON转换器</h2><ul><li>1.在生产者和消费者两个服务中都要引入依赖</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408060.png" alt="image-20240321092511719"></p><p>注意：如果项目中引入了Spring-boot-starter-web依赖，则无需再次引入Jackson依赖</p><ul><li><p>2.在生产者和消费者两个服务的启动类中添加一个Bean：配置消息转换器</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408366.png" alt="image-20240321092839447"></p></li></ul><h1 id="7-使用总结"><a href="#7-使用总结" class="headerlink" title="==7.使用总结=="></a>==7.使用总结==</h1><h2 id="7-1-maven引入maven坐标"><a href="#7-1-maven引入maven坐标" class="headerlink" title="7.1 maven引入maven坐标"></a>7.1 maven引入maven坐标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--消息发送--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="7-2-子工程配置RabbitMQ信息"><a href="#7-2-子工程配置RabbitMQ信息" class="headerlink" title="7.2 子工程配置RabbitMQ信息"></a>7.2 子工程配置RabbitMQ信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: 192.168.150.101 # 你的虚拟机IP</span><br><span class="line">    port: 5672 # 端口</span><br><span class="line">    virtual-host: &#x2F;hmall # 虚拟主机</span><br><span class="line">    username: hmall # 用户名</span><br><span class="line">    password: 123 # 密码</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;消费者和生产者会在对应位置添加配置 【例如：生产者消费者的确认机制，重试机制等】</span><br></pre></td></tr></table></figure><h2 id="7-3-配置消息转换器"><a href="#7-3-配置消息转换器" class="headerlink" title="7.3 配置消息转换器"></a>7.3 配置消息转换器</h2><p>可以在公共模块添加bean</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408004.png" alt="image-20240321095355698"></p><h2 id="7-4-生产者-发送消息"><a href="#7-4-生产者-发送消息" class="headerlink" title="7.4 生产者-发送消息"></a>7.4 生产者-发送消息</h2><p>将原始的同步修改订单信息更改为异步修改</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408382.png" alt="image-20240321095847784"></p><h2 id="7-5-消费者-接收消息"><a href="#7-5-消费者-接收消息" class="headerlink" title="7.5 消费者-接收消息"></a>7.5 消费者-接收消息</h2><p>消费者可以添加消息监听，添加好交换机和路由key和队列</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408722.png" alt="image-20240321100301473"></p><p>==总结如下：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408690.png" alt="image-20240403110457790"></p><p>大致就是导入maven，子工程配置一些属性，然后生产者调用rabbitMQ的rabbitTemplate.convertAndSend()方法发送消息【里面可以添加各种】，在消费者方面可以①使用bean进行声明交换机，队列和关系②使用@RabbitListener注解进行声明【里面可以添加一些属性，例如持久化的，lazyqueue的，延迟消息的】</p><hr><h1 id="高级进阶-–保证消息可靠性-三个方面"><a href="#高级进阶-–保证消息可靠性-三个方面" class="headerlink" title="==高级进阶 –保证消息可靠性(三个方面)=="></a>==高级进阶 –保证消息可靠性(三个方面)==</h1><p>异步结构可能会在发送者，MQ，消费者三个地方出现问题!!!因此要考虑这三个位置的可靠性和兜底方案(延迟消息)</p><p>消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408510.png" alt="image-20240321120455090"></p><p>消息从生产者到消费者的每一步都可能导致消息丢失：</p><ul><li>发送消息时丢失：<ul><li>生产者发送消息时连接MQ失败</li><li>生产者发送消息到达MQ后未找到<code>Exchange</code></li><li>生产者发送消息到达MQ的<code>Exchange</code>后，未找到合适的<code>Queue</code></li><li>消息到达MQ后，处理消息的进程发生异常</li></ul></li><li>MQ导致消息丢失：<ul><li>消息到达MQ，保存到队列后，尚未消费就突然宕机</li></ul></li><li>消费者处理消息时：<ul><li>消息接收后尚未处理突然宕机</li><li>消息接收后处理过程中抛出异常</li></ul></li></ul><p>综上，我们要解决消息丢失问题，保证MQ的可靠性，就必须从3个方面入手：</p><ul><li><p>确保生产者一定把消息发送到MQ    —&gt; ==生产者的可靠性(生产者重试机制，生产者确认机制)==</p></li><li><p>确保MQ不会将消息弄丢   —&gt; ==MQ的可靠性(数据持久化，lazy queue)==</p></li><li><p>确保消费者一定要处理消息   —&gt;   ==消费者的可靠性(消费者确认机制，失败重传机制，失败处理策略，业务幂等性)==</p><p>==总汇总(复习图)==</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408491.png" alt="image-20240325153049616" style="zoom:150%;"><h1 id="8-可靠性——-发送者"><a href="#8-可靠性——-发送者" class="headerlink" title="8.可靠性——-发送者"></a>8.可靠性——-发送者</h1><h2 id="8-1-生产者重试机制-建议禁用"><a href="#8-1-生产者重试机制-建议禁用" class="headerlink" title="8.1 生产者重试机制(建议禁用)"></a>8.1 生产者重试机制(建议禁用)</h2><p>生产者发送消息时，出现网络故障，导致与MQ连接中断   ———-&gt;  SpringAMQP提供的消息发送时的==重试机制==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408900.png" alt="image-20240321110716739"></p><p>注意:<br>当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的重试机制是==阻塞式重试==（也就是说多次重试等待的过程中，当前线程是被阻塞的）</p><p>如果对业务性能有要求的，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。</p><h2 id="8-2-生产者确认机制-默认不开启"><a href="#8-2-生产者确认机制-默认不开启" class="headerlink" title="8.2 生产者确认机制(默认不开启)"></a>8.2 生产者确认机制(默认不开启)</h2><p>一般情况下，只要生产者与MQ之间的网络连接顺畅，基本不会出现发送消息丢失的情况，因此大多数情况下我们无需考虑这种问题。</p><p>少数情况下，也会出现消息发送到MQ之后丢失的现象，比如：</p><ul><li>MQ内部处理消息的进程发生了异常 </li><li>生产者发送消息到达MQ后未找到交换机</li><li>生产者发送消息到达MQ的交换机之后，未找到合适的队列，因此无法路由</li></ul><p>针对上述三种情况，RabbitMQ提供了==生产者消息确认机制==，包括了Publisher Confirm和Publisher Return两种方式。</p><p>在开启确认机制的情况下，当生产者发送消息给MQ之后，MQ会根据消息处理的情况返回不同的回执：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408106.png" alt="image-20240321160450585"></p><p>总结如下：</p><ul><li>1.只要消息投递到MQ，就返回ACK，告知投递成功(基本上这三种ack我们可以考虑不处理，直接只关注nack的情况)</li></ul><p>​              1.1 当消息投递到MQ，但是路由失败时，通过<strong>Publisher Return</strong>返回异常信息，同时返回ack的确认信息，代表投递成功</p><p>​              1.2 临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功</p><p>​              1.3 持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功</p><ul><li>2.其它情况都会返回NACK，告知投递失败</li></ul><p>【其中ack(投递成功)和nack(投递失败)都属于Publisher Confirm机制;return是属于Publisher Return机制】</p><p>【(默认)两种机制都是关闭状态，需要通过配置文件来开启，因为是需要额外的网络和系统资源开销】</p><p>【一定要使用的话，无需开启Publisher-Return机制(一般路由失败是自己业务问题)】</p><h3 id="8-2-1-配置文件添加"><a href="#8-2-1-配置文件添加" class="headerlink" title="8.2.1 配置文件添加"></a>8.2.1 配置文件添加</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408985.png" alt="image-20240321161135899"></p><p>这里<code>publisher-confirm-type</code>有三种模式可选：</p><ul><li><code>none</code>：关闭confirm机制</li><li><code>simple</code>：同步阻塞等待MQ的回执</li><li><code>correlated</code>：MQ异步回调返回回执</li></ul><p>一般我们推荐使用<code>correlated</code>，回调机制。</p><h3 id="8-2-2-定义ReturnCallback-返回信息"><a href="#8-2-2-定义ReturnCallback-返回信息" class="headerlink" title="8.2.2 定义ReturnCallback(返回信息)"></a>8.2.2 定义ReturnCallback(返回信息)</h3><p><strong>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此我们可以在配置类中统一设置</strong></p><p>我们在publisher模块定义一个配置类：rabbitTemplate对象调用setReturnsCallback()方法，方法参数是一个匿名内部类(重写returnedMessage方法)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408864.png" alt="image-20240321161749402"></p><h3 id="8-2-3-定义ConfirmCallback-确定ack-nack"><a href="#8-2-3-定义ConfirmCallback-确定ack-nack" class="headerlink" title="8.2.3 定义ConfirmCallback(确定ack/nack)"></a>8.2.3 定义ConfirmCallback(确定ack/nack)</h3><p>由于每个消息发送时的处理逻辑不一定相同，因此ConfirmCallback需要在每次发送消息时定义。</p><p>就是在发送消息时，调用RabbitTemplate.convertAndSend()时多传递一个参数：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408581.png" alt="image-20240321162745583"></p><p>这里的CorrelationData中包含两个核心的东西：</p><ul><li><code>id</code>：消息的唯一标示，MQ对不同的消息的回执以此做判断，避免混淆</li><li><code>SettableListenableFuture</code>：回执结果的Future对象</li></ul><p>将来MQ的回执就会通过这个<code>Future</code>来返回，我们可以提前给<code>CorrelationData</code>中的<code>Future</code>添加回调函数来处理消息回执：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408700.png" alt="image-20240321194022895"></p><p>发送者位置发送消息(新增字段为了获取MQ给的结果)：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408032.png" alt="image-20240321194656371"></p><p><strong>注意</strong>：<br>开启生产者确认比较消耗MQ性能，一般不建议开启。而且大家思考一下触发确认的几种情况：</p><ul><li>路由失败：一般是因为RoutingKey错误导致，往往是编程导致</li><li>交换机名称错误：同样是编程错误导致</li><li>MQ内部故障：这种需要处理，但概率往往较低。因此只有对消息可靠性要求非常高的业务才需要开启，而且仅仅需要开启ConfirmCallback处理nack就可以</li></ul><h1 id="9-可靠性——–RabbitMQ"><a href="#9-可靠性——–RabbitMQ" class="headerlink" title="9.可靠性——–RabbitMQ"></a>9.可靠性——–RabbitMQ</h1><p>在默认情况下，RabbitMQ会将接收到的信息保存在==内存==中(降低消息收发延迟)。这样会导致两个问题：</p><ul><li>一旦RabbitMQ宕机，内存中的消息会丢失   –&gt; ==交换机持久化,队列持久化,消息持久化==</li><li>内存空间有限，当消费者故障或者处理过慢，会导致消息积压，引发RabbitMQ阻塞  –&gt; ==Lazy Queue==</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408311.png" alt="image-20240321200321687"></p><h2 id="9-1-三种持久化"><a href="#9-1-三种持久化" class="headerlink" title="9.1 三种持久化"></a>9.1 三种持久化</h2><p>为了提升性能，默认情况下MQ的数据都是在内存存储的临时数据，重启后就会消失。为了保证数据的可靠性，必须配置数据持久化，包括：</p><ul><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li></ul><p>其中以控制台界面为例：</p><p>交换机持久化：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408675.png" alt="image-20240321202630567"></p><p>队列持久化：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408066.png" alt="image-20240321202726506"></p><p>消息持久化：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408104.png" alt="image-20240321202757851"></p><p><strong>说明：</strong></p><p>在开启持久化机制以后，如果同时还开启了生产者确认机制，那么MQ会在消息持久化以后才发送ACK回执，进一步确保消息的可靠性</p><p>不过出于性能考虑，为了减少IO次数，发送到RabbitMQ的消息是每隔一段时间(100ms左右)批量持久化，这会导致后续的ACK回执有一定的延迟，因此建议生产者确认全部采用异步方式</p><h2 id="9-2-LazyQueue惰性队列"><a href="#9-2-LazyQueue惰性队列" class="headerlink" title="9.2 LazyQueue惰性队列"></a>9.2 LazyQueue惰性队列</h2><p>在默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：</p><ul><li>消费者宕机或出现网络故障(后续崩了)</li><li>消息发送量激增，超过了消费者处理速度(前面发的太快了，后面接不住)</li><li>消费者处理业务发生阻塞(后续阻塞)</li></ul><p>一旦出现消息堆积问题，RabbitMQ的内存占用会越来越高 —&gt; 触发内存预警上限，此时RabbitMQ会将内存消息 –刷–&gt; 磁盘，这个行为叫==PageOut==，<code>PageOut</code>会耗费一段时间，并且会阻塞队列进程。因此在这个过程中RabbitMQ不会再处理新的消息，生产者的所有请求都会被阻塞</p><p>为了解决这个问题，从3.6.0版本开始，增加了Lazy Queues(惰性队列)。惰性队列的特征如下：</p><ul><li>接收到消息后直接存入磁盘而非内存 (直接存磁盘，就不会刷盘造成阻塞队列进程)</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载，需要了我才加载内存）</li><li>支持数百万条的消息存储</li></ul><p>而在3.12版本之后，LazyQueue已经成为了所有队列的默认格式。因此官方推荐升级RabbitMQ为3.12版本/所有队列都设置为LazyQueue模式</p><h3 id="9-2-1-控制台配置Lazy模式"><a href="#9-2-1-控制台配置Lazy模式" class="headerlink" title="9.2.1 控制台配置Lazy模式"></a>9.2.1 控制台配置Lazy模式</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409172.png" alt="image-20240321204855176"></p><h3 id="9-2-2-代码配置Lazy模式"><a href="#9-2-2-代码配置Lazy模式" class="headerlink" title="9.2.2 代码配置Lazy模式"></a>9.2.2 代码配置Lazy模式</h3><p>基本原理都是设置属性：==x-queue-mode=lazy==</p><ul><li><strong>基于@Bean注解</strong>(配置类)</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409643.png" alt="image-20240321204954868"></p><p>QueueBuilder底层源码为：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409225.png" alt="image-20240321205034258"></p><ul><li><strong>基于@RabbitListener注解</strong>(消费者子工程)</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409794.png" alt="image-20240321205132950"></p><h3 id="9-2-3-更新已有队列为Lazy模式"><a href="#9-2-3-更新已有队列为Lazy模式" class="headerlink" title="9.2.3 更新已有队列为Lazy模式"></a>9.2.3 更新已有队列为Lazy模式</h3><ul><li>基于控制台：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409681.png" alt="image-20240321205402456" style="zoom: 80%;"><ul><li>基于命令行：</li></ul><p>可以基于命令行设置policy：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#39;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#39; --apply-to queues</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</li><li><code>set_policy</code> ：添加一个策略</li><li><code>Lazy</code> ：策略名称，可以自定义</li><li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li><li><code>&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</code> ：设置队列模式为lazy模式</li><li><code>--apply-to queues</code>：策略的作用对象，是所有的队列</li></ul><h1 id="10-可靠性——-消费者"><a href="#10-可靠性——-消费者" class="headerlink" title="10.可靠性——-消费者"></a>10.可靠性——-消费者</h1><h2 id="10-1-消费者确认机制"><a href="#10-1-消费者确认机制" class="headerlink" title="10.1 消费者确认机制"></a>10.1 消费者确认机制</h2><p>为了确定消费者是否成功处理消息，RabbitMQ提供了消费者确认机制(<strong>Consumer Acknowledgement</strong>)</p><p>就是说当消费者处理消息结束后，应该向+RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态。这时候回执有三种可选值：</p><ul><li><strong>ack</strong>：<strong>成功处理消息</strong>，RabbitMQ从队列中删除该消息</li><li><strong>nack</strong>：<strong>消息处理失败</strong>，RabbitMQ再次投递消息</li><li><strong>reject(很少使用)</strong>：<strong>消息处理失败并拒绝该消息</strong>，RabbitMQ从队列中删除该消息</li></ul><p>一般第三种reject方式比较少，除非是消息格式问题(那就是开发问题)，因此大多数情况下我们需要将消息处理的代码通过try-catch机制捕获，消息处理成功就返回ack，处理失败就返回nack。</p><p>由于消息回执的处理代码比较统一，因此<strong>SpringAMQP帮我们实现了消息确认</strong>。并且允许我们通过配置文件(yml)设置ACK处理方式，有三种模式：</p><ul><li><strong>none</strong>:<strong>不处理</strong>。就是将消息投递给消费者后立刻回调ack，消息会立刻从MQ中删除。【非常不安全，不建议使用】</li><li><strong>manual</strong>:<strong>手动模式</strong>。需要自己在业务代码中调用api，回调发送ack/reject【存在业务入侵，但更灵活】</li><li><strong>auto</strong>:<strong>自动模式</strong>。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强。<ul><li>当业务正常执行时则自动返回ack(RabbitMQ删除消息)</li><li>当业务出现异常时根据异常判断返回不同的结果</li></ul></li></ul><p>​                - 如果是业务异常，自动返回nack(RabbitMQ再次投递消息)     —&gt; <strong>可能会出现不停重复投递(导致消息堆积)</strong></p><p>​                - 如果是消息处理/校验异常，自动返回reject(RabbitMQ删除消息)</p><p>配置消费者的xml文件可以修改SpringAMQP的ack处理方式：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409439.png" alt="image-20240401141236210"></p><p>但是，如果auto模式下是业务异常回执给nack，那就会不断从MQ中投递消息，会导致MQ消息处理飙升带来不必要的压力(这种极端情况就是消费者一直无法执行成功，发生概率很低，但是不怕万一就怕一万)</p><h2 id="10-2-消费者失败重试机制"><a href="#10-2-消费者失败重试机制" class="headerlink" title="10.2 消费者失败重试机制"></a>10.2 消费者失败重试机制</h2><p>因为10.1如果是收到nack回执，那么就会不断从MQ中投递消息，可能会导致消息堆积，导致mq的消息处理飙升，带来不必要的压力</p><p>我们可以利用Spring的retry机制—&gt;==当消费者异常就利用本地重试(×无限制重试)==</p><p>配置消费者的xml文件可以修改SpringAMQP的本地重试机制：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409973.png" alt="image-20240401154838741" style="zoom: 50%;"><p>在开启重试机制后，重试次数耗尽之后，如果消息依然失效，则会默认<strong>直接丢弃消息!!!!!!!!!!!!!</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409607.png" alt="image-20240401155907410" style="zoom: 50%;"><p>可以发现：</p><ul><li><p>消费者在失败后消息并没有重新回到MQ无限重新投递，而是重试3次</p></li><li><p>本地重试3次之后，抛出了AmqpRejectAndDontRequeueException异常（说明直接reject丢弃了）</p></li></ul><h2 id="10-3-失败处理策略"><a href="#10-3-失败处理策略" class="headerlink" title="10.3 失败处理策略"></a>10.3 失败处理策略</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409952.png" alt="image-20240401163030885"></p><p>因为10.2本地重试之后如果消息失效就直接丢弃，因此我们可以考虑==加上自定义重试次数之后的策略==。只需要==MessageRecoverer接口==来处理，它包含了三种不同的实现：</p><ul><li><strong>RejectAndDontRequeueRecoverer(默认)</strong>：重试耗尽后，直接reject，丢弃消息</li><li>*<em>ImmediateRequeueMessageRecoverer *</em>：重试耗尽后，返回nack，消息重新入队 【减缓重试的速度，就还是要重新投递到前一步】</li><li><strong>RepublishMessageRecoverer</strong>：重试耗尽后，将失败消息投递到指定的交换机(最后人工校验/特殊校验)</li></ul><h3 id="10-3-1-第三种策略为例"><a href="#10-3-1-第三种策略为例" class="headerlink" title="10.3.1 第三种策略为例"></a>10.3.1 第三种策略为例</h3><p>①定义接受失败消息的交换机，队列和绑定关系</p><p>②定义RepublishMessageRecoverer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima.consumer.config;</span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.DirectExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line">import org.springframework.amqp.rabbit.retry.MessageRecoverer;</span><br><span class="line">import org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">&#x2F;&#x2F;当消费者重试机制属性enabled&#x3D;true的时候生效</span><br><span class="line">@ConditionalOnProperty(name &#x3D; &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue &#x3D; &quot;true&quot;)</span><br><span class="line">public class ErrorMessageConfig &#123;</span><br><span class="line">    &#x2F;&#x2F;交换机</span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange errorMessageExchange()&#123;</span><br><span class="line">        return new DirectExchange(&quot;error.direct&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;队列</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue errorQueue()&#123;</span><br><span class="line">        return new Queue(&quot;error.queue&quot;, true);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;交换机和队列绑定</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding errorBinding(Queue errorQueue, DirectExchange errorMessageExchange)&#123;</span><br><span class="line">        return BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;第三种!!!!  返回一个MessageRecoverer类型</span><br><span class="line">    @Bean</span><br><span class="line">    public MessageRecoverer republishMessageRecoverer(RabbitTemplate rabbitTemplate)&#123;</span><br><span class="line">        return new RepublishMessageRecoverer(rabbitTemplate, &quot;error.direct&quot;, &quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③在10.2基础上会将消息直接传递到对应交换机上最后进行人工处理</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409804.png" alt="image-20240401163012833"></p><ul><li><p>总结：</p><p>自定义的三种方式，第一种默认直接拒绝(不好)，第二种相当于往前重试了一个环节(减缓了重试速度，但是也不好)，第三种相当于交给专门队列和交换机，最后交给人工处理(也不是很好)</p></li></ul><h2 id="10-4-业务幂等性"><a href="#10-4-业务幂等性" class="headerlink" title="10.4 业务幂等性"></a>10.4 业务幂等性</h2><ul><li><p><strong>幂等性</strong></p><p>用函数表达式来描述是这样的：<code>f(x) = f(f(x))</code>，例如求绝对值函数。</p><p>在程序开发中，则是指==同一个业务，执行一次或多次对业务状态的影响是一致的==。例如：</p><ul><li>根据id删除数据</li><li>查询数据</li><li>新增数据</li></ul><p>但数据的更新往往不是幂等的，如果重复执行可能造成不一样的后果。比如：</p><ul><li>取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况</li><li>退款业务。重复退款对商家而言会有经济损失。</li></ul><p>所以，我们要尽可能避免业务被重复执行。然而在实际业务场景中，由于意外经常会出现业务被重复执行的情况，例如：</p><ul><li>页面卡顿时频繁刷新导致表单重复提交</li><li>服务间调用的重试</li><li>MQ消息的重复投递</li></ul><p>我们在用户支付成功后会发送MQ消息到交易服务，修改订单状态为已支付，就可能出现消息回</p><p>复投递的情况。如果消费者不做判断，很有可能导致消息被消费多次，出现业务故障。</p><p>举例：</p><ol><li>假如用户刚刚支付完成，并且投递消息到交易服务，交易服务更改订单为<strong>已支付</strong>状态。</li><li>由于某种原因，例如网络故障导致生产者没有得到确认，隔了一段时间后<strong>重新投递</strong>给交易服务。</li><li>但是，在新投递的消息被消费之前，用户选择了退款，将订单状态改为了<strong>已退款</strong>状态。</li><li>退款完成后，新投递的消息才被消费，那么订单状态会被再次改为<strong>已支付</strong>。业务异常。</li></ol><p>因此，我们必须想办法保证消息处理的幂等性。这里给出两种方案：</p><ul><li>唯一消息ID</li><li>业务状态判断</li></ul></li></ul><h3 id="10-4-1-唯一消息ID-存在业务侵入"><a href="#10-4-1-唯一消息ID-存在业务侵入" class="headerlink" title="10.4.1 唯一消息ID(存在业务侵入)"></a>10.4.1 唯一消息ID(存在业务侵入)</h3><p>这个思路非常简单：</p><ol><li>每一条消息都生成一个唯一的id，与消息一起投递给消费者。</li><li>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</li><li>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。</li></ol><ul><li><strong>SpringAMQP的MeesageConverter自带MessageID的功能</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;以Jackson的消息转换器为例：</span><br><span class="line">&#x2F;&#x2F;在消费者和生产者的config配置里面添加</span><br><span class="line">@Bean</span><br><span class="line">public MessageConverter messageConverter()&#123;</span><br><span class="line">    &#x2F;&#x2F; 1.定义消息转换器</span><br><span class="line">    Jackson2JsonMessageConverter jjmc &#x3D; new Jackson2JsonMessageConverter();</span><br><span class="line">    &#x2F;&#x2F; 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span><br><span class="line">    jjmc.setCreateMessageIds(true);</span><br><span class="line">    &#x2F;&#x2F; 3.返回jjmc</span><br><span class="line">    return jjmc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在生产者位置添加：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409146.png" alt="image-20240402102220873"></p><p>打开源码可以看到，生成随机id的底层源码：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409752.png" alt="image-20240402095327684"></p><p>最终发送一条消息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409002.png" alt="image-20240402102055345"></p><ul><li><p><strong>使用Redis缓存(tk使用)</strong></p><p>在调用接口的时候+调用生成随机数的接口生成id(全局唯一)两者合二为一，然后判断是否第一次调用，第一次调用的话业务处理完成之后将{key：id，value：操作结果}+过期时间存入redis数据库；之后每次进行的时候判断是否key存在，存在的话说明重复提交返回错误</p></li></ul><h3 id="10-4-2-业务状态判断"><a href="#10-4-2-业务状态判断" class="headerlink" title="10.4.2 业务状态判断"></a>10.4.2 业务状态判断</h3><p>业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息，不同的业务场景判断的思路也不一样。</p><p>相比较而言，消息ID的方案需要改造原有的数据库(<strong>会存在业务侵入问题</strong>)，所以我更推荐使用业务判断的方案。</p><p>以支付修改订单的业务为例，我们需要修改<code>OrderServiceImpl</code>中的<code>markOrderPaySuccess</code>方法：处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以在执行业务时判断订单状态是否是未支付，如果不是则证明订单已经被处理过，无需重复处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在原有基础上添加判断订单状态 ---如果不符合直接消息reject了!!!!!!!</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">    public void markOrderPaySuccess(Long orderId) &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.查询订单</span><br><span class="line">        Order old &#x3D; getById(orderId);</span><br><span class="line">        &#x2F;&#x2F; 2.判断订单状态</span><br><span class="line">        if (old &#x3D;&#x3D; null || old.getStatus() !&#x3D; 1) &#123;</span><br><span class="line">            &#x2F;&#x2F; 订单不存在或者订单状态不是1，放弃处理</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 3.尝试更新订单</span><br><span class="line">        Order order &#x3D; new Order();</span><br><span class="line">        order.setId(orderId);</span><br><span class="line">        order.setStatus(2);</span><br><span class="line">        order.setPayTime(LocalDateTime.now());</span><br><span class="line">        updateById(order);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据上述代码逻辑可以完成幂等判断需求，但是由于判断和更新是两步动作，可能会在极小概率下可能存在线程安全问题  –&gt; 可以考虑使用==乐观锁(CAS机制)==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;可以将上述三步直接合并为一条sql语句</span><br><span class="line">@Override</span><br><span class="line">public void markOrderPaySuccess(Long orderId) &#123;</span><br><span class="line">    &#x2F;&#x2F; UPDATE &#96;order&#96; SET status &#x3D; ? , pay_time &#x3D; ? WHERE id &#x3D; ? AND status &#x3D; 1</span><br><span class="line">    &#x2F;&#x2F;mybatisplus的方式</span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(Order::getStatus, 2)</span><br><span class="line">            .set(Order::getPayTime, LocalDateTime.now())</span><br><span class="line">            .eq(Order::getId, orderId)</span><br><span class="line">            .eq(Order::getStatus, 1)</span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看，上述代码等同于这样的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`order`</span> <span class="keyword">SET</span> <span class="keyword">status</span> = ? , pay_time = ? <span class="keyword">WHERE</span> <span class="keyword">id</span> = ? <span class="keyword">AND</span> <span class="keyword">status</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们在where条件中除了判断id以外，还加上了status必须为1的条件。如果条件不符（说明订单已支付），则SQL匹配不到数据，根本不会执行。</p><h2 id="10-5-兜底方案"><a href="#10-5-兜底方案" class="headerlink" title="10.5 兜底方案"></a>10.5 兜底方案</h2><p>上述机制可能增加了消息的可靠性，但是也不好说能保证消息100%的可靠。</p><p>兜底方案：既然MQ通知不一定发送到交易服务，那交易服务就自己==定时==主动询问消费者是否完成</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409472.png" alt="image-20240402105828416"></p><p>什么时候去查询是无法确定的，因此我们通常采用的措施是利用<strong>定时任务</strong>定期查询。</p><h1 id="可靠性总结图"><a href="#可靠性总结图" class="headerlink" title="==可靠性总结图=="></a>==可靠性总结图==</h1><p>综上，支付服务与交易服务之间的订单状态一致性是如何保证的？</p><ul><li>首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。</li><li>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性</li><li>最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便MQ通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409144.png" alt="image-20240402164059822"></p><h1 id="高级进阶-–延迟消息-两种方式"><a href="#高级进阶-–延迟消息-两种方式" class="headerlink" title="==高级进阶 –延迟消息(两种方式)=="></a>==高级进阶 –延迟消息(两种方式)==</h1><h1 id="11-延迟消息"><a href="#11-延迟消息" class="headerlink" title="11.延迟消息"></a>11.延迟消息</h1><p><strong>延迟消息</strong>：生产者发送消息时指定一个时间，消费者不会立刻收到消息，而在指定时间之后才收到消息</p><p><strong>延迟任务：</strong>设置一定时间之后才执行的任务，(最简单的方案就是利用MQ的延迟消息)</p><p>在RabbitMQ中实现延迟消息也有两种方案：</p><ul><li>死信交换机+TTL</li><li>延迟消息插件</li></ul><h2 id="11-1-死信交换机和延迟消息"><a href="#11-1-死信交换机和延迟消息" class="headerlink" title="11.1 死信交换机和延迟消息"></a>11.1 死信交换机和延迟消息</h2><h3 id="11-1-1-死信交换机"><a href="#11-1-1-死信交换机" class="headerlink" title="11.1.1 死信交换机"></a>11.1.1 死信交换机</h3><p><strong>死信(dead letter)</strong>？</p><ul><li>消费者使用<code>basic.reject</code>或 <code>basic.nack</code>声明消费失败，并且消息的<code>requeue</code>参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p>如果队列设置属性dead-letter-exchange指定交换机 –&gt;该队列的死信就会投递到这个交换机。</p><p>这个交换机就叫做<strong>死信交换机(Dead letter Exchange,简称DLX)</strong></p><p><strong>死信交换机的作用</strong>？</p><ol><li><p>收集那些因处理失败而被拒绝的消息</p></li><li><p>收集那些因队列满了而被拒绝的消息</p></li><li><p>收集因TTL（有效期）到期的消息</p></li></ol><h3 id="11-1-2-延迟消息"><a href="#11-1-2-延迟消息" class="headerlink" title="11.1.2 延迟消息"></a>11.1.2 延迟消息</h3><p>总结来说：宏观上看到就是内部做了一个延迟一样</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409360.png" alt="image-20240402113915144"></p><p>进一步说：变相的让发送消息到消费多了5s</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409151.png" alt="image-20240402114329589"></p><h2 id="11-2-延迟消息插件-DelayExchange"><a href="#11-2-延迟消息插件-DelayExchange" class="headerlink" title="11.2 延迟消息插件(DelayExchange)"></a>11.2 延迟消息插件(DelayExchange)</h2><p>RabbitMQ官方提供一款插件，==原生支持延迟消息功能==。</p><p>插件原理就是设计了一种<strong>支持延迟消息功能</strong>的交换机，当消息投递到交换机后可以存放一定时间，到期后再投递到队列。</p><h3 id="11-2-1-下载"><a href="#11-2-1-下载" class="headerlink" title="11.2.1 下载"></a>11.2.1 下载</h3><p>插件下载地址：<br><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange" target="_blank" rel="noopener">GitHub - rabbitmq/rabbitmq-delayed-message-exchange: Delayed Messaging for RabbitMQ</a></p><p>由于我们安装的MQ是<code>3.8</code>版本，因此这里下载<code>3.8.17</code>版本：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409089.png" alt="image-20240402133333466"></p><h3 id="11-2-2-安装"><a href="#11-2-2-安装" class="headerlink" title="11.2.2 安装"></a>11.2.2 安装</h3><p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件目录对应的数据卷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect mq-plugins</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409492.png" alt="image-20240402133421439"></p><p>插件目录被挂载到了<code>/var/lib/docker/volumes/mq-plugins/_data</code>这个目录，我们上传插件到该目录下。</p><p>接下来执行命令，安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mq rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409136.png" alt="image-20240402134224233"></p><h3 id="11-2-3-声明延迟交换机"><a href="#11-2-3-声明延迟交换机" class="headerlink" title="11.2.3 声明延迟交换机"></a>11.2.3 声明延迟交换机</h3><ul><li>方式一：基于注解方式</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409244.png" alt="image-20240402134800279"></p><ul><li><p>方式二：基于@Bean方式</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409868.png" alt="image-20240402135010167"></p></li></ul><h3 id="11-2-4-发送延迟消息"><a href="#11-2-4-发送延迟消息" class="headerlink" title="11.2.4 发送延迟消息"></a>11.2.4 发送延迟消息</h3><p>发送消息时：只需要通过设定x-delay属性设定延迟时间：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409934.png" alt="image-20240402135204953"></p><p>延迟消息插件内部会维护一个本地数据库表，同时使用Elang Timers功能实现计时。如果消息的延迟时间设置较长，可能会导致堆积的延迟消息非常多，会带来较大的CPU开销，同时延迟消息的时间会存在误差。<br>因此，<strong>不建议设置延迟时间过长的延迟消息</strong>。</p><h1 id="12-实际操作-日后补充"><a href="#12-实际操作-日后补充" class="headerlink" title="12. 实际操作(日后补充)"></a>12. 实际操作(日后补充)</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-同步调用和异步调用&quot;&gt;&lt;a href=&quot;#1-同步调用和异步调用&quot; class=&quot;headerlink&quot; title=&quot;1.同步调用和异步调用&quot;&gt;&lt;/a&gt;1.同步调用和异步调用&lt;/h1&gt;&lt;h2 id=&quot;1-1-同步调用&quot;&gt;&lt;a href=&quot;#1-1-同步调用&quot;
      
    
    </summary>
    
    
    
      <category term="RabbitMQ" scheme="https://Larkkkkkkk.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="https://larkkkkkkk.github.io/2024/03/15/SpringCloud/"/>
    <id>https://larkkkkkkk.github.io/2024/03/15/SpringCloud/</id>
    <published>2024-03-15T02:48:29.000Z</published>
    <updated>2024-05-28T06:27:43.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-微服务的定义"><a href="#1-微服务的定义" class="headerlink" title="1.微服务的定义"></a>1.微服务的定义</h1><p>随着互联网行业的发展对于服务的要求也越来越高，服务架构也从单体架构逐渐演变为微服务架构</p><h2 id="1-1-三种架构的对比"><a href="#1-1-三种架构的对比" class="headerlink" title="1.1 三种架构的对比"></a>1.1 三种架构的对比</h2><ul><li><strong>单体架构</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071406563.png" alt="image-20240316220448340"></p><ul><li><strong>分布式架构</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071406018.png" alt="image-20240316220536632" style="zoom: 80%;"><ul><li><strong>微服务(优化版分布式架构)</strong></li></ul><p>微服务的架构特征：==可以认为<strong>微服务</strong>是一种经过良好架构设计的分布式架构方案==</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071406475.png" alt="image-20240316220844109"></p><h2 id="1-2-SpringCloud"><a href="#1-2-SpringCloud" class="headerlink" title="1.2 SpringCloud"></a>1.2 SpringCloud</h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud。" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud。</a></p><p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><p>其中常见的组件包括：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071406791.png" alt="image-20240316221239275"></p><p>此外，要考虑很多版本兼容问题。主要是因为SpringCloud底层是依赖于Springboot实现的：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071406497.png" alt="image-20240316221342911"></p><h1 id="2-服务拆分和远程调用"><a href="#2-服务拆分和远程调用" class="headerlink" title="2.服务拆分和远程调用"></a>2.服务拆分和远程调用</h1><h2 id="2-1-服务拆分原则"><a href="#2-1-服务拆分原则" class="headerlink" title="2.1 服务拆分原则"></a>2.1 服务拆分原则</h2><ul><li>==什么时候拆分？==</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281416725.png" alt="image-20240528141616591"></p><ul><li>==怎么拆分?==</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281417036.png" alt="image-20240528141659955"></p><ul><li>==服务拆分原则==</li></ul><p>​        不同微服务，不要重复开发相同业务</p><p>​        微服务数据独立，不要访问其它微服务的数据库</p><p>​        微服务可以将自己的业务暴露为接口，供其它微服务调用</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071406959.png" alt="image-20240316222315019"></p><h2 id="2-2-远程调用原则"><a href="#2-2-远程调用原则" class="headerlink" title="2.2 远程调用原则"></a>2.2 远程调用原则</h2><ul><li><p>==远程调用原则==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071418858.png" alt="image-20240317152606026"></p></li></ul><h1 id="3-提供者与消费者"><a href="#3-提供者与消费者" class="headerlink" title="3.提供者与消费者"></a>3.提供者与消费者</h1><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071406167.png" alt="image-20240317152829239"></p><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言【==相对的==】</p><p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul><p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p><p>可能会出现三种情况：</p><p>1.消费者该如何获取服务提供者具体信息？ </p><p>2.如果有多个服务提供者，消费者该如何选择？</p><p>3.消费者如何感知服务提供者健康状态？</p><h1 id="4-Eureka注册中心"><a href="#4-Eureka注册中心" class="headerlink" title="4.Eureka注册中心"></a>4.Eureka注册中心</h1><h2 id="4-1-Eureka结构"><a href="#4-1-Eureka结构" class="headerlink" title="4.1 Eureka结构"></a>4.1 Eureka结构</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404171627000.png" alt="image-20240417162755947"></p><p>组成部分：分为<strong>eureka-server</strong>和<strong>eureka-client[服务消费者和服务提供者]</strong>两个部分</p><p>基本步骤：</p><p>1.client向注册中心server注册服务信息(告知有哪些服务和端口信息)  –每隔30s就重新注册</p><p>2.服务消费者从service拉取服务提供者信息</p><p>3.服务消费者自己负载均衡配置</p><p>4.服务消费者远程调用</p><p>==解决上述可能出现的三种情况==</p><p>问题1：order-service如何得知user-service实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册</li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现/服务拉取</li></ul><p>问题2：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li><li>向该实例地址发起远程调用</li></ul><p>问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service拉取服务时，就能将故障实例排除了</li></ul><p><strong>注意</strong>：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p><p>==分三步进行==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404171646699.png" alt="image-20240417164603638"></p><h2 id="4-2-搭建三步"><a href="#4-2-搭建三步" class="headerlink" title="4.2 搭建三步"></a>4.2 搭建三步</h2><p>==总体图==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211623782.png" alt="image-20240421162352729"></p><h3 id="4-2-1-搭建注册中心"><a href="#4-2-1-搭建注册中心" class="headerlink" title="4.2.1 搭建注册中心"></a>4.2.1 搭建注册中心</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211618168.png" alt="image-20240421161828967"></p><h3 id="4-2-2-服务注册"><a href="#4-2-2-服务注册" class="headerlink" title="4.2.2 服务注册"></a>4.2.2 服务注册</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211619463.png" alt="image-20240421161959360"></p><h3 id="4-2-3-服务发现"><a href="#4-2-3-服务发现" class="headerlink" title="4.2.3 服务发现"></a>4.2.3 服务发现</h3><p>分为四个步骤:</p><p>1和2步骤类似于服务注册，只有spring.application.name= orderservice</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211630660.png" alt="image-20240421163002614"></p><p>3和4步骤更新具体操作</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211626445.png" alt="image-20240421162629385"></p><p>spring会<strong>自动</strong>帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡</p><h1 id="5-Ribbon负载均衡"><a href="#5-Ribbon负载均衡" class="headerlink" title="5.Ribbon负载均衡"></a>5.Ribbon负载均衡</h1><p>4部分添加<strong>@LoadBalanced注解</strong>即可实现负载均衡功能</p><h2 id="5-1-负载均衡原理"><a href="#5-1-负载均衡原理" class="headerlink" title="5.1 负载均衡原理"></a>5.1 负载均衡原理</h2><p>其实就是我们发出的请求是<a href="http://userservice/user/1,根据负载均衡变成了http://localhost:8081" target="_blank" rel="noopener">http://userservice/user/1,根据负载均衡变成了http://localhost:8081</a></p><p>SpringCloud底层其实是利用了一个名字为==Ribbon组件==来实现负载均衡</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404172053034.png" alt="image-20240417205259950"></p><h2 id="5-2-源码跟踪"><a href="#5-2-源码跟踪" class="headerlink" title="5.2 源码跟踪"></a>5.2 源码跟踪</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404172054047.png" alt="image-20240417205452975"></p><p>基本流程如下：</p><ul><li>拦截我们的RestTemplate请求<a href="http://userservice/user/1" target="_blank" rel="noopener">http://userservice/user/1</a></li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1，发起真实请求" target="_blank" rel="noopener">http://localhost:8081/user/1，发起真实请求</a></li></ul><h2 id="5-3-负载均衡策略-IRule接口"><a href="#5-3-负载均衡策略-IRule接口" class="headerlink" title="5.3 负载均衡策略(IRule接口)"></a>5.3 负载均衡策略(IRule接口)</h2><h3 id="5-3-1-负载均衡策略"><a href="#5-3-1-负载均衡策略" class="headerlink" title="5.3.1 负载均衡策略"></a>5.3.1 负载均衡策略</h3><p>负载均衡的规则都定义在==IRule接口==中，而IRule有很多不同的实现类：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404172137469.png" alt="image-20240417213754364"></p><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</clientConfigNameSpace></clientName></td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong>[默认]</td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><h3 id="5-3-2-自定义负载均衡策略-消费者"><a href="#5-3-2-自定义负载均衡策略-消费者" class="headerlink" title="5.3.2 自定义负载均衡策略(消费者)"></a>5.3.2 自定义负载均衡策略(消费者)</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式:</p><p>①<strong>代码方式</strong>：在order-service中的OrderApplication启动类上定义一个新的IRule：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;启动类定义一个bean，放入ioc容器</span><br><span class="line">@Bean</span><br><span class="line">public IRule randomRule()&#123;</span><br><span class="line">    return new RandomRule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②<strong>配置文件方式</strong>：在order-service的application.yml文件中，添加新的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userservice: # 给某个微服务配置负载均衡规则，这里是userservice服务</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 负载均衡</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</li></ul><h2 id="5-4-饥饿加载"><a href="#5-4-饥饿加载" class="headerlink" title="5.4 饥饿加载"></a>5.4 饥饿加载</h2><p>Ribbon默认是采用<strong>懒加载</strong>，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  eager-load:</span><br><span class="line">    enabled: true</span><br><span class="line">    clients: userservice</span><br></pre></td></tr></table></figure><h1 id="6-Nacos"><a href="#6-Nacos" class="headerlink" title="6.Nacos"></a>6.Nacos</h1><p>SpringCloudAlibaba推出了一个名为Nacos的注册中心，现在是<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">SpringCloud</a>中的一个组件，相比<a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p><p>主要涉及nacos注册中心和nacos配置管理</p><h2 id="6-1-Nacos结构"><a href="#6-1-Nacos结构" class="headerlink" title="6.1 Nacos结构"></a>6.1 Nacos结构</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211804078.png" alt="image-20240421180436014"></p><h2 id="6-2-搭建三步"><a href="#6-2-搭建三步" class="headerlink" title="6.2 搭建三步"></a>6.2 搭建三步</h2><h3 id="6-2-1-搭建注册中心"><a href="#6-2-1-搭建注册中心" class="headerlink" title="6.2.1 搭建注册中心"></a>6.2.1 搭建注册中心</h3><ul><li>1.下载</li></ul><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><ul><li>2.解压</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211649682.png" alt="image-20240421164955642"></p><ul><li>3.端口配置</li></ul><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211650841.png" alt="image-20240421165044792"></p><ul><li>4.启动nacos</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211651010.png" alt="image-20240421165146961"></p><h3 id="6-2-2-服务注册"><a href="#6-2-2-服务注册" class="headerlink" title="6.2.2 服务注册"></a>6.2.2 服务注册</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211643931.png" alt="image-20240421164336864"></p><h3 id="6-2-3-服务发现"><a href="#6-2-3-服务发现" class="headerlink" title="6.2.3 服务发现"></a>6.2.3 服务发现</h3><p>和服务注册类似，导入nacos依赖</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211657613.png" alt="image-20240421165732561"></p><h2 id="6-3-服务分级存储模型"><a href="#6-3-服务分级存储模型" class="headerlink" title="6.3 服务分级存储模型"></a>6.3 服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>user-service：127.0.0.1:8081</li><li>user-service：127.0.0.1:8082</li><li>user-service：127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211700416.png" alt="image-20240421170021358"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211701771.png" alt="image-20240421170136721"></p><h3 id="6-3-1user-service服务提供者配置集群"><a href="#6-3-1user-service服务提供者配置集群" class="headerlink" title="6.3.1user-service服务提供者配置集群"></a>6.3.1user-service服务提供者配置集群</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211707871.png" alt="image-20240421170739795"></p><h3 id="6-3-2-order-service服务消费者配置集群"><a href="#6-3-2-order-service服务消费者配置集群" class="headerlink" title="6.3.2 order-service服务消费者配置集群"></a>6.3.2 order-service服务消费者配置集群</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211713471.png" alt="image-20240421171305421"></p><h2 id="6-4-Nacos负载均衡-NacosRule实现"><a href="#6-4-Nacos负载均衡-NacosRule实现" class="headerlink" title="6.4 Nacos负载均衡(NacosRule实现)"></a>6.4 Nacos负载均衡(NacosRule实现)</h2><p>Ribbon默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。[Eureka默认是同一个zone区域轮询]</p><h3 id="6-4-1-修改负载均衡规则"><a href="#6-4-1-修改负载均衡规则" class="headerlink" title="6.4.1 修改负载均衡规则"></a>6.4.1 修改负载均衡规则</h3><p>注意:</p><p>==原来默认是集群间轮询，后来设定nacosrule之后是本地集群优先(本地集群又是随机的  –&gt;可以设置权重提高访问频率),如果本地的都挂了那就会跨集群==</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从==同集群中挑选实例==</p><p>修改order-service服务消费者的application.yml文件，修改负载均衡规则：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211711312.png" alt="image-20240421171140243"></p><h3 id="6-4-2-修改权重"><a href="#6-4-2-修改权重" class="headerlink" title="6.4.2 修改权重"></a>6.4.2 修改权重</h3><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211716359.png" alt="image-20240421171620311"></p><ul><li><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</li></ul><p>==如果设备更新/版本升级，那我就可以将权重设置低一点然后少数用户测试，慢慢增大权重==</p><h2 id="6-5-环境隔离"><a href="#6-5-环境隔离" class="headerlink" title="6.5 环境隔离"></a>6.5 环境隔离</h2><p>类似于rabbitMQ消息队列的virtueHost虚拟主机空间可以造成环境隔离</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211725792.png" alt="image-20240421172511733"></p><h3 id="6-5-1-网页创建namespace"><a href="#6-5-1-网页创建namespace" class="headerlink" title="6.5.1 网页创建namespace"></a>6.5.1 网页创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211727449.png" alt="image-20240421172717407"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211728724.png" alt="image-20240421172854688"></p><p>然后，填写表单：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211729714.png" alt="image-20240421172907671"></p><p>就能在页面看到一个新的namespace：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211729220.png" alt="image-20240421172925184"></p><h3 id="6-5-2-服务消费者配置"><a href="#6-5-2-服务消费者配置" class="headerlink" title="6.5.2 服务消费者配置"></a>6.5.2 服务消费者配置</h3><p>给==微服务配置namespace==只能通过修改配置来实现</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211731012.png" alt="image-20240421173139937"></p><h2 id="6-6-Nacos服务实例"><a href="#6-6-Nacos服务实例" class="headerlink" title="6.6 Nacos服务实例"></a>6.6 Nacos服务实例</h2><p>Nacos的服务实例分为两种类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404211733224.png" alt="image-20240421173358174"></p><h2 id="6-7-Nacos和Eureka对比"><a href="#6-7-Nacos和Eureka对比" class="headerlink" title="6.7 Nacos和Eureka对比"></a>6.7 Nacos和Eureka对比</h2><ul><li><p>Nacos与eureka的共同点</p><ul><li><p>都支持服务注册和服务拉取</p></li><li><p>都支持服务提供者心跳方式做健康检测</p></li></ul></li></ul><ul><li><p>Nacos与Eureka的区别</p><table><thead><tr><th></th><th>Eureka</th><th>Nacos</th></tr></thead><tbody><tr><td>客户端</td><td>==搭建新的EurekaServer项目==<br>1.pom.xml引入xxx-client依赖<br>2.启动类添加@EnableEurekaServer注解<br>3.application.yml配置eureka地址</td><td>==启动app==<br>1.父工程引入依赖<br>2.pom.xml引入依赖</td></tr><tr><td>服务提供者</td><td>1.pom.xml引入xxx-server依赖<br>2.application.yml配置eureka地址</td><td>在application.yml配置nacos信息[server-addr地址，cluster-name集群名]</td></tr><tr><td>服务消费者</td><td>1.pom.xml引入xxx-server依赖<br>2.application.yml配置eureka地址<br>3.RestTemlate引入@LoadBalanced注解<br>4.修改具体业务</td><td>在application.yml配置nacos信息[server-addr地址和cluster-name集群名，namespace空间名，ephemeral实例类型]</td></tr><tr><td>临时实例</td><td>心跳模式【默认每30s进行检测，不正常的会被剔除】</td><td>心跳模式【默认每30s进行检测，不正常的会被剔除】</td></tr><tr><td>非临时实例</td><td>×</td><td>主动监测模式【不会被剔除】</td></tr><tr><td>集群方式</td><td>AP方式</td><td>【默认】AP方式<br>如果集群中存在非临时实例会变成CP模式</td></tr><tr><td>服务列表变更的消息推送模式</td><td>定时拉取服务pull</td><td>主动推送变更消息push</td></tr><tr><td>负载均衡策略[服务消费者]</td><td>【默认】随机<br>【IRule】同Zone轮询</td><td>【默认】集群内轮询<br>【NacosRule】优先本地集群内 –&gt; 修改权重还可以提高访问概率</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li></ul><h2 id="6-8-Nacos配置管理"><a href="#6-8-Nacos配置管理" class="headerlink" title="6.8 Nacos配置管理"></a>6.8 Nacos配置管理</h2><p>当微服务部署的实例越来越多[达到数百以上]，逐步修改微服务配置就会让你抓狂。 –&gt; 所以我们需要一种==统一配置管理方案==，可以集中管理所有实例配置</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404212303829.png" alt="image-20240421230353712"></p><p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新</p><h3 id="6-8-1-统一配置管理"><a href="#6-8-1-统一配置管理" class="headerlink" title="6.8.1 统一配置管理"></a>6.8.1 统一配置管理</h3><h4 id="6-8-1-1-网站添加配置"><a href="#6-8-1-1-网站添加配置" class="headerlink" title="6.8.1.1 网站添加配置"></a>6.8.1.1 网站添加配置</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404212309200.png" alt="image-20240421230927123"></p><blockquote><p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p></blockquote><h4 id="6-8-1-2-微服务拉取配置"><a href="#6-8-1-2-微服务拉取配置" class="headerlink" title="6.8.1.2 微服务拉取配置"></a>6.8.1.2 微服务拉取配置</h4><p>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动</p><p>但是如果未读取application.yml文件就不能得到nacos地址。【属于是卡bug呢】</p><p>–&gt; 因此Spring引入一种新的配置文件:==bootstrap.yaml==文件【会在application.yml之前被读取】</p><p>流程如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404212312132.png" alt="image-20240421231210518"></p><p>进行步骤:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404231740052.png" alt="image-20240423174007971"></p><p>②引入nacos-config依赖<br>首先，在user-service服务中，引入nacos-config的客户端依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--nacos配置管理依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>③添加bootstrap.yaml</p><p>然后，在user-service中添加一个bootstrap.yaml文件，内容如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404231741942.png" alt="image-20240423174156884"></p><p>④尝试读取nacos配置</p><p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404231742422.png" alt="image-20240423174209359"></p><h3 id="6-8-2-配置热更新"><a href="#6-8-2-配置热更新" class="headerlink" title="6.8.2 配置热更新"></a>6.8.2 配置热更新</h3><p>最终目的是修改nacos中的配置后，微服务无需重启即可让配置生效，也就是<strong>配置热更新</strong></p><ul><li>方式一：在@Value注入变量所在类上添加@RefreshScope注解</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404231732762.png" alt="image-20240423173252661"></p><ul><li>方式二：使用@ConfigurationProperties注解</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404231733544.png" alt="image-20240423173338466"></p><h3 id="6-8-3-多环境配置共享"><a href="#6-8-3-多环境配置共享" class="headerlink" title="6.8.3 多环境配置共享"></a>6.8.3 多环境配置共享</h3><p>可能不同环境下有不同的yaml文件[像单体架构的时候properties，yml，yaml等情况]，因此当出现相同属性时就有优先级：==名字越长越牛逼==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404231735276.png" alt="image-20240423173524235"></p><h2 id="6-9-搭建Nacos集群"><a href="#6-9-搭建Nacos集群" class="headerlink" title="6.9 搭建Nacos集群"></a>6.9 搭建Nacos集群</h2><p>==日后学习到了补充==</p><h1 id="7-HTTP客户端Feign"><a href="#7-HTTP客户端Feign" class="headerlink" title="7.HTTP客户端Feign"></a>7.HTTP客户端Feign</h1><p>之前使用的RestTemplate发起远程调用的代码：</p><p>  <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232026757.png" alt="image-20240423202621703"></p><p>存在下面的问题：</p><p>•代码可读性差，编程体验不统一</p><p>•参数复杂URL难以维护</p><p>==Feign==是一个声明式的http客户端。其作用是帮助我们优雅地实现http请求发送，解决了上述的问题</p><h2 id="7-1-使用操作"><a href="#7-1-使用操作" class="headerlink" title="7.1 使用操作"></a>7.1 使用操作</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232115656.png" alt="image-20240423211551585"></p><h3 id="7-1-1-导入依赖"><a href="#7-1-1-导入依赖" class="headerlink" title="7.1.1 导入依赖"></a>7.1.1 导入依赖</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232117240.png" alt="image-20240423211732453"></p><h3 id="7-1-2-启动类添加注解"><a href="#7-1-2-启动类添加注解" class="headerlink" title="7.1.2 启动类添加注解"></a>7.1.2 启动类添加注解</h3><p>启动类上添加注解@EnableFeignClients</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232118683.png" alt="image-20240423211805626"></p><h3 id="7-1-3-编写子服务接口"><a href="#7-1-3-编写子服务接口" class="headerlink" title="7.1.3 编写子服务接口"></a>7.1.3 编写子服务接口</h3><p>这样可以相当于<a href="http://userservice/user/id" target="_blank" rel="noopener">http://userservice/user/id</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232119940.png" alt="image-20240423211942883"></p><h3 id="7-1-4-实际操作"><a href="#7-1-4-实际操作" class="headerlink" title="7.1.4 实际操作"></a>7.1.4 实际操作</h3><p>底层也有ribbon负载均衡，可以避免了访问ip地址的麻烦。Feign可以将调用步骤放在接口里面，这样使得我们看起来都是直接调用方法统一了。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232125336.png" alt="image-20240423212526274"></p><h2 id="7-2-自定义配置"><a href="#7-2-自定义配置" class="headerlink" title="7.2 自定义配置"></a>7.2 自定义配置</h2><p>Feign运行自定义配置来覆盖默认配置，可以修改的配置如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232133749.png" alt="image-20240423213315647"></p><p>注意:一般我们需要配置的就是日志级别</p><p>==下面以日志为例来演示如何自定义配置==</p><h3 id="7-2-1-配置文件yml方式"><a href="#7-2-1-配置文件yml方式" class="headerlink" title="7.2.1 配置文件yml方式"></a>7.2.1 配置文件yml方式</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232253759.png" alt="image-20240423213829442"></p><p>而日志的级别分为四种：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据</li></ul><h3 id="7-2-2-Java代码方式"><a href="#7-2-2-Java代码方式" class="headerlink" title="7.2.2 Java代码方式"></a>7.2.2 Java代码方式</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232147785.png" alt="image-20240423214701673"></p><h2 id="7-3-Feign使用优化"><a href="#7-3-Feign使用优化" class="headerlink" title="7.3 Feign使用优化"></a>7.3 Feign使用优化</h2><p>==Feign底层发起http请求，依赖于其它的框架==。其底层客户端实现包括：</p><ul><li><p>URLConnection：[默认]不支持连接池</p></li><li><p>Apache HttpClient ：支持连接池</p></li><li><p>OKHttp：支持连接池</p></li></ul><h3 id="7-3-1-连接池优化"><a href="#7-3-1-连接池优化" class="headerlink" title="7.3.1 连接池优化"></a>7.3.1 连接池优化</h3><p>==由此可见，对于默认的URLConnection可以更改为Apache HttpClient或者OKHttp方式==</p><p>以HttpClient为例:</p><p>①pom.xml文件引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--httpClient的依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-httpclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>②yml配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  httpclient:</span><br><span class="line">    enabled: true # 开启feign对HttpClient的支持</span><br><span class="line">    #线程池的核心值需要压测和实际情况调整！！！！！！！！！！！1</span><br><span class="line">    max-connections: 200 # 最大的连接数</span><br><span class="line">    max-connections-per-route: 50 # 每个路径的最大连接数</span><br></pre></td></tr></table></figure><h3 id="7-3-2-日志级别优化"><a href="#7-3-2-日志级别优化" class="headerlink" title="7.3.2 日志级别优化"></a>7.3.2 日志级别优化</h3><p>==日志级别最好是用basic或者none==</p><h2 id="7-4-最佳实践方案"><a href="#7-4-最佳实践方案" class="headerlink" title="7.4 最佳实践方案"></a>7.4 最佳实践方案</h2><p>像7.1使用操作里面用feign替换掉RestTemplate</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232333714.png" alt="image-20240423233327633"></p><p>这种情况下会发现usercontroller和feign客户端代码相似，因此可以提出继承方式和抽取方式</p><h3 id="7-4-1-继承方式"><a href="#7-4-1-继承方式" class="headerlink" title="7.4.1 继承方式"></a>7.4.1 继承方式</h3><p>一样的代码可以通过继承来共享：</p><p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p><p>2）Feign客户端和Controller都集成该接口</p><p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20240423233410310.png" alt="image-20240423233410310"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p></li></ul><h3 id="7-4-2-抽取方式"><a href="#7-4-2-抽取方式" class="headerlink" title="7.4.2 抽取方式"></a>7.4.2 抽取方式</h3><p>将Feign的Client抽取为<strong>独立模块</strong>，并且把接口有关的POJO、默认的Feign日志配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232336800.png" alt="image-20240423233624757"></p><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232340571.png" alt="image-20240423234056492"></p><h1 id="8-Gateway服务网关"><a href="#8-Gateway服务网关" class="headerlink" title="8.Gateway服务网关"></a>8.Gateway服务网关</h1><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的<strong>API 路由管理方式</strong></p><p>Gateway网关是我们服务的守门神，==所有微服务的统一入口==</p><p>网关的<strong>核心功能特性：</strong></p><ul><li><strong>1.请求路由和负载均衡</strong>：一切请求都必须先经过gateway，只根据某种规则把请求转发到某个微服务。如果转发的目标服务有多个时就需要负载均衡</li><li><strong>2.权限控制</strong>：通过拦截器校验用户是否有请求资格，没有就进行拦截</li><li><strong>3.限流</strong>：当请求流量过高时，网关中按照<strong>下流的微服务能够接受的速度</strong>放行请求，避免服务压力过大</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241706595.png" alt="image-20240424170653509"></p><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway【基于Spring5提供的WebFlux，属于响应式编程】</li><li>zuul【基于Servlet实现，属于阻塞式编程】</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能</p><h2 id="8-1-Gateway快速入门"><a href="#8-1-Gateway快速入门" class="headerlink" title="8.1 Gateway快速入门"></a>8.1 Gateway快速入门</h2><p>演示下网关的基本路由功能。基本步骤如下：</p><ol><li>pom.xml导入依赖</li><li>application.yml配置基础配置和路由规则</li><li>启动测试</li></ol><h3 id="8-3-1-导入依赖"><a href="#8-3-1-导入依赖" class="headerlink" title="8.3.1 导入依赖"></a>8.3.1 导入依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--网关--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--nacos服务发现依赖,也是一个微服务需要注册到nacos--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="8-3-2-编写规则"><a href="#8-3-2-编写规则" class="headerlink" title="8.3.2 编写规则"></a>8.3.2 编写规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 10010  #网关端口号</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway #gateway名称</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848 #nacos地址</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      #第一个</span><br><span class="line">        - id: user-service  #路由表示，必须唯一</span><br><span class="line">          uri: lb:&#x2F;&#x2F;userservice #路由的目标地址 lb就是负载均衡，后面跟服务名称</span><br><span class="line">          predicates: #路由断言，判断是否符合规则</span><br><span class="line">            - Path&#x3D;&#x2F;user&#x2F;** #路径断言，判断路径是否以&#x2F;user开头  --&gt; &#x2F;user&#x2F;**转为lb:&#x2F;&#x2F;userservice</span><br><span class="line">          </span><br><span class="line">          #请求头过滤器 </span><br><span class="line">          #添加一个头结点 --&gt; &#123;Truth,Itcast is freaking awesome!&#125;</span><br><span class="line">          filters:</span><br><span class="line">            - AddRequestHeader&#x3D;Truth,Itcast is freaking awesome!</span><br><span class="line">       #第二个</span><br><span class="line">        - id: order-service  #路由表示，必须唯一</span><br><span class="line">          uri: lb:&#x2F;&#x2F;orderservice #路由的目标地址 lb就是负载均衡，后面跟服务名称</span><br><span class="line">          predicates: #路由断言，判断是否符合规则</span><br><span class="line">            - Path&#x3D;&#x2F;order&#x2F;** #路径断言，判断路径是否以&#x2F;order开头  --&gt; &#x2F;order&#x2F;**转为lb:&#x2F;&#x2F;orderservice</span><br><span class="line">      </span><br><span class="line">      #默认过滤器</span><br><span class="line">      default-filters: # 默认过滤项</span><br><span class="line">        - AddRequestHeader&#x3D;Truth,Itcast is freaking awesome!</span><br><span class="line">      </span><br><span class="line">      #跨域问题</span><br><span class="line">      globalcors:</span><br><span class="line">        add-to-simple-url-handler-mapping: true #解决options请求被拦截问题</span><br><span class="line">        cors-configurations:</span><br><span class="line">          &#39;[&#x2F;**]&#39;: #拦截一切请求</span><br><span class="line">            allowedOrigins: # 允许哪些网站的跨域请求</span><br><span class="line">              - &quot;http:&#x2F;&#x2F;localhost:8090&quot;</span><br><span class="line">            allowedMethods: # 允许的跨域ajax的请求方式</span><br><span class="line">              - &quot;GET&quot;</span><br><span class="line">              - &quot;POST&quot;</span><br><span class="line">              - &quot;DELETE&quot;</span><br><span class="line">              - &quot;PUT&quot;</span><br><span class="line">              - &quot;OPTIONS&quot;</span><br><span class="line">            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息</span><br><span class="line">            allowCredentials: true # 是否允许携带cookie</span><br><span class="line">            maxAge: 360000 # 这次跨域检测的有效期</span><br></pre></td></tr></table></figure><p>总结:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">路由id：路由唯一标示</span><br><span class="line">uri：路由目的地，支持lb和http两种</span><br><span class="line">predicates：路由断言，判断请求是否符合要求，符合则转发到路由目的地</span><br><span class="line">filters：路由过滤器，处理请求或响应</span><br></pre></td></tr></table></figure><h3 id="8-3-3-启动测试"><a href="#8-3-3-启动测试" class="headerlink" title="8.3.3 启动测试"></a>8.3.3 启动测试</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241714213.png" alt="image-20240424171458156" style="zoom:67%;"><h2 id="8-2-断言工厂—–-判断是否符合规则"><a href="#8-2-断言工厂—–-判断是否符合规则" class="headerlink" title="8.2 断言工厂—–==判断是否符合规则=="></a>8.2 断言工厂—–==判断是否符合规则==</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path=/user/**是按照路径匹配，这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理</p><p>==要符合条件才能访问转换匹配==</p><h3 id="8-2-1-断言工厂分类"><a href="#8-2-1-断言工厂分类" class="headerlink" title="8.2.1 断言工厂分类"></a>8.2.1 断言工厂分类</h3><p>从这张图可以看出来可以有很多判断情况来匹配转换，可以通过访问时间，访问ip，访问范围，访问参数等等</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241722590.png" alt="image-20240424172200496"></p><h2 id="8-3-过滤器工厂—–-请求时添加信息"><a href="#8-3-过滤器工厂—–-请求时添加信息" class="headerlink" title="8.3 过滤器工厂—–==请求时添加信息=="></a>8.3 过滤器工厂—–==请求时添加信息==</h2><p>GatewayFilter是网关中提供的一种过滤器，可以对进入==网关的请求==和==微服务返回的响应==做处理：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241726572.png" alt="image-20240424172659481"></p><h3 id="8-3-1-路由过滤器种类"><a href="#8-3-1-路由过滤器种类" class="headerlink" title="8.3.1 路由过滤器种类"></a>8.3.1 路由过滤器种类</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241727349.png" alt="image-20240424172758297"></p><h3 id="8-3-2-请求头过滤器"><a href="#8-3-2-请求头过滤器" class="headerlink" title="8.3.2 请求头过滤器"></a>8.3.2 请求头过滤器</h3><p>以AddRequestHeader 为例来讲解：</p><blockquote><p> <strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!</p></blockquote><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241730833.png" alt="image-20240424173001746"></p><h3 id="8-3-3-默认过滤器"><a href="#8-3-3-默认过滤器" class="headerlink" title="8.3.3 默认过滤器"></a>8.3.3 默认过滤器</h3><p>对所有的路由都生效，需要写到default下面</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241730551.png" alt="image-20240424173035471"></p><h3 id="8-3-4-全局过滤器"><a href="#8-3-4-全局过滤器" class="headerlink" title="8.3.4 全局过滤器"></a>8.3.4 全局过滤器</h3><blockquote><p> <strong>需求</strong>:自定义拦截请求,前端访问时必须有一个authorization=admin才可以</p></blockquote><ul><li><strong>实现GlobalFilter接口</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241737047.png" alt="image-20240424173746934"></p><p>在filter中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h3 id="8-3-5-执行顺序总结"><a href="#8-3-5-执行顺序总结" class="headerlink" title="8.3.5 执行顺序总结"></a>8.3.5 执行顺序总结</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）[==适配器模式]==中，排序后依次执行每个过滤器：</p><p>==原因：可以合并是因为路由过滤器和默认过滤器在yml配置的是范围不同，但是底层都是GatewayFilter同一类。而全局过滤器实现GatewayFilter，内部是适配成GatewayFilter==</p><p>==总结图：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241740913.png" alt="image-20240424174011858"></p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter过滤器的顺序: 实现Ordered接口/@Order注解，由我们自己指定[@order(数字)]</li><li>路由过滤器和defaultFilter的顺序: 由Spring指定，默认是按照声明顺序从1递增[yml文件的书写顺序]。</li><li>当三大类过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><h2 id="8-4-跨域问题"><a href="#8-4-跨域问题" class="headerlink" title="8.4 跨域问题"></a>8.4 跨域问题</h2><p>==跨域==：域名不一致就是跨域，主要包括：</p><ul><li><p>1.<strong>域名不同</strong>： <a href="http://www.taobao.com" target="_blank" rel="noopener">www.taobao.com</a> 和 <a href="http://www.taobao.org" target="_blank" rel="noopener">www.taobao.org</a> 和 <a href="http://www.jd.com" target="_blank" rel="noopener">www.jd.com</a> 和 miaosha.jd.com</p></li><li><p>2.<strong>域名相同，端口不同</strong>：localhost:8080和localhost8081</p></li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><p>解决方案：</p><h3 id="8-4-1-Gateway配置"><a href="#8-4-1-Gateway配置" class="headerlink" title="8.4.1 Gateway配置"></a>8.4.1 Gateway配置</h3><p>在gateway服务的application.yml文件中，添加下面的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      # 。。。</span><br><span class="line">      globalcors: # 全局的跨域处理</span><br><span class="line">        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题</span><br><span class="line">        corsConfigurations:</span><br><span class="line">          &#39;[&#x2F;**]&#39;:</span><br><span class="line">            allowedOrigins: # 允许哪些网站的跨域请求 </span><br><span class="line">              - &quot;http:&#x2F;&#x2F;localhost:8090&quot;</span><br><span class="line">            allowedMethods: # 允许的跨域ajax的请求方式</span><br><span class="line">              - &quot;GET&quot;</span><br><span class="line">              - &quot;POST&quot;</span><br><span class="line">              - &quot;DELETE&quot;</span><br><span class="line">              - &quot;PUT&quot;</span><br><span class="line">              - &quot;OPTIONS&quot;</span><br><span class="line">            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息</span><br><span class="line">            allowCredentials: true # 是否允许携带cookie</span><br><span class="line">            maxAge: 360000 # 这次跨域检测的有效期</span><br></pre></td></tr></table></figure><h2 id="8-5-Gateway流程图"><a href="#8-5-Gateway流程图" class="headerlink" title="8.5 Gateway流程图"></a>8.5 Gateway流程图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241723896.png" alt="image-20240424172300811"></p><p>发送请求后，可以根据过滤器加一些修改，可以增加头拦截[过滤器]。然后<a href="http://localhost:10010/user/1根据断言工厂的断言路径判断/user/**就找到lb:/userservice" target="_blank" rel="noopener">http://localhost:10010/user/1根据断言工厂的断言路径判断/user/**就找到lb:/userservice</a> 就去负载均衡发送给<a href="http://localhost:xxxx/user/1">http://localhost:xxxx/user/1</a></p><p>如果是访问orderservice的话在上述过程之后还会使用feign发送请求，feign里面配置的去找userservice/user/id</p><h1 id="9-Springcloud总结"><a href="#9-Springcloud总结" class="headerlink" title="9.Springcloud总结"></a>9.Springcloud总结</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404241752823.png" alt="image-20240424175219756"></p><p>1.服务注册：将网关，userservice，orderservice这些微服务要注册到nacos注册中心</p><p>2.服务配置：nacos进行配置管理</p><p>3.网关配置和Feign配置：</p><p>4.访问转换路径：我们现在访问一个<a href="http://localhost:10010/order/101?authorization=songyaxiang，网关这时候分为两个步骤：①经过路由要对符合路由规则的order/**转换为配置的lb或者http:/orderservice微服务去，由于lb还要考虑负载均衡，②要对输入和输出的信息进行修改【可能是新增/删除一些信息】，这时候要考虑过滤器的优先级；之后我们进入orderservice微服务访问使用RestTemplate【会很死板，出现Ip地址信息】/Feign【不会出现IP地址等，选择这个】发送http请求给userservice微服务；最终将结果返回" target="_blank" rel="noopener">http://localhost:10010/order/101?authorization=songyaxiang，网关这时候分为两个步骤：①经过路由要对符合路由规则的order/**转换为配置的lb或者http:/orderservice微服务去，由于lb还要考虑负载均衡，②要对输入和输出的信息进行修改【可能是新增/删除一些信息】，这时候要考虑过滤器的优先级；之后我们进入orderservice微服务访问使用RestTemplate【会很死板，出现Ip地址信息】/Feign【不会出现IP地址等，选择这个】发送http请求给userservice微服务；最终将结果返回</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-微服务的定义&quot;&gt;&lt;a href=&quot;#1-微服务的定义&quot; class=&quot;headerlink&quot; title=&quot;1.微服务的定义&quot;&gt;&lt;/a&gt;1.微服务的定义&lt;/h1&gt;&lt;p&gt;随着互联网行业的发展对于服务的要求也越来越高，服务架构也从单体架构逐渐演变为微服务架构&lt;/p
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>JUC</title>
    <link href="https://larkkkkkkk.github.io/2024/02/02/JUC/"/>
    <id>https://larkkkkkkk.github.io/2024/02/02/JUC/</id>
    <published>2024-02-02T04:24:53.000Z</published>
    <updated>2024-03-25T10:14:01.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-并发和并行"><a href="#1-并发和并行" class="headerlink" title="1.并发和并行"></a>1.并发和并行</h1><p>目前CPU运算速度已经达到百亿次每秒，甚至更高的量级，家用电脑维持操作系统正常运行的进程会有数十个，线程更是数以百计。</p><p>所以在现实常见场景中，为了提高生产率和高效地完成任务，处处均采用==多线程==和==并发==的运行方式。</p><ul><li>==并发(Concurrency)==  某个时间段内，多任务交替处理的能力</li></ul><p>每个CPU将 –(可执行时间)均匀分成若干份–&gt; 每个进程执行一段时间后，记录当前工作状态，释放相关执行资源进入等待状态，让其他进程抢占CPU资源</p><ul><li>==并行(Parallelism)==  同时处理多任务的能力</li></ul><p>目前CPU已经是多核(可以同时执行多个互不依赖的指令及执行块)</p><p>以KTV唱歌为例： 核心在<strong>进程是否同时执行</strong></p><p>并发指的是同一个话筒被多人轮流使用；</p><p>并行指的是有多少人可以使用话筒同时唱歌；</p><p>以医生坐诊为例:  并发和并行的</p><h1 id="2-线程安全"><a href="#2-线程安全" class="headerlink" title="2.线程安全"></a>2.线程安全</h1><h1 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-并发和并行&quot;&gt;&lt;a href=&quot;#1-并发和并行&quot; class=&quot;headerlink&quot; title=&quot;1.并发和并行&quot;&gt;&lt;/a&gt;1.并发和并行&lt;/h1&gt;&lt;p&gt;目前CPU运算速度已经达到百亿次每秒，甚至更高的量级，家用电脑维持操作系统正常运行的进程会有数十个，
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Apache-Echarts</title>
    <link href="https://larkkkkkkk.github.io/2024/01/09/Apache-Echarts/"/>
    <id>https://larkkkkkkk.github.io/2024/01/09/Apache-Echarts/</id>
    <published>2024-01-09T09:11:30.000Z</published>
    <updated>2024-01-10T01:25:07.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><p>Apache ECharts 是一款基于 Javascript 的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表</p><p>官网地址：<a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">https://echarts.apache.org/zh/index.html</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401091712391.png" alt="image-20240109171236231"></p><h1 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2.入门案例"></a>2.入门案例</h1><p>1.在 <a href="https://www.jsdelivr.com/package/npm/echarts" target="_blank" rel="noopener">https://www.jsdelivr.com/package/npm/echarts</a> 选择 <code>dist/echarts.js</code>，点击保存为 <code>echarts.js</code> 文件</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401091726897.png" alt="image-20240109172602826"></p><p>2.在保存echarts.js文件的目录下创建一个index.html文件，内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 引入刚刚下载的 ECharts 文件 --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;echarts.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>3.绘制一个简单图标   –body标签里面添加div块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>4.通过script标签里面初始化echarts实例并且通过setOption方法生成xxx图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">   &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">     &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class="line">     var myChart &#x3D; echarts.init(document.getElementById(&#39;main&#39;));</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; 指定图表的配置项和数据</span><br><span class="line">     var option &#x3D; &#123;</span><br><span class="line">       title: &#123;</span><br><span class="line">         text: &#39;ECharts 入门示例&#39;</span><br><span class="line">       &#125;,</span><br><span class="line">       tooltip: &#123;&#125;,</span><br><span class="line">       legend: &#123;</span><br><span class="line">         data: [&#39;销量&#39;]</span><br><span class="line">       &#125;,</span><br><span class="line">       xAxis: &#123;</span><br><span class="line">         data: [&#39;衬衫&#39;, &#39;羊毛衫&#39;, &#39;雪纺衫&#39;, &#39;裤子&#39;, &#39;高跟鞋&#39;, &#39;袜子&#39;]</span><br><span class="line">       &#125;,</span><br><span class="line">       yAxis: &#123;&#125;,</span><br><span class="line">       series: [</span><br><span class="line">         &#123;</span><br><span class="line">           name: &#39;销量&#39;,</span><br><span class="line">           type: &#39;bar&#39;,</span><br><span class="line">           data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; 使用刚指定的配置项和数据显示图表。</span><br><span class="line">     myChart.setOption(option);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401091733954.png" alt="image-20240109173358917"></p><p>5.完整代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;ECharts&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;!-- 引入刚刚下载的 ECharts 文件 --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;echarts.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">      &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class="line">      var myChart &#x3D; echarts.init(document.getElementById(&#39;main&#39;));</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 指定图表的配置项和数据</span><br><span class="line">      var option &#x3D; &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: &#39;ECharts 入门示例&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data: [&#39;销量&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          data: [&#39;衬衫&#39;, &#39;羊毛衫&#39;, &#39;雪纺衫&#39;, &#39;裤子&#39;, &#39;高跟鞋&#39;, &#39;袜子&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;&#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#39;销量&#39;,</span><br><span class="line">            type: &#39;bar&#39;,</span><br><span class="line">            data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 使用刚指定的配置项和数据显示图表。</span><br><span class="line">      myChart.setOption(option);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>6.具体解析</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401091732204.png" alt="image-20240109173227149"><p>前端option的大致对比:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401091735673.png" alt="image-20240109173517633"></p><p>==后端只需要看看前端要什么==</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h1&gt;&lt;p&gt;Apache ECharts 是一款基于 Javascript 的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://Larkkkkkkk.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发</title>
    <link href="https://larkkkkkkk.github.io/2024/01/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>https://larkkkkkkk.github.io/2024/01/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2024-01-06T04:15:49.000Z</published>
    <updated>2024-01-06T08:48:23.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-小程序介绍"><a href="#1-小程序介绍" class="headerlink" title="1.小程序介绍"></a>1.小程序介绍</h1><p>小程序是一种新的开放能力，开发者可以快速地开发一个小程序。可以在微信内被便捷地获取和传播，同时具有出色的使用体验</p><p><strong>官方网址：</strong><a href="https://mp.weixin.qq.com/cgi-bin/wx?token=&amp;lang=zh_CN" target="_blank" rel="noopener">https://mp.weixin.qq.com/cgi-bin/wx?token=&amp;lang=zh_CN</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061547938.png" alt="image-20240106154758794" style="zoom:67%;"><p>小程序主要运行微信内部，可通过上述网站来整体了解微信小程序的开发</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h1><p>开发微信小程序之前需要做如下准备工作：</p><ul><li>注册小程序</li><li>完善小程序信息</li><li>下载开发者工具</li></ul><p><strong>1). 注册小程序</strong></p><p>注册地址：<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061548736.png" alt="image-20240106154849701"><p><strong>2). 完善小程序信息</strong></p><p>登录小程序后台：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a></p><p>两种登录方式选其一即可</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061549733.png" alt="image-20240106154908699"></p><p>完善小程序信息、小程序类目</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061549461.png" alt="image-20240106154921416" style="zoom:80%;"><p>查看小程序的 AppID</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061549838.png" alt="image-20240106154938792"></p><p><strong>3). 下载开发者工具</strong></p><p>下载地址： <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a></p><h1 id="3-入门案例"><a href="#3-入门案例" class="headerlink" title="3.入门案例"></a>3.入门案例</h1><h2 id="3-1-创建小程序项目"><a href="#3-1-创建小程序项目" class="headerlink" title="3.1 创建小程序项目"></a>3.1 创建小程序项目</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061554678.png" alt="image-20240106155417633" style="zoom: 80%;"><h2 id="3-2-小程序目录结构"><a href="#3-2-小程序目录结构" class="headerlink" title="3.2 小程序目录结构"></a>3.2 小程序目录结构</h2><h3 id="3-2-1-开发界面-五个部分"><a href="#3-2-1-开发界面-五个部分" class="headerlink" title="3.2.1 开发界面(五个部分)"></a>3.2.1 开发界面(五个部分)</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061552662.png" style="zoom: 67%;"><h3 id="3-2-2-小程序整体目录结构-三个部分"><a href="#3-2-2-小程序整体目录结构-三个部分" class="headerlink" title="3.2.2 小程序整体目录结构(三个部分)"></a>3.2.2 小程序整体目录结构(三个部分)</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061636677.png" alt="image-20240106163632628" style="zoom:80%;"><h3 id="3-2-3-每个页面结构-四个部分"><a href="#3-2-3-每个页面结构-四个部分" class="headerlink" title="3.2.3 每个页面结构(四个部分)"></a>3.2.3 每个页面结构(四个部分)</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061638867.png" alt="image-20240106163848831" style="zoom:150%;"><h2 id="3-3-具体代码"><a href="#3-3-具体代码" class="headerlink" title="3.3 具体代码"></a>3.3 具体代码</h2><ul><li>进入到index.wxml，编写页面布局</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061641396.png" alt="image-20240106164109283" style="zoom:67%;"><ul><li>进入到index.js，编写业务逻辑代码</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061643185.png" alt="image-20240106164345127"><p>具体代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:&#39;hello world&#39;,</span><br><span class="line">    nickname: &#39;&#39;,</span><br><span class="line">    url:&#39;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;获取微信用户头像和昵称</span><br><span class="line">  getUserInfo()&#123;</span><br><span class="line">    &#x2F;&#x2F;调用weixin内置方法</span><br><span class="line">    wx.getUserProfile(&#123;</span><br><span class="line">      desc: &#39;获取用户信息&#39;,</span><br><span class="line">      success: (res) &#x3D;&gt;&#123;</span><br><span class="line">        &#x2F;&#x2F;调试器输出</span><br><span class="line">        console.log(res.userInfo)</span><br><span class="line">        &#x2F;&#x2F;为数据赋值</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          nickname:res.userInfo.nickName,</span><br><span class="line">          url:res.userInfo.avatarUrl</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;获取微信用户的授权码</span><br><span class="line">  wxLogin()&#123;</span><br><span class="line">    &#x2F;&#x2F;调用weixin内置方法</span><br><span class="line">    wx.login(&#123;</span><br><span class="line">      desc: &#39;获取微信用户授权码&#39;,</span><br><span class="line">      success: (res) &#x3D;&gt;&#123;</span><br><span class="line">        &#x2F;&#x2F;调试器输出</span><br><span class="line">        console.log(res.code)  &#x2F;&#x2F;每次登录的授权码不一样(只能使用一次)</span><br><span class="line">        &#x2F;&#x2F;为数据赋值</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          code:res.code</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;发送请求</span><br><span class="line">  sendRequest()&#123;</span><br><span class="line">    &#x2F;&#x2F;调用weixin内置方法</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      desc: &#39;获取用户端查询店铺运营状态&#39;,</span><br><span class="line">      url: &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;user&#x2F;shop&#x2F;status&#39;,   &#x2F;&#x2F;调用后端的接口!!!!!!!!</span><br><span class="line">      method: &#39;GET&#39;,</span><br><span class="line">      success: (res) &#x3D;&gt;&#123;</span><br><span class="line">        &#x2F;&#x2F;调试器输出</span><br><span class="line">        console.log(res.data) &#x2F;&#x2F;相应过来的整体json数据</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>进行调试 -点击编译按钮</p><p><strong><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061644039.png" alt="image-20240106164444992"></strong></p></li><li><p>一定要先打开后台程序，然后在模拟器中点击</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061646640.png" alt="image-20240106164648572" style="zoom: 80%;"></li></ul><h2 id="3-4-发布小程序"><a href="#3-4-发布小程序" class="headerlink" title="3.4 发布小程序"></a>3.4 发布小程序</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401061648158.png" alt="image-20240106164811098"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-小程序介绍&quot;&gt;&lt;a href=&quot;#1-小程序介绍&quot; class=&quot;headerlink&quot; title=&quot;1.小程序介绍&quot;&gt;&lt;/a&gt;1.小程序介绍&lt;/h1&gt;&lt;p&gt;小程序是一种新的开放能力，开发者可以快速地开发一个小程序。可以在微信内被便捷地获取和传播，同时具有出
      
    
    </summary>
    
    
    
      <category term="微信小程序" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>八股文整理</title>
    <link href="https://larkkkkkkk.github.io/2024/01/05/%E5%85%AB%E8%82%A1%E6%96%87%E6%95%B4%E7%90%86/"/>
    <id>https://larkkkkkkk.github.io/2024/01/05/%E5%85%AB%E8%82%A1%E6%96%87%E6%95%B4%E7%90%86/</id>
    <published>2024-01-05T12:43:52.000Z</published>
    <updated>2024-01-12T03:27:53.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1.Java基础"></a>1.Java基础</h1><h2 id="1-1-Java语言有哪些特点"><a href="#1-1-Java语言有哪些特点" class="headerlink" title="1.1 Java语言有哪些特点"></a>1.1 Java语言有哪些特点</h2><ul><li><p>1.==简单易学==(简化版C++)</p></li><li><p>2.==面向对象==【封装(就是可以通过权限修饰符将属性设置权限，这样只能通过get/set方法获取)，继承(父类和子类之间具有继承关系，子类可以继承父类的方法和属性，并且在此基础上进行修改)，多态(编译看左边，运行看右边)】</p></li><li><p>3.==平台无关性==(Java虚拟机实现平台无关性)</p></li><li><p>4.==支持多线程==(Java支持多线程)</p></li><li><p>5.==可靠性==(Java具备异常处理和自动内存管理机制)</p></li><li><p>6.==安全性==(Java提供权限修饰符，限制程序直接访问操作系统资源)</p></li><li><p>7.支持==网络编程==</p></li><li><p>8.==跨平台性==:只要操作系统安装jvm就可以运行java程序 (一次编写，随处运行)</p></li></ul><h2 id="1-2-Java三个版本的比较"><a href="#1-2-Java三个版本的比较" class="headerlink" title="1.2 Java三个版本的比较"></a>1.2 Java三个版本的比较</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401052116321.png" alt="image-20240105211658267"></p><ul><li><p>==Java SE（Java Platform，Standard Edition）==: Java 平台==标准版==，Java 编程语言的基础，它包含了支持 Java 应用程序开发和运行的核心类库以及虚拟机等核心组件。Java SE 可以用于构建==桌面应用程序== / ==简单的服务器应用程序==</p></li><li><p>==Java EE（Java Platform, Enterprise Edition ）==：Java 平台==企业版==，建立在 Java SE 的基础上，包含了支持==企业级应用程序开发==和部署的标准和规范（比如 Servlet、JSP、EJB、JDBC、JPA、JTA、JavaMail、JMS）。 Java EE 可以用于构建分布式、可移植、健壮、可伸缩和安全的服务端 Java 应用程序，例如 Web 应用程序</p></li><li><p>==Java ME== 是 Java 的微型版本，主要用于开发==嵌入式消费电子设备的应用程序==，例如手机、PDA、机顶盒、冰箱、空调等。Java ME 无需重点关注，知道有这个东西就好了，现在已经用不上了。</p></li></ul><p><strong>简单来说，Java SE 是 Java 的基础版本，Java EE 是 Java 的高级版本。Java SE 更适合开发桌面应用程序或简单的服务器应用程序，Java EE 更适合开发复杂的企业级应用程序或 Web 应用程序</strong></p><h2 id="1-3-JVM-amp-JDK-amp-JRE-三者对比"><a href="#1-3-JVM-amp-JDK-amp-JRE-三者对比" class="headerlink" title="1.3 JVM &amp; JDK &amp; JRE 三者对比"></a>1.3 JVM &amp; JDK &amp; JRE 三者对比</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401052120350.png" alt="image-20240105212044287" style="zoom:80%;"><ul><li>==JDK==:  Java程序开发工具包=jre+开发人员使用的工具（例如javac编译工具）</li></ul><ul><li>==JRE==:  Java程序运行时环境=jvm+运行时需要的核心类库   [有了jre其实就可以运行代码]</li></ul><ul><li><p>==JVM==:  运行Java字节码的虚拟机,JVM针对不同系统有特定实现(使用相同的字节码.class，得出相同结果)  –&gt; 一次编译，随处可以运行</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401052130719.png" alt="image-20240105213023670" style="zoom:67%;"></li></ul><h2 id="1-4-字节码-class文件"><a href="#1-4-字节码-class文件" class="headerlink" title="1.4 字节码(.class文件)"></a>1.4 字节码(.class文件)</h2><p>==字节码==：JVM可以理解的代码，不面向任何特定的处理器，只面向虚拟机JVM。</p><ul><li><strong>Java程序执行过程：</strong></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401052136534.png" alt="image-20240105213658490"><p>引入==JIT编译器(运行时编译)==，完成第一次编译之后就会将字节码对应的机器码保存下来，下次可以直接使用。机器码效率 &gt; java解释器，所以Java是编译和解释共存的语言</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401052139576.png" alt="image-20240105213914539"></p><blockquote><p>HotSpot 采用了==惰性评估(Lazy Evaluation)==的做法，根据==二八定律==，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。</p></blockquote><p>JDK、JRE、JVM、JIT 这四者的关系如下图所示</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401052141337.png" alt="image-20240105214120303" style="zoom:80%;"><h2 id="1-5-Java语言是”编译和解释并存”"><a href="#1-5-Java语言是”编译和解释并存”" class="headerlink" title="1.5 Java语言是”编译和解释并存”"></a>1.5 Java语言是”编译和解释并存”</h2><p>这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。</p><p>因为 Java 程序要经过==先编译，后解释==两个步骤，Java 编写的程序需要先经过编译步骤，生成字节码（<code>.class</code> 文件），这种字节码必须由 Java 解释器来解释执行</p><h2 id="1-6-Java和C-区别"><a href="#1-6-Java和C-区别" class="headerlink" title="1.6 Java和C++区别"></a>1.6 Java和C++区别</h2><p>Java 不提供指针来直接访问内存，程序内存更加安全</p><p>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</p><p>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。</p><p>C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。</p><h2 id="1-7-Java三种注释"><a href="#1-7-Java三种注释" class="headerlink" title="1.7 Java三种注释"></a>1.7 Java三种注释</h2><ul><li>==单行注释==   通常用于解释方法内某单行代码的作用</li><li>==多行注释==  通常用于解释一段代码的作用</li><li>==文档注释(Java特有)==  通常用于生成 Java 开发文档</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401052155494.png" alt="image-20240105215518448" style="zoom:80%;"><p>注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码(.class)中不保留注释)</p><blockquote><p><strong>代码的注释不是越详细越好。实际上好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。</strong></p><p><strong>若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述</strong></p></blockquote><h2 id="1-8-Java结构和格式"><a href="#1-8-Java结构和格式" class="headerlink" title="1.8 Java结构和格式"></a>1.8 Java结构和格式</h2><ul><li><strong>Java结构和语法格式</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符 class 类名&#123;</span><br><span class="line">权限修饰符 方法1()&#123;             &#x2F;&#x2F;每一级都需要缩进  每一级都需要&#123;&#125;配对</span><br><span class="line">语法1;</span><br><span class="line">语法2;</span><br><span class="line">&#125;</span><br><span class="line">权限修饰符 方法2()&#123;</span><br><span class="line">语法1;</span><br><span class="line">语法2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Java程序入口 –main方法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">  &#x2F;&#x2F;解释说明:  </span><br><span class="line">    public：公共的，用它修饰的类或成员在任意位置可见  [权限修饰符]</span><br><span class="line">    static：静态的，用它修饰的方法，可以不用创建对象就可以调用  [标识了静态就可以调用静态和非静态的，但是非静态的只能调用非静态的]</span><br><span class="line">    void：表示该方法没有返回值  [return;即可]</span><br><span class="line">    main：Java的主方法名，JavaSE的程序入口 </span><br><span class="line">    String[]：字符串数组，这是main方法的形参类型，可以通过命令行参数传值  </span><br><span class="line">    args：这是main方法的形参名，如果要在main中使用命令行参数，可以遍历该args数组。  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Java程序输出</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;有两种情况</span><br><span class="line">&#x2F;&#x2F;1.换行 --输出内容(可以忽略)</span><br><span class="line">System.out.println(输出内容);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.不换行 --输出内容(不可以忽略)</span><br><span class="line">System.out.print(输出内容);</span><br></pre></td></tr></table></figure><ul><li><p><strong>源文件名和类名</strong></p><ul><li><p>==一致性==：</p><p>如果一个类写了很多类，==源文件名(.java)必须和public的class类名一致==(不一致会编译报错)，可以和其他类不一致(不便于代码维护)</p></li><li><p>==多样性==：</p><p>一个源文件可以有多个类，但是一个源文件只有一个public类</p></li></ul></li></ul><h2 id="1-9-标识符和关键字"><a href="#1-9-标识符和关键字" class="headerlink" title="1.9 标识符和关键字"></a>1.9 标识符和关键字</h2><ul><li>==标识符==：只要你自己要定义的都可以叫做标识符<ul><li>区别大小写 </li><li>长度无限制 </li><li>只能由这四种组成: <ul><li>①26个英文字母   (可以当做开头)</li><li>②数字0-9    【如果可做开头的话就不知道指代数字本身还是变量所对应的值   int 123L=12;  long l=123L;  这样的话l最后是123还是12】</li><li>③ 下划线_       (可以当做开头)</li><li>④ 美元符号$    (可以当做开头)</li></ul></li><li>可以包含关键字和保留字，但是不可以使用</li><li>四种情况的命名规范：<ul><li>①包名  —所有的字母都小写  — java.lang com.at.bean</li><li>②类名/接口名  —所有的单词首字母大写  —ShopController</li><li>③变量名/方法名  —第一个单词的首字母小写，后面的单词首字母都大写  —getById()</li><li>④常量名  —所有的字母大写，中间用下划线连接  — MAX_SHOP_VALUES</li></ul></li></ul></li></ul><ul><li>==关键字==:  专门用途的字符串/单词<ul><li>全部为小写，一共有50个(const和goto是保留字，true和false和null是字面量)</li></ul></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202401052218990.png" alt="image-20240105221810897" style="zoom: 67%;"><blockquote><p> 其中，default可以在程序控制，可以当做修饰符，还可以设置为访问权限</p><p>在程序控制中，当在 <code>switch</code> 中匹配不到任何情况时，可以使用 <code>default</code> 来编写默认匹配的情况。</p><p>在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 <code>default</code> 关键字来定义一个方法的默认实现。</p><p>在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 <code>default</code>，但是这个修饰符加上了就会报错。</p></blockquote><h2 id="1-10-自增自减运算符"><a href="#1-10-自增自减运算符" class="headerlink" title="1.10 自增自减运算符"></a>1.10 自增自减运算符</h2><h2 id="1-11-移位运算符"><a href="#1-11-移位运算符" class="headerlink" title="1.11 移位运算符"></a>1.11 移位运算符</h2><h2 id="1-12-阿松大"><a href="#1-12-阿松大" class="headerlink" title="1.12  阿松大"></a>1.12  阿松大</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Java基础&quot;&gt;&lt;a href=&quot;#1-Java基础&quot; class=&quot;headerlink&quot; title=&quot;1.Java基础&quot;&gt;&lt;/a&gt;1.Java基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-Java语言有哪些特点&quot;&gt;&lt;a href=&quot;#1-1-Java语言有哪些特
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Springboot-takeout</title>
    <link href="https://larkkkkkkk.github.io/2024/01/02/Springboot-takeout/"/>
    <id>https://larkkkkkkk.github.io/2024/01/02/Springboot-takeout/</id>
    <published>2024-01-02T13:39:25.000Z</published>
    <updated>2024-01-02T13:39:25.334Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JAVAWeb-tlias智能学习辅助系统</title>
    <link href="https://larkkkkkkk.github.io/2023/12/24/JAVAWeb-tlias%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F/"/>
    <id>https://larkkkkkkk.github.io/2023/12/24/JAVAWeb-tlias%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-12-24T13:30:16.000Z</published>
    <updated>2023-12-24T13:30:16.705Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://larkkkkkkk.github.io/2023/12/23/Mybatis/"/>
    <id>https://larkkkkkkk.github.io/2023/12/23/Mybatis/</id>
    <published>2023-12-23T07:50:28.000Z</published>
    <updated>2024-04-15T09:08:31.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Mybatis入门"><a href="#1-Mybatis入门" class="headerlink" title="1.Mybatis入门"></a>1.Mybatis入门</h1><h2 id="1-1-Mybatis定义"><a href="#1-1-Mybatis定义" class="headerlink" title="1.1 Mybatis定义"></a>1.1 Mybatis定义</h2><ul><li><p>MyBatis是一款优秀的 <strong>持久层</strong> <strong>框架</strong>，用于简化JDBC的开发。</p></li><li><p>MyBatis本是 Apache的一个开源项目iBatis，2010年这个项目由apache迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p></li><li><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a> </p></li></ul><p>在上面我们提到了两个词：一个是持久层，另一个是框架</p><ul><li><strong>持久层</strong>：指的是就是数据访问层(dao)，是用来操作数据库的</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231608193.png" alt="image-20231223160804125" style="zoom:80%;"><ul><li><strong>框架</strong>：是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。在框架的基础上进行软件开发更加高效、规范、通用、可拓展</li></ul><h2 id="1-2-入门程序分析"><a href="#1-2-入门程序分析" class="headerlink" title="1.2 入门程序分析"></a>1.2 入门程序分析</h2><p>现在使用Mybatis操作数据库，就是在Mybatis中编写SQL查询代码，发送给数据库执行，数据库执行后返回结果</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231610781.png" alt="image-20231223161034687" style="zoom:80%;"><p> <strong>Mybatis会把数据库执行的查询结果，使用实体类封装起来（一行记录对应一个实体类对象）</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231611971.png" alt="image-20231223161114930"></p><h2 id="1-3-入门程序实现步骤"><a href="#1-3-入门程序实现步骤" class="headerlink" title="1.3 入门程序实现步骤"></a>1.3 入门程序实现步骤</h2><ol><li>准备工作(创建springboot工程、数据库表user、实体类User)</li><li>在pom.xml中引入Mybatis的相关依赖，</li><li>yml文件中配置Mybatis(数据库连接信息)</li><li>mapper层编写SQL语句(注解/XML)</li></ol><h2 id="1-3-解决mapper层编写sql语句不提醒"><a href="#1-3-解决mapper层编写sql语句不提醒" class="headerlink" title="1.3 解决mapper层编写sql语句不提醒"></a>1.3 解决mapper层编写sql语句不提醒</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231614872.png" alt="image-20231223161415812" style="zoom:67%;"><h2 id="1-4-JDBC"><a href="#1-4-JDBC" class="headerlink" title="1.4 JDBC"></a>1.4 JDBC</h2><h3 id="1-4-1-介绍"><a href="#1-4-1-介绍" class="headerlink" title="1.4.1 介绍"></a>1.4.1 介绍</h3><p>通过Mybatis可以很方便的进行数据库的访问操作。但是大家要明白，其实java语言操作数据库呢，只能通过一种方式：<strong>使用sun公司提供的 JDBC 规范</strong></p><p><strong>Mybatis框架，就是对原始的JDBC程序(Java语言操作关系型数据库的一套API)的封装</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231619548.png" alt="image-20231223161912481" style="zoom:67%;"><blockquote><p>本质：</p><ul><li><p>sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</p></li><li><p>各个数据库厂商去实现这套接口，提供数据库驱动jar包。</p></li><li><p>我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</p></li></ul></blockquote><h3 id="1-4-2-代码"><a href="#1-4-2-代码" class="headerlink" title="1.4.2 代码"></a>1.4.2 代码</h3><p>下面我们看看原始的JDBC程序是如何操作数据库的。操作步骤如下：</p><ol><li>注册驱动</li><li>获取连接对象</li><li>执行SQL语句，返回执行结果</li><li>处理执行结果</li><li>释放资源</li></ol><blockquote><p>在pom.xml文件中已引入MySQL驱动依赖，我们直接编写JDBC代码即可</p></blockquote><p>JDBC具体代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import com.itheima.pojo.User;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class JdbcTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testJdbc() throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F;1. 注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2. 获取数据库连接</span><br><span class="line">        String url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mybatis&quot;;</span><br><span class="line">        String username &#x3D; &quot;root&quot;;</span><br><span class="line">        String password &#x3D; &quot;1234&quot;;</span><br><span class="line">        Connection connection &#x3D; DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3. 执行SQL</span><br><span class="line">        Statement statement &#x3D; connection.createStatement(); &#x2F;&#x2F;操作SQL的对象</span><br><span class="line">        String sql&#x3D;&quot;select id,name,age,gender,phone from user&quot;;</span><br><span class="line">        ResultSet rs &#x3D; statement.executeQuery(sql);&#x2F;&#x2F;SQL查询结果会封装在ResultSet对象中</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList &#x3D; new ArrayList&lt;&gt;();&#x2F;&#x2F;集合对象（用于存储User对象）</span><br><span class="line">        &#x2F;&#x2F;4. 处理SQL执行结果</span><br><span class="line">        while (rs.next())&#123;</span><br><span class="line">            &#x2F;&#x2F;取出一行记录中id、name、age、gender、phone下的数据</span><br><span class="line">            int id &#x3D; rs.getInt(&quot;id&quot;);</span><br><span class="line">            String name &#x3D; rs.getString(&quot;name&quot;);</span><br><span class="line">            short age &#x3D; rs.getShort(&quot;age&quot;);</span><br><span class="line">            short gender &#x3D; rs.getShort(&quot;gender&quot;);</span><br><span class="line">            String phone &#x3D; rs.getString(&quot;phone&quot;);</span><br><span class="line">            &#x2F;&#x2F;把一行记录中的数据，封装到User对象中</span><br><span class="line">            User user &#x3D; new User(id,name,age,gender,phone);</span><br><span class="line">            userList.add(user);&#x2F;&#x2F;User对象添加到集合</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;5. 释放资源</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        rs.close();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;遍历集合</span><br><span class="line">        for (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> DriverManager(类)：数据库驱动管理类。</p><ul><li><p>作用：</p><ol><li><p>注册驱动</p></li><li><p>创建java代码和数据库之间的连接，即获取Connection对象</p></li></ol></li></ul><p>Connection(接口)：建立数据库连接的对象</p><ul><li>作用：用于建立java程序和数据库之间的连接</li></ul><p>Statement(接口)： 数据库操作对象(执行SQL语句的对象)。</p><ul><li>作用：用于向数据库发送sql语句</li></ul><p>ResultSet(接口)：结果集对象（一张虚拟表）</p><ul><li>作用：sql查询语句的执行结果会封装在ResultSet中</li></ul></blockquote><p>通过上述代码，我们看到直接基于JDBC程序来操作数据库，代码实现非常繁琐，所以在项目开发中，我们很少使用。  在项目开发中，通常会使用Mybatis这类的高级技术来操作数据库，从而简化数据库操作、提高开发效率</p><h3 id="1-4-3-问题分析"><a href="#1-4-3-问题分析" class="headerlink" title="1.4.3 问题分析"></a>1.4.3 问题分析</h3><p>原始的JDBC程序，存在以下几点问题：</p><ol><li>数据库链接的四要素(驱动、链接、用户名、密码)全部硬编码在java代码中</li><li>查询结果的解析及封装非常繁琐</li><li>每一次查询数据库都需要获取连接,操作完毕后释放连接, 资源浪费, 性能降低</li></ol><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231625185.png" alt="image-20231223162511117" style="zoom:67%;"><h3 id="1-4-4-mybatis优化点"><a href="#1-4-4-mybatis优化点" class="headerlink" title="1.4.4 mybatis优化点"></a>1.4.4 mybatis优化点</h3><p>分析了JDBC的缺点之后，我们再来看一下在mybatis中，是如何解决这些问题的：</p><ol><li><p>数据库连接四要素(驱动、链接、用户名、密码)，都配置在springboot默认的配置文件 application.properties中</p></li><li><p>查询结果的解析及封装，由mybatis<strong>自动完成映射封装</strong>，我们无需关注</p></li><li><p>在mybatis中使用了数据库连接池(Springboot默认Hikari追光者)技术，从而避免了频繁的创建连接、销毁连接而带来的资源浪费。</p></li></ol><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231628898.png" alt="image-20231223162830839" style="zoom:67%;"><h2 id="1-5-数据库连接池-四种"><a href="#1-5-数据库连接池-四种" class="headerlink" title="1.5 数据库连接池(四种)"></a>1.5 数据库连接池(四种)</h2><h3 id="1-5-1-介绍"><a href="#1-5-1-介绍" class="headerlink" title="1.5.1 介绍"></a>1.5.1 介绍</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231630573.png" alt="image-20231223163023536" style="zoom:67%;"><blockquote><p>没有使用数据库连接池：</p><ul><li>客户端执行SQL语句：要先创建一个新的连接对象，然后执行SQL语句，SQL语句执行后又需要关闭连接对象从而释放资源，每次执行SQL时都需要创建连接、销毁链接，这种频繁的重复创建销毁的过程是比较耗费计算机的性能。</li></ul></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231631563.png" alt="image-20231223163123510" style="zoom:67%;"><ul><li>程序在启动时，会在数据库连接池(容器)中，创建一定数量的Connection对象</li></ul><p>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p><ul><li>客户端在执行SQL时，先从连接池中获取一个Connection对象，然后在执行SQL语句，SQL语句执行完之后，释放Connection时就会把Connection对象归还给连接池（Connection对象可以复用）</li></ul><p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</p><ul><li>客户端获取到Connection对象了，但是Connection对象并没有去访问数据库(处于空闲)，数据库连接池发现Connection对象的空闲时间 &gt; 连接池中预设的最大空闲时间，此时数据库连接池就会自动释放掉这个连接对象</li></ul><p>数据库连接池的好处：</p><ol><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ol><h3 id="1-5-2-四种连接池"><a href="#1-5-2-四种连接池" class="headerlink" title="1.5.2 四种连接池"></a>1.5.2 四种连接池</h3><p>常见的数据库连接池：</p><ul><li>C3P0</li><li>DBCP</li><li>Druid</li><li>Hikari (springboot默认)</li></ul><p>现在使用更多的是：Hikari、Druid  （性能更优越）</p><ul><li><p>Hikari（追光者） [默认的连接池] </p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231632866.png" alt="image-20231223163247807"></p></li><li><p>Druid（德鲁伊）</p></li></ul><p>​        Druid连接池是阿里巴巴开源的数据库连接池项目 </p><p>​        功能强大，性能优秀，是Java语言最好的数据库连接池之一</p><h3 id="1-5-3-更换连接池"><a href="#1-5-3-更换连接池" class="headerlink" title="1.5.3 更换连接池"></a>1.5.3 更换连接池</h3><p>把默认的数据库连接池切换为Druid数据库连接池，只需要完成以下两步操作即可：</p><blockquote><p>参考官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" target="_blank" rel="noopener">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p></blockquote><p>1.在pom.xml文件中引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;!-- Druid连接池依赖 --&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.8&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>2.在配置文件中引入数据库连接配置(2种方式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">方式1：(datasource后面加druid)</span><br><span class="line">spring.datasource.druid.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.druid.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis</span><br><span class="line">spring.datasource.druid.username&#x3D;root</span><br><span class="line">spring.datasource.druid.password&#x3D;1234</span><br><span class="line"></span><br><span class="line">方式2：(原始方式)</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;1234</span><br></pre></td></tr></table></figure><h2 id="1-6-lombok（编译阶段）"><a href="#1-6-lombok（编译阶段）" class="headerlink" title="1.6 lombok（编译阶段）"></a>1.6 lombok（编译阶段）</h2><h3 id="1-6-1-介绍"><a href="#1-6-1-介绍" class="headerlink" title="1.6.1 介绍"></a>1.6.1 介绍</h3><p>Lombok是一个实用的Java类库，可以通过简单的注解来简化和消除一些必须有但显得很臃肿的Java代码</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231639846.png" alt="image-20231223163915779" style="zoom: 67%;"><blockquote><p>通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率</p></blockquote><table><thead><tr><th><strong>注解</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>@Getter/@Setter</td><td>为所有的属性提供get/set方法</td></tr><tr><td>@ToString</td><td>为类自动生成易阅读的 toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>为类提供拥有的非静态字段自动重写 equals 方法和  hashCode 方法</td></tr><tr><td>@Data</td><td>提供了更综合的生成代码功能（@Getter  + @Setter + @ToString + @EqualsAndHashCode） <strong>集成了前四个注解</strong></td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造器方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td></tr></tbody></table><h3 id="1-6-2-使用步骤"><a href="#1-6-2-使用步骤" class="headerlink" title="1.6.2 使用步骤"></a>1.6.2 使用步骤</h3><p>第1步：在pom.xml文件中引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>第2步：在实体类上添加注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">@Data &#x2F;&#x2F;getter方法、setter方法、toString方法、hashCode方法、equals方法</span><br><span class="line">@NoArgsConstructor &#x2F;&#x2F;无参构造</span><br><span class="line">@AllArgsConstructor&#x2F;&#x2F;全参构造</span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Short age;</span><br><span class="line">    private Short gender;</span><br><span class="line">    private String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Mybatis基础操作"><a href="#2-Mybatis基础操作" class="headerlink" title="2.Mybatis基础操作"></a>2.Mybatis基础操作</h1><h2 id="2-1-新增-Insert"><a href="#2-1-新增-Insert" class="headerlink" title="2.1 新增(@Insert)"></a>2.1 新增(@Insert)</h2><h2 id="2-2-删除-Delete"><a href="#2-2-删除-Delete" class="headerlink" title="2.2 删除(@Delete)"></a>2.2 删除(@Delete)</h2><h2 id="2-3-查询-Selete"><a href="#2-3-查询-Selete" class="headerlink" title="2.3 查询(@Selete)"></a>2.3 查询(@Selete)</h2><h2 id="2-4-修改-Update"><a href="#2-4-修改-Update" class="headerlink" title="2.4 修改(@Update)"></a>2.4 修改(@Update)</h2><h1 id="3-Mybatis两种书写sql语句的形式"><a href="#3-Mybatis两种书写sql语句的形式" class="headerlink" title="3.Mybatis两种书写sql语句的形式"></a>3.Mybatis两种书写sql语句的形式</h1><h2 id="3-1-mapper层注解"><a href="#3-1-mapper层注解" class="headerlink" title="3.1 mapper层注解"></a>3.1 mapper层注解</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242132845.png" alt="image-20231224213236692"></p><h2 id="3-2-xml映射文件"><a href="#3-2-xml映射文件" class="headerlink" title="3.2 xml映射文件"></a>3.2 xml映射文件</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242132234.png" alt="image-20231224213254184" style="zoom:67%;"><h3 id="3-2-1-创建xml文件"><a href="#3-2-1-创建xml文件" class="headerlink" title="3.2.1 创建xml文件"></a>3.2.1 创建xml文件</h3><ul><li>整体图</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242136663.png" alt="image-20231224213633587" style="zoom: 67%;"><blockquote><p><strong>创建位置</strong>：必须要和mapper层保持同一个包级别和同名(==同包同名==)</p></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242134054.png" alt="image-20231224213417001" style="zoom:80%;"><blockquote><p>命名规则:要保证mapper的namespacce和mapper同全路径名，四大类语句的id要和方法名一致，resultType要和方法返回值(最里面的)一致</p></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242134438.png" alt="image-20231224213458370" style="zoom:80%;"><h1 id="4-动态sql-在xml映射文件"><a href="#4-动态sql-在xml映射文件" class="headerlink" title="4.动态sql(在xml映射文件)"></a>4.动态sql(在xml映射文件)</h1><h2 id="4-1-if"><a href="#4-1-if" class="headerlink" title="4.1 if"></a>4.1 if</h2><h3 id="4-1-1-作用"><a href="#4-1-1-作用" class="headerlink" title="4.1.1 作用"></a>4.1.1 作用</h3><p>用于判断条件是否成立  –如果条件为true就拼接sql</p><h3 id="4-1-2-使用位置"><a href="#4-1-2-使用位置" class="headerlink" title="4.1.2 使用位置"></a>4.1.2 使用位置</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242142989.png" alt="image-20231224214251931" style="zoom: 67%;"><h2 id="4-2-where"><a href="#4-2-where" class="headerlink" title="4.2 where"></a>4.2 where</h2><h3 id="4-2-1-作用"><a href="#4-2-1-作用" class="headerlink" title="4.2.1 作用"></a>4.2.1 作用</h3><p>1.在子元素有内容的情况下插入where子句<br>2.<strong>自动去除</strong>子句开头的and/or</p><h3 id="4-2-2-使用位置"><a href="#4-2-2-使用位置" class="headerlink" title="4.2.2 使用位置"></a>4.2.2 使用位置</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242143984.png" alt="image-20231224214332923" style="zoom:67%;"><h2 id="4-3-set"><a href="#4-3-set" class="headerlink" title="4.3 set"></a>4.3 set</h2><h3 id="4-3-1-作用"><a href="#4-3-1-作用" class="headerlink" title="4.3.1 作用"></a>4.3.1 作用</h3><p>1.动态的在行首插入set关键字<br>2.<strong>自动去除额外的逗号</strong></p><h3 id="4-3-2-使用位置"><a href="#4-3-2-使用位置" class="headerlink" title="4.3.2 使用位置"></a>4.3.2 使用位置</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071406222.png" alt="image-20231224214629066" style="zoom:67%;"><h2 id="4-4-foreach"><a href="#4-4-foreach" class="headerlink" title="4.4 foreach"></a>4.4 foreach</h2><h3 id="4-4-1-作用"><a href="#4-4-1-作用" class="headerlink" title="4.4.1 作用"></a>4.4.1 作用</h3><p>循环的时候<strong>批量处理</strong>一部分数据</p><h3 id="4-4-2-使用位置"><a href="#4-4-2-使用位置" class="headerlink" title="4.4.2 使用位置"></a>4.4.2 使用位置</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242149955.png" alt="image-20231224214910899" style="zoom: 67%;"><h2 id="4-5-sql和include"><a href="#4-5-sql和include" class="headerlink" title="4.5 sql和include"></a>4.5 sql和include</h2><h3 id="4-5-1-作用"><a href="#4-5-1-作用" class="headerlink" title="4.5.1 作用"></a>4.5.1 作用</h3><p>将一些固定的(重复的/相同的)sql提取出来</p><h3 id="4-5-2-使用位置"><a href="#4-5-2-使用位置" class="headerlink" title="4.5.2 使用位置"></a>4.5.2 使用位置</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242149448.png" alt="image-20231224214941397" style="zoom: 80%;"><h2 id="4-6-choose-when-otherwise"><a href="#4-6-choose-when-otherwise" class="headerlink" title="4.6 choose-when-otherwise"></a>4.6 choose-when-otherwise</h2><h3 id="4-6-1-作用"><a href="#4-6-1-作用" class="headerlink" title="4.6.1 作用"></a>4.6.1 作用</h3><p>类似于Java的Switch语句，可以实现选择</p><h3 id="4-6-2-使用位置"><a href="#4-6-2-使用位置" class="headerlink" title="4.6.2 使用位置"></a>4.6.2 使用位置</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071405729.png" alt="image-20240407133356683"></p><h2 id="4-7-trim"><a href="#4-7-trim" class="headerlink" title="4.7 trim"></a>4.7 trim</h2><h3 id="4-7-1-作用"><a href="#4-7-1-作用" class="headerlink" title="4.7.1 作用"></a>4.7.1 作用</h3><p>生成sql语句的时候，在前后添加自定义的字符串</p><h3 id="4-7-2-使用位置"><a href="#4-7-2-使用位置" class="headerlink" title="4.7.2 使用位置"></a>4.7.2 使用位置</h3><p>prefix：加前缀 </p><p>prefixOverrides：要覆盖的前缀 </p><p>suffix：加后缀 </p><p>suffixOverrides：要覆盖的后缀</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071405222.png" alt="image-20240407133446397"></p><h2 id="4-8-bind"><a href="#4-8-bind" class="headerlink" title="4.8 bind"></a>4.8 bind</h2><h3 id="4-8-1-作用"><a href="#4-8-1-作用" class="headerlink" title="4.8.1 作用"></a>4.8.1 作用</h3><p>可以将表达式结果/特定内容绑定到一个变量，这个变量可以在sql语句中使用【类似于参数宏定义】</p><h3 id="4-8-2-使用位置"><a href="#4-8-2-使用位置" class="headerlink" title="4.8.2 使用位置"></a>4.8.2 使用位置</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071405607.png" alt="image-20240407133530203"></p><h1 id="5-mybatis日志输出"><a href="#5-mybatis日志输出" class="headerlink" title="5.mybatis日志输出"></a>5.mybatis日志输出</h1><p>在Mybatis当中我们可以借助日志，查看到sql语句的执行、执行传递的参数以及执行结果。具体操作如下：</p><ol><li>打开application.properties文件</li><li>开启mybatis的日志，并指定输出到控制台</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#指定mybatis输出日志的位置, 输出控制台</span><br><span class="line">mybatis.configuration.log-impl&#x3D;org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><p>开启日志之后，我们再次运行单元测试，可以看到在控制台中，输出了以下的SQL语句信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242213319.png" alt="image-20231224221349185"></p><blockquote><p>但是我们发现输出的SQL语句：delete from emp where id = ?，我们输入的参数16并没有在后面拼接，id的值是使用?进行占位。那这种SQL语句我们称为预编译SQL</p></blockquote><h1 id="6-预编译SQL"><a href="#6-预编译SQL" class="headerlink" title="6.预编译SQL"></a>6.预编译SQL</h1><p>mybatis中mapper层的写法就是预编译sql，传入参数放入的形式</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242215429.png" alt="image-20231224221537386"></p><p>预编译SQL有两个优势：</p><ol><li><p>性能更高</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242216662.png" alt="image-20231224221640562"></p></li><li><p>更安全(防止SQL注入)</p></li></ol><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242216908.png" alt="image-20231224221649839" style="zoom:67%;"><h1 id="7-参数占位符"><a href="#7-参数占位符" class="headerlink" title="7.参数占位符"></a>7.参数占位符</h1><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242217806.png" alt="image-20231224221713753" style="zoom: 67%;"><p>如果mapper接口方法形参只有<strong>一个</strong>普通类型的参数，#{…} 里面的属性名可以随便写</p><h1 id="8-数据封装-mysql列名和实体类属性名不一致"><a href="#8-数据封装-mysql列名和实体类属性名不一致" class="headerlink" title="8.数据封装(mysql列名和实体类属性名不一致)"></a>8.数据封装(mysql列名和实体类属性名不一致)</h1><h2 id="8-1-出现场景"><a href="#8-1-出现场景" class="headerlink" title="8.1 出现场景"></a>8.1 出现场景</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242219152.png" alt="image-20231224221958093" style="zoom:67%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242222236.png" alt="image-20231224222223153" style="zoom: 67%;"><h2 id="8-2-三种解决方案"><a href="#8-2-三种解决方案" class="headerlink" title="8.2 三种解决方案"></a>8.2 三种解决方案</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242225870.png" alt="image-20231224222522754" style="zoom:67%;"><h3 id="1-mapper层sql语句内起别名"><a href="#1-mapper层sql语句内起别名" class="headerlink" title="1. mapper层sql语句内起别名"></a>1. mapper层sql语句内起别名</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242222677.png" alt="image-20231224222245625" style="zoom: 80%;"><h3 id="2-mapper层方法上添加-Results和-Result注解手动映射"><a href="#2-mapper层方法上添加-Results和-Result注解手动映射" class="headerlink" title="2.mapper层方法上添加@Results和@Result注解手动映射"></a>2.mapper层方法上添加@Results和@Result注解手动映射</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242223816.png" alt="image-20231224222316757" style="zoom:150%;"><h3 id="3-yml配置文件打开驼峰命名-推荐"><a href="#3-yml配置文件打开驼峰命名-推荐" class="headerlink" title="3.yml配置文件打开驼峰命名(推荐)"></a>3.yml配置文件打开驼峰命名(推荐)</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312242223771.png" alt="image-20231224222337724"></p><h1 id="9-和-区别"><a href="#9-和-区别" class="headerlink" title="9.#{}和${}区别"></a>9.#{}和${}区别</h1><p>#{}表达式为OGNL表达式</p><p>${}表达式为EL表达式</p><p>1）相同：都可以获取对象的信息。</p><p>（2）#{ }</p><p>执行SQL时，会将#{ }替换为?，生成预编译SQL，会自动设置参数值，防止SQL注入<br>使用时机：参数传递，都使用#{ }<br>（3）${ }</p><p>​            拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题<br>​            使用时机：如果对表名、列表进行动态设置时使用</p><p>（4）#{ } 只能操作跟数据字表字段相关的列值，跟列值无关的只能用${ }</p><p>（5）#{ } 底层使用的是PreparedStatement，${ } 底层使用的是 Statement</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Mybatis入门&quot;&gt;&lt;a href=&quot;#1-Mybatis入门&quot; class=&quot;headerlink&quot; title=&quot;1.Mybatis入门&quot;&gt;&lt;/a&gt;1.Mybatis入门&lt;/h1&gt;&lt;h2 id=&quot;1-1-Mybatis定义&quot;&gt;&lt;a href=&quot;#1-1-
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>SpringBootWeb请求</title>
    <link href="https://larkkkkkkk.github.io/2023/12/22/SpringBootWeb%E8%AF%B7%E6%B1%82/"/>
    <id>https://larkkkkkkk.github.io/2023/12/22/SpringBootWeb%E8%AF%B7%E6%B1%82/</id>
    <published>2023-12-22T11:12:10.000Z</published>
    <updated>2023-12-23T07:18:23.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-SpringBootWeb请求响应"><a href="#0-SpringBootWeb请求响应" class="headerlink" title="0.SpringBootWeb请求响应"></a>0.SpringBootWeb请求响应</h1><h2 id="0-1-如何请求和响应"><a href="#0-1-如何请求和响应" class="headerlink" title="0.1 如何请求和响应"></a>0.1 如何请求和响应</h2><p>在SpringBoot进行web程序开发时，它内置了一个核心的Servlet程序 <strong>DispatcherServlet</strong>，称之为 <strong>核心控制器</strong>。<br><strong>DispatcherServlet 负责接收页面发送的请求，然后根据执行的规则，将请求再转发给后面的请求处理器Controller，请求处理器处理完请求之后，最终再由DispatcherServlet给浏览器响应数据</strong>。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312221925408.png" alt="image-20231222192514355"></p><p>那将来浏览器发送请求，会携带请求数据，包括：请求行、请求头；请求到达tomcat之后，<strong>tomcat会负责解析这些请求数据</strong>，然后呢将解析后的请求数据会传递给Servlet程序的HttpServletRequest对象，那也就意味着 HttpServletRequest 对象就可以获取到请求数据。 而Tomcat，还给Servlet程序传递了一个参数 HttpServletResponse，通过这个对象，我们就可以给浏览器设置响应数据 。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312221923764.png" alt="image-20231222192352710"></p><p>那上述所描述的这种浏览器/服务器的架构模式呢，我们称之为：BS架构。</p><p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20231222192804945.png" alt="image-20231222192804945"></p><p>• BS架构：Browser/Server，浏览器/服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。</p><p>那今天呢，我们的课程内容主要就围绕着：请求、响应进行。 今天课程内容，主要包含三个部分：</p><blockquote><ul><li>请求</li><li>响应</li><li>分层解耦</li></ul></blockquote><h2 id="0-2-自我理解"><a href="#0-2-自我理解" class="headerlink" title="0.2 自我理解"></a>0.2 自我理解</h2><p>其实之前就是servlet去写响应和请求的信息，但是后来有了tomcat就可以省略了对于请求三部分和响应三部分的解析，然后对于后端可以使用HttpServletRequest和Response去接受请求和设置响应，但是也很麻烦，最后就是框架的注解解决了。请求就通过判断@RequestBody等注解获取前端信息，然后响应就是@ResponseBody注解返回(Springboot类的RestController是一个组合注解里面就是controller和responsebody解决了这个顾虑)。</p><h2 id="0-3-前后端分离"><a href="#0-3-前后端分离" class="headerlink" title="0.3  前后端分离"></a>0.3  前后端分离</h2><p>之前我们课程中有提到当前最为主流的开发模式：<strong>前后端分离</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312221935722.png" alt="image-20231222193516639" style="zoom:67%;"><p>在这种模式下，前端技术人员基于”接口文档”，开发前端程序；后端技术人员也基于”接口文档”，开发后端程序。</p><p>由于前后端分离，对我们后端技术人员来讲，在开发过程中，是没有前端页面的，那我们怎么测试自己所开发的程序呢？</p><p>方式1：在浏览器中输入地址(只能测试get请求)</p><p>方式2：使用专业的接口测试工具（课程中我们使用Postman工具）</p><h1 id="1-请求"><a href="#1-请求" class="headerlink" title="1. 请求"></a>1. 请求</h1><h2 id="1-1-简单参数"><a href="#1-1-简单参数" class="headerlink" title="1.1 简单参数"></a>1.1 简单参数</h2><p>简单参数：在向服务器发起请求时，向服务器传递的是一些普通的请求数据。</p><p><img src="/2023/12/22/SpringBootWeb%E8%AF%B7%E6%B1%82/JAVA%25E8%25B7%25AF%25E7%25BA%25BF%25E8%25AF%25BE%25E7%25A8%258B%25E8%25B5%2584%25E6%2596%2599/2023%25E9%25BB%2591%25E9%25A9%25AC%25E5%2585%25A8%25E6%2596%25B0Web/day05-SpringBootWeb%25E8%25AF%25B7%25E6%25B1%2582%25E5%2593%258D%25E5%25BA%2594/day05-SpringBootWeb%25E8%25AF%25B7%25E6%25B1%2582%25E5%2593%258D%25E5%25BA%2594/%25E8%25AE%25B2%25E4%25B9%2589/assets/image-20220826180550583.png" alt="image-20220826180550583"></p><p>那么在后端程序中，如何接收传递过来的普通参数数据呢？</p><p>我们在这里讲解两种方式：</p><ol><li>原始方式   </li><li>SpringBoot方式</li></ol><h3 id="1-2-1-原始方式"><a href="#1-2-1-原始方式" class="headerlink" title="1.2.1 原始方式"></a>1.2.1 原始方式</h3><p>在原始的Web程序当中，需要通过Servlet中提供的API：HttpServletRequest（请求对象），获取请求的相关信息。比如获取请求参数：</p><blockquote><p>Tomcat接收到http请求时：把请求的相关信息封装到HttpServletRequest对象中</p></blockquote><p>在Controller中，我们要想获取Request对象，可以直接在方法的形参中声明 HttpServletRequest 对象。然后就可以通过该对象来获取请求信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据指定的参数名获取请求参数的数据值</span></span><br><span class="line">String  request.getParameter("参数名")</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//原始方式</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/simpleParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simpleParam</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">        <span class="comment">// 请求参数： name=Tom&amp;age=10   （有2个请求参数）</span></span><br><span class="line">        <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">        <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line"></span><br><span class="line">        String name = request.getParameter(<span class="string">"name"</span>);<span class="comment">//name就是请求参数名</span></span><br><span class="line">        String ageStr = request.getParameter(<span class="string">"age"</span>);<span class="comment">//age就是请求参数名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(ageStr);<span class="comment">//需要手动进行类型转换</span></span><br><span class="line">        System.out.println(name+<span class="string">"  :  "</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上这种方式，我们仅做了解。（在以后的开发中不会使用到）</p></blockquote><h3 id="1-2-2-SpringBoot方式"><a href="#1-2-2-SpringBoot方式" class="headerlink" title="1.2.2 SpringBoot方式"></a>1.2.2 SpringBoot方式</h3><p>在Springboot的环境中，对原始的API进行了封装，接收参数的形式更加简单。 如果是简单参数，参数名与形参变量名相同，定义同名的形参即可接收参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">    <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">    <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/simpleParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simpleParam</span><span class="params">(String name , Integer age )</span></span>&#123;<span class="comment">//形参名和请求参数名保持一致</span></span><br><span class="line">        System.out.println(name+<span class="string">"  :  "</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>postman测试( GET 请求)：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222034759.png" alt="image-20231222203422664" style="zoom: 80%;"><p><strong>postman测试( POST请求 )：</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222034320.png" alt="image-20231222203429270" style="zoom:80%;"><blockquote><p><strong>结论：不论是GET请求还是POST请求，对于简单参数来讲，只要保证==请求参数名和Controller方法中的形参名保持一致==，就可以获取到请求参数中的数据值。</strong></p></blockquote><h3 id="1-2-3-参数名不一致"><a href="#1-2-3-参数名不一致" class="headerlink" title="1.2.3 参数名不一致"></a>1.2.3 参数名不一致</h3><p>如果方法形参名称与请求参数名称不一致，controller方法中的形参还能接收到请求参数值吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span><br><span class="line">    <span class="comment">// 请求参数名：name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/simpleParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simpleParam</span><span class="params">(String username , Integer age )</span></span>&#123;<span class="comment">//请求参数名和形参名不相同</span></span><br><span class="line">        System.out.println(username+<span class="string">"  :  "</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：运行没有报错。 controller方法中的username值为：null，age值为20</p><ul><li>结论：对于简单参数来讲，请求参数名和controller方法中的形参名不一致时，无法接收到请求数据</li></ul><p>那么如果我们开发中，遇到了这种请求参数名和controller方法中的形参名不相同，怎么办？</p><p>解决方案：可以使用Spring提供的@RequestParam注解完成映射</p><p>在方法形参前面加上 @RequestParam 然后通过value属性执行请求参数名，从而完成映射。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span><br><span class="line">    <span class="comment">// 请求参数名：name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/simpleParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simpleParam</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String username , Integer age )</span>&#123;</span><br><span class="line">        System.out.println(username+<span class="string">"  :  "</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项：</strong></p><p>@RequestParam中的required属性默认为true（默认值也是true），代表该请求参数必须传递，如果不传递将报错</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222035739.png" alt="image-20231222203507662" style="zoom:67%;"><p>如果该参数是可选的，可以将required属性设置为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/simpleParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">simpleParam</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>, required = <span class="keyword">false</span>)</span> String username, Integer age)</span>&#123;</span><br><span class="line">System.out.println(username+ <span class="string">":"</span> + age);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="1-3-实体参数"><a href="#1-3-实体参数" class="headerlink" title="1.3 实体参数"></a>1.3 实体参数</h2><p>在使用简单参数做为数据传递方式时，前端传递了多少个请求参数，后端controller方法中的形参就要书写多少个。如果请求参数比较多，通过上述的方式一个参数一个参数的接收，会比较繁琐。 </p><p>此时，我们可以考虑将请求参数封装到一个实体类对象中。 要想完成数据封装，需要遵守如下规则：<strong>请求参数名与实体类的属性名相同</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222035160.png" alt="image-20231222203541083"></p><h3 id="1-3-1-简单实体对象"><a href="#1-3-1-简单实体对象" class="headerlink" title="1.3.1 简单实体对象"></a>1.3.1 简单实体对象</h3><p>定义POJO实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实体参数：简单实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/simplePojo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simplePojo</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><ul><li>参数名和实体类属性名一致时</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222036860.png" alt="image-20231222203621791"></p><ul><li>参数名和实体类属性名不一致时</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222036608.png" alt="image-20231222203610548"></p><h3 id="1-3-2-复杂实体对象"><a href="#1-3-2-复杂实体对象" class="headerlink" title="1.3.2 复杂实体对象"></a>1.3.2 复杂实体对象</h3><p>上面我们讲的呢是简单的实体对象，下面我们在来学习下复杂的实体对象。</p><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。如下：</p><ul><li>User类中有一个Address类型的属性（Address是一个实体类）</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222036713.png" alt="image-20231222203640652" style="zoom:80%;"><p>复杂实体对象的封装，需要遵守如下规则：</p><ul><li><strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数。</strong></li></ul><p>定义POJO实体类：</p><ul><li>Address实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Address&#123;"</span> +</span><br><span class="line">                <span class="string">"province='"</span> + province + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>User实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">//地址对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", address="</span> + address +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实体参数：复杂实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/complexPojo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">complexPojo</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222036648.png" alt="image-20231222203658587" style="zoom:80%;"><h2 id="1-4-数组集合参数"><a href="#1-4-数组集合参数" class="headerlink" title="1.4 数组集合参数"></a>1.4 数组集合参数</h2><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222037243.png" alt="image-20231222203724195"></p><p>多个值是怎么提交的呢？其实多个值也是一个一个的提交。</p><p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20231222203752082.png" alt="image-20231222203752082"></p><p>后端程序接收上述多个值的方式有两种：</p><ol><li>数组</li><li>集合</li></ol><h3 id="1-4-1-数组"><a href="#1-4-1-数组" class="headerlink" title="1.4.1 数组"></a>1.4.1 数组</h3><p>数组参数：<strong>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222038445.png" alt="image-20231222203810385"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组集合参数</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/arrayParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">arrayParam</span><span class="params">(String[] hobby)</span></span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(hobby));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p>在前端请求时，有两种传递形式：</p><p>方式一： xxxxxxxxxx?hobby=game&amp;hobby=java</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222038935.png" alt="image-20231222203830857" style="zoom:80%;"><p>方式二：xxxxxxxxxxxxx?hobby=game,java</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222038457.png" alt="image-20231222203840400" style="zoom:80%;"><h3 id="1-4-2-集合"><a href="#1-4-2-集合" class="headerlink" title="1.4.2 集合"></a>1.4.2 集合</h3><p>集合参数：<strong>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</strong></p><blockquote><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p></blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222038540.png" alt="image-20231222203855479" style="zoom:80%;"><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组集合参数</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/listParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">listParam</span><span class="params">(@RequestParam List&lt;String&gt; hobby)</span></span>&#123;</span><br><span class="line">        System.out.println(hobby);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p>方式一： xxxxxxxxxx?hobby=game&amp;hobby=java</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222039553.png" style="zoom:80%;"><p>方式二：xxxxxxxxxxxxx?hobby=game,java</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222039994.png" alt="image-20231222203936944" style="zoom:80%;"><h2 id="1-5-日期参数"><a href="#1-5-日期参数" class="headerlink" title="1.5 日期参数"></a>1.5 日期参数</h2><p>上述演示的都是一些普通的参数，在一些特殊的需求中，可能会涉及到日期类型数据的封装。比如，如下需求：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222039263.png" alt="image-20231222203953214"></p><p>因为日期的格式多种多样（如：2022-12-12 10:05:45 、2022/12/12 10:05:45），那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222040200.png" alt="image-20231222204000143" style="zoom:80%;"><ul><li>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</li><li>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</li></ul><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日期时间参数</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/dateParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dateParam</span><span class="params">(@DateTimeFormat(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        System.out.println(updateTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222040496.png" alt="image-20231222204008448" style="zoom:80%;"><h2 id="1-6-JSON参数"><a href="#1-6-JSON参数" class="headerlink" title="1.6 JSON参数"></a>1.6 JSON参数</h2><p>在学习前端技术时，我们有讲到过JSON，而在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。 （JSON是开发中最常用的前后端数据交互方式）</p><p>我们学习JSON格式参数，主要从以下两个方面着手：</p><ol><li>Postman在发送请求时，如何传递json格式的请求参数</li><li>在服务端的controller方法中，如何接收json格式的请求参数</li></ol><p>Postman发送JSON格式数据：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222040810.png" alt="image-20231222204018760" style="zoom:80%;"><p>服务端Controller方法接收JSON格式数据：</p><ul><li><p>传递json格式的参数，在Controller中会使用实体类进行封装。 </p></li><li><p>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</strong></p></li><li><p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20231222204031290.png" alt="image-20231222204031290" style="zoom:80%;">@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致)</p></li></ul><p>实体类：Address</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//省略GET , SET 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略GET , SET 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//JSON参数</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/jsonParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">jsonParam</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222041090.png" alt="image-20231222204102025" style="zoom:80%;"><h2 id="1-7-路径参数"><a href="#1-7-路径参数" class="headerlink" title="1.7 路径参数"></a>1.7 路径参数</h2><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面通过?key=value的形式传递(GET请求)。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222041818.png" alt="image-20231222204120762" style="zoom:80%;"><p>在现在的开发中，经常还会直接在请求的URL中传递参数。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;user&#x2F;1</span><br><span class="line">http:&#x2F;&#x2F;localhost:880&#x2F;user&#x2F;1&#x2F;0</span><br></pre></td></tr></table></figure><p>上述的这种传递请求参数的形式呢，我们称之为：路径参数。</p><p>学习路径参数呢，主要掌握在后端的controller方法中，如何接收路径参数。</p><p>路径参数：</p><ul><li>前端：通过请求URL直接传递参数</li><li>后端：使用{…}来标识该路径参数，需要使用@PathVariable获取路径参数</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222041851.png" alt="image-20231222204136790" style="zoom:80%;"><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/path/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pathParam</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222041401.png" alt="image-20231222204146349" style="zoom:80%;"><p><strong>传递多个路径参数：</strong></p><p>Postman：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222041287.png" alt="image-20231222204159233" style="zoom:80%;"><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/path/&#123;id&#125;/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pathParam2</span><span class="params">(@PathVariable Integer id, @PathVariable String name)</span></span>&#123;</span><br><span class="line">        System.out.println(id+ <span class="string">" : "</span> +name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-响应"><a href="#2-响应" class="headerlink" title="2. 响应"></a>2. 响应</h1><p>前面我们学习过HTTL协议的交互方式：请求响应模式（有请求就有响应）</p><p>那么Controller程序呢，除了接收请求外，还可以进行响应。</p><h2 id="2-1-ResponseBody"><a href="#2-1-ResponseBody" class="headerlink" title="2.1 @ResponseBody"></a>2.1 @ResponseBody</h2><p>在我们前面所编写的controller方法中，都已经设置了响应数据。</p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20231222204216090.png" alt="image-20231222204216090" style="zoom:80%;"><p>controller方法中的return的结果，怎么就可以响应给浏览器呢？</p><p>答案：使用@ResponseBody注解</p><p><strong>@ResponseBody注解：</strong></p><ul><li>类型：方法注解、类注解</li><li>位置：书写在Controller方法上或类上</li><li>作用：将方法返回值直接响应给浏览器<ul><li>如果返回值类型是实体对象/集合，将会转换为JSON格式后在响应给浏览器</li></ul></li></ul><p>但是在我们所书写的Controller中，只在类上添加了@RestController注解、方法添加了@RequestMapping注解，并没有使用@ResponseBody注解，怎么给浏览器响应呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World ~"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World ~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：在类上添加的@RestController注解，是一个组合注解。</p><ul><li>@RestController = @Controller + @ResponseBody </li></ul><p>@RestController源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)   <span class="comment">//元注解（修饰注解的注解）</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Controller<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：在类上添加@RestController就相当于添加了@ResponseBody注解。</p><ul><li>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据<ul><li>方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</li></ul></li></ul><p>下面我们来测试下响应数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//响应字符串</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World ~"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World ~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getAddr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Address addr = <span class="keyword">new</span> Address();<span class="comment">//创建实体类对象</span></span><br><span class="line">        addr.setProvince(<span class="string">"广东"</span>);</span><br><span class="line">        addr.setCity(<span class="string">"深圳"</span>);</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应集合数据</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/listAddr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Address&gt; <span class="title">listAddr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//集合对象</span></span><br><span class="line">        </span><br><span class="line">        Address addr = <span class="keyword">new</span> Address();</span><br><span class="line">        addr.setProvince(<span class="string">"广东"</span>);</span><br><span class="line">        addr.setCity(<span class="string">"深圳"</span>);</span><br><span class="line"></span><br><span class="line">        Address addr2 = <span class="keyword">new</span> Address();</span><br><span class="line">        addr2.setProvince(<span class="string">"陕西"</span>);</span><br><span class="line">        addr2.setCity(<span class="string">"西安"</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务端响应了一个对象或者集合，那私前端获取到的数据是什么样子的呢？我们使用postman发送请求来测试下。测试效果如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222042904.png" alt="image-20231222204238847" style="zoom:80%;"><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20231222204246396.png" alt="image-20231222204246396" style="zoom:80%;"><h2 id="2-2-统一响应结果"><a href="#2-2-统一响应结果" class="headerlink" title="2.2 统一响应结果"></a>2.2 统一响应结果</h2><p>大家有没有发现一个问题，我们在前面所编写的这些Controller方法中，返回值各种各样，没有任何的规范。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222043583.png" alt="image-20231222204309511" style="zoom:67%;"><p>如果我们开发一个大型项目，项目中controller方法将成千上万，使用上述方式将造成整个项目难以维护。那在真实的项目开发中是什么样子的呢？</p><p>在真实的项目开发中，无论是哪种方法，我们都会定义一个统一的返回结果。方案如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222043163.png" alt="image-20231222204329099" style="zoom:67%;"><blockquote><p>前端：只需要按照统一格式的返回结果进行解析(仅一种解析方案)，就可以拿到数据。</p></blockquote><p>统一的返回结果使用类来描述，在这个结果中包含：</p><ul><li><p>响应状态码：当前请求是成功，还是失败</p></li><li><p>状态码信息：给页面的提示信息</p></li><li><p>返回的数据：给前端响应的数据（字符串、对象、集合）</p></li></ul><p>定义在一个实体类Result来包含以上信息。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(Integer code, String msg, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">1</span>,<span class="string">"success"</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">1</span>,<span class="string">"success"</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">error</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">0</span>,msg,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseController</span> </span>&#123; </span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World ~"</span>);</span><br><span class="line">        <span class="comment">//return new Result(1,"success","Hello World ~");</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">"Hello World ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getAddr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">getAddr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Address addr = <span class="keyword">new</span> Address();</span><br><span class="line">        addr.setProvince(<span class="string">"广东"</span>);</span><br><span class="line">        addr.setCity(<span class="string">"深圳"</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/listAddr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">listAddr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Address addr = <span class="keyword">new</span> Address();</span><br><span class="line">        addr.setProvince(<span class="string">"广东"</span>);</span><br><span class="line">        addr.setCity(<span class="string">"深圳"</span>);</span><br><span class="line"></span><br><span class="line">        Address addr2 = <span class="keyword">new</span> Address();</span><br><span class="line">        addr2.setProvince(<span class="string">"陕西"</span>);</span><br><span class="line">        addr2.setCity(<span class="string">"西安"</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Postman测试：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222043735.png" alt="image-20231222204346669" style="zoom:67%;"><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222043490.png" alt="image-20231222204353420" style="zoom:67%;"><h1 id="3-分层解耦"><a href="#3-分层解耦" class="headerlink" title="3. 分层解耦"></a>3. 分层解耦</h1><h2 id="3-1-三层架构"><a href="#3-1-三层架构" class="headerlink" title="3.1 三层架构"></a>3.1 三层架构</h2><h3 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="3.1.1 介绍"></a>3.1.1 介绍</h3><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一些（<strong>单一职责原则</strong>）。</p><blockquote><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote><p>我们之前开发的程序呢，并不满足单一职责原则。下面我们来分析下之前的程序：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222109178.png" alt="image-20231222210953103" style="zoom:80%;"><p>那其实我们上述案例的处理逻辑呢，从组成上看可以分为三个部分：</p><ul><li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作。</li><li>逻辑处理：负责业务逻辑处理的代码。</li><li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据。</li></ul><p>按照上述的三个组成部分，在我们项目开发中呢，可以将代码分为三层：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222110908.png" alt="image-20231222211029851"></p><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>基于三层架构的程序执行流程：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222123847.png" alt="image-20231222212336762" style="zoom:80%;"><ul><li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li><li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li><li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li><li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li></ul><blockquote><p>思考：按照三层架构的思想，如何要对业务逻辑(Service层)进行变更，会影响到Controller层和Dao层吗？ </p><p>答案：不会影响。 （程序的扩展性、维护性变得更好了）</p></blockquote><h3 id="3-1-2-代码拆分"><a href="#3-1-2-代码拆分" class="headerlink" title="3.1.2 代码拆分"></a>3.1.2 代码拆分</h3><p>我们使用三层架构思想，来改造下之前的程序：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312222111941.png" alt="image-20231222211133871" style="zoom:67%;"><p>三层架构的好处：</p><ol><li>复用性强</li><li>便于维护</li><li>利用扩展</li></ol><h2 id="3-2-分层解耦"><a href="#3-2-分层解耦" class="headerlink" title="3.2 分层解耦"></a>3.2 分层解耦</h2><p>刚才我们学习过程序分层思想了，接下来呢，我们来学习下程序的解耦思想。</p><p>解耦：解除耦合。</p><h3 id="3-2-1-耦合问题"><a href="#3-2-1-耦合问题" class="headerlink" title="3.2.1 耦合问题"></a>3.2.1 耦合问题</h3><p>首先需要了解软件开发涉及到的两个概念：内聚和耦合。</p><ul><li><p>内聚：软件中各个功能模块内部的功能联系。</p></li><li><p>耦合：衡量软件中各个层/模块之间的依赖、关联的程度。</p></li></ul><p><strong>软件设计原则：高内聚低耦合。</strong></p><blockquote><p>高内聚指的是：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 “高内聚”。</p><p>低耦合指的是：软件中各个层、模块之间的依赖关联程序越低越好。</p></blockquote><p>程序中高内聚的体现：</p><ul><li>EmpServiceA类中只编写了和员工相关的逻辑处理代码</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231105693.png" alt="image-20231223110557491" style="zoom:67%;"><p>程序中耦合代码的体现：</p><ul><li>把业务类变为EmpServiceB时，需要修改controller层中的代码</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231108335.png" alt="image-20231223110817267" style="zoom:67%;"><p>高内聚、低耦合的目的是使程序模块的可重用性、移植性大大增强。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231108522.png" alt="image-20231223110830461" style="zoom:67%;"><h3 id="3-2-2-解耦思路-控制反转和依赖注入的原因"><a href="#3-2-2-解耦思路-控制反转和依赖注入的原因" class="headerlink" title="3.2.2  解耦思路(控制反转和依赖注入的原因)"></a>3.2.2  解耦思路(控制反转和依赖注入的原因)</h3><p>之前我们在编写代码时，需要什么对象，就直接new一个就可以了。 这种做法呢，层与层之间代码就耦合了，当service层的实现变了之后， 我们还需要修改controller层的代码。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231108292.png" alt="image-20231223110855213" style="zoom:67%;"><p> 那应该怎么解耦呢？</p><ul><li>不能new，就意味着没有业务层对象（程序运行就报错），怎么办呢？<ul><li>我们的解决思路是：<ul><li><strong>提供一个容器，容器中存储一些对象(例：EmpService对象)</strong></li><li><strong>controller程序从容器中获取EmpService类型的对象</strong></li></ul></li></ul></li></ul><p>我们想要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><blockquote><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><blockquote><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p><p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote></li></ul><p>IOC容器中创建、管理的对象，称之为：bean对象</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231111705.png" alt="image-20231223111141495" style="zoom:67%;"><h1 id="4-IOC控制依赖和DI依赖注入"><a href="#4-IOC控制依赖和DI依赖注入" class="headerlink" title="4. IOC控制依赖和DI依赖注入"></a>4. IOC控制依赖和DI依赖注入</h1><p>上面我们引出了Spring中IOC和DI的基本概念，下面我们就来具体学习下IOC和DI的代码实现。</p><h2 id="4-1-IOC-amp-DI基本步骤"><a href="#4-1-IOC-amp-DI基本步骤" class="headerlink" title="4.1 IOC&amp;DI基本步骤"></a>4.1 IOC&amp;DI基本步骤</h2><p>任务：完成Controller层、Service层、Dao层的代码解耦</p><ul><li>思路：<ol><li>删除Controller层、Service层中new对象的代码</li><li>Service层及Dao层的实现类，交给IOC容器管理</li><li>为Controller及Service注入运行时依赖的对象<ul><li>Controller程序中注入依赖的Service层对象</li><li>Service程序中注入依赖的Dao层对象</li></ul></li></ol></li></ul><p>第1步：删除Controller层、Service层中new对象的代码</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231114553.png" alt="image-20231223111439496"></p><p>第2步：Service层及Dao层的实现类，交给IOC容器管理</p><ul><li>使用Spring提供的注解：<strong>@Component，就可以实现类交给IOC容器管理</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231114223.png" alt="image-20231223111452170"></p><p>第3步：为Controller及Service注入运行时依赖的对象</p><ul><li>使用Spring提供的注解：<strong>@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231115029.png" alt="image-20231223111517967"></p><h2 id="4-2-IOC详解"><a href="#4-2-IOC详解" class="headerlink" title="4.2 IOC详解"></a>4.2 IOC详解</h2><h3 id="4-2-1-bean的声明-每个层一个注解"><a href="#4-2-1-bean的声明-每个层一个注解" class="headerlink" title="4.2.1 bean的声明(每个层一个注解)"></a>4.2.1 bean的声明(每个层一个注解)</h3><p>前面我们提到IOC控制反转，就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象。IOC容器创建的对象称为bean对象。</p><p>在之前的入门案例中，要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component </p><p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p><ul><li><p>@Controller    （标注在控制层类上）</p></li><li><p>@Service          （标注在业务层类上）</p></li><li><p>@Repository    （标注在数据访问层类上）</p></li></ul><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th align="left">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td align="left">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td align="left">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td align="left">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合 –mybatis用的@Mapper）</td></tr><tr><td align="left">@Component</td><td>声明bean的基础注解</td><td>不清楚属于哪一个层上就用这个</td></tr></tbody></table><blockquote><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231119493.png" style="zoom:67%;"></blockquote><p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231120277.png" alt="image-20231223112029205" style="zoom:80%;"><blockquote><p>注意事项: </p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li></ul></blockquote><h3 id="4-2-2-组件扫描"><a href="#4-2-2-组件扫描" class="headerlink" title="4.2.2 组件扫描"></a>4.2.2 组件扫描</h3><p>问题：使用前面学习的四个注解声明的bean，一定会生效吗？</p><p>答案：不一定。（原因：bean想要生效，还需要被组件扫描）</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231121879.png" alt="image-20231223112148802" style="zoom:67%;"><p>推荐做法（如下图）：</p><ul><li>将我们定义的controller，service，dao这些包呢，都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231121605.png" alt="image-20231223112123552" style="zoom:67%;"><h2 id="4-3-DI详解-4种依赖注入"><a href="#4-3-DI详解-4种依赖注入" class="headerlink" title="4.3 DI详解(4种依赖注入)"></a>4.3 DI详解(4种依赖注入)</h2><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><h3 id="4-3-1-Autowired注解"><a href="#4-3-1-Autowired注解" class="headerlink" title="4.3.1 @Autowired注解"></a>4.3.1 @Autowired注解</h3><p>默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）  <strong>–如果有多个相同类型的就会报错，就要用其他三种注解解决</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231126071.png" alt="image-20231223112602006" style="zoom:67%;"><h3 id="4-3-2-Primary注解-在相同类型的类上单独加优先级"><a href="#4-3-2-Primary注解-在相同类型的类上单独加优先级" class="headerlink" title="4.3.2 @Primary注解(在相同类型的类上单独加优先级)"></a>4.3.2 @Primary注解(在相同类型的类上单独加优先级)</h3><p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231126009.png" alt="image-20231223112636963"></p><h3 id="4-3-3-Qualifier注解-在出错位置配合Autowired注解看用哪个"><a href="#4-3-3-Qualifier注解-在出错位置配合Autowired注解看用哪个" class="headerlink" title="4.3.3 @Qualifier注解 (在出错位置配合Autowired注解看用哪个)"></a>4.3.3 @Qualifier注解 (在出错位置配合Autowired注解看用哪个)</h3><p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p><ul><li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231127691.png" alt="image-20231223112754645"></p><h3 id="4-3-4-Resource注解-和Autowired同一位置，但是是按照名称注入"><a href="#4-3-4-Resource注解-和Autowired同一位置，但是是按照名称注入" class="headerlink" title="4.3.4 @Resource注解(和Autowired同一位置，但是是按照名称注入)"></a>4.3.4 @Resource注解(和Autowired同一位置，但是是按照名称注入)</h3><p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231129846.png" alt="image-20231223112926795"></p><h3 id="4-3-4-面试题和总结"><a href="#4-3-4-面试题和总结" class="headerlink" title="4.3.4 面试题和总结"></a>4.3.4 面试题和总结</h3><blockquote><p>面试题 ： @Autowird 与 @Resource的区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li><li>@Autowired 如果出现多个类型相同的话会出现异常(所以用其他三种注解解决)</li></ul></blockquote><ul><li><strong>总结</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231131153.png" alt="image-20231223113125106"></p><h2 id="4-4-控制依赖和依赖注入总体图"><a href="#4-4-控制依赖和依赖注入总体图" class="headerlink" title="4.4 控制依赖和依赖注入总体图"></a>4.4 控制依赖和依赖注入总体图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202312231504121.png" alt="image-20231223150424032"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-SpringBootWeb请求响应&quot;&gt;&lt;a href=&quot;#0-SpringBootWeb请求响应&quot; class=&quot;headerlink&quot; title=&quot;0.SpringBootWeb请求响应&quot;&gt;&lt;/a&gt;0.SpringBootWeb请求响应&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>图解HTTP</title>
    <link href="https://larkkkkkkk.github.io/2023/11/10/%E5%9B%BE%E8%A7%A3HTTP/"/>
    <id>https://larkkkkkkk.github.io/2023/11/10/%E5%9B%BE%E8%A7%A3HTTP/</id>
    <published>2023-11-10T12:58:03.000Z</published>
    <updated>2024-01-17T08:12:16.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h1><h2 id="1-1-客户端和服务端"><a href="#1-1-客户端和服务端" class="headerlink" title="1.1 客户端和服务端"></a>1.1 客户端和服务端</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311102111196.png" alt="image-20231110211130071"></p><h2 id="1-2-TCP-IP协议族"><a href="#1-2-TCP-IP协议族" class="headerlink" title="1.2 TCP/IP协议族"></a>1.2 TCP/IP协议族</h2><h3 id="1-2-1-定义"><a href="#1-2-1-定义" class="headerlink" title="1.2.1 定义"></a>1.2.1 定义</h3><ul><li>定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一种:TCP和IP协议</span><br><span class="line">第二种:IP协议的通信过程中，使用到的所有协议族(和互联网相关联的协议集合)的总称</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311102117593.png" alt="image-20231110211754520"></p><h3 id="1-2-2-网络协议"><a href="#1-2-2-网络协议" class="headerlink" title="1.2.2 网络协议"></a>1.2.2 网络协议</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311102127980.png" alt="image-20231110212714910"></p><table><thead><tr><th>层名</th><th>传输的数据</th><th>作用</th><th>协议</th></tr></thead><tbody><tr><td><strong>应用层</strong></td><td>报文</td><td>为特定应用程序提供数据传输服务</td><td>FTP(文件传输协议) <br>DNS(域名系统) <br>HTTP(超文本传输协议)<br>DHCP(动态主机配置协议)<br>TELNET(远程登录协议)<br>SMTP()<br>POP3()<br>IMAP()</td></tr><tr><td><strong>传输层</strong></td><td>TCP报文段<br>UDP用户数据包</td><td>为进程提供通用数据传输服务</td><td>TCP(传输控制协议)<br>UDP(用户数据报协议)</td></tr><tr><td><strong>网络层</strong></td><td>IP数据包</td><td>为主机提供数据传输服务</td><td>IP(网络互连协议)<br>ARP(地址解析协议)<br>ICMP(网际控制报文协议)<br>IGMP(网际组管理协议)</td></tr><tr><td><strong>数据链路层</strong></td><td>数据帧</td><td>为同一链路的主机提供数据传输服务</td><td>PPP协议</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311102135450.png" alt="image-20231110213521338"></p><h3 id="1-2-3-网络层-IP协议"><a href="#1-2-3-网络层-IP协议" class="headerlink" title="1.2.3 网络层-IP协议"></a>1.2.3 网络层-IP协议</h3><p>​    1.<strong>作用</strong>:将各种数据包传送给对方</p><p>​    2.<strong>两个重要条件:</strong>①IP地址:指明了节点被分配到的地址(与MAC地址进行配对，可变) ②MAC地址:指网卡所属的固定地址(基本不变)</p><h3 id="1-2-4-传输层-TCP协议"><a href="#1-2-4-传输层-TCP协议" class="headerlink" title="1.2.4 传输层-TCP协议"></a>1.2.4 传输层-TCP协议</h3><h4 id="1-2-4-1-三次握手"><a href="#1-2-4-1-三次握手" class="headerlink" title="1.2.4.1 三次握手"></a>1.2.4.1 三次握手</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311111046692.png" alt="image-20231111104646583"></p><h3 id="1-2-5-应用层-DNS域名解析"><a href="#1-2-5-应用层-DNS域名解析" class="headerlink" title="1.2.5 应用层-DNS域名解析"></a>1.2.5 应用层-DNS域名解析</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311111047403.png" alt="image-20231111104743329"></p><h3 id="1-2-6-各层协议之间关系"><a href="#1-2-6-各层协议之间关系" class="headerlink" title="1.2.6 各层协议之间关系"></a>1.2.6 各层协议之间关系</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311111049331.png" alt="image-20231111104953243"></p><h3 id="1-2-7-URL和URI"><a href="#1-2-7-URL和URI" class="headerlink" title="1.2.7 URL和URI"></a>1.2.7 URL和URI</h3><h4 id="1-2-7-1-URL-统一资源定位符-—表示资源的地点"><a href="#1-2-7-1-URL-统一资源定位符-—表示资源的地点" class="headerlink" title="1.2.7.1 URL(统一资源定位符)  —表示资源的地点"></a>1.2.7.1 URL(统一资源定位符)  —表示资源的地点</h4><ul><li><strong>RFC3986:</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311121423815.png" alt="image-20231112142348680"></p><h4 id="1-2-7-2-URI-统一资源标识符-—标识某一互联网资源"><a href="#1-2-7-2-URI-统一资源标识符-—标识某一互联网资源" class="headerlink" title="1.2.7.2 URI(统一资源标识符) —标识某一互联网资源"></a>1.2.7.2 URI(统一资源标识符) —标识某一互联网资源</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311121430338.png" alt="image-20231112143058269"></p><h2 id="1-3-HTTP请求报文和响应报文"><a href="#1-3-HTTP请求报文和响应报文" class="headerlink" title="1.3 HTTP请求报文和响应报文"></a>1.3 HTTP请求报文和响应报文</h2><h3 id="1-3-1-HTTP请求报文"><a href="#1-3-1-HTTP请求报文" class="headerlink" title="1.3.1 HTTP请求报文"></a>1.3.1 HTTP请求报文</h3><h3 id="1-3-2-HTTP响应报文"><a href="#1-3-2-HTTP响应报文" class="headerlink" title="1.3.2 HTTP响应报文"></a>1.3.2 HTTP响应报文</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-基础概念&quot;&gt;&lt;a href=&quot;#1-基础概念&quot; class=&quot;headerlink&quot; title=&quot;1.基础概念&quot;&gt;&lt;/a&gt;1.基础概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-客户端和服务端&quot;&gt;&lt;a href=&quot;#1-1-客户端和服务端&quot; class=&quot;header
      
    
    </summary>
    
    
    
      <category term="计算机网络" scheme="https://Larkkkkkkk.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-数据结构与算法</title>
    <link href="https://larkkkkkkk.github.io/2023/11/06/JAVA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://larkkkkkkk.github.io/2023/11/06/JAVA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2023-11-06T09:55:53.000Z</published>
    <updated>2023-11-14T13:35:58.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据结构与算法"><a href="#1-数据结构与算法" class="headerlink" title="1.数据结构与算法"></a>1.数据结构与算法</h1><h2 id="1-1-数据结构的定义"><a href="#1-1-数据结构的定义" class="headerlink" title="1.1 数据结构的定义"></a>1.1 数据结构的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据结构&#x3D;数据+算法</span><br></pre></td></tr></table></figure><h3 id="1-1-1-数据与信息"><a href="#1-1-1-数据与信息" class="headerlink" title="1.1.1 数据与信息"></a>1.1.1 数据与信息</h3><ul><li><p><strong>数据</strong>：指的是一种未处理的原始文字，数字，符号、图形</p></li><li><p><strong>信息</strong>：当数据 –处理【算法+数据结构】–&gt; (特定的方式系统地处理、归纳甚至进行分析)</p></li></ul><h3 id="1-1-2-数据的分类"><a href="#1-1-2-数据的分类" class="headerlink" title="1.1.2 数据的分类"></a>1.1.2 数据的分类</h3><ul><li>1.按照计算机中所存储和使用的对象：</li></ul><p>​        1.1 <strong>数值数据</strong>:  如0,1,2…,9所组成，可用运算符来进行运算的数据<br>​        1.2 <strong>字符数据</strong>:  如A,B,C,…,+,*等非数值型数据</p><ul><li>2.按照数据在计算机程序设计语言中的存在层次：</li></ul><pre><code>2.1 **基本数据类型/标量数据类型**:  不能以其他类型来定义的数据类型。【Java中所有基本数据类型】2.2 **结构数据类型/虚拟数据类型**:  【字符串，数组，指针，列表，文件等】2.3 **抽象数据类型**: 可以将一种数据类型看成是一种值的集合，以及在这些值上所进行的运算和其所代表的属性所成的集合【堆栈等】</code></pre><h2 id="1-2-算法"><a href="#1-2-算法" class="headerlink" title="1.2 算法"></a>1.2 算法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可执行程序&#x3D;数据结构+算法【最关键的因素】</span><br></pre></td></tr></table></figure><h3 id="1-2-1-算法的定义"><a href="#1-2-1-算法的定义" class="headerlink" title="1.2.1 算法的定义"></a>1.2.1 算法的定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了解决某项工作&#x2F;某个问题，所需要有限数量的机械性&#x2F;重复性指令与计算步骤</span><br></pre></td></tr></table></figure><ul><li><p>算法的五个条件：</p><table><thead><tr><th>算法的特性</th><th>内容与说明</th></tr></thead><tbody><tr><td>输入</td><td>0-n个输入，这些输入必须有清楚的描述或定义</td></tr><tr><td>输出</td><td>1-n个输出【至少有一个输出结果】</td></tr><tr><td>明确性</td><td>每个指令/步骤必须是简洁明确的</td></tr><tr><td>有限性</td><td>在有限步骤后一定会结束【不存在无限循环】</td></tr><tr><td>有效性</td><td>步骤清楚+可行【能让用户】</td></tr></tbody></table></li><li><p>算法的分类：</p><table><thead><tr><th>描述工具</th><th>具体描述</th><th>举例</th></tr></thead><tbody><tr><td>伪语言</td><td>不能直接放入计算机执行的语言，一般需要一种特定的预处理器/人工编写转换成真正的计算机语言</td><td>sparks，pascal-like</td></tr><tr><td>表格/图形</td><td>清晰明了的描述过程</td><td>数组，树形图，矩阵图</td></tr><tr><td>流程图</td><td>图形符号表示法</td><td>流程图</td></tr><tr><td>程序设计语言</td><td>可读性高的高级语言</td><td>Java，python，c#</td></tr></tbody></table></li></ul><h2 id="1-3-算法性能分析"><a href="#1-3-算法性能分析" class="headerlink" title="1.3 算法性能分析"></a>1.3 算法性能分析</h2><h3 id="1-3-1-时间复杂度"><a href="#1-3-1-时间复杂度" class="headerlink" title="1.3.1 时间复杂度"></a>1.3.1 时间复杂度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.一种以概量方式来衡量运行时间</span><br><span class="line">2. 在一个完全理想状态下的计算机中，我们定义T(n)来表示程序执行所要花费的时间</span><br><span class="line">3. Big-oh:程序的运行时间&#x2F;最大运行时间是时间复杂度的衡量标准</span><br></pre></td></tr></table></figure><h3 id="1-3-2-空间复杂度"><a href="#1-3-2-空间复杂度" class="headerlink" title="1.3.2 空间复杂度"></a>1.3.2 空间复杂度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.一种以概量方式来衡量所需的内存空间</span><br><span class="line">【</span><br><span class="line">  1.固定空间内存：基本程序代码，常量，变量 </span><br><span class="line">  2.变动空间内存：随程序进行时而改变大小的使用空间，例如引用类型变量</span><br><span class="line">】</span><br></pre></td></tr></table></figure><h3 id="1-3-3-Big-oh-衡量时间复杂度"><a href="#1-3-3-Big-oh-衡量时间复杂度" class="headerlink" title="1.3.3 Big-oh(衡量时间复杂度)"></a>1.3.3 Big-oh(衡量时间复杂度)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常见的算法时间复杂度:</span><br><span class="line">O(1) &lt; O(log2N) &lt; O(N) &lt; O(Nlog2N) &lt; O(N^2) &lt; O(N^3) &lt;O(2^N) &lt;O(N!)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081440958.png" alt="image-20231108144058821"></p><h2 id="1-4-常见算法"><a href="#1-4-常见算法" class="headerlink" title="1.4 常见算法"></a>1.4 常见算法</h2><h3 id="1-4-1-分治法"><a href="#1-4-1-分治法" class="headerlink" title="1.4.1 分治法"></a>1.4.1 分治法</h3><h3 id="1-4-2-递归法"><a href="#1-4-2-递归法" class="headerlink" title="1.4.2 递归法"></a>1.4.2 递归法</h3><h3 id="1-4-3-贪心法"><a href="#1-4-3-贪心法" class="headerlink" title="1.4.3 贪心法"></a>1.4.3 贪心法</h3><h3 id="1-4-4-动态规划法"><a href="#1-4-4-动态规划法" class="headerlink" title="1.4.4 动态规划法"></a>1.4.4 动态规划法</h3><h3 id="1-4-5-迭代法"><a href="#1-4-5-迭代法" class="headerlink" title="1.4.5 迭代法"></a>1.4.5 迭代法</h3><h3 id="1-4-6-枚举法"><a href="#1-4-6-枚举法" class="headerlink" title="1.4.6 枚举法"></a>1.4.6 枚举法</h3><h2 id="1-5程序设计简介"><a href="#1-5程序设计简介" class="headerlink" title="1.5程序设计简介"></a>1.5程序设计简介</h2><h3 id="1-5-1-程序开发流程"><a href="#1-5-1-程序开发流程" class="headerlink" title="1.5.1 程序开发流程"></a>1.5.1 程序开发流程</h3><ul><li><p>四项原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.可读性高:阅读和理解都相当容易</span><br><span class="line">2.平均成本低：成本考虑不局限于编码的成本，还包括执行，编译，维护，学习，调试和日后更新等成本</span><br><span class="line">3.可靠性高：所编写出来的程序代码稳定性高，不容易出现边际错误</span><br><span class="line">4.可编写性高:对于针对需求所编写的程序相对于容易</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-数组结构"><a href="#2-数组结构" class="headerlink" title="2.数组结构"></a>2.数组结构</h1><h2 id="2-1-线性表"><a href="#2-1-线性表" class="headerlink" title="2.1 线性表"></a>2.1 线性表</h2><ul><li>线性表的定义：</li></ul><p>​        有序表可以是空集合/(a1,a2,a3,….an-1,an),存在唯一的第一个元素a1和存在唯一的最后一个元素an。除了最后一个元素都有后继者，除了第一个元素都有先行者。</p><ul><li>线性表的运算：</li></ul><p>​        1.计算线性表的长度n</p><pre><code>2.取出线性表中的第i项元素来修改</code></pre><p>​        3.插入一个新元素到第i项，并将原来位置和后面元素都后移</p><p>​        4.删除第i项元素</p><pre><code>5.遍历读取线性表元素6.替换第i项元素</code></pre><p>​        7.复制线性表</p><p>​        8.合并线性表</p><ul><li>线性表的存储方式：</li></ul><table><thead><tr><th></th><th>静态数据结构</th><th>动态数据结构</th></tr></thead><tbody><tr><td>形式</td><td>密集表</td><td>链表</td></tr><tr><td>优点</td><td>使用连续分配的内存空间来存储有序表元素<br>设计简单，读取和修改表中任意元素时间固定O(1)</td><td>使用不连续的内存空间来存储<br>数据插入和删除都方便O(1)<br>O(n)内存分配是在程序执行时才分配，不需要事先声明，充分节省内存</td></tr><tr><td>缺点</td><td>删除和加入数据，需要挪动大量数据O(n)</td><td>不能随机读取，必须按顺序遍历找到数据O(n)</td></tr></tbody></table><h2 id="2-2-数组"><a href="#2-2-数组" class="headerlink" title="2.2 数组"></a>2.2 数组</h2><h3 id="2-2-1-一维数组"><a href="#2-2-1-一维数组" class="headerlink" title="2.2.1 一维数组"></a>2.2.1 一维数组</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081515564.png" alt="image-20231108151519477"></p><h3 id="2-2-2-二维数组"><a href="#2-2-2-二维数组" class="headerlink" title="2.2.2 二维数组"></a>2.2.2 二维数组</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081516343.png" alt="image-20231108151658260"></p><h2 id="2-3-矩阵"><a href="#2-3-矩阵" class="headerlink" title="2.3 矩阵"></a>2.3 矩阵</h2><h1 id="3-链表"><a href="#3-链表" class="headerlink" title="3.链表"></a>3.链表</h1><ul><li>许多<strong>相同数据类型</strong>的数据项，按照<strong>特定顺序排列</strong>而成的<strong>线性表(2.1定义的)</strong></li></ul><h2 id="3-1-动态分配内存"><a href="#3-1-动态分配内存" class="headerlink" title="3.1 动态分配内存"></a>3.1 动态分配内存</h2><table><thead><tr><th>对比项目</th><th>动态配置</th><th>静态分配</th></tr></thead><tbody><tr><td>内存分配</td><td>运行阶段</td><td>编译阶段</td></tr><tr><td>内存释放</td><td>程序结束前必须释放分配的内存空间，否则会内存”泄露”</td><td>不需要释放，程序结束时自动归还给系统</td></tr><tr><td>程序运行性能</td><td>比较低(因为所需内存要执行程序时候才分配)</td><td>比较高(程序编译阶段就分配好需要的内存容量)</td></tr><tr><td>指针遗失</td><td>可能会存在内存泄露(程序结束前不释放内存就指向新的内存空间，则原本指向的内存空间就无法被释放)</td><td>没有此问题</td></tr></tbody></table><h2 id="3-2-单向链表"><a href="#3-2-单向链表" class="headerlink" title="3.2 单向链表"></a>3.2 单向链表</h2><h3 id="3-2-1-单链表定义"><a href="#3-2-1-单链表定义" class="headerlink" title="3.2.1 单链表定义"></a>3.2.1 单链表定义</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081545280.png" alt="image-20231108154542232"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081547932.png" alt="image-20231108154727896"></p><h3 id="3-2-2-建立单链表"><a href="#3-2-2-建立单链表" class="headerlink" title="3.2.2 建立单链表"></a>3.2.2 建立单链表</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081601424.png" alt="image-20231108160130306"></p><h3 id="3-2-3-单链表删除节点"><a href="#3-2-3-单链表删除节点" class="headerlink" title="3.2.3 单链表删除节点"></a>3.2.3 单链表删除节点</h3><ul><li>1.删除链表的第一个节点</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081618488.png" alt="image-20231108161827402"></p><ul><li>2.删除链表的中间节点</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081618085.png" alt="image-20231108161836010"></p><ul><li>3.删除链表的最后一个节点</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081618729.png" alt="image-20231108161855648"></p><h3 id="3-2-4-单链表插入节点"><a href="#3-2-4-单链表插入节点" class="headerlink" title="3.2.4 单链表插入节点"></a>3.2.4 单链表插入节点</h3><ul><li>1.插入到第一个节点前面</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081634755.png" alt="image-20231108163419693"></p><ul><li>2.插入到中间位置</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081634548.png" alt="image-20231108163433463"></p><ul><li>3.插入到最后一个节点后面</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081634805.png" alt="image-20231108163456678"></p><h3 id="3-2-5-单链表反转"><a href="#3-2-5-单链表反转" class="headerlink" title="3.2.5 单链表反转"></a>3.2.5 单链表反转</h3><h2 id="3-3-环形链表"><a href="#3-3-环形链表" class="headerlink" title="3.3 环形链表"></a>3.3 环形链表</h2><h3 id="3-3-1-环形链表定义"><a href="#3-3-1-环形链表定义" class="headerlink" title="3.3.1 环形链表定义"></a>3.3.1 环形链表定义</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081641990.png" alt="image-20231108164158939"></p><h3 id="3-3-2-环形链表插入新节点"><a href="#3-3-2-环形链表插入新节点" class="headerlink" title="3.3.2 环形链表插入新节点"></a>3.3.2 环形链表插入新节点</h3><ul><li><p>1.插入到第一节点前，成为新的链接头部</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081656802.png" alt="image-20231108165636708"></p></li><li><p>2.插入到中间节点部分</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081656459.png" alt="image-20231108165650399"></p></li></ul><h3 id="3-3-3-环形链表删除节点"><a href="#3-3-3-环形链表删除节点" class="headerlink" title="3.3.3 环形链表删除节点"></a>3.3.3 环形链表删除节点</h3><ul><li>1.删除第一个节点</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081656262.png" alt="image-20231108165658190"></p><ul><li>2.删除中间节点部分</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081657644.png" alt="image-20231108165708563"></p><h3 id="3-3-4-环形链表串联"><a href="#3-3-4-环形链表串联" class="headerlink" title="3.3.4 环形链表串联"></a>3.3.4 环形链表串联</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081659253.png" alt="image-20231108165906135"></p><h2 id="3-4-双向链表"><a href="#3-4-双向链表" class="headerlink" title="3.4 双向链表"></a>3.4 双向链表</h2><h3 id="3-4-1-双向链表定义"><a href="#3-4-1-双向链表定义" class="headerlink" title="3.4.1 双向链表定义"></a>3.4.1 双向链表定义</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081703531.png" alt="image-20231108170323488"></p><h3 id="3-4-2-双向链表插入节点"><a href="#3-4-2-双向链表插入节点" class="headerlink" title="3.4.2 双向链表插入节点"></a>3.4.2 双向链表插入节点</h3><ul><li>1.插入到双向链表的第一个节点前</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081935571.png" alt="image-20231108193519482"></p><ul><li>2.插入到双向链表的末尾</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081935513.png" alt></p><ul><li>3.插入到双向链表的中间位置</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081935358.png" alt="image-20231108193541287"></p><h3 id="3-4-3-双向链表删除节点"><a href="#3-4-3-双向链表删除节点" class="headerlink" title="3.4.3 双向链表删除节点"></a>3.4.3 双向链表删除节点</h3><ul><li>1.删除双向链表的第一个节点</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081935793.png" alt="image-20231108193552713"></p><ul><li>2.删除双向链表的最后一个节点</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081936313.png" alt></p><ul><li>3.删除双向链表的中间位置</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311081936148.png" alt></p><h1 id="4-堆栈"><a href="#4-堆栈" class="headerlink" title="4.堆栈"></a>4.堆栈</h1><h2 id="4-1-堆栈"><a href="#4-1-堆栈" class="headerlink" title="4.1 堆栈"></a>4.1 堆栈</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-数据结构与算法&quot;&gt;&lt;a href=&quot;#1-数据结构与算法&quot; class=&quot;headerlink&quot; title=&quot;1.数据结构与算法&quot;&gt;&lt;/a&gt;1.数据结构与算法&lt;/h1&gt;&lt;h2 id=&quot;1-1-数据结构的定义&quot;&gt;&lt;a href=&quot;#1-1-数据结构的定义&quot; c
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-反射</title>
    <link href="https://larkkkkkkk.github.io/2023/11/03/JAVA-%E5%8F%8D%E5%B0%84/"/>
    <id>https://larkkkkkkk.github.io/2023/11/03/JAVA-%E5%8F%8D%E5%B0%84/</id>
    <published>2023-11-03T13:04:41.000Z</published>
    <updated>2023-11-06T08:46:51.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第17章-反射机制"><a href="#第17章-反射机制" class="headerlink" title="第17章_反射机制"></a>第17章_反射机制</h1><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032106121.png" alt="第3阶段：Java高级应用-第17章"></p><hr><h2 id="1-反射-Reflection-的概念"><a href="#1-反射-Reflection-的概念" class="headerlink" title="1. 反射(Reflection)的概念"></a>1. 反射(Reflection)的概念</h2><h3 id="1-1-反射出现的背景"><a href="#1-1-反射出现的背景" class="headerlink" title="1.1 反射出现的背景"></a>1.1 反射出现的背景</h3><p>Java程序中，所有的对象都有两种类型：<code>编译时类型</code>和<code>运行时类型</code>，而很多时候对象的编译时类型和运行时类型<code>不一致</code>。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj &#x3D; new String(&quot;hello&quot;);   </span><br><span class="line">obj.getClass()；</span><br></pre></td></tr></table></figure><p>例如：某些变量或形参的声明类型是Object类型，但是程序却需要调用该对象运行时类型的方法，该方法不是Object中的方法，那么如何解决呢？</p><p>解决这个问题，有两种方案：</p><p>1.方案1(<strong>向下转型</strong>)：在编译和运行时都完全知道类型的具体信息，在这种情况下，我们可以直接先使用<code>instanceof</code>运算符进行判断，再利用强制类型转换符将其转换成运行时类型的变量即可。</p><p>2.方案2(<strong>反射</strong>)：编译时根本无法预知该对象和类的真实信息，程序只能依靠<strong>运行时信息来发现该对象和类的真实信息</strong>，这就必须使用反射。</p><h3 id="1-2-反射概述"><a href="#1-2-反射概述" class="headerlink" title="1.2 反射概述"></a>1.2 反射概述</h3><p>Reflection（反射）是被视为<strong>动态语言</strong>的关键，反射机制允许程序在<code>运行期间</code>借助Reflection API取得任何类的内部信息，<strong>能直接操作任意对象的内部属性及方法</strong>。 </p><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。<code>这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。</code></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032106369.png" alt="image-20220417161529285" style="zoom:80%;"><p><strong>从内存加载上看反射：</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032106574.png" alt="image-20220524101448625"></p><h3 id="1-3-Java反射机制研究及应用"><a href="#1-3-Java反射机制研究及应用" class="headerlink" title="1.3  Java反射机制研究及应用"></a>1.3  Java反射机制研究及应用</h3><p>Java反射机制提供的功能：</p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><h3 id="1-4-反射相关的主要API"><a href="#1-4-反射相关的主要API" class="headerlink" title="1.4 反射相关的主要API"></a>1.4 反射相关的主要API</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class：代表一个类</span><br><span class="line">java.lang.reflect.Method：代表类的方法</span><br><span class="line">java.lang.reflect.Field：代表类的成员变量</span><br><span class="line">java.lang.reflect.Constructor：代表类的构造器</span><br><span class="line">… …</span><br></pre></td></tr></table></figure><h3 id="1-5-反射的优缺点"><a href="#1-5-反射的优缺点" class="headerlink" title="1.5 反射的优缺点"></a>1.5 反射的优缺点</h3><p><strong>优点：</strong></p><ul><li><p>提高了Java程序的灵活性和扩展性，<code>降低了耦合性</code>，提高<code>自适应</code>能力</p></li><li><p>允许程序创建和控制任何类的对象，无需提前<code>硬编码</code>目标类</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>反射的<code>性能较低</code>。</p><ul><li>反射机制主要应用在对灵活性和扩展性要求很高的系统框架上</li></ul></li><li><p>反射会<code>模糊</code>程序内部逻辑，<code>可读性较差</code>。</p></li></ul><h2 id="2-理解Class类并获取Class实例"><a href="#2-理解Class类并获取Class实例" class="headerlink" title="2.  理解Class类并获取Class实例"></a>2.  理解Class类并获取Class实例</h2><p>要想<code>解剖</code>一个类，必须先要获取到该类的Class对象。而剖析一个类/用反射解决具体的问题就是使用相关API:</p><ul><li>java.lang.Class</li><li>java.lang.reflect.*</li></ul><p>所以，<strong>Class对象是反射的根源</strong>。</p><h3 id="2-1-理解Class"><a href="#2-1-理解Class" class="headerlink" title="2.1 理解Class"></a>2.1 理解Class</h3><h4 id="2-1-1-理论上"><a href="#2-1-1-理论上" class="headerlink" title="2.1.1 理论上"></a>2.1.1 理论上</h4><p>在Object类中定义了以下的方法，此方法将被<strong>所有子类继承</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">getClass</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032107450.png" alt="image-20220417162559217" style="zoom:80%;"><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。<br>对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构(class/interface/enum/annotation/primitive type/void/[])的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例 </li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构 </li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><h4 id="2-1-2-内存结构上"><a href="#2-1-2-内存结构上" class="headerlink" title="2.1.2 内存结构上"></a>2.1.2 内存结构上</h4><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032107703.png" alt="image-20220514180100176" style="zoom:80%;"><p>说明：字符串常量池在JDK6中，存储在方法区；<br>            字符串常量池在JDK7及以后，存储在堆空间。</p><h3 id="2-2-获取Class类的实例-四种方法"><a href="#2-2-获取Class类的实例-四种方法" class="headerlink" title="2.2 获取Class类的实例(四种方法)"></a>2.2 获取Class类的实例(四种方法)</h3><h4 id="2-2-1：要求编译期间已知类型"><a href="#2-2-1：要求编译期间已知类型" class="headerlink" title="2.2.1：要求编译期间已知类型"></a>2.2.1：要求编译期间已知类型</h4><p>前提：若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = String<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-2：获取对象的运行时类型"><a href="#2-2-2：获取对象的运行时类型" class="headerlink" title="2.2.2：获取对象的运行时类型"></a>2.2.2：获取对象的运行时类型</h4><p>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = <span class="string">"www.atguigu.com"</span>.getClass();</span><br></pre></td></tr></table></figure><h4 id="2-2-3：可以获取编译期间未知的类型"><a href="#2-2-3：可以获取编译期间未知的类型" class="headerlink" title="2.2.3：可以获取编译期间未知的类型"></a>2.2.3：可以获取编译期间未知的类型</h4><p>前提：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"java.lang.String"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-2-4：其他方式-不做要求"><a href="#2-2-4：其他方式-不做要求" class="headerlink" title="2.2.4：其他方式(不做要求)"></a>2.2.4：其他方式(不做要求)</h4><p>前提：可以用系统类加载对象或自定义加载器对象加载指定路径下的类型</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader cl = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">Class clazz4 = cl.loadClass(<span class="string">"类的全类名"</span>);</span><br></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetClassObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.调用运行时类的静态属性:class</span></span><br><span class="line">        Class clazz1= User<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用运行时类的对象的方法: 对象.getClass()</span></span><br><span class="line">        User u1=<span class="keyword">new</span> User();</span><br><span class="line">        Class clazz2=u1.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用Class的静态方法:forName(String className)</span></span><br><span class="line">        String className=<span class="string">"code.User"</span>;  <span class="comment">//全类名</span></span><br><span class="line">        Class&lt;?&gt; clazz3=Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.使用类的加载器方式</span></span><br><span class="line">        Class clazz4=ClassLoader.getSystemClassLoader().loadClass(<span class="string">"code.User"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-哪些类型可以有Class对象"><a href="#2-3-哪些类型可以有Class对象" class="headerlink" title="2.3 哪些类型可以有Class对象"></a>2.3 哪些类型可以有Class对象</h3><p>简言之，所有Java类型！</p><p>（1）class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类<br>（2）interface：接口<br>（3）[]：数组<br>（4）enum：枚举<br>（5）annotation：注解@interface<br>（6）primitive type：基本数据类型<br>（7）void</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c2 = Comparable<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c3 = String[]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c4 = <span class="keyword">int</span>[][]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c5 = ElementType<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c6 = Override<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c7 = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c8 = <span class="keyword">void</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class c9 = Class<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//测试是否是一个Class</span></span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">Class c10 = a.getClass();</span><br><span class="line">Class c11 = b.getClass();</span><br><span class="line"><span class="comment">// 只要元素类型与维度一样，就是同一个Class</span></span><br><span class="line">System.out.println(c10 == c11);</span><br></pre></td></tr></table></figure><h3 id="2-4-Class类的常用方法"><a href="#2-4-Class类的常用方法" class="headerlink" title="2.4 Class类的常用方法"></a>2.4 Class类的常用方法</h3><table><thead><tr><th><strong>方法名</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>static  Class <strong>forName</strong>(String  name)</td><td>返回指定类名name的Class  对象</td></tr><tr><td>Object  <strong>newInstance</strong>()</td><td>调用缺省构造函数，返回该Class对象的一个实例</td></tr><tr><td><strong>getName</strong>()</td><td>返回此Class对象表示的实体（类/接口/数组类/基本类型/void）名称</td></tr><tr><td>Class  <strong>getSuperClass</strong>()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class  [] <strong>getInterfaces</strong>()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader  <strong>getClassLoader</strong>()</td><td>返回该类的类加载器</td></tr><tr><td>Class  <strong>getSuperclass</strong>()</td><td>返回表示此Class所表示的实体的超类的Class</td></tr><tr><td>Constructor[]  <strong>getConstructors</strong>()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Field[]  <strong>getDeclaredFields</strong>()</td><td>返回Field对象的一个数组</td></tr><tr><td>Method  <strong>getMethod</strong>(String  name,Class … paramTypes)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr></tbody></table><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"test4.Person"</span>;</span><br><span class="line">Class clazz = Class.forName(str);</span><br><span class="line"></span><br><span class="line">Object obj = clazz.newInstance();</span><br><span class="line"></span><br><span class="line">Field field = clazz.getField(<span class="string">"name"</span>);</span><br><span class="line">field.set(obj, <span class="string">"Peter"</span>);</span><br><span class="line">Object name = field.get(obj);</span><br><span class="line">System.out.println(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：test4.Person是test4包下的Person类</span></span><br></pre></td></tr></table></figure><h2 id="3-类的加载与ClassLoader的理解"><a href="#3-类的加载与ClassLoader的理解" class="headerlink" title="3. 类的加载与ClassLoader的理解"></a>3. 类的加载与ClassLoader的理解</h2><h3 id="3-1-类的生命周期"><a href="#3-1-类的生命周期" class="headerlink" title="3.1 类的生命周期"></a>3.1 类的生命周期</h3><p>类在内存中完整的生命周期：加载–&gt;使用–&gt;卸载。其中加载过程又分为：装载、链接、初始化三个阶段。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032108612.png" alt="image-20220417173459849"></p><h3 id="3-2-类的加载过程"><a href="#3-2-类的加载过程" class="headerlink" title="3.2 类的加载过程"></a>3.2 类的加载过程</h3><p>当程序主动使用某个类时，如果该类还未被加载到内存中，系统会通过加载、链接、初始化三个步骤来对该类进行初始化。</p><p>如果没有意外，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032108743.png" alt="image-20220417171411631" style="zoom: 50%;"><p>类的加载又分为三个阶段：</p><p>（1）装载（Loading）</p><p>将类的class文件读入内存，并为之创建一个java.lang.Class对象。此过程由类加载器完成</p><p>（2）链接（Linking）</p><ul><li><p>验证Verify：确保加载的类信息符合JVM规范，例如：以cafebabe开头，没有安全方面的问题。</p></li><li><p>准备Prepare：正式为类变量（static）分配内存并<code>设置类变量默认初始值</code>的阶段，这些内存都将在方法区中进行分配。</p></li><li><p>解析Resolve：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</p></li></ul><p>（3）初始化（Initialization）</p><ul><li><p>执行<code>类构造器&lt;clinit&gt;()方法</code>的过程。<code>类构造器&lt;clinit&gt;()方法</code>是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。</p></li><li><p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</p></li><li><p>虚拟机会保证一个<code>类的&lt;clinit&gt;()方法</code>在多线程环境中被正确加锁和同步。</p></li></ul><h3 id="3-3-类加载器（classloader"><a href="#3-3-类加载器（classloader" class="headerlink" title="3.3 类加载器（classloader)"></a>3.3 类加载器（classloader)</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032108635.png" alt="image-20220417173647473" style="zoom:67%;"><h4 id="3-3-1-类加载器的作用"><a href="#3-3-1-类加载器的作用" class="headerlink" title="3.3.1 类加载器的作用"></a>3.3.1 类加载器的作用</h4><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032108629.png" alt="image-20220417173616344" style="zoom: 80%;"><h4 id="3-3-2-类加载器的分类-JDK8为例"><a href="#3-3-2-类加载器的分类-JDK8为例" class="headerlink" title="3.3.2 类加载器的分类(JDK8为例)"></a>3.3.2 类加载器的分类(JDK8为例)</h4><p>JVM支持两种类型的类加载器，分别为<code>引导类加载器（Bootstrap ClassLoader）</code>和<code>自定义类加载器（User-Defined ClassLoader）</code>。</p><p>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。无论类加载器的类型如何划分，在程序中我们最常见的类加载器结构主要是如下情况：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032108399.png" alt="image-20220417173819953" style="zoom:80%;"><p><strong>（1）启动类加载器（引导类加载器，Bootstrap ClassLoader）</strong></p><ul><li>这个类加载使用<code>C/C++语言</code>实现的，嵌套在JVM内部。获取它的对象时往往返回null</li><li>它用来加载Java的核心库（JAVA_HOME/jre/lib/rt.jar或sun.boot.class.path路径下的内容）。用于提供JVM自身需要的类。</li><li>并不继承自java.lang.ClassLoader，没有父加载器。</li><li>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</li><li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</li></ul><p><strong>（2）扩展类加载器（Extension ClassLoader）</strong></p><ul><li>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。</li><li>继承于ClassLoader类</li><li>父类加载器为启动类加载器</li><li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032109968.png" alt="image-20220417174032702"></p><p><strong>（3）应用程序类加载器（系统类加载器，AppClassLoader）</strong></p><ul><li>java语言编写，由sun.misc.Launcher$AppClassLoader实现</li><li>继承于ClassLoader类</li><li>父类加载器为扩展类加载器</li><li>它负责加载环境变量classpath或系统属性 java.class.path 指定路径下的类库 </li><li>应用程序中的类加载器默认是系统类加载器。</li><li>它是用户自定义类加载器的默认父加载器</li><li>通过ClassLoader的getSystemClassLoader()方法可以获取到该类加载器</li></ul><p><strong>（4）用户自定义类加载器（了解）</strong></p><ul><li>在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的。在必要时，我们还可以自定义类加载器，来定制类的加载方式。</li><li>体现Java语言强大生命力和巨大魅力的关键因素之一便是，Java开发者可以自定义类加载器来实现类库的动态加载，加载源可以是本地的JAR包，也可以是网络上的远程资源。</li><li>同时，自定义加载器能够实现<code>应用隔离</code>，例如 Tomcat，Spring等中间件和组件框架都在内部实现了自定义的加载器，并通过自定义加载器隔离不同的组件模块。这种机制比C/C++程序要好太多，想不修改C/C++程序就能为其新增功能，几乎是不可能的，仅仅一个兼容性便能阻挡住所有美好的设想。</li><li>自定义类加载器通常需要继承于ClassLoader。</li></ul><h4 id="3-3-3-查看某个类的类加载器对象"><a href="#3-3-3-查看某个类的类加载器对象" class="headerlink" title="3.3.3 查看某个类的类加载器对象"></a>3.3.3 查看某个类的类加载器对象</h4><p>（1）获取默认的系统类加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classloader = ClassLoader.getSystemClassLoader();</span><br></pre></td></tr></table></figure><p>（2）查看某个类是哪个类加载器加载的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classloader = Class.forName(<span class="string">"exer2.ClassloaderDemo"</span>).getClassLoader();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是根加载器加载的类，则会得到null</span></span><br><span class="line">ClassLoader classloader1 = Class.forName(<span class="string">"java.lang.Object"</span>).getClassLoader();</span><br></pre></td></tr></table></figure><p>（3）获取某个类加载器的父加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader parentClassloader = classloader.getParent();</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"systemClassLoader = "</span> + systemClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassLoader c1 = String<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(<span class="string">"加载String类的类加载器："</span> + c1);</span><br><span class="line"></span><br><span class="line">        ClassLoader c2 = Class.forName(<span class="string">"sun.util.resources.cldr.zh.TimeZoneNames_zh"</span>).getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">"加载sun.util.resources.cldr.zh.TimeZoneNames_zh类的类加载器："</span> + c2);</span><br><span class="line"></span><br><span class="line">        ClassLoader c3 = TestClassLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(<span class="string">"加载当前类的类加载器："</span> + c3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassLoader c1 = TestClassLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(<span class="string">"加载当前类的类加载器c1="</span> + c1);</span><br><span class="line"></span><br><span class="line">        ClassLoader c2 = c1.getParent();</span><br><span class="line">        System.out.println(<span class="string">"c1.parent = "</span> + c2);</span><br><span class="line"></span><br><span class="line">        ClassLoader c3 = c2.getParent();</span><br><span class="line">        System.out.println(<span class="string">"c2.parent = "</span> + c3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-4-使用ClassLoader获取流"><a href="#3-3-4-使用ClassLoader获取流" class="headerlink" title="3.3.4 使用ClassLoader获取流"></a>3.3.4 使用ClassLoader获取流</h4><p>关于类加载器的一个主要方法：getResourceAsStream(String str):获取类路径下的指定文件的输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = <span class="keyword">null</span>;</span><br><span class="line">in = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"exer2\\test.properties"</span>);</span><br><span class="line">System.out.println(in);</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要掌握如下的代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//方式1：此时默认的相对路径是当前的module</span></span><br><span class="line"><span class="comment">//        FileInputStream is = new FileInputStream("info.properties");</span></span><br><span class="line"><span class="comment">//        FileInputStream is = new FileInputStream("src//info1.properties");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：使用类的加载器</span></span><br><span class="line">        <span class="comment">//此时默认的相对路径是当前module的src目录</span></span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">"info1.properties"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        String name = pros.getProperty(<span class="string">"name"</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name + <span class="string">", password = "</span> + password);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-反射的基本应用"><a href="#4-反射的基本应用" class="headerlink" title="4. 反射的基本应用"></a>4. 反射的基本应用</h2><p>有了Class对象，能做什么？</p><h3 id="4-1-应用1：创建运行时类的对象"><a href="#4-1-应用1：创建运行时类的对象" class="headerlink" title="4.1 应用1：创建运行时类的对象"></a>4.1 应用1：创建运行时类的对象</h3><p>这是反射机制应用最多的地方。创建运行时类的对象有两种方式：</p><p><strong>方式1：直接调用Class对象的newInstance()方法</strong></p><p>要 求： 1）类必须有一个无参数的构造器。2）类的构造器的访问权限需要足够。</p><p><strong>方式2：通过获取构造器对象来进行实例化</strong></p><p>方式一的步骤：</p><p>1）获取该类型的Class对象  2）调用Class对象的newInstance()方法创建对象</p><p>方式二的步骤：</p><p>1）通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器<br>2）向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。<br>3）通过Constructor实例化对象。</p><blockquote><p>如果构造器的权限修饰符修饰的范围不可见，也可以调用setAccessible(true)</p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCreateObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        AtGuiguClass obj = new AtGuiguClass();//编译期间无法创建</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.atguigu.ext.demo.AtGuiguClass"</span>);</span><br><span class="line">        <span class="comment">//clazz代表com.atguigu.ext.demo.AtGuiguClass类型</span></span><br><span class="line">        <span class="comment">//clazz.newInstance()创建的就是AtGuiguClass的对象</span></span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.atguigu.ext.demo.AtGuiguDemo"</span>);</span><br><span class="line">        <span class="comment">//java.lang.InstantiationException: com.atguigu.ext.demo.AtGuiguDemo</span></span><br><span class="line">        <span class="comment">//Caused by: java.lang.NoSuchMethodException: com.atguigu.ext.demo.AtGuiguDemo.&lt;init&gt;()</span></span><br><span class="line">        <span class="comment">//即说明AtGuiguDemo没有无参构造，就没有无参实例初始化方法&lt;init&gt;</span></span><br><span class="line">        Object stu = clazz.newInstance();</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//(1)获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.atguigu.ext.demo.AtGuiguDemo"</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 获取AtGuiguDemo类型中的有参构造</span></span><br><span class="line"><span class="comment">         * 如果构造器有多个，我们通常是根据形参【类型】列表来获取指定的一个构造器的</span></span><br><span class="line"><span class="comment">         * 例如：public AtGuiguDemo(String title, int num)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//(2)获取构造器对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)创建实例对象</span></span><br><span class="line">        <span class="comment">// T newInstance(Object... initargs)  这个Object...是在创建对象时，给有参构造的实参列表</span></span><br><span class="line">        Object obj = constructor.newInstance(<span class="string">"尚硅谷"</span>,<span class="number">2022</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-应用2：获取运行时类的完整结构"><a href="#4-2-应用2：获取运行时类的完整结构" class="headerlink" title="4.2 应用2：获取运行时类的完整结构"></a>4.2 应用2：获取运行时类的完整结构</h3><p>可以获取：包、修饰符、类型名、父类（包括泛型父类）、父接口（包括泛型父接口）、成员（属性、构造器、方法）、注解（类上的、方法上的、属性上的）。</p><h4 id="4-2-1-相关API"><a href="#4-2-1-相关API" class="headerlink" title="4.2.1 相关API"></a>4.2.1 相关API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.实现的全部接口</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getInterfaces()   </span><br><span class="line"><span class="comment">//确定此对象所表示的类或接口实现的接口。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.所继承的父类</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;? Super T&gt; getSuperclass()</span><br><span class="line"><span class="comment">//返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的 Class。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.全部的构造器</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;T&gt;[] getConstructors()</span><br><span class="line"><span class="comment">//返回此 Class 对象所表示的类的所有public构造方法。</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;T&gt;[] getDeclaredConstructors()</span><br><span class="line"><span class="comment">//返回此 Class 对象表示的类声明的所有构造方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Constructor类中：</span></span><br><span class="line"><span class="comment">//取得修饰符: </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//取得方法名称: </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//取得参数的类型：</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getParameterTypes();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.全部的方法</span></span><br><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods()</span><br><span class="line"><span class="comment">//返回此Class对象所表示的类或接口的全部方法</span></span><br><span class="line"><span class="keyword">public</span> Method[] getMethods()  </span><br><span class="line"><span class="comment">//返回此Class对象所表示的类或接口的public的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Method类中：</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getReturnType()</span><br><span class="line"><span class="comment">//取得全部的返回值</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getParameterTypes()</span><br><span class="line"><span class="comment">//取得全部的参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//取得修饰符</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class&lt;?&gt;[] <span class="title">getExceptionTypes</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//取得异常信息</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//5.全部的Field</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Field[] <span class="title">getFields</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回此Class对象所表示的类或接口的public的Field。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Field[] <span class="title">getDeclaredFields</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回此Class对象所表示的类或接口的全部Field。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//Field方法中：</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//以整数形式返回此Field的修饰符</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class&lt;?&gt; <span class="title">getType</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"><span class="comment">//得到Field的属性类型</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"><span class="comment">//返回Field的名称。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//6. Annotation相关</span></span></span><br><span class="line"><span class="function">get <span class="title">Annotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span> </span></span><br><span class="line"><span class="function"><span class="title">getDeclaredAnnotations</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//7.泛型相关</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取父类泛型类型：</span></span></span><br><span class="line"><span class="function">Type <span class="title">getGenericSuperclass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//泛型类型：ParameterizedType</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取实际的泛型类型参数数组：</span></span></span><br><span class="line"><span class="function"><span class="title">getActualTypeArguments</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//8.类所在的包</span></span></span><br><span class="line"><span class="function">Package <span class="title">getPackage</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-获取所有的属性及相关细节"><a href="#4-2-2-获取所有的属性及相关细节" class="headerlink" title="4.2.2 获取所有的属性及相关细节"></a>4.2.2 获取所有的属性及相关细节</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.java1.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//getFields():获取到运行时类本身及其所有的父类中声明为public权限的属性</span></span><br><span class="line"><span class="comment">//Field[] fields = clazz.getFields();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for(Field f : fields)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println(f);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//getDeclaredFields():获取当前运行时类中声明的所有属性</span></span><br><span class="line">Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//权限修饰符  变量类型  变量名</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">            <span class="comment">//1.权限修饰符</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 0x是十六进制</span></span><br><span class="line"><span class="comment">         * PUBLIC           = 0x00000001;  1    1</span></span><br><span class="line"><span class="comment">         * PRIVATE          = 0x00000002;  210</span></span><br><span class="line"><span class="comment">         * PROTECTED        = 0x00000004;  4100</span></span><br><span class="line"><span class="comment">         * STATIC           = 0x00000008;  81000</span></span><br><span class="line"><span class="comment">         * FINAL            = 0x00000010;  1610000</span></span><br><span class="line"><span class="comment">         * ...</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 设计的理念，就是用二进制的某一位是1，来代表一种修饰符，整个二进制中只有一位是1，其余都是0</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * mod = 17          0x00000011</span></span><br><span class="line"><span class="comment">         * if ((mod &amp; PUBLIC) != 0)  说明修饰符中有public</span></span><br><span class="line"><span class="comment">         * if ((mod &amp; FINAL) != 0)   说明修饰符中有final</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">            <span class="keyword">int</span> modifier = f.getModifiers();</span><br><span class="line">            System.out.print(Modifier.toString(modifier) + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            //2.数据类型</span></span><br><span class="line">            Class type = f.getType();</span><br><span class="line">            System.out.print(type.getName() + <span class="string">"\t"</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //3.变量名</span></span><br><span class="line">            String fName = f.getName();</span><br><span class="line">            System.out.print(fName);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-获取所有的方法及相关细节"><a href="#4-2-3-获取所有的方法及相关细节" class="headerlink" title="4.2.3 获取所有的方法及相关细节"></a>4.2.3 获取所有的方法及相关细节</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.java1.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">// getMethods():获取到运行时类本身及其所有的父类中声明为public权限的方法</span></span><br><span class="line"><span class="comment">// Method[] methods = clazz.getMethods();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// for(Method m : methods)&#123;</span></span><br><span class="line"><span class="comment">// System.out.println(m);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getDeclaredMethods():获取当前运行时类中声明的所有方法</span></span><br><span class="line">Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method m : declaredMethods) &#123;</span><br><span class="line">System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注解信息</span></span><br><span class="line"><span class="comment">// 权限修饰符 返回值类型 方法名(形参类型1 参数1,形参类型2 参数2,...) throws 异常类型1,...&#123;&#125;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method m : declaredMethods) &#123;</span><br><span class="line"><span class="comment">// 1.获取方法声明的注解</span></span><br><span class="line">Annotation[] annos = m.getAnnotations();</span><br><span class="line"><span class="keyword">for</span> (Annotation a : annos) &#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.权限修饰符</span></span><br><span class="line">System.out.print(Modifier.toString(m.getModifiers()) + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.返回值类型</span></span><br><span class="line">System.out.print(m.getReturnType().getName() + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.方法名</span></span><br><span class="line">System.out.print(m.getName());</span><br><span class="line">System.out.print(<span class="string">"("</span>);</span><br><span class="line"><span class="comment">// 5.形参列表</span></span><br><span class="line">Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line"><span class="keyword">if</span> (!(parameterTypes == <span class="keyword">null</span> &amp;&amp; parameterTypes.length == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == parameterTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(parameterTypes[i].getName() + <span class="string">" args_"</span> + i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(parameterTypes[i].getName() + <span class="string">" args_"</span> + i + <span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.抛出的异常</span></span><br><span class="line">Class[] exceptionTypes = m.getExceptionTypes();</span><br><span class="line"><span class="keyword">if</span> (exceptionTypes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.print(<span class="string">"throws "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; exceptionTypes.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == exceptionTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(exceptionTypes[i].getName());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(exceptionTypes[i].getName() + <span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-获取其他结构-构造器、父类、接口、包、注解等"><a href="#4-2-4-获取其他结构-构造器、父类、接口、包、注解等" class="headerlink" title="4.2.4 获取其他结构(构造器、父类、接口、包、注解等)"></a>4.2.4 获取其他结构(构造器、父类、接口、包、注解等)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.java1.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 2:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取当前类中的所有的构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Constructor[] cons = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c :cons)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的父类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class superclass = clazz.getSuperclass();</span><br><span class="line">        System.out.println(superclass);<span class="comment">//class com.atguigu.java1.Creature</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的所在的包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Package pack = clazz.getPackage();</span><br><span class="line">        System.out.println(pack);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Annotation[] annos = clazz.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation anno : annos) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(anno);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类所实现的接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class anInterface : interfaces) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(anInterface);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的带泛型的父类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">        System.out.println(genericSuperclass);<span class="comment">//com.atguigu.java1.Creature&lt;java.lang.String&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-获取泛型父类信息（选讲）"><a href="#4-2-5-获取泛型父类信息（选讲）" class="headerlink" title="4.2.5 获取泛型父类信息（选讲）"></a>4.2.5 获取泛型父类信息（选讲）</h4><p>示例代码获取泛型父类信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Type：</span></span><br><span class="line"><span class="comment"> * （1）Class</span></span><br><span class="line"><span class="comment"> * （2）ParameterizedType   </span></span><br><span class="line"><span class="comment"> * 例如：Father&lt;String,Integer&gt;</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;String&gt;</span></span><br><span class="line"><span class="comment"> * （3）TypeVariable</span></span><br><span class="line"><span class="comment"> * 例如：T，U,E,K,V</span></span><br><span class="line"><span class="comment"> * （4）WildcardType</span></span><br><span class="line"><span class="comment"> * 例如：</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;?&gt;</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;? super 下限&gt;</span></span><br><span class="line"><span class="comment"> * ArrayList&lt;? extends 上限&gt;</span></span><br><span class="line"><span class="comment"> * （5）GenericArrayType</span></span><br><span class="line"><span class="comment"> * 例如：T[]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//需求：在运行时，获取Son类型的泛型父类的泛型实参&lt;String,Integer&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）还是先获取Class对象</span></span><br><span class="line">Class clazz = Son<span class="class">.<span class="keyword">class</span></span>;<span class="comment">//四种形式任意一种都可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（2）获取泛型父类</span></span><br><span class="line"><span class="comment">//Class sc = clazz.getSuperclass();</span></span><br><span class="line"><span class="comment">//System.out.println(sc);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * getSuperclass()只能得到父类名，无法得到父类的泛型实参列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Type type = clazz.getGenericSuperclass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Father&lt;String,Integer&gt;属于ParameterizedType</span></span><br><span class="line">ParameterizedType pt = (ParameterizedType) type;</span><br><span class="line"></span><br><span class="line"><span class="comment">//（3）获取泛型父类的泛型实参列表</span></span><br><span class="line">Type[] typeArray = pt.getActualTypeArguments();</span><br><span class="line"><span class="keyword">for</span> (Type type2 : typeArray) &#123;</span><br><span class="line">System.out.println(type2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型形参：&lt;T,U&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T</span>,<span class="title">U</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型实参：&lt;String,Integer&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">String</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-6-获取内部类或外部类信息（选讲）"><a href="#4-2-6-获取内部类或外部类信息（选讲）" class="headerlink" title="4.2.6 获取内部类或外部类信息（选讲）"></a>4.2.6 获取内部类或外部类信息（选讲）</h4><p>public Class&lt;?&gt;[] getClasses()：返回所有公共内部类和内部接口。包括从超类继承的公共类和接口成员以及该类声明的公共类和接口成员。</p><p>public Class&lt;?&gt;[] getDeclaredClasses()：返回 Class 对象的一个数组，这些对象反映声明为此 Class 对象所表示的类的成员的所有类和接口。包括该类所声明的公共、保护、默认（包）访问及私有类和接口，但不包括继承的类和接口。</p><p>public Class&lt;?&gt; getDeclaringClass()：如果此 Class 对象所表示的类或接口是一个内部类或内部接口，则返回它的外部类或外部接口，否则返回null。</p><p>Class&lt;?&gt; getEnclosingClass() ：返回某个内部类的外部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">Class&lt;?&gt; clazz = Map<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class&lt;?&gt;[] inners = clazz.getDeclaredClasses();</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; inner : inners) &#123;</span><br><span class="line">System.out.println(inner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; ec = Map.Entry<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class&lt;?&gt; outer = ec.getDeclaringClass();</span><br><span class="line">System.out.println(outer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-7-小-结"><a href="#4-2-7-小-结" class="headerlink" title="4.2.7 小 结"></a>4.2.7 小 结</h4><ol><li><p>在实际的操作中，取得类的信息的操作代码，并不会经常开发。</p></li><li><p>一定要熟悉java.lang.reflect包的作用，反射机制。</p></li></ol><h3 id="4-3-应用3：调用运行时类的指定结构"><a href="#4-3-应用3：调用运行时类的指定结构" class="headerlink" title="4.3 应用3：调用运行时类的指定结构"></a>4.3 应用3：调用运行时类的指定结构</h3><h4 id="4-3-1-调用指定的属性"><a href="#4-3-1-调用指定的属性" class="headerlink" title="4.3.1 调用指定的属性"></a>4.3.1 调用指定的属性</h4><p>在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作。</p><p>（1）获取该类型的Class对象</p><p>Class clazz = Class.forName(“包.类名”);</p><p>（2）获取属性对象</p><p>Field field = clazz.getDeclaredField(“属性名”);</p><p>（3）如果属性的权限修饰符不是public，那么需要设置属性可访问</p><p>field.setAccessible(true);</p><p>（4）创建实例对象：如果操作的是非静态属性，需要创建实例对象</p><p>Object obj = clazz.newInstance(); //有公共的无参构造</p><p>Object obj = 构造器对象.newInstance(实参…);//通过特定构造器对象创建实例对象</p><p>（4）设置指定对象obj上此Field的属性内容</p><p>field.set(obj,”属性值”);</p><blockquote><p>如果操作静态变量，那么实例对象可以省略，用null表示</p></blockquote><p>（5）取得指定对象obj上此Field的属性内容</p><p>Object value = field.get(obj);</p><blockquote><p>如果操作静态变量，那么实例对象可以省略，用null表示</p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1、获取Student的Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.atguigu.reflect.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取属性对象，例如：id属性</span></span><br><span class="line">        Field idField = clazz.getDeclaredField(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、如果id是私有的等在当前类中不可访问access的，我们需要做如下操作</span></span><br><span class="line">        idField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、创建实例对象，即，创建Student对象</span></span><br><span class="line">        Object stu = clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、获取属性值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 以前：int 变量= 学生对象.getId()</span></span><br><span class="line"><span class="comment">         * 现在：Object id属性对象.get(学生对象)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Object value = idField.get(stu);</span><br><span class="line">        System.out.println(<span class="string">"id = "</span>+ value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、设置属性值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 以前：学生对象.setId(值)</span></span><br><span class="line"><span class="comment">         * 现在：id属性对象.set(学生对象,值)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        idField.set(stu, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        value = idField.get(stu);</span><br><span class="line">        System.out.println(<span class="string">"id = "</span>+ value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于setAccessible方法的使用：</strong></p><ul><li>Method和Field、Constructor对象都有setAccessible()方法。</li><li>setAccessible启动和禁用访问安全检查的开关。</li><li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。<ul><li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。</li><li>使得原本无法访问的私有成员也可以访问</li></ul></li><li>参数值为false则指示反射的对象应该实施Java语言访问检查。</li></ul><h4 id="4-3-2-调用指定的方法"><a href="#4-3-2-调用指定的方法" class="headerlink" title="4.3.2 调用指定的方法"></a>4.3.2 调用指定的方法</h4><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202311032109732.png" alt="image-20220417181700813" style="zoom:80%;"><p>（1）获取该类型的Class对象</p><p>Class clazz = Class.forName(“包.类名”);</p><p>（2）获取方法对象</p><p>Method method = clazz.getDeclaredMethod(“方法名”,方法的形参类型列表);</p><p>（3）创建实例对象</p><p>Object obj = clazz.newInstance();</p><p>（4）调用方法</p><p>Object result = method.invoke(obj, 方法的实参值列表);</p><blockquote><p>如果方法的权限修饰符修饰的范围不可见，也可以调用setAccessible(true)</p><p>如果方法是静态方法，实例对象也可以省略，用null代替</p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、获取Student的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.atguigu.reflect.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取方法对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 在一个类中，唯一定位到一个方法，需要：（1）方法名（2）形参列表，因为方法可能重载</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 例如：void setName(String name)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method setNameMethod = clazz.getDeclaredMethod(<span class="string">"setName"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、创建实例对象</span></span><br><span class="line">        Object stu = clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、调用方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 以前：学生对象.setName(值)</span></span><br><span class="line"><span class="comment">         * 现在：方法对象.invoke(学生对象，值)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Object setNameMethodReturnValue = setNameMethod.invoke(stu, <span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"stu = "</span> + stu);</span><br><span class="line">        <span class="comment">//setName方法返回值类型void，没有返回值，所以setNameMethodReturnValue为null</span></span><br><span class="line">        System.out.println(<span class="string">"setNameMethodReturnValue = "</span> + setNameMethodReturnValue);</span><br><span class="line"></span><br><span class="line">        Method getNameMethod = clazz.getDeclaredMethod(<span class="string">"getName"</span>);</span><br><span class="line">        Object getNameMethodReturnValue = getNameMethod.invoke(stu);</span><br><span class="line">        <span class="comment">//getName方法返回值类型String，有返回值，getNameMethod.invoke的返回值就是getName方法的返回值</span></span><br><span class="line">        System.out.println(<span class="string">"getNameMethodReturnValue = "</span> + getNameMethodReturnValue);<span class="comment">//张三</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.atguigu.ext.demo.AtGuiguClass"</span>);</span><br><span class="line">        Method printInfoMethod = clazz.getMethod(<span class="string">"printInfo"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//printInfo方法是静态方法</span></span><br><span class="line">        printInfoMethod.invoke(<span class="keyword">null</span>,<span class="string">"尚硅谷"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-练习"><a href="#4-3-3-练习" class="headerlink" title="4.3.3 练习"></a>4.3.3 练习</h4><p>读取user.properties文件中的数据，通过反射完成User类对象的创建及对应方法的调用。</p><p>配置文件：user.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">className:com.atguigu.bean.User</span><br><span class="line">methodName:show</span><br></pre></td></tr></table></figure><p>User.java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 18:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一个脉脉平台的用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReflectTest.java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 18:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加载配置文件，转换为一个集合</span></span><br><span class="line">        ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"user.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取配置文件中定义的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.加载该类进内存</span></span><br><span class="line">        Class clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建对象</span></span><br><span class="line">        Object instance = clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取方法对象</span></span><br><span class="line">        Method showMethod = clazz.getMethod(methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.执行方法</span></span><br><span class="line">        showMethod.invoke(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-应用4：读取注解信息"><a href="#5-应用4：读取注解信息" class="headerlink" title="5. 应用4：读取注解信息"></a>5. 应用4：读取注解信息</h2><p>一个完整的注解应该包含三个部分：<br>（1）声明<br>（2）使用<br>（3）读取</p><h3 id="5-1-声明自定义注解"><a href="#5-1-声明自定义注解" class="headerlink" title="5.1 声明自定义注解"></a>5.1 声明自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">columnType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义注解可以通过四个元注解@Retention,@Target，@Inherited,@Documented，分别说明它的声明周期，使用位置，是否被继承，是否被生成到API文档中。</li><li>Annotation 的成员在 Annotation 定义中以无参数有返回值的抽象方法的形式来声明，我们又称为配置参数。返回值类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</li><li>可以使用 default 关键字为抽象方法指定默认返回值</li><li>如果定义的注解含有抽象方法，那么使用时必须指定返回值，除非它有默认值。格式是“方法名 = 返回值”，如果只有一个抽象方法需要赋值，且方法名为value，可以省略“value=”，所以如果注解只有一个抽象方法成员，建议使用方法名value。</li></ul><h3 id="5-2-使用自定义注解"><a href="#5-2-使用自定义注解" class="headerlink" title="5.2 使用自定义注解"></a>5.2 使用自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(<span class="string">"t_stu"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Column</span>(columnName = <span class="string">"sid"</span>,columnType = <span class="string">"int"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Column</span>(columnName = <span class="string">"sname"</span>,columnType = <span class="string">"varchar(20)"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-读取和处理自定义注解"><a href="#5-3-读取和处理自定义注解" class="headerlink" title="5.3 读取和处理自定义注解"></a>5.3 读取和处理自定义注解</h3><p>自定义注解必须配上注解的信息处理流程才有意义。</p><p>我们自己定义的注解，只能使用反射的代码读取。所以自定义注解的声明周期必须是RetentionPolicy.RUNTIME。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class studentClass = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Table tableAnnotation = (Table) studentClass.getAnnotation(Table<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String tableName = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(tableAnnotation != <span class="keyword">null</span>)&#123;</span><br><span class="line">            tableName = tableAnnotation.value();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] declaredFields = studentClass.getDeclaredFields();</span><br><span class="line">        String[] columns = <span class="keyword">new</span> String[declaredFields.length];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            Column column = declaredField.getAnnotation(Column<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span>(column!= <span class="keyword">null</span>) &#123;</span><br><span class="line">                columns[index++] = column.columnName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String sql = <span class="string">"select "</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;index; i++) &#123;</span><br><span class="line">            sql += columns[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;index-<span class="number">1</span>)&#123;</span><br><span class="line">                sql += <span class="string">","</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sql += <span class="string">" from "</span> + tableName;</span><br><span class="line">        System.out.println(<span class="string">"sql = "</span> + sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-体会反射的动态性"><a href="#6-体会反射的动态性" class="headerlink" title="6. 体会反射的动态性"></a>6. 体会反射的动态性</h2><p><strong>体会1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//体会反射的动态性：动态的创建给定字符串对应的类的对象</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(String className)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class clazz = Class.forName(className);</span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) constructor.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String className = <span class="string">"com.atguigu.java1.Person"</span>;</span><br><span class="line">        Person p1 = getInstance(className);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>体会2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//体会反射的动态性：动态的创建指定字符串对应类的对象，并调用指定的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object  <span class="title">invoke</span><span class="params">(String className,String methodName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class clazz = Class.forName(className);</span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//动态的创建指定字符串对应类的对象</span></span><br><span class="line">        Object obj = constructor.newInstance();</span><br><span class="line">        Method method = clazz.getDeclaredMethod(methodName);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String info = (String) invoke(<span class="string">"com.atguigu.java1.Person"</span>, <span class="string">"show"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"返回值为："</span> + info);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>体会3：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载配置文件，并获取指定的fruitName值</span></span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">"config.properties"</span>);</span><br><span class="line">        pros.load(is);</span><br><span class="line">        String fruitStr = pros.getProperty(<span class="string">"fruitName"</span>);</span><br><span class="line">        <span class="comment">//2.创建指定全类名对应类的实例</span></span><br><span class="line">        Class clazz = Class.forName(fruitStr);</span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Fruit fruit = (Fruit) constructor.newInstance();</span><br><span class="line">        <span class="comment">//3. 调用相关方法，进行测试</span></span><br><span class="line">        Juicer juicer = <span class="keyword">new</span> Juicer();</span><br><span class="line">        juicer.run(fruit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"榨出一杯苹果汁儿"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"榨出一杯桔子汁儿"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Juicer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Fruit f)</span> </span>&#123;</span><br><span class="line">f.squeeze();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，配置文件【config.properties】存放在当前Module的src下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.atguigu.java1.Orange</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第17章-反射机制&quot;&gt;&lt;a href=&quot;#第17章-反射机制&quot; class=&quot;headerlink&quot; title=&quot;第17章_反射机制&quot;&gt;&lt;/a&gt;第17章_反射机制&lt;/h1&gt;&lt;h2 id=&quot;本章专题与脉络&quot;&gt;&lt;a href=&quot;#本章专题与脉络&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
