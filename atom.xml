<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Larkkkkkkk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://larkkkkkkk.github.io/"/>
  <updated>2025-04-21T04:14:48.752Z</updated>
  <id>https://larkkkkkkk.github.io/</id>
  
  <author>
    <name>Larkkkkkkk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue后端管理系统</title>
    <link href="https://larkkkkkkk.github.io/2025/04/21/Vue%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://larkkkkkkk.github.io/2025/04/21/Vue%E5%90%8E%E7%AB%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-04-21T02:05:08.000Z</published>
    <updated>2025-04-21T04:14:48.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-项目前言"><a href="#0-项目前言" class="headerlink" title="0.项目前言"></a>0.项目前言</h1><ul><li><p>基于《Vue框架》笔记中的项目和语法为基础，项目源码在github网址的vue_yufa的master分支</p></li><li><p>项目框架</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504211214733.png" alt="image-20250421121433684"></p><h1 id="1-项目前端布局"><a href="#1-项目前端布局" class="headerlink" title="1.项目前端布局"></a>1.项目前端布局</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504211007981.png" alt="image-20250421100721915"></p><h2 id="1-1-项目最终页面"><a href="#1-1-项目最终页面" class="headerlink" title="1.1 项目最终页面"></a>1.1 项目最终页面</h2><ul><li>Manager.vue父亲页面：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import router from &#39;..&#x2F;router&#x2F;index.js&#39;</span><br><span class="line">import img from &#39;..&#x2F;assets&#x2F;logo.svg&#39;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!--1.头部开始--&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;height: 60px; background-color: #0742b1;display: flex; align-content: center&quot;&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;width: 200px; display: flex; align-items: center; font-size: 20px; color: white&quot;&gt;</span><br><span class="line">      &lt;el-icon&gt;&lt;House&#x2F;&gt;&lt;&#x2F;el-icon&gt;后台管理系统</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;flex: 1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;width: fit-content; display: flex; align-items: center;padding-right: 10px&quot;&gt;</span><br><span class="line">      &lt;el-image :src&#x3D;&quot;img&quot; style&#x3D;&quot;width: 40px; height: 40px&quot;&gt;&lt;&#x2F;el-image&gt;</span><br><span class="line">      &lt;span style&#x3D;&quot;color: white; margin-left: 5px&quot;&gt;宋亚翔&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;!--2.下面部分--&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;display:flex&quot;&gt;</span><br><span class="line">    &lt;!--2.1左侧菜单导航--&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;width:200px; border-right:1px solid #ddd; min-height:calc(100vh - 60px)&quot;&gt;</span><br><span class="line">      &lt;el-menu router :default-activce&#x3D;&quot;router.currentRoute.value.path&quot; style&#x3D;&quot;border: 0&quot; :default-openeds&#x3D;&quot;[&#39;1&#39;]&quot;&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;&#x2F;manager&#x2F;home&quot;&gt;&lt;el-icon&gt;&lt;House&#x2F;&gt;&lt;&#x2F;el-icon&gt;系统首页&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;&#x2F;manager&#x2F;data&quot;&gt;&lt;el-icon&gt;&lt;DataAnalysis&#x2F;&gt;&lt;&#x2F;el-icon&gt;数据统计&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">        &lt;el-sub-menu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">          &lt;template #title&gt;&lt;el-icon&gt;&lt;User&#x2F;&gt;&lt;&#x2F;el-icon&gt;&lt;span&gt;用户管理&lt;&#x2F;span&gt;&lt;&#x2F;template&gt;</span><br><span class="line">          &lt;el-menu-item&gt;管理员信息&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">          &lt;el-menu-item&gt;普通用户信息&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">        &lt;&#x2F;el-sub-menu&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;2&quot;&gt;&lt;el-icon&gt;&lt;Back&#x2F;&gt;&lt;&#x2F;el-icon&gt;退出登录&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;3&quot;&gt;&lt;el-icon&gt;&lt;UserFilled&#x2F;&gt;&lt;&#x2F;el-icon&gt;个人信息&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">      &lt;&#x2F;el-menu&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!--2.2右侧主体区域--&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;flex: 1; width:0; background-color: #f8f8ff; padding:10px&quot;&gt;</span><br><span class="line">      &lt;RouterView&gt;&lt;&#x2F;RouterView&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504211205769.png" alt="image-20250421120545710"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-项目前言&quot;&gt;&lt;a href=&quot;#0-项目前言&quot; class=&quot;headerlink&quot; title=&quot;0.项目前言&quot;&gt;&lt;/a&gt;0.项目前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于《Vue框架》笔记中的项目和语法为基础，项目源码在github网址的vue_yufa的
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://Larkkkkkkk.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Element-Plus</title>
    <link href="https://larkkkkkkk.github.io/2025/04/08/Element-Plus/"/>
    <id>https://larkkkkkkk.github.io/2025/04/08/Element-Plus/</id>
    <published>2025-04-08T05:08:48.000Z</published>
    <updated>2025-04-21T04:03:10.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Element-Plus简介"><a href="#1-Element-Plus简介" class="headerlink" title="1.Element-Plus简介"></a>1.Element-Plus简介</h1><p><a href="https://element-plus.org/zh-CN/guide/installation" target="_blank" rel="noopener">Element-Plus:</a>Element-plus是一套为构建<strong>基于Vue3的组件库</strong>而设计的UI组件库(UI Kit)。它为开发者提供了一套丰富的UI组件和扩展功能，例如表格、表单、按钮、导航、通知等，让开发者能够快速构建高质量的Web应用。</p><h1 id="2-Vue3集成Element-Plus"><a href="#2-Vue3集成Element-Plus" class="headerlink" title="2.Vue3集成Element-Plus"></a>2.Vue3集成Element-Plus</h1><h2 id="2-1-安装依赖"><a href="#2-1-安装依赖" class="headerlink" title="2.1 安装依赖"></a>2.1 安装依赖</h2><p>安装依赖指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-plus -S</span><br></pre></td></tr></table></figure><p>安装位置：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081314552.png" alt="image-20250408131401452"></p><p>安装之后：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081313351.png" alt="image-20250408131330298"></p><h2 id="2-2-main-js导包"><a href="#2-2-main-js导包" class="headerlink" title="2.2 main.js导包"></a>2.2 main.js导包</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081637676.png" alt="image-20250408163702593"></p><h1 id="3-Button按钮"><a href="#3-Button按钮" class="headerlink" title="3.Button按钮"></a>3.Button按钮</h1><ul><li>以<strong>Button按钮</strong>为例：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081638494.png" alt="image-20250408163831401"></p><ul><li>Home.vue代码中：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081642925.png" alt="image-20250408164213833"></p><h1 id="4-Icon图标"><a href="#4-Icon图标" class="headerlink" title="4.Icon图标"></a>4.Icon图标</h1><h2 id="4-1-安装依赖"><a href="#4-1-安装依赖" class="headerlink" title="4.1 安装依赖"></a>4.1 安装依赖</h2><p>安装依赖指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @element-plus&#x2F;icons-vue</span><br></pre></td></tr></table></figure><p>安装位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081648378.png" alt="image-20250408164857283"></p><h2 id="4-2-main-js导包"><a href="#4-2-main-js导包" class="headerlink" title="4.2 main.js导包"></a>4.2 main.js导包</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081652268.png" alt="image-20250408165216217"></p><h2 id="4-3-具体使用"><a href="#4-3-具体使用" class="headerlink" title="4.3 具体使用"></a>4.3 具体使用</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081712575.png" alt="image-20250408171213487"></p><h1 id="5-Element-Plus设置自定义主题色"><a href="#5-Element-Plus设置自定义主题色" class="headerlink" title="5.Element-Plus设置自定义主题色"></a>5.Element-Plus设置自定义主题色</h1><h2 id="5-1-安装依赖"><a href="#5-1-安装依赖" class="headerlink" title="5.1 安装依赖"></a>5.1 安装依赖</h2><p>安装依赖指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i sass@1.71.1 -D    【我的后面出现报错，更新到了1.86.3】--使用指令npm install sass@latest --save-dev</span><br><span class="line">npm i unplugin-auto-import -D</span><br><span class="line">npm i unplugin-element-plus -D</span><br><span class="line">npm i unplugin-vue-components -D</span><br></pre></td></tr></table></figure><p>安装位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081717487.png" alt="image-20250408171736429"></p><p>安装之后：在总项目的package.json查看</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081718255.png" alt="image-20250408171849192"></p><h2 id="5-2-创建index-scss文件"><a href="#5-2-创建index-scss文件" class="headerlink" title="5.2 创建index.scss文件"></a>5.2 创建index.scss文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@forward &quot;element-plus&#x2F;theme-chalk&#x2F;src&#x2F;common&#x2F;var.scss&quot; with ($colors:(</span><br><span class="line">  &quot;primary&quot;: (&quot;base&quot;: #0742b1),</span><br><span class="line">  &quot;success&quot;: (&quot;base&quot;: #2b8f01),</span><br><span class="line">  &quot;warining&quot;: (&quot;base&quot;: #ffad00),</span><br><span class="line">  &quot;danger&quot;: (&quot;base&quot;: #d50707),</span><br><span class="line">  &quot;info&quot;: (&quot;base&quot;: #74717f),</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>在src-assets文件下创建index.scss文件：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081723749.png" alt="image-20250408172351687"></p><h2 id="5-3-全局vite-config-js引入"><a href="#5-3-全局vite-config-js引入" class="headerlink" title="5.3 全局vite.config.js引入"></a>5.3 全局vite.config.js引入</h2><p>修改三处位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081741245.png" alt="image-20250408174143153"></p><p>具体代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fileURLToPath, URL &#125; from &#39;node:url&#39;</span><br><span class="line">import &#123; defineConfig &#125; from &#39;vite&#39;</span><br><span class="line">import vue from &#39;@vitejs&#x2F;plugin-vue&#39;</span><br><span class="line">import vueDevTools from &#39;vite-plugin-vue-devtools&#39;</span><br><span class="line">&#x2F;&#x2F;更改主题色-添加内容【引入index.scss内容】</span><br><span class="line">import AutoImport from &#39;unplugin-auto-import&#x2F;vite&#39;</span><br><span class="line">import Components from &#39;unplugin-vue-components&#x2F;vite&#39;</span><br><span class="line">import &#123; ElementPlusResolver&#125; from &#39;unplugin-vue-components&#x2F;resolvers&#39;</span><br><span class="line">import ElmentPlus from &#39;unplugin-element-plus&#x2F;vite&#39;</span><br><span class="line"></span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    vueDevTools(),</span><br><span class="line">    &#x2F;&#x2F;更改主题色-添加内容</span><br><span class="line">    ElmentPlus(&#123;</span><br><span class="line">      useSource: true,</span><br><span class="line">    &#125;),</span><br><span class="line">    AutoImport(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver(&#123; importStyle: &#39;sass&#39;&#125;)],</span><br><span class="line">    &#125;),</span><br><span class="line">    Components(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver(&#123; importStyle: &#39;sass&#39;&#125;)],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#39;@&#39;: fileURLToPath(new URL(&#39;.&#x2F;src&#39;, import.meta.url))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;更改主题色-添加内容</span><br><span class="line">  css: &#123;</span><br><span class="line">    preprocessorOptions: &#123;</span><br><span class="line">      scss: &#123;</span><br><span class="line">        additionalData: &#96;</span><br><span class="line">        @use &quot;@&#x2F;assets&#x2F;index.scss&quot; as *;   &#x2F;&#x2F;注意是Esc按键下的&#96;&#96;符号!!!</span><br><span class="line">        &#96;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-4-查看对比"><a href="#5-4-查看对比" class="headerlink" title="5.4 查看对比"></a>5.4 查看对比</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081743050.png" alt="image-20250408174325003"></p><h1 id="6-文本框el-input"><a href="#6-文本框el-input" class="headerlink" title="6.文本框el-input"></a>6.文本框el-input</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/input.html" target="_blank" rel="noopener">Input 输入框 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504151117564.png" alt="image-20250415111715494"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504151115678.png" alt="image-20250415111550604"></p><h1 id="7-下拉框el-select"><a href="#7-下拉框el-select" class="headerlink" title="7.下拉框el-select"></a>7.下拉框el-select</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/select.html" target="_blank" rel="noopener">Select 选择器 | Element Plus</a><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504151222048.png" alt="image-20250415122256921"></p><p>两个核心：v-model绑定data的value【下拉选中之后就可以绑定到value】，v-for的遍历绑定options【可以是数组，也可以是对象】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504151217491.png" alt="image-20250415121730349"></p><h1 id="8-单选框el-radio-group"><a href="#8-单选框el-radio-group" class="headerlink" title="8.单选框el-radio-group"></a>8.单选框el-radio-group</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/radio.html" target="_blank" rel="noopener">Radio 单选框 | Element Plus</a></p><p>两种写法要确认自己的element-plus版本，我的是2.9.7对应使用第一种写法</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504171728647.png" alt="image-20250417172813498"></p><p>要注意v-model绑定的值和value值要对应【保证能够渲染成功】–例如sex是女，那单选框默认就标到女的位置</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504171728048.png" alt="image-20250417172828989"></p><h1 id="9-多选框el-checkbox-group"><a href="#9-多选框el-checkbox-group" class="headerlink" title="9.多选框el-checkbox-group"></a>9.多选框el-checkbox-group</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/checkbox.html" target="_blank" rel="noopener">Checkbox 多选框 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181501415.png" alt="image-20250418150137302"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181453784.png" alt="image-20250418145333741"></p><h1 id="10-图片显示el-image"><a href="#10-图片显示el-image" class="headerlink" title="10.图片显示el-image"></a>10.图片显示el-image</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/image.html" target="_blank" rel="noopener">Image 图片 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181536638.png" alt="image-20250418153614500"></p><p>相比于img而言，能够进行高级操作【懒加载，翻转，和缩放等功能】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181531665.png" alt="image-20250418153145323"></p><h1 id="11-轮播图el-carousel"><a href="#11-轮播图el-carousel" class="headerlink" title="11.轮播图el-carousel"></a>11.轮播图el-carousel</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/carousel.html" target="_blank" rel="noopener">Carousel 走马灯 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181604085.png" alt="image-20250418160418987"></p><p>可以在el-carousel里面添加各种属性值</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181601690.png" alt="image-20250418160130419"></p><h1 id="12-日期时间控件el-date-picker"><a href="#12-日期时间控件el-date-picker" class="headerlink" title="12.日期时间控件el-date-picker"></a>12.日期时间控件el-date-picker</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/datetime-picker.html#datetimepicker-日期时间选择器" target="_blank" rel="noopener">DateTimePicker 日期时间选择器 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191123308.png" alt="image-20250419112342220"></p><h1 id="13-数据表格el-table"><a href="#13-数据表格el-table" class="headerlink" title="13.数据表格el-table"></a>13.数据表格el-table</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/table.html" target="_blank" rel="noopener">Table 表格 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191227834.png" alt="image-20250419122706760"></p><p>具体的对应情况：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191220121.png" alt="image-20250419122009016"></p><h1 id="14-分页组件el-pagination"><a href="#14-分页组件el-pagination" class="headerlink" title="14.分页组件el-pagination"></a>14.分页组件el-pagination</h1><p>5.11的数据因为设置了max-height的流体高度：但是如果行很多的情况应该采用分页：</p><p>参考内容：<a href="https://element-plus.org/zh-CN/component/pagination.html" target="_blank" rel="noopener">Pagination 分页 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191244539.png" alt="image-20250419124426447"></p><h1 id="15-对话框el-dialog"><a href="#15-对话框el-dialog" class="headerlink" title="15.对话框el-dialog"></a>15.对话框el-dialog</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/dialog.html" target="_blank" rel="noopener">Dialog 对话框 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191254646.png" alt="image-20250419125422503"></p><p>点击对话框之后：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191253140.png" alt="image-20250419125321990"></p><h1 id="16-导航栏-菜单-el-menu"><a href="#16-导航栏-菜单-el-menu" class="headerlink" title="16.导航栏(菜单)el-menu"></a>16.导航栏(菜单)el-menu</h1><p>参考内容：<a href="https://element-plus.org/zh-CN/component/menu.html" target="_blank" rel="noopener">Menu 菜单 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504211203421.png" alt="image-20250421120303339"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Element-Plus简介&quot;&gt;&lt;a href=&quot;#1-Element-Plus简介&quot; class=&quot;headerlink&quot; title=&quot;1.Element-Plus简介&quot;&gt;&lt;/a&gt;1.Element-Plus简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
    
      <category term="Element-Plus" scheme="https://Larkkkkkkk.github.io/tags/Element-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Vue框架</title>
    <link href="https://larkkkkkkk.github.io/2025/04/04/Vue%E6%A1%86%E6%9E%B6/"/>
    <id>https://larkkkkkkk.github.io/2025/04/04/Vue%E6%A1%86%E6%9E%B6/</id>
    <published>2025-04-04T06:17:18.000Z</published>
    <updated>2025-04-21T02:40:30.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Vue简介"><a href="#1-Vue简介" class="headerlink" title="1.Vue简介"></a>1.Vue简介</h1><p><a href="https://cn.vuejs.org/guide/introduction.html" target="_blank" rel="noopener">Vue</a> (发音为 /vjuː/，类似 <strong>view</strong>) 是一款用于构建用户界面的 <strong>JavaScript 框架</strong>。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp, ref &#125; from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">createApp(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: ref(0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;count++&quot;&gt;</span><br><span class="line">    Count is: &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504052112682.png" alt="image-20250405211243611"></p><ul><li><strong>声明式渲染</strong>：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。</li><li><strong>响应性</strong>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM。</li></ul><h2 id="1-1-渐进式框架"><a href="#1-1-渐进式框架" class="headerlink" title="1.1 渐进式框架"></a>1.1 渐进式框架</h2><p>Vue是一个框架(生态)，能够覆盖大部分前端开发常见的需求。Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 Vue：</p><ul><li>无需构建步骤，渐进式增强静态的 HTML</li><li>在任何页面中作为 Web Components 嵌入</li><li>单页应用 (SPA)</li><li>全栈 / 服务端渲染 (SSR)</li><li>Jamstack / 静态站点生成 (SSG)</li><li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面</li></ul><h2 id="1-2-单文件组件"><a href="#1-2-单文件组件" class="headerlink" title="1.2 单文件组件"></a>1.2 单文件组件</h2><p>在大多数启用了构建工具的 Vue 项目中，我们可以使用一种类似 HTML 格式的文件来书写 Vue 组件，它被称为<strong>单文件组件</strong> (也被称为 <code>*.vue</code> 文件，英文 Single-File Components，缩写为 <strong>SFC</strong>)。顾名思义，Vue 的单文件组件会将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里。下面我们将用单文件组件的格式重写上面的计数器示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#39;vue&#39;</span><br><span class="line">const count &#x3D; ref(0)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;count++&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">button &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>单文件组件是 Vue 的标志性功能。如果你的用例需要进行构建，我们推荐用它来编写 Vue 组件。</p><h2 id="1-3-两种API风格"><a href="#1-3-两种API风格" class="headerlink" title="1.3 两种API风格"></a>1.3 两种API风格</h2><p>Vue 的组件可以按两种不同的风格书写：<strong>选项式 API</strong> 和<strong>组合式 API</strong></p><h3 id="1-3-1-选项式API-Options-API"><a href="#1-3-1-选项式API-Options-API" class="headerlink" title="1.3.1 选项式API(Options API)"></a>1.3.1 选项式API(Options API)</h3><ul><li>用<strong>对象（包含多个选项）</strong>来描述组件的逻辑，例如 <code>data</code>、<code>methods</code> 和 <code>mounted</code>。选项所定义的属性都会暴露在函数内部的 <code>this</code> 上，它会指向当前的组件实例。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504052122612.png" alt="image-20250405212257556"></p><h3 id="1-3-2-组合式API-Composition-API"><a href="#1-3-2-组合式API-Composition-API" class="headerlink" title="1.3.2 组合式API(Composition API)"></a>1.3.2 组合式API(Composition API)</h3><ul><li>用<strong>导入的 API 函数</strong>来描述组件的逻辑。在单文件组件中，组合式 API 通常会与<script setup>搭。这个setup attribute是一个标识(用来告诉Vue需要再编译时进行一些处理)，让我们更加简洁地使用组合式API。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504052126745.png" alt="image-20250405212650694"></p><h3 id="1-3-3-选择原则"><a href="#1-3-3-选择原则" class="headerlink" title="1.3.3 选择原则"></a>1.3.3 选择原则</h3><p>【原则：哪个顺手用哪个】</p><ul><li>老项目：Vue2的选择式API</li><li>新项目：Vue3的组合式API</li></ul><h1 id="2-Vue入门"><a href="#2-Vue入门" class="headerlink" title="2.Vue入门"></a>2.Vue入门</h1><p>前提条件：</p><ul><li><p>1.熟悉cmd的指令【Win+R键输入cmd黑框可以进行ls cd 等操作】</p></li><li><p>2.Node版本大于15.0【cmd输入node -V即可查看】---我用的node20可以，node18报错解决不了</p></li></ul><h2 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h2><p>参考步骤：<a href="https://cn.vuejs.org/guide/quick-start.html" target="_blank" rel="noopener">快速上手 | Vue.js</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504052223174.png" alt="image-20250405222308980"></p><h2 id="2-2-打开项目-IDEA"><a href="#2-2-打开项目-IDEA" class="headerlink" title="2.2 打开项目(IDEA)"></a>2.2 打开项目(IDEA)</h2><h3 id="2-2-1-打开项目，删除不必要文件"><a href="#2-2-1-打开项目，删除不必要文件" class="headerlink" title="2.2.1 打开项目，删除不必要文件"></a>2.2.1 打开项目，删除不必要文件</h3><ul><li>打开项目的上一级位置（我的E:\vue\vue，就打开第一个vue），然后删除不需要的文件</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504061228835.png" alt="image-20250406122845793"></p><h3 id="2-2-2-瘦身项目"><a href="#2-2-2-瘦身项目" class="headerlink" title="2.2.2 瘦身项目"></a>2.2.2 瘦身项目</h3><ul><li>①减少不必要的文件：删除src下的文件</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504061234419.png" alt="image-20250406123402370"></p><ul><li>②上一步结束之后检查有的被删除了，要进行修改现有内容</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504061240501.png" alt="image-20250406124009429"></p><ul><li>③修改项目路由index.js</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504061243039.png" alt="image-20250406124313962"></p><ul><li>④精简项目入口APP.vue</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504061246575.png" alt="image-20250406124613487"></p><ul><li>⑤修改main.js文件</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504061247318.png" alt="image-20250406124722219"></p><h3 id="2-2-3-启动项目"><a href="#2-2-3-启动项目" class="headerlink" title="2.2.3 启动项目"></a>2.2.3 启动项目</h3><ul><li>启动项目：点击package.json里面dev左边的绿色箭头</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504061231210.png" alt="image-20250406123146140"></p><h3 id="2-2-4-总结"><a href="#2-2-4-总结" class="headerlink" title="2.2.4 总结"></a>2.2.4 总结</h3><p>通过上述步骤可以得到自己的一个前端脚手架---可以基于此进行很多开发</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504061253599.png" alt="image-20250406125357543"></p><h2 id="2-3-修改项目"><a href="#2-3-修改项目" class="headerlink" title="2.3 修改项目"></a>2.3 修改项目</h2><h3 id="2-3-1-修改全局css样式"><a href="#2-3-1-修改全局css样式" class="headerlink" title="2.3.1 修改全局css样式"></a>2.3.1 修改全局css样式</h3><p>①在Home.vue中针对div块修改内容：【前端查看body会有一个本身的margin属性】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504071950092.png" alt="image-20250407195027039"></p><p>②在assets文件下创建global.css文件：【创建自定义的body】<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504071949376.png" alt="image-20250407194912256"></p><p>③main.js里面引入第二步写的全局global.css文件</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504071951907.png" alt="image-20250407195154860"></p><p>④查看页面：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504071953593.png" alt="image-20250407195309513"></p><h1 id="3-Vue基本语法-针对Home-vue"><a href="#3-Vue基本语法-针对Home-vue" class="headerlink" title="3.Vue基本语法[针对Home.vue]"></a>3.Vue基本语法[针对Home.vue]</h1><ul><li>①script setup里面导包和定义数据</li><li>②template里面渲染数据</li></ul><h2 id="3-1-ref和reactive"><a href="#3-1-ref和reactive" class="headerlink" title="3.1 ref和reactive"></a>3.1 ref和reactive</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504072022069.png" alt="image-20250407202216970"></p><h2 id="3-2-v-model"><a href="#3-2-v-model" class="headerlink" title="3.2 v-model"></a>3.2 v-model</h2><ul><li>会存在一个<strong>双向绑定</strong>情况：input内部变化也会导致定义的数据进行变化</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504072024601.png" alt="image-20250407202451527"></p><h2 id="3-3-v-if和v-else"><a href="#3-3-v-if和v-else" class="headerlink" title="3.3 v-if和v-else"></a>3.3 v-if和v-else</h2><ul><li>主要用于从多个值取出一个值</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504072034650.png" alt="image-20250407203404572"></p><h2 id="3-4-v-for"><a href="#3-4-v-for" class="headerlink" title="3.4 v-for"></a>3.4 v-for</h2><ul><li>主要用于从多个值循环取出所有值--可以全部展示/下拉栏展示【v-for里面的key要保证唯一性(类似于数据库的主键id)】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504072046649.png" alt="image-20250407204656554"></p><h2 id="3-5-v-on-事件绑定"><a href="#3-5-v-on-事件绑定" class="headerlink" title="3.5 v-on:(@) 事件绑定"></a>3.5 v-on:(@) 事件绑定</h2><p>@click 点击事件</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504072056759.png" alt="image-20250407205628648"></p><h2 id="3-6-v-bind-动态绑定"><a href="#3-6-v-bind-动态绑定" class="headerlink" title="3.6 v-bind:(:) 动态绑定"></a>3.6 v-bind:(:) 动态绑定</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504072111944.png" alt="image-20250407211140864"></p><h2 id="3-7-OnMounted"><a href="#3-7-OnMounted" class="headerlink" title="3.7 OnMounted"></a>3.7 OnMounted</h2><ul><li>就是在页面元素完全加载完成之后触发，页面元素加载需要时间【只需要修改script setup里面内容】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504072116392.png" alt="image-20250407211614327"></p><h1 id="4-Vue3集成Element-Plus"><a href="#4-Vue3集成Element-Plus" class="headerlink" title="4.Vue3集成Element-Plus"></a>4.Vue3集成Element-Plus</h1><p><a href="https://element-plus.org/zh-CN/guide/installation" target="_blank" rel="noopener">Element-Plus:</a>官网提供具体操作</p><h2 id="4-1-安装依赖"><a href="#4-1-安装依赖" class="headerlink" title="4.1 安装依赖"></a>4.1 安装依赖</h2><p>安装依赖指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-plus -S</span><br></pre></td></tr></table></figure><p>安装位置：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081314552.png" alt="image-20250408131401452"></p><p>安装之后：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081313351.png" alt="image-20250408131330298"></p><h2 id="4-2-main-js导包"><a href="#4-2-main-js导包" class="headerlink" title="4.2 main.js导包"></a>4.2 main.js导包</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081637676.png" alt="image-20250408163702593"></p><h1 id="5-Element-Plus组件"><a href="#5-Element-Plus组件" class="headerlink" title="5.Element-Plus组件"></a>5.Element-Plus组件</h1><h2 id="5-1Button按钮"><a href="#5-1Button按钮" class="headerlink" title="5.1Button按钮"></a>5.1Button按钮</h2><ul><li>以<strong>Button按钮</strong>为例：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081638494.png" alt="image-20250408163831401"></p><ul><li>Home.vue代码中：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081642925.png" alt="image-20250408164213833"></p><h2 id="5-2-Icon图标"><a href="#5-2-Icon图标" class="headerlink" title="5.2 Icon图标"></a>5.2 Icon图标</h2><p>参考指导：<a href="https://element-plus.org/zh-CN/component/icon.html" target="_blank" rel="noopener">Icon 图标 | Element Plus</a></p><h3 id="5-2-1-安装依赖"><a href="#5-2-1-安装依赖" class="headerlink" title="5.2.1 安装依赖"></a>5.2.1 安装依赖</h3><p>安装依赖指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @element-plus&#x2F;icons-vue</span><br></pre></td></tr></table></figure><p>安装位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081648378.png" alt="image-20250408164857283"></p><h3 id="5-2-2-main-js导包"><a href="#5-2-2-main-js导包" class="headerlink" title="5.2.2 main.js导包"></a>5.2.2 main.js导包</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081652268.png" alt="image-20250408165216217"></p><h3 id="5-2-3-具体使用-Home-vue"><a href="#5-2-3-具体使用-Home-vue" class="headerlink" title="5.2.3 具体使用[Home.vue]"></a>5.2.3 具体使用[Home.vue]</h3><ul><li>前缀图标：prefix-icon</li><li>后缀图标：suffix-icon</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081712575.png" alt="image-20250408171213487"></p><h2 id="5-3-Element-Plus设置自定义主题色"><a href="#5-3-Element-Plus设置自定义主题色" class="headerlink" title="5.3 Element-Plus设置自定义主题色"></a>5.3 Element-Plus设置自定义主题色</h2><h3 id="5-3-1-安装依赖"><a href="#5-3-1-安装依赖" class="headerlink" title="5.3.1 安装依赖"></a>5.3.1 安装依赖</h3><p>安装依赖指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i sass@1.71.1 -D    【我的后面出现报错，更新到了1.86.3】--使用指令npm install sass@latest --save-dev</span><br><span class="line">npm i unplugin-auto-import -D</span><br><span class="line">npm i unplugin-element-plus -D</span><br><span class="line">npm i unplugin-vue-components -D</span><br></pre></td></tr></table></figure><p>安装位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081717487.png" alt="image-20250408171736429"></p><p>安装之后：在总项目的package.json查看</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081718255.png" alt="image-20250408171849192"></p><h3 id="5-3-2-创建index-scss文件"><a href="#5-3-2-创建index-scss文件" class="headerlink" title="5.3.2 创建index.scss文件"></a>5.3.2 创建index.scss文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@forward &quot;element-plus&#x2F;theme-chalk&#x2F;src&#x2F;common&#x2F;var.scss&quot; with ($colors:(</span><br><span class="line">  &quot;primary&quot;: (&quot;base&quot;: #0742b1),</span><br><span class="line">  &quot;success&quot;: (&quot;base&quot;: #2b8f01),</span><br><span class="line">  &quot;warining&quot;: (&quot;base&quot;: #ffad00),</span><br><span class="line">  &quot;danger&quot;: (&quot;base&quot;: #d50707),</span><br><span class="line">  &quot;info&quot;: (&quot;base&quot;: #74717f),</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>在src-assets文件下创建index.scss文件：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081723749.png" alt="image-20250408172351687"></p><h3 id="5-3-3-全局vite-config-js引入"><a href="#5-3-3-全局vite-config-js引入" class="headerlink" title="5.3.3 全局vite.config.js引入"></a>5.3.3 全局vite.config.js引入</h3><p>修改三处位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081741245.png" alt="image-20250408174143153"></p><p>具体代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fileURLToPath, URL &#125; from &#39;node:url&#39;</span><br><span class="line">import &#123; defineConfig &#125; from &#39;vite&#39;</span><br><span class="line">import vue from &#39;@vitejs&#x2F;plugin-vue&#39;</span><br><span class="line">import vueDevTools from &#39;vite-plugin-vue-devtools&#39;</span><br><span class="line">&#x2F;&#x2F;更改主题色-添加内容【引入index.scss内容】</span><br><span class="line">import AutoImport from &#39;unplugin-auto-import&#x2F;vite&#39;</span><br><span class="line">import Components from &#39;unplugin-vue-components&#x2F;vite&#39;</span><br><span class="line">import &#123; ElementPlusResolver&#125; from &#39;unplugin-vue-components&#x2F;resolvers&#39;</span><br><span class="line">import ElmentPlus from &#39;unplugin-element-plus&#x2F;vite&#39;</span><br><span class="line"></span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    vueDevTools(),</span><br><span class="line">    &#x2F;&#x2F;更改主题色-添加内容</span><br><span class="line">    ElmentPlus(&#123;</span><br><span class="line">      useSource: true,</span><br><span class="line">    &#125;),</span><br><span class="line">    AutoImport(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver(&#123; importStyle: &#39;sass&#39;&#125;)],</span><br><span class="line">    &#125;),</span><br><span class="line">    Components(&#123;</span><br><span class="line">      resolvers: [ElementPlusResolver(&#123; importStyle: &#39;sass&#39;&#125;)],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#39;@&#39;: fileURLToPath(new URL(&#39;.&#x2F;src&#39;, import.meta.url))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;更改主题色-添加内容</span><br><span class="line">  css: &#123;</span><br><span class="line">    preprocessorOptions: &#123;</span><br><span class="line">      scss: &#123;</span><br><span class="line">        additionalData: &#96;</span><br><span class="line">        @use &quot;@&#x2F;assets&#x2F;index.scss&quot; as *;   &#x2F;&#x2F;注意是Esc按键下的&#96;&#96;符号!!!</span><br><span class="line">        &#96;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-3-4-查看对比"><a href="#5-3-4-查看对比" class="headerlink" title="5.3.4 查看对比"></a>5.3.4 查看对比</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504081743050.png" alt="image-20250408174325003"></p><h2 id="5-4-文本框el-input"><a href="#5-4-文本框el-input" class="headerlink" title="5.4 文本框el-input"></a>5.4 文本框el-input</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/input.html" target="_blank" rel="noopener">Input 输入框 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504151117564.png" alt="image-20250415111715494"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504151115678.png" alt="image-20250415111550604"></p><h2 id="5-5-下拉框el-select"><a href="#5-5-下拉框el-select" class="headerlink" title="5.5 下拉框el-select"></a>5.5 下拉框el-select</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/select.html" target="_blank" rel="noopener">Select 选择器 | Element Plus</a><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504151222048.png" alt="image-20250415122256921"></p><p>两个核心：v-model绑定data的value【下拉选中之后就可以绑定到value】，v-for的遍历绑定options【可以是数组，也可以是对象】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504151217491.png" alt="image-20250415121730349"></p><h2 id="5-6-单选框el-radio-group"><a href="#5-6-单选框el-radio-group" class="headerlink" title="5.6 单选框el-radio-group"></a>5.6 单选框el-radio-group</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/radio.html" target="_blank" rel="noopener">Radio 单选框 | Element Plus</a></p><p>两种写法要确认自己的element-plus版本，我的是2.9.7对应使用第一种写法</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504171728647.png" alt="image-20250417172813498"></p><p>要注意v-model绑定的值和value值要对应【保证能够渲染成功】--例如sex是女，那单选框默认就标到女的位置</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504171728048.png" alt="image-20250417172828989"></p><h2 id="5-7-多选框el-checkbox-group"><a href="#5-7-多选框el-checkbox-group" class="headerlink" title="5.7 多选框el-checkbox-group"></a>5.7 多选框el-checkbox-group</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/checkbox.html" target="_blank" rel="noopener">Checkbox 多选框 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181501415.png" alt="image-20250418150137302"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181453784.png" alt="image-20250418145333741"></p><h2 id="5-8-图片显示el-image"><a href="#5-8-图片显示el-image" class="headerlink" title="5.8 图片显示el-image"></a>5.8 图片显示el-image</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/image.html" target="_blank" rel="noopener">Image 图片 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181536638.png" alt="image-20250418153614500"></p><p>相比于img而言，能够进行高级操作【懒加载，翻转，和缩放等功能】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181531665.png" alt="image-20250418153145323"></p><h2 id="5-9-轮播图el-carousel"><a href="#5-9-轮播图el-carousel" class="headerlink" title="5.9 轮播图el-carousel"></a>5.9 轮播图el-carousel</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/carousel.html" target="_blank" rel="noopener">Carousel 走马灯 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181604085.png" alt="image-20250418160418987"></p><p>可以在el-carousel里面添加各种属性值</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504181601690.png" alt="image-20250418160130419"></p><h2 id="5-10-日期时间控件el-date-picker"><a href="#5-10-日期时间控件el-date-picker" class="headerlink" title="5.10 日期时间控件el-date-picker"></a>5.10 日期时间控件el-date-picker</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/datetime-picker.html#datetimepicker-日期时间选择器" target="_blank" rel="noopener">DateTimePicker 日期时间选择器 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191123308.png" alt="image-20250419112342220"></p><h2 id="5-11-数据表格el-table"><a href="#5-11-数据表格el-table" class="headerlink" title="5.11 数据表格el-table"></a>5.11 数据表格el-table</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/table.html" target="_blank" rel="noopener">Table 表格 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191227834.png" alt="image-20250419122706760"></p><p>具体的对应情况：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191220121.png" alt="image-20250419122009016"></p><h2 id="5-12-分页组件el-pagination"><a href="#5-12-分页组件el-pagination" class="headerlink" title="5.12 分页组件el-pagination"></a>5.12 分页组件el-pagination</h2><p>5.11的数据因为设置了max-height的流体高度：但是如果行很多的情况应该采用分页：</p><p>参考内容：<a href="https://element-plus.org/zh-CN/component/pagination.html" target="_blank" rel="noopener">Pagination 分页 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191244539.png" alt="image-20250419124426447"></p><h2 id="5-13-对话框el-dialog"><a href="#5-13-对话框el-dialog" class="headerlink" title="5.13 对话框el-dialog"></a>5.13 对话框el-dialog</h2><p>参考内容：<a href="https://element-plus.org/zh-CN/component/dialog.html" target="_blank" rel="noopener">Dialog 对话框 | Element Plus</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191254646.png" alt="image-20250419125422503"></p><p>点击对话框之后：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191253140.png" alt="image-20250419125321990"></p><h1 id="6-Vue3集成Vue-Router实现路由跳转"><a href="#6-Vue3集成Vue-Router实现路由跳转" class="headerlink" title="6.Vue3集成Vue-Router实现路由跳转"></a>6.Vue3集成Vue-Router实现路由跳转</h1><h2 id="6-1-路由定义-实现多个页面联动"><a href="#6-1-路由定义-实现多个页面联动" class="headerlink" title="6.1 路由定义[实现多个页面联动]"></a>6.1 路由定义[实现多个页面联动]</h2><p>参考内容：<a href="https://router.vuejs.org/api/" target="_blank" rel="noopener">API Documentation | Vue Router</a></p><p>客户端路由的作用是在单页应用(SPA)中把<strong>浏览器的URL</strong>和<strong>用户看到的内容</strong>绑定起来。当用户在应用中浏览不同页面时，URL会随之更新，但页面不需要从服务器重新加载。</p><p>Vue Router基于Vue组件系统构建，可以通过配置路由来告诉Vue Router为每个URL路径显示哪些组件。</p><h2 id="6-2-如何定义新的路由-index-js"><a href="#6-2-如何定义新的路由-index-js" class="headerlink" title="6.2 如何定义新的路由[index.js]"></a>6.2 如何定义新的路由[index.js]</h2><p>在src-router-index.js文件内：【name不能一致!!!】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191824979.png" alt="image-20250419182409838"></p><h3 id="6-2-1-默认路由-redirect重定向"><a href="#6-2-1-默认路由-redirect重定向" class="headerlink" title="6.2.1 默认路由[redirect重定向]"></a>6.2.1 默认路由[redirect重定向]</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191837578.png" alt="image-20250419183711479"></p><h3 id="6-2-2-嵌套路由-children孩子"><a href="#6-2-2-嵌套路由-children孩子" class="headerlink" title="6.2.2 嵌套路由[children孩子]"></a>6.2.2 嵌套路由[children孩子]</h3><ul><li>①index.js页面设置路由内容：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201713933.png" alt="image-20250420171337852"></p><ul><li>②父类页面内容：【要添加RouterView标签】<img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201714487.png" alt="image-20250420171441451"></li></ul><p>具体页面：/manager/home点击之后跳转/manager/test?id=1&name=宋亚翔</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201717761.png" alt="image-20250420171723694"></p><h2 id="6-3-跳转方式-两大类"><a href="#6-3-跳转方式-两大类" class="headerlink" title="6.3 跳转方式[两大类]"></a>6.3 跳转方式[两大类]</h2><p>①RouterLink方法</p><p>②编程式路由：router.push()方法和router.replace()方法</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504191835990.png" alt="image-20250419183559931"></p><h2 id="6-4-路由传参-query类型"><a href="#6-4-路由传参-query类型" class="headerlink" title="6.4 路由传参[query类型]"></a>6.4 路由传参[query类型]</h2><p>都是使用query类型的参数：</p><h3 id="6-4-1-传参-两种方式"><a href="#6-4-1-传参-两种方式" class="headerlink" title="6.4.1 传参[两种方式]"></a>6.4.1 传参[两种方式]</h3><p>均通过router.push()方法进行</p><ul><li>①以路径形式【推荐】</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.push(&#39;&#x2F;test?id&#x3D;1&#39;)</span><br><span class="line">router.push(&#39;&#x2F;test?id&#x3D;1&amp;name&#x3D;宋亚翔&#39;)</span><br></pre></td></tr></table></figure><ul><li>②以对象形式【不推荐】</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.push(&#123;path:&#39;&#x2F;test&#39;,query:&#123;id:1,name:&#39;宋亚翔&#39;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-4-2-获取参数"><a href="#6-4-2-获取参数" class="headerlink" title="6.4.2 获取参数"></a>6.4.2 获取参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过router.currentRoute.value.query.XXX获取</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201349453.png" alt="image-20250420134907379"></p><h3 id="6-4-3-跳转整体代码"><a href="#6-4-3-跳转整体代码" class="headerlink" title="6.4.3 跳转整体代码"></a>6.4.3 跳转整体代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref,reactive&#125; from &quot;vue&quot;;</span><br><span class="line">import router from &#39;..&#x2F;router&#x2F;index.js&#39;</span><br><span class="line">const data&#x3D;reactive(&#123;</span><br><span class="line">  id: router.currentRoute.value.query.id,</span><br><span class="line">  name: router.currentRoute.value.query.name,</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&quot;路由传参过来的：&quot;+data.id)</span><br><span class="line">console.log(&quot;路由传参过来的：&quot;+data.name)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!--路由传参--&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--①第一种--&gt;</span><br><span class="line">    &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;router.push(&#39;&#x2F;test?id&#x3D;1&#39;)&quot;&gt;路由传参[单参数]&lt;&#x2F;el-button&gt;  &lt;!--跳转后可以返回--&gt;</span><br><span class="line">    &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;router.push(&#39;&#x2F;test?id&#x3D;1&amp;name&#x3D;宋亚翔&#39;)&quot;&gt;路由传参[多参数]&lt;&#x2F;el-button&gt;  &lt;!--跳转后可以返回--&gt;</span><br><span class="line">    &lt;!--②第二种--&gt;</span><br><span class="line">    &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;router.push(&#123;path: &#39;&#x2F;test&#39;,query :&#123;id:1,name:&#39;宋亚翔&#39;&#125;&#125;)&quot;&gt;路由传参&lt;&#x2F;el-button&gt;  &lt;!--跳转后可以返回--&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201352039.png" alt="image-20250420135209955"></p><h2 id="6-5-路由守卫"><a href="#6-5-路由守卫" class="headerlink" title="6.5 路由守卫"></a>6.5 路由守卫</h2><h3 id="6-5-1-导航守卫"><a href="#6-5-1-导航守卫" class="headerlink" title="6.5.1 导航守卫"></a>6.5.1 导航守卫</h3><ul><li>在路由配置文件index.js中使用导航守卫，修改网页标题【meta属性】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201751661.png" alt="image-20250420175128572"></p><p>通过router.back()回退到上一个页面</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201756405.png" alt="image-20250420175652344"></p><p>测试：然后点击对应页面，页面跳转后上方标题会变化</p><h3 id="6-5-2-404守卫"><a href="#6-5-2-404守卫" class="headerlink" title="6.5.2 404守卫"></a>6.5.2 404守卫</h3><ul><li>①定义404页面</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201809610.png" alt="image-20250420180946535"></p><ul><li><p>②定义404路由【只能定义在外侧】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201810635.png" alt="image-20250420181029566"></p></li><li><p>③定义错误路由【只能定义在外侧】</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202504201810704.png" alt="image-20250420181049636"></p></script></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Vue简介&quot;&gt;&lt;a href=&quot;#1-Vue简介&quot; class=&quot;headerlink&quot; title=&quot;1.Vue简介&quot;&gt;&lt;/a&gt;1.Vue简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/guide/introduction.h
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://Larkkkkkkk.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>cpolar</title>
    <link href="https://larkkkkkkk.github.io/2025/03/23/cpolar/"/>
    <id>https://larkkkkkkk.github.io/2025/03/23/cpolar/</id>
    <published>2025-03-23T01:42:00.000Z</published>
    <updated>2025-03-23T01:53:06.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h1><p>我在做毕业设计和老师横向课题时，遇到我自己电脑写后端，其他人的前端调用我的场景：因此需要内网穿透【创建一个临时ip】，让其他人访问</p><h1 id="2-cpolar介绍"><a href="#2-cpolar介绍" class="headerlink" title="2.cpolar介绍"></a>2.cpolar介绍</h1><h2 id="2-1-下载并注册信息"><a href="#2-1-下载并注册信息" class="headerlink" title="2.1 下载并注册信息"></a>2.1 下载并注册信息</h2><ul><li>进入<a href="https://dashboard.cpolar.com/auth" target="_blank" rel="noopener">官网</a>之后注册登录一个账号，点击下载：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202503230946956.png" alt="image-20250323094606876"></li></ul><h2 id="2-2-验证authtoken"><a href="#2-2-验证authtoken" class="headerlink" title="2.2 验证authtoken"></a>2.2 验证authtoken</h2><ul><li>点击左侧”验证”模块，保存authtoken：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202503230947318.png" alt="image-20250323094727269"></p><h2 id="2-3-启动http请求"><a href="#2-3-启动http请求" class="headerlink" title="2.3 启动http请求"></a>2.3 启动http请求</h2><ul><li>打开本地cpolar下载位置打开cmd页面：输入cpolar.exe authtoken 2.2得到的authotoken</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202503230949374.png" alt="image-20250323094914323"></p><p>看到这样的提示语即证明成功！</p><ul><li>在刚才的cmd页面：输入cpolar.exe http 8080(端口可变化)</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202503230950381.png" alt="image-20250323095043329"></p><h2 id="2-4-访问"><a href="#2-4-访问" class="headerlink" title="2.4 访问"></a>2.4 访问</h2><ul><li>其他人就可以通过2.3得到的映射ip来访问：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202503230952038.png" alt="image-20250323095217990"></li></ul><h1 id="3-整体流程"><a href="#3-整体流程" class="headerlink" title="3.整体流程"></a>3.整体流程</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202503230953609.png" alt="image-20250323095302516"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-使用场景&quot;&gt;&lt;a href=&quot;#1-使用场景&quot; class=&quot;headerlink&quot; title=&quot;1.使用场景&quot;&gt;&lt;/a&gt;1.使用场景&lt;/h1&gt;&lt;p&gt;我在做毕业设计和老师横向课题时，遇到我自己电脑写后端，其他人的前端调用我的场景：因此需要内网穿透【创建一个临
      
    
    </summary>
    
    
    
      <category term="cpolar" scheme="https://Larkkkkkkk.github.io/tags/cpolar/"/>
    
  </entry>
  
  <entry>
    <title>QPS</title>
    <link href="https://larkkkkkkk.github.io/2024/11/16/QPS/"/>
    <id>https://larkkkkkkk.github.io/2024/11/16/QPS/</id>
    <published>2024-11-16T06:22:22.000Z</published>
    <updated>2024-11-16T06:38:52.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-高并发定义"><a href="#1-高并发定义" class="headerlink" title="1.高并发定义"></a>1.高并发定义</h1><p>高并发：系统在单位时间内承受大量用户请求的能力【一般衡量高并发的指标就有QPS】</p><p><strong>QPS</strong>:【Queries Per Second<strong>每秒查询次数</strong>】用来判断并发量的高低。</p><h1 id="2-QPS范围"><a href="#2-QPS范围" class="headerlink" title="2.QPS范围"></a>2.QPS范围</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161434909.png" alt="image-20241116143448846"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-高并发定义&quot;&gt;&lt;a href=&quot;#1-高并发定义&quot; class=&quot;headerlink&quot; title=&quot;1.高并发定义&quot;&gt;&lt;/a&gt;1.高并发定义&lt;/h1&gt;&lt;p&gt;高并发：系统在单位时间内承受大量用户请求的能力【一般衡量高并发的指标就有QPS】&lt;/p&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
    
    
      <category term="QPS" scheme="https://Larkkkkkkk.github.io/tags/QPS/"/>
    
  </entry>
  
  <entry>
    <title>实习git体会</title>
    <link href="https://larkkkkkkk.github.io/2024/11/16/%E5%AE%9E%E4%B9%A0git%E4%BD%93%E4%BC%9A/"/>
    <id>https://larkkkkkkk.github.io/2024/11/16/%E5%AE%9E%E4%B9%A0git%E4%BD%93%E4%BC%9A/</id>
    <published>2024-11-16T04:16:50.000Z</published>
    <updated>2024-11-16T06:22:10.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-分支命名"><a href="#1-分支命名" class="headerlink" title="1.分支命名"></a>1.分支命名</h1><p>不同公司中对Git的使用分支命名规范也略有差异，不过整体都会分为；<code>上线</code>、<code>预发</code>、<code>开发</code>、<code>测试</code>，这样几个分支。如图是一种比较简单使用的拉取分支方式。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161219417.png" alt="image-20241116121910335"></p><ul><li>master/main 作为主分支，不可直接修改代码代码，只能从分支合并到主分支进行进行提交。同时，master 分支的合并需要进行审批，审批后才能合并。</li><li>开发前，先从 master 分支，拉一个开发分支。<code>2024/10/11/xfg-xxx</code> 使用带有斜线的分支命名会自动创建文件夹，对于多人开发的项目，可以直接归档。</li><li>后开发，也就是研发已经完成了本地的验证。进行测试时，可以把研发的开发分支合并到 test 分支，提交、部署、测试。遇到测试bug，需要回到可发分支修改代码，之后合并到 test 分支部署验证。</li><li>pre/release 预发分支，用于测试完成后，把研发的开发分支合并到预发分支进行预发上线，上线后测试人员进行验证。最终完成验证后，把开发分支合并到 master 分支，并需要由架构师对合并代码审批通过。最后进行上线开量验证。</li><li>如果是修复bug的，可以添加一个 <code>fix-用户名缩写-具体功能</code></li></ul><h1 id="2-提交规范"><a href="#2-提交规范" class="headerlink" title="2.提交规范"></a>2.提交规范</h1><p>保持一个标准的统一的规范提交代码，在后续的评审、检查、合并，都会非常容易处理。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161416128.png" alt="image-20241116141614067"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 主要type</span><br><span class="line">feat:     增加新功能</span><br><span class="line">fix:      修复bug</span><br><span class="line"></span><br><span class="line"># 特殊type</span><br><span class="line">docs:     只改动了文档相关的内容</span><br><span class="line">style:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span><br><span class="line">build:    构造工具的或者外部依赖的改动，例如webpack，npm</span><br><span class="line">refactor: 代码重构时使用</span><br><span class="line">revert:   执行git revert打印的message</span><br><span class="line"></span><br><span class="line"># 暂不使用type</span><br><span class="line">test:     添加测试或者修改现有测试</span><br><span class="line">perf:     提高性能的改动</span><br><span class="line">ci:       与CI（持续集成服务）有关的改动</span><br><span class="line">chore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure><h1 id="3-合并分支"><a href="#3-合并分支" class="headerlink" title="3.合并分支"></a>3.合并分支</h1><p>在公司中很多时候是大家一起在一个工程开发代码，那么这个时候就会涉及合并代码的。如果有多人共同开发一个接口方法，就会在合并的时候产生冲突。所以要特别注意。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161416932.png" alt="image-20241116141659803"></p><ol><li>选择，你要从哪个分支合并到 test 分支。右键选择 Merge into test</li><li>如果你合并到test分支的代码，有其他人也在同一行做了改变或者格式化了代码，就会弹出一个合并冲突。这个时候你需要点 Merge 进行合并。</li><li>在点击 Merge 后，你会看到具体冲突的代码是什么，你可以有选择的从左右合并到中，最后点击 Apply。这个时候要注意不要把让别人的代码合并丢喽。</li><li>合并完的代码，不要直接 push，你要先本地 install 看是否可以打包。以及如果可以运行的话，可以本地先跑一下。最后 push 提交合并代码即可。</li></ol><h1 id="4-回滚代码"><a href="#4-回滚代码" class="headerlink" title="4.回滚代码"></a>4.回滚代码</h1><p>如果出现了合并代码冲突后，丢失了代码，那么这个时候一般要进行回滚操作，重新合并。</p><p>虽然 Git 提供了回滚代码的功能，但一定要谨慎使用。怎么谨慎？第一个谨慎就是 push 的代码一定确保可以构建和运行，否则不要 push！第二个谨慎是要回滚代码，需要和团队中对应的伙伴打招呼，避免影响别人测试或者上线。</p><h2 id="4-1-全量回滚"><a href="#4-1-全量回滚" class="headerlink" title="4.1  全量回滚"></a>4.1  全量回滚</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161417016.png" alt="image-20241116141751877"></p><ol><li>先选择要在哪个分支的哪次提交上进行回滚。这里选择的是 test 分支上的提交进行回滚。</li><li>这里选择 Hard 回滚。因为我们所有的都是合并到 test 分支，所以 test 分支丢失也没问题。可以重新合并。但要和同组伙伴提前说明。</li><li>回滚后，你会看到代码只剩下从回滚往下的提交内容了。</li><li>回滚后，你不能直接 push 提交了，这个之后会报错；<code>fast-forward</code> 因为此时本地分支落后于远程分支。</li><li>所以要通过 <code>git push origin HEAD --force</code> 进行强制提交。或者你可以把 test 的远程分支删掉，之后在提交。</li></ol><h2 id="4-2-cherry-pick"><a href="#4-2-cherry-pick" class="headerlink" title="4.2 cherry-pick"></a>4.2 cherry-pick</h2><p>只把我修改的部分合并上去，使用cheery pick</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161419865.png" alt="image-20241116141916797"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-分支命名&quot;&gt;&lt;a href=&quot;#1-分支命名&quot; class=&quot;headerlink&quot; title=&quot;1.分支命名&quot;&gt;&lt;/a&gt;1.分支命名&lt;/h1&gt;&lt;p&gt;不同公司中对Git的使用分支命名规范也略有差异，不过整体都会分为；&lt;code&gt;上线&lt;/code&gt;、&lt;code
      
    
    </summary>
    
    
    
      <category term="实习" scheme="https://Larkkkkkkk.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PageHelper</title>
    <link href="https://larkkkkkkk.github.io/2024/11/16/PageHelper/"/>
    <id>https://larkkkkkkk.github.io/2024/11/16/PageHelper/</id>
    <published>2024-11-16T03:42:53.000Z</published>
    <updated>2024-11-16T03:57:35.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前提"><a href="#0-前提" class="headerlink" title="0.前提"></a>0.前提</h1><p>在开发Web应用时，我们经常需要处理大量的数据展示，而分页功能几乎成了标配。它不仅提升了用户体验，还减轻了服务器的负担。今天，咱们就来聊聊一个在Java圈里非常流行的分页插件——<strong>PageHelper</strong>，看看它是如何在不动声色间帮我们搞定分页难题的。</p><h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h1><p>PageHelper是MyBatis的一个分页插件，它能够在不修改原有查询语句的基础上，自动实现分页功能。<br>简单来说，就是你在查询数据库时，告诉PageHelper你想看第几页、每页多少条数据，它就会帮你把结果集“裁剪”好。</p><h1 id="2-分页原理"><a href="#2-分页原理" class="headerlink" title="2.分页原理"></a>2.分页原理</h1><ul><li>主要依赖于两个核心步骤：<strong>拦截器</strong>和<strong>分页SQL的生成</strong></li></ul><h2 id="2-1-拦截器–Sql守门人"><a href="#2-1-拦截器–Sql守门人" class="headerlink" title="2.1 拦截器–Sql守门人"></a>2.1 拦截器–Sql守门人</h2><p>它首先会作为一个拦截器注册到MyBatis的执行流程中。这个拦截器就像是个守门人，会在SQL语句执行前和执行后进行一些“小动作”。</p><ul><li><strong>执行前</strong>：当你发起一个查询请求时，PageHelper会检查当前线程是否已经设置了分页参数（比如页码、每页数量）。如果设置了，它就会根据这些参数计算出需要跳过的记录数和要查询的记录数。</li><li><strong>执行后</strong>：查询完成后，PageHelper还会对结果进行二次加工，比如封装成分页对象，包含总记录数、当前页的数据列表等信息。</li></ul><h2 id="2-2-分页SQL的生成"><a href="#2-2-分页SQL的生成" class="headerlink" title="2.2 分页SQL的生成"></a>2.2 分页SQL的生成</h2><p>拦截到SQL语句后，PageHelper并不会直接修改你的原始SQL，而是通过动态生成一段分页SQL来实现分页功能。这个过程大致如下：</p><ul><li><strong>计算分页参数</strong>：根据你提供的页码和每页数量，计算出起始位置和结束位置。</li><li><strong>拼接分页SQL</strong>：在原始SQL的基础上，添加<code>LIMIT</code>和<code>OFFSET</code>（或者数据库特定的分页语法，比如MySQL的<code>LIMIT</code>，Oracle的<code>ROWNUM</code>等），从而实现对结果集的裁剪。【如果要查询第20-30行数据。 limit 19,10 或者 limit 10 offset 19】</li><li><strong>执行分页SQL</strong>：最终，这个经过“加工”的SQL会被提交给数据库执行，返回的就是你想要的那一页数据了。</li></ul><h1 id="3-使用操作"><a href="#3-使用操作" class="headerlink" title="3.使用操作"></a>3.使用操作</h1><p>具体操作网页：<a href="https://pagehelper.github.io/docs/howtouse/" target="_blank" rel="noopener">如何使用分页插件</a></p><ul><li><strong>1.引入依赖</strong>：在你的项目中添加PageHelper的依赖，无论是Maven还是Gradle，都有现成的配置。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161154097.png" alt="image-20241116115450030"></p><ul><li>2.<strong>配置PageHelper</strong>：在MyBatis配置文件中简单配置一下PageHelper插件。</li></ul><ul><li>3.<strong>代码中分页</strong>：在需要分页的查询方法前，调用<code>PageHelper.startPage(pageNum, pageSize)</code>，其中<code>pageNum</code>是页码，<code>pageSize</code>是每页数量。</li></ul><ul><li>4.<strong>获取分页结果</strong>：执行查询后，你可以直接从返回的结果中获取分页信息，比如总记录数、当前页数据等。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-前提&quot;&gt;&lt;a href=&quot;#0-前提&quot; class=&quot;headerlink&quot; title=&quot;0.前提&quot;&gt;&lt;/a&gt;0.前提&lt;/h1&gt;&lt;p&gt;在开发Web应用时，我们经常需要处理大量的数据展示，而分页功能几乎成了标配。它不仅提升了用户体验，还减轻了服务器的负担。今天
      
    
    </summary>
    
    
    
      <category term="Mysql" scheme="https://Larkkkkkkk.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>微服务和分布式系统设计</title>
    <link href="https://larkkkkkkk.github.io/2024/11/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://larkkkkkkk.github.io/2024/11/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</id>
    <published>2024-11-15T13:27:30.000Z</published>
    <updated>2024-11-16T03:39:24.149Z</updated>
    
    <content type="html"><![CDATA[<p><strong>后台分布式架构形形色色，特别是微服务和云原生的兴起，诞生了一批批经典的分布式架构，然而在公司内部，或者其他大型互联网企业，都是抛出自己的架构，从接入层Controller，逻辑层Service，数据层Mapper都各有特点，但这些系统设计中到底是出于何种考量，有没有一些参考的脉络呢，本文将从云原生和微服务，有状态服务，无状态服务以及分布式系统等维度探讨这些脉络。</strong></p><h1 id="1-分布式系统概论"><a href="#1-分布式系统概论" class="headerlink" title="1.分布式系统概论"></a>1.分布式系统概论</h1><ul><li><p>定义：《Designing Data-Intensive Application》指出<strong>分布式系统</strong>：通过网络进行通信的多台机器的系统</p></li><li><p>好处：</p><ul><li><strong>1.容错/高可用性：</strong>将应用程序部署在多台机器/网络/整个数据中心，保证任意宕机时仍可以继续工作。</li><li><strong>2.可扩容性：</strong>负载均衡到多台机器。</li><li><strong>3.低延迟：</strong>在全球各地设置服务器，保证每个用户都可以从最靠近他们地理位置的数据中心获取服务，避免用户等待网络包绕地球半圈响应请求。</li><li><strong>4.资源弹性：</strong>可以设置云部署根据需求来扩展/收缩，保证每个用户只需要为实际使用的资源付费。</li><li><strong>5.法律合规：</strong>有的数据符合的规则需要符合不同国家地区的政策，因此需要分布到多个位置的服务器上。</li></ul></li></ul><hr><p>【DDIA这本书主要是基于<strong>有数据有状态</strong>来讨论分布式。】</p><p>但是，现实的实践中，分布式系统存在①有状态和②无状态：</p><ul><li><strong>①有状态</strong>：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161047605.png" alt="image-20241116104740469"></p><ul><li><strong>②无状态</strong>：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161049056.png" alt="image-20241116104911980"></p><h1 id="2-实现分布式系统的模式"><a href="#2-实现分布式系统的模式" class="headerlink" title="2.实现分布式系统的模式"></a>2.实现分布式系统的模式</h1><ul><li><p><strong>AO：</strong>【微服务的顶层】封装应用程序的业务逻辑和处理流程；负责处理用户请求，调用相关的原子服务来完成特定任务；与其他对象进行交互，协调不同的功能模块。</p></li><li><p><strong>BO：</strong>【微服务中相关的原子服务】，负责业务原子化的服务[特定业务/数据打交道]；通常被各种AO服务调用</p></li></ul><p>实现有状态的分布式系统，通常有以下三种：</p><h2 id="2-1-单体应用"><a href="#2-1-单体应用" class="headerlink" title="2.1 单体应用"></a>2.1 单体应用</h2><p>应用程序作为一个整体进行开发，测试和部署：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161117046.png" alt="image-20241116111726965"></p><p>优点：</p><ul><li><strong>简单性</strong>：测试和部署更为简单。</li><li><strong>性能较好</strong>：所有功能都在同一个进程中运行，有较好的性能和响应能力。</li><li><strong>易于维护</strong>：所有代码和数据库都在同一个代码库和mysql库，很容易维护。</li></ul><p>缺点：</p><ul><li><strong>系统复杂度高‌</strong>：随着功能的增加，代码库变得庞大和复杂，导致开发人员难以理解整个系统，进而影响代码的质量和维护性。</li><li><strong>开发速度慢‌</strong>：由于需要编译、构建和测试整个项目，每次更改代码都会消耗大量时间，增加了开发成本。</li><li><strong>难以扩展‌</strong>：单体应用难以根据不同模块的需求进行针对性的扩展，往往需要整体扩展，导致资源利用效率低下。</li><li><strong>‌难以维护‌</strong>：模块之间的耦合度较高，修改一个模块的需求往往会带来连锁反应，影响其他模块的稳定性。</li><li><strong>难以采用新技术‌</strong>：项目是一个庞大的整体，使得应用新技术的成本很高，因为必须对整个项目进行重构，这通常是不可能的。</li><li><strong>开发速度慢‌</strong>：应用太大，每启动一次都需要很长时间，因此从编辑到构建、运行再到测试这个周期花费的时间越来越长。</li><li><strong>部署困难‌</strong>：代码部署的周期很长，而且容易出问题。程序更改部署到生产环境的时间变得更长，代码库复杂，以至于一个更改可能引起的影响是未知的。</li><li><strong>系统故障隔离差‌</strong>：应用程序缺乏故障隔离，因为所有模块都运行在同一个进程当中，任何部分的故障都可能影响整个系统的稳定性，导致宕机。</li></ul><h2 id="2-2-SOA架构–面向服务的架构"><a href="#2-2-SOA架构–面向服务的架构" class="headerlink" title="2.2 SOA架构–面向服务的架构"></a>2.2 SOA架构–面向服务的架构</h2><p>SOA架构关注于改变IT服务在企业范围内的工作方式，定义一种可通过服务接口复用软件组件并实现其互操作的方法。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161123611.png" alt="image-20241116112342547"></p><p>优点：</p><ul><li><strong>可扩展性和灵活性</strong>：SOA 架构将系统拆分成独立的服务，可以按需组合和重组这些服务，从而实现系统的快速扩展和灵活部署。</li><li><strong>提高系统的可重用性</strong>：每个服务都是独立的功能单元，可以在不同的系统中复用，提高了系统的开发效率和维护成本。</li><li><strong>降低系统的耦合性</strong>：SOA 架构通过服务之间的松耦合关系，降低了服务之间的依赖性，有利于系统的模块化和维护。</li><li><strong>提高系统的稳定性和可靠性</strong>：SOA 架构采用了服务注册与发现机制、负载均衡、故障恢复等机制，提高了系统的稳定性和可靠性。</li></ul><p>缺点：</p><ul><li><strong>系统复杂度高</strong>：SOA 架构中涉及多个服务之间的协作和通信，系统的复杂度较高，开发、测试和维护成本相对较高。</li><li><strong>性能问题</strong>：由于服务之间的通信需要通过网络进行，可能存在网络延迟和性能损失，对系统的性能造成影响。</li><li><strong>安全性难以保障</strong>：SOA 架构中涉及多个服务之间的通信，需要对数据传输进行加密和安全控制，保障系统的安全性比较困难。</li><li><strong>部署和运维难度大</strong>：SOA 架构中涉及多个服务的部署和管理，需要专门的运维团队进行管理，增加了系统的复杂性和运维成本。</li></ul><h2 id="2-3-微服务"><a href="#2-3-微服务" class="headerlink" title="2.3 微服务"></a>2.3 微服务</h2><p>【SOA架构的一种变体】微服务架构是一种<strong>云原生架构</strong>常用的实现方式—更强调基于<strong>云原生，独立部署，Devops，持续交付</strong>。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161127002.png" alt="image-20241116112700938"></p><p>优点：</p><ul><li><p><strong>可扩展性和灵活性</strong>：SOA 架构将系统拆分成独立的服务，可以按需组合和重组这些服务，从而实现系统的快速扩展和灵活部署。</p></li><li><p><strong>提高系统的可重用性</strong>：每个服务都是独立的功能单元，可以在不同的系统中复用，提高了系统的开发效率和维护成本。</p></li><li><p><strong>降低系统的耦合性</strong>：SOA 架构通过服务之间的松耦合关系，降低了服务之间的依赖性，有利于系统的模块化和维护。</p></li><li><p><strong>提高系统的稳定性和可靠性</strong>：SOA 架构采用了服务注册与发现机制、负载均衡、故障恢复等机制，提高了系统的稳定性和可靠性</p><p>【基于SOA架构新增的优点】</p></li><li><p><strong>独立性‌</strong>：每个服务可以独立部署和更新，提高了系统的灵活性和可靠性。</p></li><li><p><strong>‌可扩展性‌</strong>：根据需求，可以独立扩展单个服务，而不是整个应用程序。</p></li><li><p><strong>‌容错性‌</strong>：单个服务的故障不会影响其他服务，提高了系统的稳定性‌。</p></li></ul><p>缺点：</p><p>【基于SOA架构，主要在运维和部署上增加了难度！！！】</p><p>需要处理的问题：</p><ol><li><strong>必须有接入层</strong>：如上图，微服务化后，必然存在用户需要直接链接后端服务，那么这个时候就需要网关来解耦这块，也就是上面接入层讨论的好处。</li><li><strong>服务容错</strong>：多个微服务部署在云上，不同母机，会带来通讯的复杂性，网络问题会成为常态，那么如何容灾，容错，降级，也是需要考虑的。</li><li><strong>服务发现</strong>：当服务 A 发布或者扩缩容时，依赖服务 A 的服务 X 如何在保持运行的前提下自动感知到服务 A 的变化。这里需要引入第三方服务注册中心来实现服务的可发现性。比如北极星，stark，以及如何和容器，云原生结合。</li><li><strong>服务部署</strong>：服务变成微服务之后，部署是分散，部署是独立的，就需要有一个可靠快速的部署，扩缩容方案，也包括 ci/cd，全链路、实时和多维度的可观测性等，如 tke，智妍等，k8s 就是解决这种问题的。</li><li><strong>数据存储隔离</strong>：数据存储隔离(Data Storage Segregation, DSS) 原则，即数据是微服务的私有资产，必须通过当前微服务提供的 API 来访问数据，避免数据层产生耦合。对于有状态的微服务而言，通常使用计算与存储分类的方式，将数据下层到分布式存储方案中，从而一定程度上实现服务无状态化。</li><li><strong>服务间调用</strong>：服务 A 采用什么方式才可以调用服务 X，由于服务自治的约束 ，服务之间的调用需要采用开发语言无关的远程调用协议。现在业界大部分的微服务架构通常采用基于 IDL （Interactive Data Language， 交互式数据语言）的二进制协议进行交互，如 pb。</li></ol><p>而整体解决微服务问题的思路：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202411161139606.png" alt="image-20241116113914493"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;后台分布式架构形形色色，特别是微服务和云原生的兴起，诞生了一批批经典的分布式架构，然而在公司内部，或者其他大型互联网企业，都是抛出自己的架构，从接入层Controller，逻辑层Service，数据层Mapper都各有特点，但这些系统设计中到底是出于何种考量
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客关闭窗口下次提交报错</title>
    <link href="https://larkkkkkkk.github.io/2024/10/08/Hexo%E5%8D%9A%E5%AE%A2%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%E4%B8%8B%E6%AC%A1%E6%8F%90%E4%BA%A4%E6%8A%A5%E9%94%99/"/>
    <id>https://larkkkkkkk.github.io/2024/10/08/Hexo%E5%8D%9A%E5%AE%A2%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%E4%B8%8B%E6%AC%A1%E6%8F%90%E4%BA%A4%E6%8A%A5%E9%94%99/</id>
    <published>2024-10-08T13:19:53.000Z</published>
    <updated>2024-10-08T13:20:28.730Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="Hexo博客" scheme="https://Larkkkkkkk.github.io/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客关闭窗口下次提交报错</title>
    <link href="https://larkkkkkkk.github.io/2024/10/08/%E5%8D%9A%E5%AE%A2%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%E4%B8%8B%E6%AC%A1%E6%8F%90%E4%BA%A4%E6%8A%A5%E9%94%99/"/>
    <id>https://larkkkkkkk.github.io/2024/10/08/%E5%8D%9A%E5%AE%A2%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%E4%B8%8B%E6%AC%A1%E6%8F%90%E4%BA%A4%E6%8A%A5%E9%94%99/</id>
    <published>2024-10-08T13:19:53.000Z</published>
    <updated>2024-10-08T13:26:26.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-出现原因"><a href="#1-出现原因" class="headerlink" title="1.出现原因"></a>1.出现原因</h1><p>我直接关闭了我提交博客的git窗口，导致下次hexo d的时候提示：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202410082123510.png" alt="image-20241008212321429" style="zoom:67%;"></p><h1 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h1><ul><li>1.根据git命令行进入hexo博客所在目录：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202410082124053.png" alt="image-20241008212433009"></p><ul><li>2.根据<strong>git status</strong>命令查看当前仓库的状态：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202410082124964.png" alt="image-20241008212448913"></p><ul><li>3.根据<strong>git reset –hard</strong>命令重置仓库状态，但是有可能会丢失未提交的更改[谨慎使用]</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202410082125972.png" alt="image-20241008212538938"></p><ul><li>4.重新<strong>hexo g</strong>和<strong>hexo d</strong>查看：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202410082126327.png" alt="image-20241008212601285"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-出现原因&quot;&gt;&lt;a href=&quot;#1-出现原因&quot; class=&quot;headerlink&quot; title=&quot;1.出现原因&quot;&gt;&lt;/a&gt;1.出现原因&lt;/h1&gt;&lt;p&gt;我直接关闭了我提交博客的git窗口，导致下次hexo d的时候提示：&lt;br&gt;&lt;img src=&quot;https:
      
    
    </summary>
    
    
    
      <category term="Hexo博客" scheme="https://Larkkkkkkk.github.io/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>关于创建表的主键ID问题</title>
    <link href="https://larkkkkkkk.github.io/2024/09/02/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%9A%84%E4%B8%BB%E9%94%AEID%E9%97%AE%E9%A2%98/"/>
    <id>https://larkkkkkkk.github.io/2024/09/02/%E5%85%B3%E4%BA%8E%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%9A%84%E4%B8%BB%E9%94%AEID%E9%97%AE%E9%A2%98/</id>
    <published>2024-09-02T08:16:17.000Z</published>
    <updated>2024-09-02T08:27:55.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-问题提出"><a href="#0-问题提出" class="headerlink" title="0.问题提出"></a>0.问题提出</h1><p>关于创建xx数据库表，主键id的取值问题：如果自增可能会出现分库分表的麻烦，但是分库分表如果使用分布式id也有对应的缺点。因此，本文从①不分库分表②分库分表两个方面考虑</p><h1 id="1-数据库自增ID"><a href="#1-数据库自增ID" class="headerlink" title="1.数据库自增ID"></a>1.数据库自增ID</h1><ul><li>形式：使用数据库的id自增策略(Mysql的auto_increment)</li><li>优点：比较简单，天然有序</li><li>缺点：存在数量泄露，并发性能较差，数据库一旦故障就无法使用</li><li>解决方案：</li></ul><h2 id="1-1-数据库水平拆分"><a href="#1-1-数据库水平拆分" class="headerlink" title="1.1 数据库水平拆分"></a>1.1 数据库水平拆分</h2><p>==每个数据库设置①不同的初始值和②相同的自增步长==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202409021625269.png" alt="image-20240902162503205"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202409021625368.png" alt="img"></p><p>如图所示，这样可以保证DB123生成的ID是不冲突的，但是如果<strong>扩容，</strong>DB4数据库的话就没有初始值。</p><p>因此解决方案：</p><p>①根据扩容考虑决定步长，可以让多个数据库之间有空隙数字，可以扩容</p><p>②在其他未标记去扩容</p><h2 id="1-2-批量缓存自增ID"><a href="#1-2-批量缓存自增ID" class="headerlink" title="1.2 批量缓存自增ID"></a>1.2 批量缓存自增ID</h2><p>==<strong>其实就是给数据库一批ID，不管多个DB之间的是否联系和连续</strong>，可能会出现多个数据库内连续，外不连续==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202409021625375.png" alt="image-20240902162544339"></p><p>方案一步长的问题不好考虑，那我干脆一台机器分配，我分配的话肯定不会出现没法扩充，只是没办法保证多个数据库之间的ID是连续的。我DB4数据库来了，我可能忘了我就给他500-599的。</p><h2 id="1-3-Redis生成ID"><a href="#1-3-Redis生成ID" class="headerlink" title="1.3 Redis生成ID"></a>1.3 Redis生成ID</h2><ul><li>核心思路：Redis所有命令操作都是单线程的[本身提供像incr/increby这样的自增原子命令，能够保证Redis生成的ID唯一且有序]</li><li>优点：①不依赖数据库，灵活方便；②性能优于数据库；③数字天然有序</li><li>缺点：需要引入新的组件，增加系统复杂度；—》可以搭建redis集群提高吞吐量</li><li>适合场景：适合Redis生成每天从0开始的流水号。比如：订单号=日期+当前自增长号</li></ul><h1 id="2-UUID"><a href="#2-UUID" class="headerlink" title="2.UUID"></a>2.UUID</h1><ul><li><p>形式：32个十六进制数字一共是128位【8-4-4-4-12】</p></li><li><p>优点：不是有序的，安全性更高</p></li><li><p>缺点：</p><p>①不是有序的，所以做主键的话innodb聚集索引内存消耗大，读写效率低；</p><p>②32个数字长度大，导致innodb叶子节点存储过大；</p><p>③因为无序，查找效率低下</p></li></ul><h1 id="3-雪花算法"><a href="#3-雪花算法" class="headerlink" title="3.雪花算法"></a>3.雪花算法</h1><ul><li>形式：最多长度为19一共是64位【1个64bit字节的整数】</li></ul><p>​    第1个bit位：保留位，<strong>无实际作用</strong></p><p>​    第2-42的bit位：这41位表示<strong>时间戳</strong>，精确到毫秒级别</p><p>​    第43-52的bit位：这10位表示专门负责生产ID的<strong>工作机器的id</strong></p><p>​    第53-64的bit位：这12位表示<strong>序列号</strong>，也就是1毫秒内可以生成2 12 2^{12}2 </p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202409021627778.png" alt="image-20240902162710723"></p><ul><li><p>优点：</p><p>①整体上按照时间趋势增加，后续插入索引树的性能较好；</p><p>②整个分布式系统不会发生ID碰撞；</p><p>③本地生成，且不依赖数据库，没有网络消耗</p></li><li><p>缺点：</p><p>①强依赖时间容易发生时种回拨【Map存储&lt;机器ID,max_id&gt;服务器出故障就从max_id重新生成】</p></li></ul><p><img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/N8IQbMvzOoFl3ux2MkIcgBj4nud/?preview_type=16" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-问题提出&quot;&gt;&lt;a href=&quot;#0-问题提出&quot; class=&quot;headerlink&quot; title=&quot;0.问题提出&quot;&gt;&lt;/a&gt;0.问题提出&lt;/h1&gt;&lt;p&gt;关于创建xx数据库表，主键id的取值问题：如果自增可能会出现分库分表的麻烦，但是分库分表如果使用分布式id也
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>XXL-Job分布式任务调度</title>
    <link href="https://larkkkkkkk.github.io/2024/08/29/XXL-Job%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    <id>https://larkkkkkkk.github.io/2024/08/29/XXL-Job%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</id>
    <published>2024-08-29T06:39:42.000Z</published>
    <updated>2024-11-21T03:39:45.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-提出场景"><a href="#1-提出场景" class="headerlink" title="1.提出场景"></a>1.提出场景</h1><p>目前，我们的定时任务都是基于SpringTask来实现的。但是SpringTask存在一些问题：</p><ul><li>当微服务多实例部署时，定时任务会被执行多次。而事实上我们只需要这个任务被执行一次即可。</li><li>我们除了要定时创建表，还要定时持久化Redis数据到数据库，我们希望这多个定时任务能够按照<strong>顺序依次执行</strong>，SpringTask无法控制任务顺序(×)</li></ul><p>不仅仅是SpringTask，其它单机使用的定时任务工具，都无法实现像这种任务执行者的调度、任务执行顺序的编排、任务监控等功能。这些功能必须要用到分布式任务调度组件。</p><h1 id="2-原理-统一管理"><a href="#2-原理-统一管理" class="headerlink" title="2.原理[统一管理]"></a>2.原理[统一管理]</h1><p>我们先来看看普通定时任务的实现原理，一般定时任务中会有两个组件：</p><ul><li>任务：要执行的代码</li><li>任务触发器：基于定义好的规则触发任务</li></ul><p>因此在多实例部署的时候，每个启动的服务实例都会有自己的<strong>任务触发器</strong>，这样就会导致各个实例各自运行，无法统一控制：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301715226.png" alt="image-20240830171522168"></p><p>如果我们想统一控制各服务实例的任务执行和调度—&gt;<strong>统一控制[统一出发、统一调度]</strong></p><p>事实上，大多数的分布式任务调度组件都是这样做的：</p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20240830172305957.png" alt="image-20240830172305858" style="zoom:67%;"><p>这样一来，具体哪个任务该执行，什么时候执行，交给哪个应用实例来执行，全部都有统一的任务调度服务来统一控制。并且执行过程中的任务结果还可以通过回调接口返回，让我们方便的查看任务执行状态、执行日志。这样的服务就是<strong>分布式调度服务</strong></p><h1 id="3-技术对比"><a href="#3-技术对比" class="headerlink" title="3.技术对比"></a>3.技术对比</h1><p>能够实现分布式任务调度的技术有很多，常见的有：【越往右越牛逼】</p><table><thead><tr><th align="left"></th><th align="left"><strong>Quartz</strong></th><th align="left"><strong>XXL-Job</strong></th><th align="left"><strong>SchedulerX</strong></th><th align="left"><strong>PowerJob</strong></th></tr></thead><tbody><tr><td align="left"><strong>定时类型</strong></td><td align="left">CRON</td><td align="left">频率、间隔、CRON</td><td align="left">频率、间隔、CRON、OpenAPI</td><td align="left">频率、间隔、CRON、OpenAPI</td></tr><tr><td align="left"><strong>任务类型</strong></td><td align="left">Java</td><td align="left">多语言脚本</td><td align="left">多语言脚本</td><td align="left">多语言脚本</td></tr><tr><td align="left"><strong>任务调度方式</strong></td><td align="left">随机</td><td align="left">单机、分片</td><td align="left">单机、广播、Map、MapReduce</td><td align="left">单机、广播、分片、Map、MapReduce</td></tr><tr><td align="left"><strong>管理控制台</strong></td><td align="left">无</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left"><strong>日志白屏</strong></td><td align="left">无</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left"><strong>报警监控</strong></td><td align="left">无</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left"><strong>工作流</strong></td><td align="left">无</td><td align="left">有限</td><td align="left">支持</td><td align="left">支持</td></tr></tbody></table><p>其中：</p><ul><li>Quartz由于功能相对比较落后，现在已经很少被使用了。</li><li>SchedulerX是阿里巴巴的云产品，收费。</li><li>PowerJob是阿里员工自己开源的一个组件，功能非常强大，不过目前市值占比还不高，还需要等待市场检验。</li><li>XXL-JOB：开源免费，功能虽然不如PowerJob，不过目前市场占比最高，稳定性有保证。</li></ul><p>扩展：多语言脚本–通过xxl-job平台，新增调度任务时候可以选择任务的运行模式【使用不同脚本语言编写任务】</p><h1 id="———–XXL-Job———–"><a href="#———–XXL-Job———–" class="headerlink" title="==———–XXL-Job———–=="></a>==———–XXL-Job———–==</h1><h1 id="1-XXL-Job介绍"><a href="#1-XXL-Job介绍" class="headerlink" title="1.XXL-Job介绍"></a>1.XXL-Job介绍</h1><ul><li><p>官方地址：<a href="https://www.xuxueli.com/xxl-job/" target="_blank" rel="noopener">https://www.xuxueli.com/xxl-job/</a></p></li><li><p>XXL-JOB的运行原理和架构如图：</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291656371.png" alt="image-20240829165652242"></p><p>XXL-JOB分为两部分：</p><ul><li><strong>执行器</strong>：我们的服务引入一个XXL-JOB的依赖，就可以通过配置创建一个执行器。负责与XXL-JOB调度中心交互，执行本地任务。</li><li><strong>调度中心</strong>：一个独立服务，负责管理执行器、管理任务、任务执行的调度、任务结果和日志收集。</li></ul><p>其中，我们可以打开xxl-job页面：</p><ul><li>页面：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291654151.png" alt="image-20240829165442027"><h1 id="2-XXL-Job部署-调度中心"><a href="#2-XXL-Job部署-调度中心" class="headerlink" title="2.XXL-Job部署[调度中心]"></a>2.XXL-Job部署[调度中心]</h1><p>自己部署，分为两步：</p><ul><li>运行初始化SQL，创建数据库表</li><li>利用Docker命令，创建并运行容器</li></ul><h2 id="2-1-创建数据库表"><a href="#2-1-创建数据库表" class="headerlink" title="2.1 创建数据库表"></a>2.1 创建数据库表</h2><p>sql语句在对应github文件夹下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301738464.png" alt="image-20240830173817398"></p><h2 id="2-2-Docker部署"><a href="#2-2-Docker部署" class="headerlink" title="2.2 Docker部署"></a>2.2 Docker部署</h2><p>docker命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-e PARAMS&#x3D;&quot;--spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.150.101:3306&#x2F;xxl_job?Unicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8 \</span><br><span class="line">--spring.datasource.username&#x3D;root \</span><br><span class="line">--spring.datasource.password&#x3D;123&quot; \</span><br><span class="line">--restart&#x3D;always \</span><br><span class="line">-p 28080:8080 \</span><br><span class="line">-v xxl-job-admin-applogs:&#x2F;data&#x2F;applogs \</span><br><span class="line">--name xxl-job-admin \</span><br><span class="line">-d \</span><br><span class="line">xuxueli&#x2F;xxl-job-admin:2.3.0</span><br></pre></td></tr></table></figure><h1 id="3-XXL-Job实战"><a href="#3-XXL-Job实战" class="headerlink" title="3.XXL-Job实战"></a>3.XXL-Job实战</h1><h2 id="3-1-需求"><a href="#3-1-需求" class="headerlink" title="3.1 需求"></a>3.1 需求</h2><p>每10s打印一次hello…</p><h2 id="3-2-实现步骤"><a href="#3-2-实现步骤" class="headerlink" title="3.2 实现步骤"></a>3.2 实现步骤</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291701420.png" alt="image-20240829170153373"></p><h3 id="3-2-1-引入xxl-job依赖-微服务"><a href="#3-2-1-引入xxl-job依赖-微服务" class="headerlink" title="3.2.1 引入xxl-job依赖(微服务)"></a>3.2.1 引入xxl-job依赖(微服务)</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291706253.png" alt="image-20240829170654201"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--xxl-job--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.xuxueli&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xxl-job-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-yml配置xxl-job-微服务"><a href="#3-2-2-yml配置xxl-job-微服务" class="headerlink" title="3.2.2 yml配置xxl-job(微服务)"></a>3.2.2 yml配置xxl-job(微服务)</h3><ul><li>配置文件内容【nacos共享文件地址】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291709492.png" alt="image-20240829170954454"></p><ul><li>配置文件【因为我们使用nacos配置，所以需要bootstrap.yml配置nacos共享文件地址】</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291713913.png" alt="image-20240829171353854" style="zoom:67%;"><ul><li>配置类</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291720342.png" alt="image-20240829172008280" style="zoom:67%;"><h3 id="3-2-3-配置执行器类–XxlJobConfig-微服务"><a href="#3-2-3-配置执行器类–XxlJobConfig-微服务" class="headerlink" title="3.2.3 配置执行器类–XxlJobConfig(微服务)"></a>3.2.3 配置执行器类–XxlJobConfig(微服务)</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291721532.png" alt="image-20240829172105476" style="zoom:67%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- adminAddress：调度中心地址，天机学堂中就是填虚拟机地址</span><br><span class="line">- appname：微服务名称</span><br><span class="line">- ip和port：当前执行器的ip和端口，无需配置，自动获取</span><br><span class="line">- accessToken：访问令牌，在调度中心中配置令牌，所有执行器访问时都必须携带该令牌，否则无法访问【修改虚拟机的&#x2F;usr&#x2F;local&#x2F;src&#x2F;xxl-job&#x2F;application.properties文件中，修改xxl.job.accessToken属性，然后重启XXL-JOB即可】</span><br><span class="line">- logPath：任务运行日志的保存目录</span><br><span class="line">- logRetentionDays：日志最长保留时长</span><br></pre></td></tr></table></figure><h3 id="3-2-4-配置执行器和任务-页面"><a href="#3-2-4-配置执行器和任务-页面" class="headerlink" title="3.2.4 配置执行器和任务(页面)"></a>3.2.4 配置执行器和任务(页面)</h3><ul><li>新建执行器【微服务名称和yml配置一致】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291725418.png" alt="image-20240829172534332"></p><ul><li>新建任务【JobHandler一定要和方法@XXlJob内容一致】</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291732342.png" alt="image-20240829173240249" style="zoom:150%;"><h3 id="3-2-5-创建方法–添加-XxlJob注解-微服务"><a href="#3-2-5-创建方法–添加-XxlJob注解-微服务" class="headerlink" title="3.2.5 创建方法–添加@XxlJob注解(微服务)"></a>3.2.5 创建方法–添加@XxlJob注解(微服务)</h3><p><strong>JobHandler一定要和方法@XXlJob内容一致</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291737492.png" alt="image-20240829173755449"></p><h2 id="3-2-6-启动测试-页面"><a href="#3-2-6-启动测试-页面" class="headerlink" title="3.2.6 启动测试(页面)"></a>3.2.6 启动测试(页面)</h2><ul><li>启动本地微服务，会发现网页端执行器变化</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291734309.png" alt="image-20240829173441228"></p><ul><li>启动任务</li></ul><p>【想要测试的话也可以手动执行一次任务，但是要设置好调度策略】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291739478.png" alt="image-20240829173930400"></p><p>也可以在页面看到日志：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291740088.png" alt="image-20240829174046001"></p><h1 id="4-XXL-Job任务分片-不同部署处理不同数据"><a href="#4-XXL-Job任务分片-不同部署处理不同数据" class="headerlink" title="4.XXL-Job任务分片[不同部署处理不同数据]"></a>4.XXL-Job任务分片[不同部署处理不同数据]</h1><h2 id="3-1-原理"><a href="#3-1-原理" class="headerlink" title="3.1 原理"></a>3.1 原理</h2><p>刚才定义的定时持久化任务，通过while死循环，不停的查询数据，直到把所有数据都持久化为止。这样如果数据量达到数百万，交给一个任务执行器来处理会耗费非常多时间—-&gt;<strong>实例多个部署</strong>，这样就会有多个执行器并行执行(但是多个执行器执行相同代码，都从第一页开始也会重复处理)—-&gt;<strong>任务分片</strong>【<strong>分片查询</strong>】</p><p>举例[类似于<strong>发牌</strong>]：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301643407.png" alt="image-20240830164322338"></p><p>最终，每个执行器处理的数据页情况：</p><ul><li>执行器1：处理第1、4、7、10、13、…页数据</li><li>执行器2：处理第2、5、8、11、14、…页数据</li><li>执行器3：处理第3、6、9、12、15、…页数据</li></ul><p>要想知道每一个执行器执行哪些页数据，只要弄清楚两个关键参数即可：</p><ul><li>起始页码(1,2,3)：pageNo【执行器编号是多少，起始页码就是多少】</li><li>下一页的跨度(步长3)：step【执行器有几个，跨度就是多少。也就是说你要跳过别人读取过的页码，类似于分布式ID的步长】</li></ul><p>因此，现在的关键就是获取两个数据：</p><ul><li>执行器编号</li><li>执行器数量</li></ul><p>这两个参数XXL-JOB作为任务调度中心，肯定是知道的，而且也提供了API帮助我们获取：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301647099.png" alt="image-20240830164735039"></p><p>这里的分片序号其实就是执行器序号，不过是从0开始，那我们只要对序号+1，就可以作为起始页码了</p><h2 id="3-2-业务优化"><a href="#3-2-业务优化" class="headerlink" title="3.2 业务优化"></a>3.2 业务优化</h2><p>根据实际情况，分成多个机器[这个用例，分片1,2,3；步长为1]</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301649455.png" alt="image-20240830164953405"></p><h2 id="3-3-引发问题解决方案"><a href="#3-3-引发问题解决方案" class="headerlink" title="3.3 引发问题解决方案"></a>3.3 引发问题解决方案</h2><p>使用xxl-job定时每月初进行持久化：</p><p>①根据计算上个月时间创建上赛季mysql表</p><p>②根据查询出来上赛季redis数据，数据库新表名通过mp动态表名插件(本质是一个拦截器，在与mapper数据库接触过程中通过threadlocal更改数据库名)】然后查询数据<br>③根据非阻塞语句del删除redis上赛季数据—但是我考虑使用分片，这样导致分片1执行完异步执行删除，但是分片2执行完数据好像又回来了【针对②查询结果分页用xxlJob分片，log查日志没解决，我就打断点发现是分片次数问题，我就redis添加一个总数，一个分片执行次数，然后将删除逻辑放在一个新的定时任务，判断总数==分片执行次数，符合的情况才删除】</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-提出场景&quot;&gt;&lt;a href=&quot;#1-提出场景&quot; class=&quot;headerlink&quot; title=&quot;1.提出场景&quot;&gt;&lt;/a&gt;1.提出场景&lt;/h1&gt;&lt;p&gt;目前，我们的定时任务都是基于SpringTask来实现的。但是SpringTask存在一些问题：&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>海量数据存储策略</title>
    <link href="https://larkkkkkkk.github.io/2024/08/29/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%AD%96%E7%95%A5/"/>
    <id>https://larkkkkkkk.github.io/2024/08/29/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%AD%96%E7%95%A5/</id>
    <published>2024-08-29T06:39:05.000Z</published>
    <updated>2024-08-29T07:22:04.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-海量数据存储策略-四种"><a href="#1-海量数据存储策略-四种" class="headerlink" title="1.海量数据存储策略[四种]"></a>1.海量数据存储策略[四种]</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291043810.png" alt="image-20240829104320737"></p><h2 id="1-1-分区"><a href="#1-1-分区" class="headerlink" title="1.1 分区"></a>1.1 分区</h2><p> <strong>表分区（Partition）</strong>是一种数据存储方案，可以解决单表数据较多的问题【MySQL5.1开始支持表分区功能】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291443650.png" alt="image-20240829144303567"></p><p>如果表数据过多 —&gt; 文件体积非常大 —&gt; 文件跨越多个磁盘分区 —&gt; 数据检索时的速度就会非常慢  —&gt;【Mysql5.1引入<strong>表分区</strong>】按照某种规则，把表数据对应的ibd文件拆分成多个文件来存储。</p><ul><li><p>从物理上来看，一张表的数据被拆到多个表文件存储了【<strong>多张表</strong>】</p></li><li><p>从逻辑上来看，他们对外表现是一张表【一张表】 — CRUD不会变化，只是底层MySQL处理上会有变更，检索时可以只检索某个文件就可以</p></li></ul><p>例如，我们的历史榜单数据，可以按照赛季切分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291447024.png" alt="image-20240829144756927"></p><p>此时，赛季榜单表的磁盘文件就被分成了两个文件，但逻辑上还是一张表。CRUD不会变化，只是底层MySQL处理上会有变更，检索时可以只检索某个文件就可以</p><ul><li><p>表分区的好处：</p><ul><li><p>1.可以存储更多的数据，突破单表上限。甚至可以存储到不同磁盘，突破磁盘上限</p></li><li><p>2.查询时可以根据规则只检索某一个文件，提高查询效率</p></li><li><p>3.数据统计时，可以多文件并行统计，最后汇总结果，提高统计效率【分而治之，各自统计】</p></li><li><p>4.对于一些历史数据，如果不需要时，可以直接删除分区文件，提高删除效率</p></li></ul></li><li><p>表分区的方式：【<strong>对数据做水平拆分</strong>】</p><ul><li>Range分区：按照指定字段的取值范围分区 –保单表，根据1-10，11-20这样10个为一组区分</li><li>List分区：按照指定字段的枚举值分区【必须提前制定所有分区值，否则会因为找不到报错】–保单表，根据保单是车险财/非车进行区分</li><li>Hash分区：按照字段做hash运算后分区【字段一般是对数值类型】 –保单表，根据保单表%hash运算进行区分</li><li>Key分区：按照指定字段的值做运算结果分区【不限定字段类型】  –保单表，根据保单号%9进行区分</li></ul></li></ul><h2 id="1-2-分表"><a href="#1-2-分表" class="headerlink" title="1.2 分表"></a>1.2 分表</h2><p>开发者自己对表的处理，与数据库无关</p><ul><li><p>从物理上来看，一张表的数据被拆到多个表文件存储了【<strong>多张表</strong>】</p></li><li><p>从逻辑上来看，【<strong>多张表</strong>】  — CRUD会变化，需要考虑取哪张表做数据处理</p></li></ul><p>在开发中我们很多情况下业务需求复杂，更看重分表的灵活性。因此，我们大多数情况下都会选择分表方案。</p><ul><li><p>分表的好处：</p><ul><li><p>1.拆分方式更加灵活【可以水平也可以垂直】</p></li><li><p>2.可以解决单表字段过多问题【垂直分表，分在多个表】</p></li></ul></li><li><p>分表的坏处：</p><ul><li>1.CRUD需要自己判断访问哪张表</li><li>2.垂直拆分还会导致事务问题及数据关联问题：【原本一张表的操作，变为多张表操作，要考虑长事务情况】</li></ul></li></ul><h3 id="1-2-1-水平分表"><a href="#1-2-1-水平分表" class="headerlink" title="1.2.1 水平分表"></a>1.2.1 水平分表</h3><p>例如，对于赛季榜单，我们可以按照赛季拆分为多张表，<strong>每一个赛季一张新的表</strong>。如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291501632.png" alt="image-20240829150144571"></p><p>这种方式就是水平分表，<strong>表结构不变</strong>，仅仅是每张表<strong>数据不同</strong>。查询赛季1，就找第一张表。查询赛季2，就找第二张表。</p><h3 id="1-2-2-垂直分表"><a href="#1-2-2-垂直分表" class="headerlink" title="1.2.2 垂直分表"></a>1.2.2 垂直分表</h3><p>如果一张表的字段非常多(比如达到30个以上，这样的表我们称为<strong>宽表</strong>)。宽表由于字段太多，单行数据体积就会非常大，虽然数据不多，但可能表体积也会非常大！从而影响查询效率。</p><p>例如一个用户信息表，除了用户基本信息，还包含很多其它功能信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291502976.png" alt="image-20240829150258884"></p><h2 id="1-3-分库-垂直分库"><a href="#1-3-分库-垂直分库" class="headerlink" title="1.3 分库[垂直分库]"></a>1.3 分库[垂直分库]</h2><p>无论是分区，还是分表，我们刚才的分析都是建立在<strong>单个数据库</strong>的基础上。但是单个数据库也存在一些问题：</p><ul><li>单点故障问题：数据库发生故障，整个系统就会瘫痪【鸡蛋都在一个篮子里】</li><li>单库的性能瓶颈问题：单库受服务器限制，其网络带宽、CPU、连接数都有瓶颈【性能有限制】</li><li>单库的存储瓶颈问题：单库的磁盘空间有上限，如果磁盘过大，数据检索的速度又会变慢【存储有限制】</li></ul><p>综上，在大型系统中，我们除了要做①分表、还需要对数据做②分库—&gt;建立综合集群。</p><ul><li><p>优点：【解决了单个数据库的三大问题】</p><ul><li><p>1.解决了海量数据存储问题，突破了单机存储瓶颈</p></li><li><p>2.提高了并发能力，突破了单机性能瓶颈</p></li><li><p>3.避免了单点故障</p></li></ul></li><li><p>缺点：</p><ul><li><p>1.成本非常高【要多个服务器，多个数据库】</p></li><li><p>2.数据聚合统计比较麻烦【因为牵扯多个数据库，有些语句会很麻烦】</p></li><li><p>3.主从同步的一致性问题【主数据库往从数据库更新，会有不可取消的延误时间，只能通过提高主从数据库网络带宽，机器性能等操作(↓)延误时间】</p></li><li><p>4.分布式事务问题【因为涉及多个数据库多个表，使用seata分布式事务可以解决】</p></li></ul></li></ul><p>微服务项目中，我们会按照项目模块，每个微服务使用独立的数据库，因此每个库的表是不同的</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291515133.png" alt="image-20240829151509972"></p><h2 id="1-4-集群-主写从读"><a href="#1-4-集群-主写从读" class="headerlink" title="1.4 集群[主写从读]"></a>1.4 集群[主写从读]</h2><p>[保证单节点的高可用性]给数据库建立主从集群，主节点向从节点同步数据，两者结构一样</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291516533.png" alt="image-20240829151628463"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-海量数据存储策略-四种&quot;&gt;&lt;a href=&quot;#1-海量数据存储策略-四种&quot; class=&quot;headerlink&quot; title=&quot;1.海量数据存储策略[四种]&quot;&gt;&lt;/a&gt;1.海量数据存储策略[四种]&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.gi
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂-积分系统</title>
    <link href="https://larkkkkkkk.github.io/2024/08/26/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E7%A7%AF%E5%88%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://larkkkkkkk.github.io/2024/08/26/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E7%A7%AF%E5%88%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-08-26T13:37:25.000Z</published>
    <updated>2024-10-24T06:45:46.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="—————-签到功能—————"><a href="#—————-签到功能—————" class="headerlink" title="==—————-签到功能—————-=="></a>==—————-签到功能—————-==</h1><p>为了激励东林学子学习，可以设定一个学习积分的排行榜。优秀的学子可以给予优惠券</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271127834.png" alt="image-20240827112718773"></p><p>这个页面信息比较密集，从上往下来看分三部分：</p><ul><li>顶部：当前用户在榜单中的信息</li><li>中部：签到表</li><li>下部：分为左右两侧<ul><li>左侧：用户当天获取的积分明细</li><li>右侧：榜单</li></ul></li></ul><h2 id="准备阶段—分析业务流程"><a href="#准备阶段—分析业务流程" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>签到最核心的包含两个要素：</p><ul><li>谁签到：用户id</li><li>什么时候签的：签到日期</li></ul><p>同时要考虑一些功能要素，比如：</p><ul><li>补签功能，所以要有补签标示</li><li>按照年、月统计的功能：所以签到日期可以按照年、月、日分离保存</li></ul><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271132925.png" alt="image-20240827113203866"></p><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sign_record`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`year`</span> <span class="keyword">year</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'签到年份'</span>,</span><br><span class="line">  <span class="string">`month`</span> <span class="built_in">tinyint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'签到月份'</span>,</span><br><span class="line">  <span class="string">`date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'签到日期'</span>,</span><br><span class="line">  <span class="string">`is_backup`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否补签'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'签到记录表'</span>;</span><br></pre></td></tr></table></figure><h2 id="准备阶段—Mybatis-Plus代码生成"><a href="#准备阶段—Mybatis-Plus代码生成" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><p>无【基于redis做的，没有mysql数据库表】</p><h2 id="准备阶段–类型枚举"><a href="#准备阶段–类型枚举" class="headerlink" title="准备阶段–类型枚举"></a>准备阶段–类型枚举</h2><h2 id="准备阶段–接口统计"><a href="#准备阶段–接口统计" class="headerlink" title="准备阶段–接口统计"></a>准备阶段–接口统计</h2><p>回到个人积分页面，在页面中部有一个签到表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271129911.png" alt="image-20240827112902867"></p><p>可以看到这就是一个日历，对应了每一天的签到情况。日历中当天的日期会高亮显示为《打卡》状态，点击即可完成当日打卡，服务端自然要记录打卡情况。</p><p>因此这里就有一个接口需要实现：<strong>①签到接口</strong></p><p>除此以外，可以看到本月第一天到今天为止的所有打卡日期也都高亮显示标记出来了。也就是说页面还需要知道本月到今天为止每一天的打卡情况。这样对于了一个接口：<strong>②查询本月签到记录</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271130545.png" alt="image-20240827113045503"></p><h2 id="准备阶段–redis的bitMap"><a href="#准备阶段–redis的bitMap" class="headerlink" title="准备阶段–redis的bitMap"></a>准备阶段–redis的bitMap</h2><h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h3><p>Redis 的 Bitmap（位图）是一种特殊的<strong>字符串数据类型</strong>，它利用字符串类型键（key）来存储一系列连续的二进制位（bits），每个位可以独立地表示一个布尔值（0 或 1）。这种数据结构非常适合用于存储和操作大量二值状态的数据，尤其在需要高效空间利用率和特定位操作场景中表现出色。</p><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><p>我们可以使用setbit getbit bitcount bitfield四个指令：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271002947.png" alt="image-20240827100228847"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 签到&#x2F;取消签到【给某人的某某年某某月为一个位图】 0就是偏移量【第一天】 1【1就是签到&#x2F;0是不签到】</span><br><span class="line">setbit YYYYMM:userId 0 1</span><br><span class="line"># 获取某一天【0是第一天】的签到情况</span><br><span class="line">getbit YYYYMM:userId 0 </span><br><span class="line"># 获取某时间段【第一天-第二十九天】内签到的总天数  ---是1的总数</span><br><span class="line">bitcount YYYYMM:userId 0 30</span><br><span class="line"># 获取某时间段【第一天-第二十天】签到的所有情况  u表示无符号&#x2F;i表示有符号 ---得到的是一个十进制数</span><br><span class="line">bitfield YYYYMM:userId get u21 0</span><br></pre></td></tr></table></figure><h3 id="3-bitMap扩展"><a href="#3-bitMap扩展" class="headerlink" title="3.bitMap扩展"></a>3.bitMap扩展</h3><blockquote><p>基础类型：Redis最基础的数据类型只有5种：String、List、Set、SortedSet、Hash【其它特殊数据结构大多都是基于以上5这种数据类型】</p></blockquote><p>BitMap基于String结构【String类型底层是SDS，会有一个字节数组用来保存数据。而Redis就提供了几个按位操作这个数组中数据的命令，实现了BitMap效果】</p><p>由于String类型的最大空间是512MB=2的31次幂个bit，因此可以存储的数据量级很大!!!【一个月才是31bit，四个字节】–&gt; ==<strong>bitMap扩容是8个字节一组</strong>==</p><h1 id="——–具体实现——–"><a href="#——–具体实现——–" class="headerlink" title="==——–具体实现——–=="></a>==——–具体实现——–==</h1><h1 id="1-签到"><a href="#1-签到" class="headerlink" title="1.签到"></a>1.签到</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在个人中心的积分页面，用户每天都可以签到一次，连续签到则有积分奖励，请实现签到接口，记录用户每天签到信息，方便做签到统计。</p><p>在个人中心的积分页面，用户每天都可以签到一次：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271156313.png" alt="image-20240827115636260"></p><p><strong>而在后台，要做的事情就是把BitMap中的与签到日期对应的bit位，设置为1</strong></p><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><ul><li><p>mysql设计：【占用空间大】</p><p>我们设计了签到功能对应的数据库表：sign_record[主键id，用户id，签到年月日，是否可以补签]。这张表的一条记录就是一个用户一次的登录记录。如果一个用户一年签到100次，那就是100条记录，如果有100w用户，就会产生一亿条记录。—-&gt;占用空间会越来越大</p></li><li><p>Redis设计：【只需要存储一个用户是否签到，0未签到，1签到】—&gt;使用<strong>bitMap</strong></p></li></ul><p>​        如果我们按月来统计用户签到信息，签到记为1，未签到记为0，就可以用一个长度为31位的二进制数来表示一个用户一个月的签到情况。最终效果如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271140072.png" alt="image-20240827114010026"></p><p>我们知道二进制是计算机底层最基础的存储方式了，其中的每一位数字就是计算机信息量的最小单位了，称之为bit，一个月最多也就 31 天，因此一个月的签到记录最多也就使用 31 bit 就能保存了，还不到 4 个字节【mysql数据库就要使用数百字节】</p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271158460.png" alt="image-20240827115840411"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271159112.png" alt="image-20240827115942060"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271159490.png" alt="image-20240827115949449"></p><ul><li>3.serviceimpl层</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271304884.png" alt="image-20240827130422747" style="zoom:200%;"><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：如何涉及签到的数据类型？为什么选redis的bitMap？怎么扩容的？一次扩充8位</li></ul><p>考虑签到只需要1/0，那就使用bitMap；然后YYMM:Userid就是一个bitMap【代表某人某年某月的登录】，一共设计31个bit位就可以代表一个月的签到数据；扩容的话是8位一组，一般一个月就是4组32位(最后一位暂时没有用)</p><ul><li>问题二：连续签到天数怎么计算？怎么从bitMap获取？怎么从后往前遍历？</li></ul><p>连续登录天数：从当前天从后往前算连续1的个数【一定是从后往前】；从后往前就用算出来的十进制数&amp;1做与运算【只关心最后一位结果】，然后右移十进制得到前面的一位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int count &#x3D; 0; &#x2F;&#x2F; 定义一个计数器</span><br><span class="line">for(&#x2F;*从后向前遍历签到记录中的每一个bit位*&#x2F;)&#123;</span><br><span class="line">    &#x2F;&#x2F; 判断是否是1</span><br><span class="line">    &#x2F;&#x2F; 如果是，则count++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271255804.png" alt="image-20240827125513753"></p><ul><li><p>问题三：怎么判断重复签到？</p><p><strong>利用setbit返回值的特性</strong></p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271256542.png" alt="image-20240827125629493"></p><ul><li><p>问题四：bitmap用哪些指令了？</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271305901.png" alt="image-20240827130515836" style="zoom:67%;"></li></ul><h1 id="2-查询我的本月签到记录"><a href="#2-查询我的本月签到记录" class="headerlink" title="2.查询我的本月签到记录"></a>2.查询我的本月签到记录</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在签到日历中，需要把本月(第一天-今天)的所有签到过的日期高亮显示。</p><p>因此我们必须把签到记录返回，具体来说就是每一天是否签到的数据。是否签到，就是0或1，刚好在前端0和1代表false和true，也就是签到或没签到。</p><p>因此，每一天的签到结果就是一个0或1的数字，我们最终返回的结果是一个0或1组成的数组，对应从本月第1天到今天为止每一天的签到情况。</p><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，最终的接口如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271307108.png" alt="image-20240827130734059"></p><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271307373.png" alt="image-20240827130758330"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271308920.png" alt="image-20240827130814871"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281448681.png" alt="image-20240828144807606"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：如何获取本月的登录记录？</p><p>根据bitfield指令可以获得本月等登录记录(0001…0111001)的十进制数字</p></li><li><p>问题二：如何转为二进制，并且统计转为byte数组？</p><p>第一种办法，十进制转为字符串二进制，然后二进制char的for循环遍历得到byte[①必须-‘0’才是数字1，不然是ascii码的48；②因为十进制不是32位，转出来也不是32位！！！]</p><p>第二种办法，按照统计连续天数的思路(10进制与1进行与运算，可以依次倒序取出所有的0/1，然后逆序一下就是结果)</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281446662.png" alt="image-20240828144627571"></p><h1 id="——————————————"><a href="#——————————————" class="headerlink" title="==——————————————=="></a>==——————————————==</h1><h1 id="—————-积分功能—————"><a href="#—————-积分功能—————" class="headerlink" title="==—————-积分功能—————-=="></a>==—————-积分功能—————-==</h1><ul><li>积分：用户在天机学堂网站的各种交互行为都可以产生积分，积分值与行为类型有关</li><li>学霸天梯榜：按照每个学员的总积分排序得到的排行榜，称为学霸天梯榜。排名前三的有奖励。天梯榜每个自然月为一个赛季，月初清零</li></ul><h2 id="准备阶段—分析业务流程-1"><a href="#准备阶段—分析业务流程-1" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><p>具体的积分获取细则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 签到规则</span><br><span class="line">连续7天奖励10分  连续14天 奖励20  连续28天奖励40分， 每月签到进度当月第一天重置【本篇文章的签到！！！！！！！】</span><br><span class="line"></span><br><span class="line">2. 学习规则</span><br><span class="line">每学习一小节，积分+10，每天获得上限50分</span><br><span class="line"></span><br><span class="line">3. 交互规则（有效交互数据参与积分规则，无效数据会被删除）</span><br><span class="line">- 写评价 积分+10 </span><br><span class="line">- 写问答 积分+5 每日获得上限为20分</span><br><span class="line">- 写笔记 积分+3 每次被采集+2 每日获得上限为20分</span><br></pre></td></tr></table></figure><p>用户获取积分的途径有5种：</p><ul><li>签到：在个人积分页面可以每日签到，每次签到得1分，连续签到有额外积分奖励。</li><li>学习：也就是看视频</li><li>写回答：就是给其他学员提问的问题回答，给回答做评论是没有积分的。</li><li>写笔记：就是学习的过程中记录公开的学习笔记，分享给所有人看。或者你的笔记被人点赞。</li><li>写评价：对你学习过的课程评价，可以获取积分。但课程只能评价一次。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408271127796.png" alt="image-20240827112705701"></p><p>这个页面信息比较密集，从上往下来看分三部分：</p><ul><li>顶部：当前用户在榜单中的信息</li><li>中部：签到表</li><li>下部：分为左右两侧<ul><li>左侧：用户当天获取的积分明细</li><li>右侧：榜单</li></ul></li></ul><h2 id="准备阶段—字段分析-1"><a href="#准备阶段—字段分析-1" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>积分记录的目的有两个：一个是统计用户当日某一种方式获取的积分是否达到上限；一个是统计积分排行榜。</p><p>要达成上述目的我们至少要记录下列信息：</p><ul><li>本次得到积分值</li><li>积分方式</li><li>获取积分时间</li><li>获取积分的人</li></ul><h2 id="准备阶段—ER图-1"><a href="#准备阶段—ER图-1" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281606612.png" alt="image-20240828160621560"></p><h2 id="准备阶段—表结构-1"><a href="#准备阶段—表结构-1" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;points_record&#96; (</span><br><span class="line">  &#96;id&#96; bigint NOT NULL AUTO_INCREMENT COMMENT &#39;积分记录表id&#39;,</span><br><span class="line">  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,</span><br><span class="line">  &#96;type&#96; tinyint NOT NULL COMMENT &#39;积分方式：1-课程学习，2-每日签到，3-课程问答， 4-课程笔记，5-课程评价&#39;,</span><br><span class="line">  &#96;points&#96; tinyint NOT NULL COMMENT &#39;积分值&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_user_id&#96; (&#96;user_id&#96;,&#96;type&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_create_time&#96; (&#96;create_time&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;41 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci ROW_FORMAT&#x3D;DYNAMIC COMMENT&#x3D;&#39;学习积分记录，每个月底清零&#39;;</span><br></pre></td></tr></table></figure><h2 id="准备阶段—Mybatis-Plus代码生成-1"><a href="#准备阶段—Mybatis-Plus代码生成-1" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20240828155811966.png" alt="image-20240828155811966" style="zoom:67%;"><h2 id="准备阶段–类型枚举-1"><a href="#准备阶段–类型枚举-1" class="headerlink" title="准备阶段–类型枚举"></a>准备阶段–类型枚举</h2><p>针对数据库的积分类型字段：设计成枚举类型</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281528541.png" alt="image-20240828152847450" style="zoom:80%;"><h2 id="准备阶段–接口统计-1"><a href="#准备阶段–接口统计-1" class="headerlink" title="准备阶段–接口统计"></a>准备阶段–接口统计</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281712470.png" alt="image-20240828171205430"></p><h1 id="——–具体实现——–-1"><a href="#——–具体实现——–-1" class="headerlink" title="==——–具体实现——–=="></a>==——–具体实现——–==</h1><h1 id="1-保存积分-MQ消费者"><a href="#1-保存积分-MQ消费者" class="headerlink" title="1.保存积分[MQ消费者]"></a>1.保存积分[MQ消费者]</h1><h2 id="1-原型图-2"><a href="#1-原型图-2" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>由积分规则可知，获取积分的行为多种多样，而且每一种行为都有自己的独立业务。而这些行为产生的时候需要保存一条积分明细到数据库。</p><p>我们显然不能要求其它业务的开发者在开发时帮我们新增一条积分记录，这样会导致原有业务与积分业务耦合。因此必须采用异步方式，将原有业务与积分业务解耦。如果有必要，甚至可以将积分业务抽离，作为独立微服务。</p><h2 id="2-设计数据库-2"><a href="#2-设计数据库-2" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-2"><a href="#3-业务逻辑图-2" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><ul><li>具体可以加分的业务发送MQ【用户id，获得的积分】</li><li>积分微服务通过MQ获取，具体业务处理</li><li>具体业务<ul><li>1.查看是哪个业务，是不是有积分上限</li><li>2.如果有积分上限，要看看今日获得积分情况：如果满了拉倒，如果没有计算出还可以加多少积分</li><li>3.加入积分</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281604047.png" alt="image-20240828160432982"></p><h2 id="4-接口分析-2"><a href="#4-接口分析-2" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><ul><li>使用MQ获得信息，然后添加</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281602752.png" alt="image-20240828160241699"></p><p>因此，我们需要为每一种积分行为定义一个不同的RoutingKey【用来分辨不同的业务，从而进行不同的业务处理】</p><h2 id="5-具体实现-2"><a href="#5-具体实现-2" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><h3 id="5-1-MQ发送者-获得积分的微服务"><a href="#5-1-MQ发送者-获得积分的微服务" class="headerlink" title="5.1 MQ发送者[获得积分的微服务]"></a>5.1 MQ发送者[获得积分的微服务]</h3><p>==获取到积分，发送MQ给积分微服务就行【加不加积分微服务自己负责】==</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281513730.png" alt="image-20240828151319644" style="zoom:67%;"><h3 id="5-2-MQ消费者-获取积分然后判断是否满足条件加入"><a href="#5-2-MQ消费者-获取积分然后判断是否满足条件加入" class="headerlink" title="5.2 MQ消费者[获取积分然后判断是否满足条件加入]"></a>5.2 MQ消费者[获取积分然后判断是否满足条件加入]</h3><p>==其他微服务学习获得积分(用户id，学习到的积分)—》积分微服务【内部判断是否上限，未上限的情况下加入到积分表】==</p><ul><li><p>MQ接受消息</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281556081.png" alt="image-20240828155632016" style="zoom:67%;"></li><li><p>积分微服务处理业务</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281557208.png" alt="image-20240828155720138"></p><ul><li>查询积分sql</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281557423.png" alt="image-20240828155747380"></p><h2 id="6-具体难点和亮点-2"><a href="#6-具体难点和亮点-2" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：MQ发送什么消息？怎么判断是啥业务？</p><p>签到，评论，点赞等操作都可以获得积分，然后可以通过MQ异步进行更新；只需要用户id和获得积分数就可以【加不加的上是积分微服务负责，不同交换机代表不同获取积分的业务】</p></li><li><p>问题二：怎么判断今日积分是否超标？–使用sum函数统计</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281521196.png" alt="image-20240828152104149"></p></li><li><p>问题三：积分怎么计算的?</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281553631.png" alt="image-20240828155323570"></p></li></ul><h1 id="2-查询今日积分情况"><a href="#2-查询今日积分情况" class="headerlink" title="2.查询今日积分情况"></a>2.查询今日积分情况</h1><h2 id="1-原型图-3"><a href="#1-原型图-3" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在个人中心，用户可以查看当天各种不同类型的已获得的积分和积分上限：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281607102.png" alt="image-20240828160730051"></p><p>可以看到，页面需要的数据：</p><ul><li>积分类型描述</li><li>今日已获取积分值</li><li>积分上限</li></ul><p>而且积分类型不止一个，所以结果应该是集合。</p><h2 id="2-设计数据库-3"><a href="#2-设计数据库-3" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-3"><a href="#3-业务逻辑图-3" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>就是根据数据group by type分别取出类型和对应的sum(points)</p><h2 id="4-接口分析-3"><a href="#4-接口分析-3" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>另外，这个请求是查询当前用户的积分信息，所以只需要知道当前用户即可， 无需传参。</p><p>综上，接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281607316.png" alt="image-20240828160755273"></p><h2 id="5-具体实现-3"><a href="#5-具体实现-3" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281700167.png" alt="image-20240828170037116"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281700133.png" alt="image-20240828170044098"></p><ul><li>3.serviceimpl层</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281702046.png" alt="image-20240828170239984" style="zoom: 80%;"><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281703067.png" alt="image-20240828170348013"></p><h2 id="6-具体难点和亮点-3"><a href="#6-具体难点和亮点-3" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：怎么获取当前用户不同积分类型的签到积分</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281640305.png" alt="image-20240828164038259"></p><h1 id="——————————————-1"><a href="#——————————————-1" class="headerlink" title="==——————————————=="></a><strong>==——————————————==</strong></h1><h1 id="—————排行榜功能—————"><a href="#—————排行榜功能—————" class="headerlink" title="==—————排行榜功能—————=="></a>==—————排行榜功能—————==</h1><h2 id="准备阶段—分析业务流程-2"><a href="#准备阶段—分析业务流程-2" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><p>顶部展示的当前用户在榜单中的信息，其实也属于排行榜信息的一部分。因为排行榜查出来了，当前用户是第几名，积了多少分也就知道了。</p><p>当我们点击更多时，会进入历史榜单页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281713741.png" alt="image-20240828171350690"></p><h2 id="准备阶段—字段分析-2"><a href="#准备阶段—字段分析-2" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>排行榜是分赛季的，而且页面也需要查询到历史赛季的列表。因此赛季也是一个实体，用来记录每一个赛季的信息。当然赛季信息非常简单：</p><ul><li>赛季名称</li><li>赛季开始时间</li><li>赛季结束时间</li></ul><p>排行榜也不复杂，核心要素包括：</p><ul><li>用户id</li><li>本赛季当前积分</li><li>本赛季当前排名</li></ul><p>当然，由于要区分赛季，还应该关联赛季信息：</p><ul><li>赛季id【关联赛季表】</li></ul><h2 id="准备阶段—ER图-2"><a href="#准备阶段—ER图-2" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281747829.png" alt="image-20240828174731750"></p><h2 id="准备阶段—表结构-2"><a href="#准备阶段—表结构-2" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><ul><li>赛季表</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281716469.png" alt="image-20240828171652429"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;points_board_season&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT COMMENT &#39;自增长id，season标示&#39;,</span><br><span class="line">  &#96;name&#96; varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT &#39;赛季名称，例如：第1赛季&#39;,</span><br><span class="line">  &#96;begin_time&#96; date NOT NULL COMMENT &#39;赛季开始时间&#39;,</span><br><span class="line">  &#96;end_time&#96; date NOT NULL COMMENT &#39;赛季结束时间&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;13 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci ROW_FORMAT&#x3D;DYNAMIC;</span><br></pre></td></tr></table></figure><ul><li>排行表</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281720384.png" alt="image-20240828172027344"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;points_board&#96; (</span><br><span class="line">  &#96;id&#96; bigint NOT NULL COMMENT &#39;榜单id&#39;,</span><br><span class="line">  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;学生id&#39;,</span><br><span class="line">  &#96;points&#96; int NOT NULL COMMENT &#39;积分值&#39;,</span><br><span class="line">  &#96;rank&#96; tinyint NOT NULL COMMENT &#39;名次，只记录赛季前100&#39;,</span><br><span class="line">  &#96;season&#96; smallint NOT NULL COMMENT &#39;赛季，例如 1,就是第一赛季，2-就是第二赛季&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE,</span><br><span class="line">  UNIQUE KEY &#96;idx_season_user&#96; (&#96;season&#96;,&#96;user_id&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci ROW_FORMAT&#x3D;DYNAMIC COMMENT&#x3D;&#39;学霸天梯榜&#39;;</span><br></pre></td></tr></table></figure><h2 id="准备阶段—Mybatis-Plus代码生成-2"><a href="#准备阶段—Mybatis-Plus代码生成-2" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281724333.png" alt="image-20240828172455269" style="zoom:80%;"><h2 id="准备阶段–类型枚举-2"><a href="#准备阶段–类型枚举-2" class="headerlink" title="准备阶段–类型枚举"></a>准备阶段–类型枚举</h2><h2 id="准备阶段–接口统计-2"><a href="#准备阶段–接口统计-2" class="headerlink" title="准备阶段–接口统计"></a>准备阶段–接口统计</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281711084.png" alt="image-20240828171151039"></p><h1 id="1-查询赛季列表功能"><a href="#1-查询赛季列表功能" class="headerlink" title="1.查询赛季列表功能"></a>1.查询赛季列表功能</h1><h2 id="1-原型图-4"><a href="#1-原型图-4" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在历史赛季榜单中，有一个下拉选框，可以选择历史赛季信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281710574.png" alt="image-20240828171050509"></p><h2 id="2-设计数据库-4"><a href="#2-设计数据库-4" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-4"><a href="#3-业务逻辑图-4" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>其实就是获取赛季表的信息【多条信息】</p><h2 id="4-接口分析-4"><a href="#4-接口分析-4" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>因此，我们需要实现一个接口，把历史赛季全部查询出来</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281711250.png" alt="image-20240828171107205" style="zoom: 67%;"><h2 id="5-具体实现-4"><a href="#5-具体实现-4" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281730426.png" alt="image-20240828173011382"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281730161.png" alt="image-20240828173016118"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281735436.png" alt="image-20240828173530388"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-4"><a href="#6-具体难点和亮点-4" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：怎么获取？那这个开始和结束时间怎么确定？</li></ul><p>查询赛季列表—&gt;必须是当前赛季【开始时间小于等于当前时间】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281735252.png" alt></p><h1 id="实时数据-Zset数据类型"><a href="#实时数据-Zset数据类型" class="headerlink" title="==实时数据[Zset数据类型]=="></a>==实时数据[Zset数据类型]==</h1><h1 id="0-业务分析"><a href="#0-业务分析" class="headerlink" title="0.业务分析"></a>0.业务分析</h1><ul><li>Mysql：要不停计算，不停添加数据【很繁琐】</li><li>Redis：既然考虑积分排名，就是用redis的Zset数据结构【key=赛季日期，member=用户id，score=积分和】—如果有用户新增积分，那就<strong>累加</strong>到对应score上，zset就可以实时更新</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281925032.png" alt="image-20240828192525979"></p><p>既然要使用Redis的SortedSet来实现排行榜，就需要在<strong>用户每次积分变更时，累加积分到Redis的SortedSet中</strong>。因此，我们要对之前的新增积分功能做简单改造，如图中绿色部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281947021.png" alt="image-20240828194705961"></p><p>在Redis中，使用SortedSet结构，<strong>以赛季的日期为key，以用户id为member，以积分和为score. 每当用户新增积分，就累加到score中</strong>，SortedSet排名就会实时更新。这样一个实时的当前赛季榜单就出现了</p><h1 id="——–具体实现——–-2"><a href="#——–具体实现——–-2" class="headerlink" title="==——–具体实现——–=="></a>==——–具体实现——–==</h1><h1 id="1-生成本赛季榜单-实时数据"><a href="#1-生成本赛季榜单-实时数据" class="headerlink" title="1.生成本赛季榜单(实时数据)"></a>1.生成本赛季榜单(实时数据)</h1><h2 id="1-原型图-5"><a href="#1-原型图-5" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-5"><a href="#2-设计数据库-5" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-5"><a href="#3-业务逻辑图-5" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-5"><a href="#4-接口分析-5" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>一旦积分微服务获取到积分，然后将积分新增到积分明细表之后，我就可以发送积分【累加】到redis！！！！</p><h2 id="5-具体实现-5"><a href="#5-具体实现-5" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>在原有的新增积分上：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281941986.png" alt></p><h2 id="6-具体难点和亮点-5"><a href="#6-具体难点和亮点-5" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：如何做排行榜？</p><p>redis的Zset数据结构【key=赛季日期，member=用户id，score=积分和】—如果有用户新增积分，那就<strong>累加</strong>到对应score上，zset就可以实时更新</p></li><li><p>问题二：积分怎么新增还是累加？</p><p>  使用Zset的incrementScore方法</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281944640.png" alt="image-20240828194446571" style="zoom:67%;"><h1 id="2-查询积分榜-实时数据"><a href="#2-查询积分榜-实时数据" class="headerlink" title="2.查询积分榜(实时数据)"></a>2.查询积分榜(实时数据)</h1><h2 id="1-原型图-6"><a href="#1-原型图-6" class="headerlink" title="1.原型图"></a>1.原型图</h2><p> 在个人中心，学生可以查看指定赛季积分排行榜（只显示前100 ），还可以查看自己总积分和排名。而且排行榜分为本赛季榜单和历史赛季榜单。</p><p>我们可以在一个接口中同时实现这两类榜单的查询</p><p>首先，我们来看一下页面原型（这里我给出的是原型对应的设计稿，也就是最终前端设计的页面效果）：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281921904.png" alt="image-20240828192147851" style="zoom: 67%;"><h2 id="2-设计数据库-6"><a href="#2-设计数据库-6" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-6"><a href="#3-业务逻辑图-6" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>首先我们分析一下请求参数：</p><ul><li>榜单数据非常多，不可能一次性查询出来，因此这里一定是分页查询（滚动分页），需要分页参数。</li><li>由于要查询历史榜单需要知道赛季，因此参数中需要指定赛季id。【当赛季id为空，我们认定是查询当前赛季。这样就可以把两个接口合二为一】</li></ul><p>然后是返回值，无论是历史榜单还是当前榜单，结构都一样。分为两部分：</p><ul><li>当前用户的积分和排名。【当前用户不一定上榜，因此需要单独查询】</li><li>榜单数据。就是N个用户的积分、排名形成的集合。</li></ul><h2 id="4-接口分析-6"><a href="#4-接口分析-6" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408281952424.png" alt="image-20240828195228359"></p><h2 id="5-具体实现-6"><a href="#5-具体实现-6" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408290956496.png" alt="image-20240829095637423"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408290957223.png" alt="image-20240829095718181"></p><ul><li>3.serviceimpl层</li></ul><p>分为整体：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408290959586.png" alt="image-20240829095931498"></p><p>其中查询我的积分和排名：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291000100.png" alt="image-20240829100041040"></p><p>其中查询榜单列表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291001504.png" alt="image-20240829100117423"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-6"><a href="#6-具体难点和亮点-6" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：如何获取用户(User_id)我的排名和积分？</li></ul><p>​        获得我的积分  zscore boards:202408 userId</p><p>​        获得我的排名 zrevrank boards:202408 userId</p><ul><li><p>问题二：如何分页获取排行榜(用户，积分，排名)？</p><p>获取我的排行榜 zrevRangeWithScore start stop[start和stop要根据pageSize和pageNo推断]</p></li></ul><h1 id="——————————————-2"><a href="#——————————————-2" class="headerlink" title="==——————————————=="></a><strong>==——————————————==</strong></h1><h1 id="历史数据-Redis和Mysql数据持久化"><a href="#历史数据-Redis和Mysql数据持久化" class="headerlink" title="==历史数据[Redis和Mysql数据持久化]=="></a>==历史数据[Redis和Mysql数据持久化]==</h1><h1 id="0-业务分析-1"><a href="#0-业务分析-1" class="headerlink" title="0.业务分析"></a>0.业务分析</h1><p>积分排行榜是分赛季的，每一个月是一个赛季。因此每到每个月的月初，就会进入一个新的赛季。所有用户的积分应该清零，重新累积。</p><p>如果直接删除Redis数据，那就丢失了一个赛季 —-==<strong>持久化</strong>==—-&gt; Mysql</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301959223.png" alt="image-20240830195901104"></p><p>假如有数百万用户，每个赛季榜单都有数百万数据。随着时间推移，历史赛季越来越多，如果全部保存到一张表中，数据量会非常恐怖！–&gt;<strong>==海量数据存储策略==</strong></p><h1 id="1-海量数据存储策略-四种策略"><a href="#1-海量数据存储策略-四种策略" class="headerlink" title="1.海量数据存储策略[四种策略]"></a>1.海量数据存储策略[四种策略]</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291043810.png" alt="image-20240829104320737"></p><h2 id="1-1-分区"><a href="#1-1-分区" class="headerlink" title="1.1 分区"></a>1.1 分区</h2><p> <strong>表分区（Partition）</strong>是一种数据存储方案，可以解决单表数据较多的问题【MySQL5.1开始支持表分区功能】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291443650.png" alt="image-20240829144303567"></p><p>如果表数据过多 —&gt; 文件体积非常大 —&gt; 文件跨越多个磁盘分区 —&gt; 数据检索时的速度就会非常慢  —&gt;【Mysql5.1引入<strong>表分区</strong>】按照某种规则，把表数据对应的ibd文件拆分成多个文件来存储。</p><ul><li><p>从物理上来看，一张表的数据被拆到多个表文件存储了【<strong>多张表</strong>】</p></li><li><p>从逻辑上来看，他们对外表现是一张表【一张表】 — CRUD不会变化，只是底层MySQL处理上会有变更，检索时可以只检索某个文件就可以</p></li></ul><p>例如，我们的历史榜单数据，可以按照赛季切分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291447024.png" alt="image-20240829144756927"></p><p>此时，赛季榜单表的磁盘文件就被分成了两个文件，但逻辑上还是一张表。CRUD不会变化，只是底层MySQL处理上会有变更，检索时可以只检索某个文件就可以</p><ul><li><p>表分区的好处：</p><ul><li><p>1.可以存储更多的数据，突破单表上限。甚至可以存储到不同磁盘，突破磁盘上限</p></li><li><p>2.查询时可以根据规则只检索某一个文件，提高查询效率</p></li><li><p>3.数据统计时，可以多文件并行统计，最后汇总结果，提高统计效率【分而治之，各自统计】</p></li><li><p>4.对于一些历史数据，如果不需要时，可以直接删除分区文件，提高删除效率</p></li></ul></li><li><p>表分区的方式：【<strong>对数据做水平拆分</strong>】</p><ul><li>Range分区：按照指定字段的取值范围分区 –保单表，根据1-10，11-20这样10个为一组区分</li><li>List分区：按照指定字段的枚举值分区【必须提前制定所有分区值，否则会因为找不到报错】–保单表，根据保单是车险财/非车进行区分</li><li>Hash分区：按照字段做hash运算后分区【字段一般是对数值类型】 –保单表，根据保单表%hash运算进行区分</li><li>Key分区：按照指定字段的值做运算结果分区【不限定字段类型】  –保单表，根据保单号%9进行区分</li></ul></li></ul><h2 id="1-2-分表"><a href="#1-2-分表" class="headerlink" title="1.2 分表"></a>1.2 分表</h2><p>开发者自己对表的处理，与数据库无关</p><ul><li><p>从物理上来看，一张表的数据被拆到多个表文件存储了【<strong>多张表</strong>】</p></li><li><p>从逻辑上来看，【<strong>多张表</strong>】  — CRUD会变化，需要考虑取哪张表做数据处理</p></li></ul><p>在开发中我们很多情况下业务需求复杂，更看重分表的灵活性。因此，我们大多数情况下都会选择分表方案。</p><ul><li><p>分表的好处：</p><ul><li><p>1.拆分方式更加灵活【可以水平也可以垂直】</p></li><li><p>2.可以解决单表字段过多问题【垂直分表，分在多个表】</p></li></ul></li><li><p>分表的坏处：</p><ul><li>1.CRUD需要自己判断访问哪张表</li><li>2.垂直拆分还会导致事务问题及数据关联问题：【原本一张表的操作，变为多张表操作，要考虑长事务情况】</li></ul></li></ul><h3 id="1-2-1-水平分表"><a href="#1-2-1-水平分表" class="headerlink" title="1.2.1 水平分表"></a>1.2.1 水平分表</h3><p>例如，对于赛季榜单，我们可以按照赛季拆分为多张表，<strong>每一个赛季一张新的表</strong>。如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291501632.png" alt="image-20240829150144571"></p><p>这种方式就是水平分表，<strong>表结构不变</strong>，仅仅是每张表<strong>数据不同</strong>。查询赛季1，就找第一张表。查询赛季2，就找第二张表。</p><h3 id="1-2-2-垂直分表"><a href="#1-2-2-垂直分表" class="headerlink" title="1.2.2 垂直分表"></a>1.2.2 垂直分表</h3><p>如果一张表的字段非常多(比如达到30个以上，这样的表我们称为<strong>宽表</strong>)。宽表由于字段太多，单行数据体积就会非常大，虽然数据不多，但可能表体积也会非常大！从而影响查询效率。</p><p>例如一个用户信息表，除了用户基本信息，还包含很多其它功能信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291502976.png" alt="image-20240829150258884"></p><h2 id="1-3-分库-垂直分库"><a href="#1-3-分库-垂直分库" class="headerlink" title="1.3 分库[垂直分库]"></a>1.3 分库[垂直分库]</h2><p>无论是分区，还是分表，我们刚才的分析都是建立在<strong>单个数据库</strong>的基础上。但是单个数据库也存在一些问题：</p><ul><li>单点故障问题：数据库发生故障，整个系统就会瘫痪【鸡蛋都在一个篮子里】</li><li>单库的性能瓶颈问题：单库受服务器限制，其网络带宽、CPU、连接数都有瓶颈【性能有限制】</li><li>单库的存储瓶颈问题：单库的磁盘空间有上限，如果磁盘过大，数据检索的速度又会变慢【存储有限制】</li></ul><p>综上，在大型系统中，我们除了要做①分表、还需要对数据做②分库—&gt;建立综合集群。</p><ul><li><p>优点：【解决了单个数据库的三大问题】</p><ul><li><p>1.解决了海量数据存储问题，突破了单机存储瓶颈</p></li><li><p>2.提高了并发能力，突破了单机性能瓶颈</p></li><li><p>3.避免了单点故障</p></li></ul></li><li><p>缺点：</p><ul><li><p>1.成本非常高【要多个服务器，多个数据库】</p></li><li><p>2.数据聚合统计比较麻烦【因为牵扯多个数据库，有些语句会很麻烦】</p></li><li><p>3.主从同步的一致性问题【主数据库往从数据库更新，会有不可取消的延误时间，只能通过提高主从数据库网络带宽，机器性能等操作(↓)延误时间】</p></li><li><p>4.分布式事务问题【因为涉及多个数据库多个表，使用seata分布式事务可以解决】</p></li></ul></li></ul><p>微服务项目中，我们会按照项目模块，每个微服务使用独立的数据库，因此每个库的表是不同的</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291515133.png" alt="image-20240829151509972"></p><h2 id="1-4-集群-主写从读"><a href="#1-4-集群-主写从读" class="headerlink" title="1.4 集群[主写从读]"></a>1.4 集群[主写从读]</h2><p>[保证单节点的高可用性]给数据库建立主从集群，主节点向从节点同步数据，两者结构一样</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291516533.png" alt="image-20240829151628463"></p><h1 id="2-历史榜单-存储策略—水平分表"><a href="#2-历史榜单-存储策略—水平分表" class="headerlink" title="2.[历史榜单]存储策略—水平分表"></a>2.[历史榜单]存储策略—水平分表</h1><p>东林微课堂是一个教育类项目，用户规模并不会很高，一般在十多万到百万级别。因此最终的数据规模也并不会非常庞大。综合之前的分析，结合天机学堂的项目情况，我们可以对榜单数据做分表，但是暂时不需要做分库和集群。</p><p>由于我们要解决的是数据过多问题，因此分表的方式选择<strong>水平分表</strong>。具体来说，就是按照赛季拆分，每一个赛季是一个独立的表，如图：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291524846.png" alt="image-20240829152437762" style="zoom: 80%;"><p>但是，考虑我们只需要排名，积分，用户id即可—&gt;可以删除掉season，rank两个字段【也可以减少单表存储】</p><ul><li>表结构如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;points_board_X&#96;</span><br><span class="line">(</span><br><span class="line">   &#96;id&#96;      BIGINT NOT NULL AUTO_INCREMENT COMMENT &#39;榜单id&#39;,</span><br><span class="line">   &#96;user_id&#96; BIGINT NOT NULL COMMENT &#39;学生id&#39;,</span><br><span class="line">   &#96;points&#96;  INT    NOT NULL COMMENT &#39;积分值&#39;,</span><br><span class="line">   PRIMARY KEY (&#96;id&#96;) USING BTREE,</span><br><span class="line">   INDEX &#96;idx_user_id&#96; (&#96;user_id&#96;) USING BTREE</span><br><span class="line">)COMMENT &#x3D;&#39;学霸天梯榜&#39; COLLATE &#x3D; &#39;utf8mb4_0900_ai_ci&#39; ENGINE &#x3D; InnoDB ROW_FORMAT &#x3D; DYNAMIC;</span><br></pre></td></tr></table></figure><h1 id="——–具体实现——–-3"><a href="#——–具体实现——–-3" class="headerlink" title="==——–具体实现——–=="></a>==——–具体实现——–==</h1><h1 id="1-定时-生成历史榜单表"><a href="#1-定时-生成历史榜单表" class="headerlink" title="1.[定时]生成历史榜单表"></a>1.[定时]生成历史榜单表</h1><h2 id="1-1-业务设计"><a href="#1-1-业务设计" class="headerlink" title="1.1 业务设计"></a>1.1 业务设计</h2><p>每个赛季刚开始的时候（月初）来创建新的赛季榜单表。每个月的月初执行一个创建表的任务，我们可以利用<strong>定时任务</strong>来实现。</p><p>【由于表的名称中包含赛季id，因此在定时任务中我们还要先查询赛季信息，获取赛季id，拼接得到表名，最后创建表】</p><p>大概流程如图：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408291649510.png" alt="image-20240829164908368" style="zoom:200%;"><h2 id="1-2-实现思路"><a href="#1-2-实现思路" class="headerlink" title="1.2 实现思路"></a>1.2 实现思路</h2><ul><li><p>①生成上赛季表：</p><p>通过xxl-job设定定时任务[每月初]：查询赛季表上个月对应的赛季id。通过传递(表名+赛季id)在mapper层创建历史赛季表  </p></li><li><p>②redis数据进入mysql表：</p></li></ul><p>​        根据(key,pageNo,pageSize)分页查询redis数据[id(改为input自己输入,按照rank属性设置),user_id,points]，然后通过saveBatch分批插入新建的数据库内[数据库名根据mybatisplus动态插件底层通过threadlocal存储表名，本质是一个拦截器，在数据到mapper和数据库打交道的时候更改数据库名]，插入结束记得remove删除</p><ul><li>③清除redis数据：unlike命令会在另外一个线程中回收内存，非阻塞【del会阻塞】</li></ul><p>​    使用unlike指令删除【非阻塞式】</p><h2 id="1-3-具体实现"><a href="#1-3-具体实现" class="headerlink" title="1.3 具体实现"></a>1.3 具体实现</h2><ul><li>定时任务</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301554837.png" alt="image-20240830155440727"></p><ul><li>具体执行业务</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301120656.png" alt="image-20240830112047591" style="zoom:67%;"><ul><li>(页面)创建任务</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301047888.png" alt="image-20240830104732769" style="zoom: 67%;"><h2 id="1-4-具体难点和亮点"><a href="#1-4-具体难点和亮点" class="headerlink" title="1.4 具体难点和亮点"></a>1.4 具体难点和亮点</h2><ul><li><p>①生成上赛季表：</p><p>通过xxl-job设定定时任务[每月初]：查询赛季表上个月对应的赛季id。通过传递(表名+赛季id)在mapper层创建历史赛季表  </p></li><li><p>②redis数据进入mysql表：</p></li></ul><p>​        根据(key,pageNo,pageSize)分页查询redis数据[id(改为input自己输入,按照rank属性设置),user_id,points]，然后通过saveBatch分批插入新建的数据库内[数据库名根据mybatisplus动态插件底层通过threadlocal存储表名，本质是一个拦截器，在数据到mapper和数据库打交道的时候更改数据库名]，插入结束记得remove删除</p><ul><li>③清除redis数据：unlike命令会在另外一个线程中回收内存，非阻塞【del会阻塞】</li></ul><p>​    使用unlike指令删除【非阻塞式】</p><h1 id="2-MybatisPlus动态表名插件"><a href="#2-MybatisPlus动态表名插件" class="headerlink" title="2.MybatisPlus动态表名插件"></a>2.MybatisPlus动态表名插件</h1><h2 id="2-1-原始情况"><a href="#2-1-原始情况" class="headerlink" title="2.1 原始情况"></a>2.1 原始情况</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301934081.png" alt="image-20240830193434978"></p><h2 id="2-2-实现思路"><a href="#2-2-实现思路" class="headerlink" title="2.2 实现思路"></a>2.2 实现思路</h2><p>流程中，我们会先计算表名，然后去执行持久化，而动态表名插件就会生效，去替换表名。</p><p>因此，一旦我们计算完表名，以某种方式传递给插件中的TableNameHandler，那么就无需重复计算表名了。都是MybatisPlus内部调用的，我们无法传递参数。—&gt; 但是可以在一个线程中实现数据共享</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301936988.png" alt="image-20240830193650901"></p><h2 id="2-3-具体实现"><a href="#2-3-具体实现" class="headerlink" title="2.3 具体实现"></a>2.3 具体实现</h2><ul><li>配置Mybatis动态表名拦截器</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301625378.png" alt="image-20240830162523297"></p><ul><li>TableInfoContext底层：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301625224.png" alt="image-20240830162537173"></p><ul><li>MybatisConfig配置：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301625930.png" alt="image-20240830162550841"></p><h1 id="3-XxlJob分片"><a href="#3-XxlJob分片" class="headerlink" title="3.XxlJob分片"></a>3.XxlJob分片</h1><h2 id="3-1-原理"><a href="#3-1-原理" class="headerlink" title="3.1 原理"></a>3.1 原理</h2><p>刚才定义的定时持久化任务，通过while死循环，不停的查询数据，直到把所有数据都持久化为止。这样如果数据量达到数百万，交给一个任务执行器来处理会耗费非常多时间—-&gt;<strong>实例多个部署</strong>，这样就会有多个执行器并行执行(但是多个执行器执行相同代码，都从第一页开始也会重复处理)—-&gt;<strong>任务分片</strong></p><p>举例[类似于<strong>发牌</strong>]：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301643407.png" alt="image-20240830164322338"></p><p>最终，每个执行器处理的数据页情况：</p><ul><li>执行器1：处理第1、4、7、10、13、…页数据</li><li>执行器2：处理第2、5、8、11、14、…页数据</li><li>执行器3：处理第3、6、9、12、15、…页数据</li></ul><p>要想知道每一个执行器执行哪些页数据，只要弄清楚两个关键参数即可：</p><ul><li>起始页码：pageNo【执行器编号是多少，起始页码就是多少】</li><li>下一页的跨度：step【执行器有几个，跨度就是多少。也就是说你要跳过别人读取过的页码，类似于分布式ID的步长】</li></ul><p>因此，现在的关键就是获取两个数据：</p><ul><li>执行器编号</li><li>执行器数量</li></ul><p>这两个参数XXL-JOB作为任务调度中心，肯定是知道的，而且也提供了API帮助我们获取：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301647099.png" alt="image-20240830164735039"></p><p>这里的分片序号其实就是执行器序号，不过是从0开始，那我们只要对序号+1，就可以作为起始页码了</p><h2 id="3-2-业务优化"><a href="#3-2-业务优化" class="headerlink" title="3.2 业务优化"></a>3.2 业务优化</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408301649455.png" alt="image-20240830164953405"></p><h2 id="3-3-引发问题解决方案"><a href="#3-3-引发问题解决方案" class="headerlink" title="3.3 引发问题解决方案"></a>3.3 引发问题解决方案</h2><p>使用xxl-job定时每月初进行持久化：</p><p>①根据计算上个月时间创建上赛季mysql表</p><p>②根据查询出来上赛季redis数据，数据库新表名通过mp动态表名插件(本质是一个拦截器，在与mapper数据库接触过程中通过threadlocal更改数据库名)】然后查询数据<br>③根据非阻塞语句del删除redis上赛季数据—但是我考虑使用分片，这样导致分片1执行完异步执行删除，但是分片2执行完数据好像又回来了【针对②查询结果分页用xxlJob分片，log查日志没解决，我就打断点发现是分片次数问题，我就redis添加一个总数，一个分片执行次数，然后将删除逻辑放在一个新的定时任务，判断总数==分片执行次数，符合的情况才删除】</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>面试官：你在项目中负责积分排行榜功能，说说看你们排行榜怎么设计实现的？</p><p>​    答：我们的排行榜功能分为两部分：一个是当前赛季排行榜，一个是历史排行榜。</p><p>因为我们的产品设计是每个月为一个赛季，月初清零积分记录，这样学员就有持续的动力去学习。这就有了赛季的概念，因此也就有了当前赛季榜单和历史榜单的区分，其实现思路也不一样。</p><p>首先说当前赛季榜单，我们采用了Redis的SortedSet来实现。member是用户id，score就是当月积分总值。每当用户产生积分行为的时候，获取积分时，就会更新score值。这样Redis就会自动形成榜单了。非常方便且高效。</p><p>然后再说历史榜单，历史榜单肯定是保存到数据库了。不过由于数据过多，所以需要对数据做水平拆分，我们目前的思路是按照赛季来拆分，也就是每一个赛季的榜单单独一张表。这样做有几个好处：</p><ul><li>拆分数据时比较自然，无需做额外处理</li><li>查询数据时往往都是按照赛季来查询，这样一次只需要查一张表，不存在跨表查询问题</li></ul><p>因此我们就不需要用到分库分表的插件了，直接在业务层利用MybatisPlus就可以实现动态表名，动态插入了。简单高效。</p><p>我们会利用一个定时任务在每月初生成上赛季的榜单表，然后再用一个定时任务读取Redis中的上赛季榜单数据，持久化到数据库中。最后再有一个定时任务清理Redis中的历史数据。</p><p>这里要说明一下，这里三个任务是有关联的，之所以让任务分开定义，是为了避免任务耦合。这样在部分任务失败时，可以单独重试，无需所有任务从头重试。</p><p>当然，最终我们肯定要确保这三个任务的执行顺序，一定是依次执行的[通过xxlJob分布式调度完成，弥补单体的springTask框架不能顺序执行的毛病]</p><p>面试官追问：你们使用Redis的SortedSet来保存榜单数据，如果用户量非常多怎么办？</p><p>​    首先Redis的SortedSet底层利用了跳表机制，性能还是非常不错的。即便有百万级别的用户量，利用SortedSet也没什么问题，性能上也能得到保证。在我们的项目用户量下，完全足够。</p><p>当系统用户量规模达到数千万，乃至数亿时，我们可以采用分治的思想，将用户数据按照积分范围划分为多个桶。</p><p>然后为每个桶创建一个SortedSet类型的key，这样就可以将数据分散，减少单个KEY的数据规模了。</p><p>而要计算排名时，只需要按照范围查询出用户积分所在的桶，再累加分值范围比他高的桶的用户数量即可。依然非常简单、高效。</p><p>面试官追问：你们使用历史榜单采用的定时任务框架是哪个？处理数百万的榜单数据时任务是如何分片的？你们是如何确保多个任务依次执行的呢？</p><p>​    答：我们采用的是XXL-JOB框架。</p><p>XXL-JOB自带任务分片广播机制，每一个任务执行器都能通过API得到自己的分片编号、总分片数量。在做榜单数据批处理时，我们是按照分页查询的方式：</p><ul><li>每个执行器的读取的起始页都是自己的分片编号+1，例如第一个执行器，其起始页就是1，第二个执行器，其起始页就是2，以此类推</li><li>然后不是逐页查询，而是有一个页的跨度，跨度值就是分片总数量。例如分了3片，那么跨度就是3</li></ul><p>此时，第一个分片处理的数据就是第1、4、7、10、13等几页数据，第二个分片处理的就是第2、5、8、11、14等页的数据，第三个分片处理的就是第3、6、9、12、15等页的数据。</p><p>这样就能确保所有数据都会被处理，而且每一个执行器都执行的是不同的数据了。</p><p>最后，要确保多个任务的执行顺序，可以利用XXL-JOB中的子任务功能。比如有任务A、B、C，要按照字母顺序依次执行，我们就可以将C设置为B的子任务，再将B设置为A的子任务。然后给A设置一个触发器。</p><p>这样，当A触发时，就会依次执行这三个任务了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;—————-签到功能—————&quot;&gt;&lt;a href=&quot;#—————-签到功能—————&quot; class=&quot;headerlink&quot; title=&quot;==—————-签到功能—————-==&quot;&gt;&lt;/a&gt;==—————-签到功能—————-==&lt;/h1&gt;&lt;p&gt;为了激励东林学子
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂-点赞相关</title>
    <link href="https://larkkkkkkk.github.io/2024/08/24/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E7%82%B9%E8%B5%9E%E7%9B%B8%E5%85%B3/"/>
    <id>https://larkkkkkkk.github.io/2024/08/24/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E7%82%B9%E8%B5%9E%E7%9B%B8%E5%85%B3/</id>
    <published>2024-08-24T12:57:54.000Z</published>
    <updated>2024-08-26T13:02:05.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-互动问答相关"><a href="#1-互动问答相关" class="headerlink" title="1.互动问答相关"></a>1.互动问答相关</h1><h2 id="准备阶段—分析业务流程"><a href="#准备阶段—分析业务流程" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><p>一个通用点赞系统需要满足下列特性：</p><ul><li>通用：点赞业务在设计的时候不要与业务系统耦合，必须同时<strong>支持不同业务的点赞功能</strong>【数据库多一个字段描述点赞的业务类型】【单独微服务】</li><li>独立：点赞功能是<strong>独立系统</strong>，并且不依赖其它服务。这样才具备可迁移性【单独】</li><li>并发：一些热点业务点赞会很多，所以点赞功能必须支持<strong>高并发</strong>【可以在同一时间点内承受住多次点赞】</li><li>安全：要做好<strong>并发安全控制</strong>，避免重复点赞【防止重复点赞】</li></ul><p>而要保证安全，避免重复点赞，我们就必须保存每一次点赞记录。只有这样在下次用户点赞时我们才能查询数据，判断是否是重复点赞。同时，因为业务方经常需要根据点赞数量排序，因此每个业务的点赞数量也需要记录下来。</p><p>综上，点赞的基本思路如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242100576.png" alt="image-20240824210015490" style="zoom: 80%;"><p>点赞服务必须独立，因此必须抽取为一个<strong>独立服务</strong>。点赞系统可以在点赞数变更时，通过MQ通知业务方，这样业务方就可以更新自己的点赞数量了。并且还避免了点赞系统与业务方的耦合。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242114276.png" alt="image-20240824211454190" style="zoom: 67%;"><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>点赞的数据结构分两部分，一是<strong>点赞记录</strong>，二是与业务关联的<strong>点赞数</strong>【基本每个具体业务都预留了一个点赞数量的字段liked_times】</p><p>点赞记录本质就是记录<strong>谁给什么内容点了赞</strong>，所以核心属性包括：</p><ul><li>点赞目标id   —-给谁点赞了</li><li>点赞人id   —-我是谁，我点赞了</li><li>点赞时间  —-我啥时候点赞的</li></ul><p>不过点赞的内容多种多样，为了加以区分，我们还需要把点赞内的类型记录下来：</p><ul><li>点赞对象类型（为了通用性）   —-知道是给啥类型点赞了，是内容还是回复还是笔记</li></ul><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242121256.png" alt="image-20240824212133197"></p><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;liked_record&#96; (</span><br><span class="line">  &#96;id&#96; bigint NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,</span><br><span class="line">  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,</span><br><span class="line">  &#96;biz_id&#96; bigint NOT NULL COMMENT &#39;点赞的业务id&#39;,</span><br><span class="line">  &#96;biz_type&#96; VARCHAR(16) NOT NULL COMMENT &#39;点赞的业务类型&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span><br><span class="line">  &#96;update_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;idx_biz_user&#96; (&#96;biz_id&#96;,&#96;user_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;8 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci COMMENT&#x3D;&#39;点赞记录表&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242125727.png" alt="image-20240824212552680"></p><h2 id="准备阶段—Mybatis-Plus代码生成"><a href="#准备阶段—Mybatis-Plus代码生成" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251437869.png" alt="image-20240825143744780"></p><h2 id="准备阶段–接口统计"><a href="#准备阶段–接口统计" class="headerlink" title="准备阶段–接口统计"></a>准备阶段–接口统计</h2><p>从表面来看，点赞功能要实现的接口就是一个点赞接口。不过仔细观察所有的点赞页面，你会发现点赞按钮有灰色和点亮两种状态。</p><p>也就是说我们还需要实现查询用户点赞状态的接口，这样前端才能根据点赞状态渲染不同效果。因此我们要实现的接口包括：</p><ul><li>点赞/取消点赞</li><li>根据多个业务id批量查询用户是否点赞多个业务</li></ul><h1 id="———具体实现———"><a href="#———具体实现———" class="headerlink" title="==———具体实现———=="></a>==———具体实现———==</h1><h1 id="1-用户进行点赞-取消点赞-MQ发送"><a href="#1-用户进行点赞-取消点赞-MQ发送" class="headerlink" title="1.用户进行点赞/取消点赞[MQ发送]"></a>1.用户进行点赞/取消点赞[MQ发送]</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>当用户点击点赞按钮的时候，第一次点击是点赞，按钮会高亮；第二次点击是取消，点赞按钮变灰：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242137655.png" alt="image-20240824213704561" style="zoom: 67%;"><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>从后台实现来看，点赞就是新增(insert)一条点赞记录，取消就是删除(delete)这条点赞记录。——为了方便前端交互——-&gt;个合并为一个接口即可。</p><p>因此，请求参数首先要包含点赞有关的数据，并且要标记是点赞还是取消：</p><ul><li>点赞给谁:点赞的目标业务id：bizId</li><li>谁在点赞（就是登陆用户，可以不用提交）</li><li>是取消还是点赞</li></ul><p>除此以外，我们之前说过，在问答、笔记等功能中都会出现点赞功能，所以点赞必须具备通用性。因此还需要在提交一个参数标记点赞的类型：</p><ul><li>点赞目标的类型</li></ul><p>返回值有两种设计：</p><ul><li>方案一：无返回值，200就是成功，页面直接把点赞数+1展示给用户即可</li><li>方案二：返回点赞数量，页面渲染【还需要回查一次数据库，太消耗性能】</li></ul><p>这里推荐使用方案一，因为每次统计点赞数量也有很大的性能消耗。</p><p>我们先梳理一下点赞业务的几点需求：</p><ul><li>点赞就新增一条点赞记录，取消点赞就删除记录</li><li>用户不能重复点赞</li><li>点赞数由具体的业务方保存，需要通知业务方更新点赞数</li></ul><p>由于业务方的类型很多，比如互动问答、笔记、课程等。所以通知方式必须是<strong>低耦合</strong>的，这里建议使用MQ来实现。</p><p>当点赞或取消点赞后，点赞数发生变化，我们就发送MQ通知。整体业务流程如图：</p><p>暂时无法在飞书文档外展示此内容</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251500758.png" alt="image-20240825150033695"></p><p>需要注意的是，由于<strong>每次点赞的业务类型不同，所以没有必要通知到所有业务方，而是仅仅通知与当前点赞业务关联的业务方即可</strong>。</p><p>在RabbitMQ中，利用TOPIC类型的交换机，结合不同的RoutingKey，可以实现通知对象的变化。我们需要让不同的业务方监听不同的RoutingKey，然后发送通知时根据点赞类型不同，发送不同RoutingKey：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251504210.png" alt="image-20240825150444161"></p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，按照Restful风格设计，接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242140613.png" alt="image-20240824214034557"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408260930163.png" alt="image-20240826093012122"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408260930158.png" alt="image-20240826093019118"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408260935738.png" alt="image-20240826093521619"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：如何点赞和取消点赞？【只能点赞评论/回复，不能点赞问题啊】</li></ul><p>点赞【新增一行】：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251600427.png" alt="image-20240825160058339"></p><p>取消点赞【删除一行】：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251601210.png" alt="image-20240825160127169"></p><ul><li>问题二：怎么发送mq，发送者消费者怎么设定的？</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408260932647.png" alt="image-20240826093204596"></p><ul><li><p>问题三：怎么统计点赞数</p><p>只需要点赞业务id和点赞业务类型，因为这两条就可以确定某一个类型的哪个评论/回复/笔记总共点赞数【不需要分用户】</p></li></ul><h1 id="2-批量查询点赞状态-给其他人用"><a href="#2-批量查询点赞状态-给其他人用" class="headerlink" title="2.批量查询点赞状态[给其他人用]"></a>2.批量查询点赞状态[给其他人用]</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>前端根据不同状态显示不同样式： </p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261005303.png" alt="image-20240826100503248"></p><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>由于这个接口是供其它微服务调用，实现完成接口后，还需要定义对应的FeignClient:</p><p>1.实现查询点赞情况</p><p>2.实现对应FeignClient：提供给其他微服务调用</p><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261004183.png" alt="image-20240826100400127"></p><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><h3 id="5-1-接口实现"><a href="#5-1-接口实现" class="headerlink" title="5.1 接口实现"></a>5.1 接口实现</h3><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261035292.png" alt="image-20240826103531221"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261035711.png" alt="image-20240826103537664"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261036882.png" alt="image-20240826103638825"></p><ul><li>4.mapper层</li></ul><p>无</p><h3 id="5-2-提供Feign接口"><a href="#5-2-提供Feign接口" class="headerlink" title="5.2 提供Feign接口"></a>5.2 提供Feign接口</h3><p>整体思路：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261041601.png" alt="image-20240826104106520"></p><ul><li>RemarkClient和RemarkClientFallback</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261047426.png" alt="image-20240826104724350"></p><ul><li>配置bean和自动装配</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261048441.png" alt="image-20240826104824380"></p><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>是否点赞：就是我传入多个bizid(业务id)，你看看哪些业务(一条评论/一条回复)是被点赞过；我就去查询点赞数据库，如果有那就返回这个id【前端根据传回来id进行处理】</p><p>点赞多少：根据bizType去判断是QA还是note，然后查询对应表id的对应点赞数然后返回</p><h1 id="3-监听点赞数-更新点赞数-消费者"><a href="#3-监听点赞数-更新点赞数-消费者" class="headerlink" title="3.监听点赞数-更新点赞数[消费者]"></a>3.监听点赞数-更新点赞数[消费者]</h1><h2 id="1-原型图-2"><a href="#1-原型图-2" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>既然点赞后会发送MQ消息通知业务服务，那么每一个有关的业务服务都应该监听点赞数变更的消息，更新本地的点赞数量。</p><h2 id="2-设计数据库-2"><a href="#2-设计数据库-2" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-2"><a href="#3-业务逻辑图-2" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>点赞/取消点赞业务[点赞微服务]添加：发送消息，发送点赞数和点赞id</p><p>回复/评论业务[其他微服务]添加：接受消息，更新点赞信息</p><h2 id="4-接口分析-2"><a href="#4-接口分析-2" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><h2 id="5-具体实现-2"><a href="#5-具体实现-2" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>点赞微服务</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408260938709.png" alt="image-20240826093805663"></p><ul><li>其他微服务[以回复/评论微服务为例]</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408260939813.png" alt="image-20240826093901752"></p><h2 id="6-具体难点和亮点-2"><a href="#6-具体难点和亮点-2" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>传递消息[业务id和点赞数]，这样通过业务id(主键)能获取到一行数据，然后根据id更新业务点赞数</p><h1 id="———点赞优化———"><a href="#———点赞优化———" class="headerlink" title="==———点赞优化———=="></a>==———点赞优化———==</h1><h1 id="1-目前现状"><a href="#1-目前现状" class="headerlink" title="1.目前现状"></a>1.目前现状</h1><ul><li>目前情况：</li></ul><p>1.点赞/取消点赞—–&gt;统计点赞总数(只根据点赞业务和点赞id就可以确定是问答/笔记表的一行数据) —–&gt;发送MQ通知[点赞业务，点赞数]</p><p>2.传入多个业务id，判断是否有点赞【直接根据业务id，业务类型，用户id查询点赞表是否有数据就行】</p><p>3.监听点赞数【其他微服务通过1获取消息，然后更新对应的数据库一行数据】</p><ul><li>存在问题：</li></ul><p>1.点赞/取消点赞，一次就要发送MQ进行更新点赞【太频繁】 —&gt;  定时任务【定时去批量更新】</p><p>2.点赞、取消、再点赞、再取消多少次【读写太频繁】 —&gt;  合并写【反正业务方只关注最终点赞结果】</p><p>优化图：</p><p>【从原来一次性的从头到尾—&gt;redis处理，缓存，定时异步】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261649701.png" alt="image-20240826164921602"></p><h1 id="2-优化思路"><a href="#2-优化思路" class="headerlink" title="2.优化思路"></a>2.优化思路</h1><p><strong>因此将①点赞/取消点赞  / ②点赞数据分别放入redis缓存！！！</strong></p><p>点赞记录中最两个关键信息：</p><ul><li><p>用户是否点赞【需要业务id，业务类型，用户id】—&gt; 一个数据结构</p></li><li><p>某业务的点赞总次数【需要业务id，业务类型】—&gt;一个数据结构</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261154081.png" alt="image-20240826115404019"></p><ul><li>①用户是否点赞【需要业务id，业务类型，用户id】</li></ul><p>​    因为要知道某个用户是否点赞某个业务，就必须记录业务id以及给业务点赞的所有用户id . 由于一个业务可以被多个用户点赞，那就需要一个集合存储[哪个类型的哪个业务—-对应user_Id谁点赞]，并且要判断用户是否点赞这个操作具有存在且唯一的特性 —&gt; set最符合</p><p>​    点赞，那就sadd方法—–取消点赞，那就srem方法—–判断是否点赞过，那就sismember方法—–统计点赞总数，那就scard方法</p><ul><li>②某业务的点赞总次数【需要业务id，业务类型】</li></ul><p>​    因为只需要业务id和业务类型去判断对应的点赞数，因此我们可以将业务类型作为key，业务id作为键，点赞数作为值。这样键值对集合 —&gt; hash或者sortedSet都符合。</p><p>​    Hash：传统键值对集合，无序</p><p>​    SortedSet：基于Hash结构，[+跳表]。因此可排序，但更占用内存</p><p>​    从节省内存方面hash更好，但是考虑将来要从redis获取点赞数，然后移除[避免重复处理]。为了保证线程安全，查询和移除的操作具备原子性，刚好zset就有几个移除并且获取的功能，天生具备原子性。并且我们每隔一段时间就将数据从redis移除，并不会占用太多内存。</p><h1 id="3-Redis数据结构"><a href="#3-Redis数据结构" class="headerlink" title="3.Redis数据结构"></a>3.Redis数据结构</h1><h2 id="3-0-Redis持久化机制"><a href="#3-0-Redis持久化机制" class="headerlink" title="3.0 Redis持久化机制"></a>3.0 Redis持久化机制</h2><ul><li>由于Redis本身具备<strong>持久化机制</strong>，AOF提供的数据可靠性已经能够满足点赞业务的安全需求，因此我们完全可以用Redis存储来代替数据库的点赞记录。</li></ul><p>也就是说，用户的一切点赞行为，以及将来查询点赞状态我们可以都走Redis，不再使用数据库查询。</p><ul><li>大多数企业无法达到数百亿级—&gt;如果真的达到—&gt;可以将redis与数据库结合<ul><li>1.先利用Redis来记录点赞状态</li><li>2.【定期】将Redis中的点赞状态持久化到数据库</li><li>3.对于历史点赞记录，比如下架的课程、或者超过2年以上的访问量较低的数据都可以从redis移除，只保留在数据库中</li><li>4.当某个记录点赞时，优先去Redis查询并判断，如果Redis中不存在，再去查询数据库数据并缓存到Redis</li></ul></li></ul><h2 id="3-1-点赞-set-要求唯一性"><a href="#3-1-点赞-set-要求唯一性" class="headerlink" title="3.1 点赞[set-要求唯一性]"></a>3.1 点赞[set-要求唯一性]</h2><p>我们现在点赞的时候(业务idbizId，业务类型bizType,用户id)这三个参数可以确定是谁点赞的，点赞的是什么类型的，点赞的是哪一个</p><p>这样可以考虑【key=业务类型+业务id，value=用户id】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261428165.png" alt="image-20240826142805100"></p><h2 id="3-2-点赞总数-zset-读写原子性"><a href="#3-2-点赞总数-zset-读写原子性" class="headerlink" title="3.2 点赞总数[zset-读写原子性]"></a>3.2 点赞总数[zset-读写原子性]</h2><p>由于点赞次数需要在业务方持久化存储到数据库，因此Redis只起到缓存作用即可。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261446757.png" alt="image-20240826144600691"></p><p>当用户对某个业务点赞时，我们统计点赞总数，并将其缓存在Redis中。这样一来在一段时间内，不管有多少用户对该业务点赞（热点业务数据，比如某个微博大V），都只在Redis中修改点赞总数，无需修改数据库。</p><h1 id="4-总流程图"><a href="#4-总流程图" class="headerlink" title="4.总流程图"></a>4.总流程图</h1><p>原来：新增点赞是直接插入数据库，统计是根据条件查询数据库，点赞总数是根据条件查询数据库，然后直接发送消息给MQ</p><p>现在：新增点赞和取消点赞以及统计点赞数量用redis的set</p><p>​            点赞总数用zset缓存</p><p>​            不着急送MQ，而是通过定时任务去[<strong>定期批量</strong>]发送bizId和点赞数</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261458633.png" alt="image-20240826145808533"></p><h1 id="5-具体实现-3"><a href="#5-具体实现-3" class="headerlink" title="5.具体实现"></a>5.具体实现</h1><h2 id="5-1-点赞和取消点赞"><a href="#5-1-点赞和取消点赞" class="headerlink" title="5.1 点赞和取消点赞"></a>5.1 点赞和取消点赞</h2><p><strong>==之前串行化，通过redis的set来存储点赞或者取消点赞，然后使用zset存储点赞总数，通过定时任务来发送mq异步接收消息==</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261723951.png" alt="image-20240826172351804"></p><p>从原来直接查数据库获取点赞总数(改为set统计行数就是点赞数)，然后zset缓存业务的点赞数</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261726476.png" alt="image-20240826172611424"></p><p>从原来的直接发送一个MQ(改为定时20s一次性扫描处理30个Zset的多个业务的多个业务id下面的点赞数，批量发送MQ),然后批量处理更新点赞</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261738994.png" alt="image-20240826173831860"></p><h2 id="5-2-批量查询点赞状态"><a href="#5-2-批量查询点赞状态" class="headerlink" title="5.2 批量查询点赞状态"></a>5.2 批量查询点赞状态</h2><p>==<strong>使用Redis的管道批量处理，解决只能isMember判断单个bizId是否有用户点赞</strong>==</p><ul><li><p>redis管道：</p><p>管道就可以优化，只需要1次往返的网络传输耗时即可</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408262001818.png" alt="image-20240826200119745"></p><ul><li><p>具体代码：</p><p>就是使用redisTemplate下面的executePipelined()方法批量处理，它会将多个要判断的条件<strong>一次性打包</strong>给redis，然后redis判断是否存在(存在是true，不存在是false)，然后将结果给方法返回值resultList(他的顺序就是和id顺序一致)，最后遍历resultList，如果是true说明对应的业务id被这个用户点赞过，需要返回</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261756485.png" alt="image-20240826175635360"></p><h2 id="5-3-监听点赞数-更新点赞数"><a href="#5-3-监听点赞数-更新点赞数" class="headerlink" title="5.3 监听点赞数-更新点赞数"></a>5.3 监听点赞数-更新点赞数</h2><p>==<strong>消息接收者：更改为批量获取，批量处理</strong>==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261742631.png" alt="image-20240826174215532"></p><h1 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h1><p>点赞和取消点赞的set：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261543233.png" alt="image-20240826154305150"></p><p>统计业务的点赞数：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261544708.png" alt="image-20240826154415625"></p><h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h1><ul><li>点赞系统是如何设计的？</li></ul><p>先在设计之初我们分析了一下点赞业务可能需要的一些要求。</p><p>例如，在我们项目中需要用到点赞的业务不止一个，因此点赞系统必须具备通用性，独立性，不能跟具体业务耦合。</p><p>再比如，点赞业务可能会有较高的并发，我们要考虑到高并发写库的压力问题。</p><p>所以呢，我们在设计的时候，就将点赞功能抽离出来作为独立服务。当然这个服务中除了点赞功能以外，还有与之关联的评价功能，不过这部分我就没有参与了。在数据层面也会用业务类型对不同点赞数据做隔离，隔离的手段就是在数据库表中设置了业务类型字段，目前是一张表中记录，将来我们如果数据量过大，还可以考虑基于业务类型对数据库做分表。</p><p>从具体实现上来说，为了减少数据库压力，我们会利用Redis来保存点赞记录、点赞数量信息，并且基于Redis的持久化机制来保证数据安全。然后利用定时任务定期的将点赞数量同步给业务方，持久化到数据库中。</p><ul><li>Redis中具体使用了哪种数据结构？</li></ul><p>我们使用了两种数据结构，set和zset</p><p>首先保存点赞记录，使用了set结构，key是业务类型+业务id，值是点赞过的用户id。当用户点赞时就<code>SADD</code>用户id进去，当用户取消点赞时就<code>SREM</code>删除用户id。当判断是否点赞时使用<code>SISMEMBER</code>即可。当要统计点赞数量时，只需要<code>SCARD</code>就行，<strong>而Redis的SET结构会在头信息中保存元素数量，因此SCARD直接读取该值，时间复杂度为O(1)</strong>，性能非常好。</p><p>为什么不用用户id为key，业务id为值呢？如果用户量很大，可能出现BigKey？</p><p>您说的这个方案也是可以的，不过呢，考虑到我们的项目数据量并不会很大，我们不会有大V，因此点赞数量通常不会超过1000，因此不会出现BigKey。并且，由于我们采用了业务id为KEY，当我们要统计点赞数量时，可以直接使用SCARD来获取元素数量，无需额外保存，这是一个很大的优势。但如果是考虑到有大V的场景，有两种选择，一种还是应该选择您说的这种方案，另一种则是对用户id做hash分片，将大V的key拆分到多个KEY中，结构为 [bizType:bizId:userId高8位]</p><p>不过这里存在一个问题，就是页面需要判断当前用户有没有对某些业务点赞。这个时候会传来多个业务id的集合，而SISMEMBER只能一次判断一个业务的点赞状态，要判断多个业务的点赞状态，就必须多次调用SISMEMBER命令，与Redis多次交互，这显然是不合适的。（此处略停顿，等待面试官追问，面试官可能会问“那你们怎么解决的”。如果没追问，自己接着说），所以呢我们就采用了Pipeline管道方式，这样就可以一次请求实现多个业务点赞状态的判断了。</p><ul><li>那你ZSET干什么用的？</li></ul><p>严格来说ZSET并不是用来实现点赞业务的，因为点赞只靠SET就能实现了。但是这里有一个问题，我们要定期将业务方的点赞总数通过MQ同步给业务方，并持久化到数据库。但是如果只有SET，我没办法知道哪些业务的点赞数发生了变化，需要同步到业务方。</p><p>因此，我们又添加了一个ZSET结构，用来记录点赞数变化的业务及对应的点赞总数。可以理解为一个待持久化的点赞任务队列。</p><p>每当业务被点赞，除了要缓存点赞记录，还要把业务id及点赞总数写入ZSET。这样定时任务开启时，只需要从ZSET中获取并移除数据，然后发送MQ给业务方，并持久化到数据库即可。</p><ul><li>为什么一定要用ZSET结构，把更新过的业务扔到一个List中不行吗？</li></ul><p>首先，假设定时任务每隔2分钟执行一次，一个业务如果在2分钟内多次被点赞，那就会多次向List中添加同一个业务及对应的点赞总数，数据库也要持久化多次。这显然是多余的，因为只有最后一次才是有效的。而使用ZSET则因为member的唯一性，多次添加会覆盖旧的点赞数量，最终也只会持久化一次。</p><p>（面试官可能说：“那就改为SET结构，SET中只放业务id，业务方收到MQ通知后再次查询不就行了。”如果没问就自己往下说）</p><p>当然要解决这个问题，也可以用SET结构代替List，然后当业务被点赞时，只存业务id到SET并通知业务方。业务方接收到MQ通知后，根据id再次查询点赞总数从而避免多次更新的问题。但是这种做法会导致多次网络通信，增加系统网络负担。而ZSET则可以同时保存业务id及最新点赞数量，避免多次网络查询。</p><p>不过，并不是说ZSET方案就是完全没问题的，<strong>毕竟ZSET底层是哈希结构+跳表</strong>，对内存会有额外的占用。但是考虑到我们的定时任务每次会查询并删除ZSET数据，ZSET中的数据量始终会维持在一个较低级别，内存占用也是可以接受的。</p><ul><li>怎么优化的思路图</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408261649701.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-互动问答相关&quot;&gt;&lt;a href=&quot;#1-互动问答相关&quot; class=&quot;headerlink&quot; title=&quot;1.互动问答相关&quot;&gt;&lt;/a&gt;1.互动问答相关&lt;/h1&gt;&lt;h2 id=&quot;准备阶段—分析业务流程&quot;&gt;&lt;a href=&quot;#准备阶段—分析业务流程&quot; class
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂-互动问答</title>
    <link href="https://larkkkkkkk.github.io/2024/08/23/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E4%BA%92%E5%8A%A8%E9%97%AE%E7%AD%94/"/>
    <id>https://larkkkkkkk.github.io/2024/08/23/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E4%BA%92%E5%8A%A8%E9%97%AE%E7%AD%94/</id>
    <published>2024-08-23T02:10:26.000Z</published>
    <updated>2024-08-25T06:20:55.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-互动问答相关"><a href="#1-互动问答相关" class="headerlink" title="1.互动问答相关"></a>1.互动问答相关</h1><h2 id="准备阶段—分析业务流程"><a href="#准备阶段—分析业务流程" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><ul><li>主流程 </li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231530488.png" alt="image-20240823153033439"></p><p>整体来说，流程是这样的：</p><ul><li>学员在学习的过程中可以随时提问问题</li><li>老师、其他学员都可以回答问题</li><li>老师、学员也都可以对回答多次回复</li><li>老师、学员也都可以对评论多次回复</li><li>老师可以在管理端管理问题、回答、评论的状态</li></ul><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>根据原型图可以得到对应字段</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241502965.png" alt="image-20240824150214835"></p><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p>基本上根据页面原型图得到的字段：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231536709.png" alt="image-20240823153635633"></p><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><ul><li>问题表</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231540083.png" alt="image-20240823154007026"></p><ul><li>回答/评论表</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241506442.png" alt="image-20240824150648355"></p><h2 id="准备阶段—Mybatis-Plus代码生成"><a href="#准备阶段—Mybatis-Plus代码生成" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><p>可以生成对应的文件和实体类等信息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231456518.png" alt="image-20240823145646440"></p><h2 id="准备阶段–类型枚举"><a href="#准备阶段–类型枚举" class="headerlink" title="准备阶段–类型枚举"></a>准备阶段–类型枚举</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231519881.png" alt="image-20240823151906796"></p><h2 id="准备阶段—接口统计"><a href="#准备阶段—接口统计" class="headerlink" title="准备阶段—接口统计"></a>准备阶段—接口统计</h2><p>理论上我们应该先设计所有接口，再继续设计接口对应的表结构。不过由于接口较多，这里我们先对接口做简单统计。然后直接设计数据库，最后边设计接口，边实现接口。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231522635.png" alt="image-20240823152213586"></p><h3 id="1-用户端"><a href="#1-用户端" class="headerlink" title="1.用户端"></a>1.用户端</h3><p>问题页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231556265.png" alt="image-20240823155633183"></p><p>结合原型设计图我们可以看到这里包含4个接口：</p><ul><li>带条件过滤的分页查询</li><li>新增提问</li><li>修改提问</li><li>删除提问</li></ul><p>问题的回答和评论页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231557226.png" alt="image-20240823155743166"></p><p>可以看到页面中包含5个接口：</p><ul><li>根据id查询问题详情</li><li>分页查询问题下的所有回答</li><li>分页查询回答下的评论</li><li>点赞/取消点赞某个回答或评论</li><li>回答某个提问、评论他人回答</li></ul><h3 id="2-管理端"><a href="#2-管理端" class="headerlink" title="2.管理端"></a>2.管理端</h3><p>刚才分析的都是用户端的相关接口，这些接口部分可以与管理端共用，但管理端也有自己的特有需求。</p><p>管理端也可以分页查询问题列表，而且过滤条件、查询结果会有很大不同：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231558362.png" alt="image-20240823155824265"></p><p>比较明显的有两个接口：</p><ul><li>管理端分页查询问题列表：与用户端分页查询不通用，功能更复杂，查询条件更多</li><li>隐藏或显示指定问题</li></ul><p>除此以外，这里有一个问题状态字段，表示管理员是否查看了该问题以及问题中的回答。默认是未查看状态；当管理员点击查看后，状态会变化为已查看；当<strong>学员</strong>再次回答或评论，状态会再次变为未查看。</p><p>因此，需要注意的是：</p><ul><li>每当用户点击查看按钮，需要根据根据id查询问题详情，此时应标记问题状态为已查看</li><li>每当<strong>学员</strong>回答或评论时，需要将问题标记为未查看</li></ul><p>管理端也会有回答列表、评论列表。另外，回答和评论同样有隐藏功能。</p><p>问题详情和回答列表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231558293.png" alt="image-20240823155848228"></p><p>还有评论列表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231559432.png" alt="image-20240823155908368"></p><p>总结一下，回答和评论包含的接口有：</p><ul><li>管理端根据id查询问题详情</li><li>分页查询问题下的回答</li><li>分页查询回答下的评论</li><li>点赞/取消点赞某个回答或评论</li><li>隐藏/显示指定回答或评论</li><li>回答某个提问、评论他人回答、评论（与用户端共用）</li></ul><h1 id="—–用户端–问题相关接口—–"><a href="#—–用户端–问题相关接口—–" class="headerlink" title="==—–用户端–问题相关接口—–=="></a>==—–用户端–问题相关接口—–==</h1><h1 id="1-新增互动问题-用户端"><a href="#1-新增互动问题-用户端" class="headerlink" title="1.新增互动问题(用户端)"></a>1.新增互动问题(用户端)</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231610729.png" alt="image-20240823161022682"></p><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>比较简单，通过前端传递给我{课程id，章id，小节id，问题标题，问题具体描述，问题是否匿名}</p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231611595.png" alt="image-20240823161128538"></p><p>通过新增的问题的表单即可分析出接口的请求参数信息了，然后按照Restful的风格设计即可：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231612484.png" alt="image-20240823161245433"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231656927.png" alt="image-20240823165642847"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231657852.png" alt="image-20240823165750814"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231658343.png" alt="image-20240823165804291"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>无</p><h1 id="2-修改问题-用户端"><a href="#2-修改问题-用户端" class="headerlink" title="2.修改问题(用户端)"></a>2.修改问题(用户端)</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>修改与新增表单基本类似，此处不再分析。我们可以参考新增的接口，然后按照Restful的风格设计为更新即可：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231700907.png" alt="image-20240823170039855"></p><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231731666.png" alt="image-20240823173145619"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231731292.png" alt="image-20240823173150262"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231732876.png" alt="image-20240823173243825"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>要注意校验问题是否是自己的，校验是否有这条问题</p><h1 id="3-分页查询问题-用户端"><a href="#3-分页查询问题-用户端" class="headerlink" title="3.分页查询问题(用户端)"></a>3.分页查询问题(用户端)</h1><h2 id="1-原型图-2"><a href="#1-原型图-2" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232035487.png" alt="image-20240823203525426"></p><h2 id="2-设计数据库-2"><a href="#2-设计数据库-2" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-2"><a href="#3-业务逻辑图-2" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>这就是一个典型的分页查询。主要分析请求参数和返回值就行了。</p><p>请求参数就是过滤条件，页面可以看到的条件有：</p><ul><li>分页条件</li><li>全部回答/我的回答：也就是要不要基于用户id过滤</li><li>课程id：隐含条件，因为问题列表是在某课程详情页面查看的，所以一定要以课程id为条件</li><li>章节id：可选条件，当用户点击小节时传递</li></ul><p>返回值格式，从页面可以看到属性有：</p><ul><li>是否匿名：如果提交问题是选择了匿名，则页面不能展示用户信息</li><li>用户id：匿名则不显示</li><li>用户头像：匿名则不显示</li><li>用户名称：匿名则不显示</li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li>最近一次回答的信息：<ul><li>回答人名称</li><li>回答内容</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232043572.png" alt="image-20240823204307508"></p><h2 id="4-接口分析-2"><a href="#4-接口分析-2" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，按照Restful来设计接口，信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232036669.png" alt="image-20240823203613606"></p><h2 id="5-具体实现-2"><a href="#5-具体实现-2" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232123047.png" alt="image-20240823212331980"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232123875.png" alt="image-20240823212338832"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232133199.png" alt="image-20240823213318136"></p><p>[for循环遍历组装数据]</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232129522.png" alt="image-20240823212921387"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-2"><a href="#6-具体难点和亮点-2" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>主要就是根据问题表和问答表查询对应信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232044754.png" alt="image-20240823204407682"></p><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;total&quot;: &quot;2&quot;,</span><br><span class="line">  &quot;pages&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;list&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;1552212554946768897&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;redis安装的时候有问题，一直报错是怎么回事？&quot;,</span><br><span class="line">      &quot;answerTimes&quot;: 1,</span><br><span class="line">      &quot;createTime&quot;: &quot;2022-07-27 16:41:27&quot;,</span><br><span class="line">      &quot;userId&quot;: &quot;2&quot;,</span><br><span class="line">      &quot;userName&quot;: &quot;jack&quot;,</span><br><span class="line">      &quot;userIcon&quot;: &quot;&#x2F;img-tx&#x2F;0abcd1d7a66a4fad98b80c1bb48ec6ec.png&quot;,</span><br><span class="line">      &quot;latestReplyContent&quot;: &quot;是不是Redis的依赖没有安装呢？&quot;,</span><br><span class="line">      &quot;latestReplyUser&quot;: &quot;13500010005&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;如果问题的提问者是匿名的就不显示userName userId userIcon属性</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;1585589766919852033&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;Java的IO是阻塞IO吗？&quot;,</span><br><span class="line">      &quot;answerTimes&quot;: 1,</span><br><span class="line">      &quot;createTime&quot;: &quot;2022-10-27 12:31:44&quot;,</span><br><span class="line">      &quot;latestReplyContent&quot;: &quot;阻塞IO和非阻塞IO都有。java.io包下的都是阻塞IO，java.nio下的是非阻塞IO&quot;,</span><br><span class="line">      &quot;latestReplyUser&quot;: &quot;admin&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装过程：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232129522.png" alt></p><h1 id="4-根据id查询问题详情-用户端"><a href="#4-根据id查询问题详情-用户端" class="headerlink" title="4.根据id查询问题详情(用户端)"></a>4.根据id查询问题详情(用户端)</h1><h2 id="1-原型图-3"><a href="#1-原型图-3" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231755685.png" alt="image-20240823175553623"></p><p>由此可以看出详情页所需要的信息相比分页时，主要多了问题详情，主要字段有：</p><ul><li>是否匿名</li><li>用户id：匿名则不显示</li><li>用户头像：匿名则不显示</li><li>用户名称：匿名则不显示</li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li>问题描述详情</li></ul><h2 id="2-设计数据库-3"><a href="#2-设计数据库-3" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-3"><a href="#3-业务逻辑图-3" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.根据问题id获取一条问题</span><br><span class="line">2.根据1步骤信息判断是否匿名情况：不匿名才赋用户信息</span><br></pre></td></tr></table></figure><h2 id="4-接口分析-3"><a href="#4-接口分析-3" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>而请求参数则更加简单了，就是问题的id</p><p>然后，再按照Restful风格设计，接口就出来了：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231757470.png" alt="image-20240823175701421"></p><h2 id="5-具体实现-3"><a href="#5-具体实现-3" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232025723.png" alt="image-20240823202537651"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232025492.png" alt="image-20240823202543455"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232026385.png" alt="image-20240823202608324"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-3"><a href="#6-具体难点和亮点-3" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>要注意只有不匿名的情况下才能获取用户信息</p><h1 id="5-删除问题-用户端"><a href="#5-删除问题-用户端" class="headerlink" title="5.删除问题(用户端)"></a>5.删除问题(用户端)</h1><h2 id="1-原型图-4"><a href="#1-原型图-4" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231734595.png" alt="image-20240823173457552"></p><h2 id="2-设计数据库-4"><a href="#2-设计数据库-4" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231754864.png" alt="image-20240823175401802"></p><h2 id="3-业务逻辑图-4"><a href="#3-业务逻辑图-4" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>需要注意的是，当用户删除某个问题时，也需要删除问题下的回答、评论。</p><p>整体业务流程如下：</p><ul><li>查询问题是否存在</li><li>判断是否是当前用户提问的</li><li>如果不是则报错</li><li>如果是则删除问题</li><li>然后删除问题下的回答及评论 【两个表根据问题表的主键id和评论问答表的question_id对应(1对多)】</li></ul><h2 id="4-接口分析-4"><a href="#4-接口分析-4" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231735398.png" alt="image-20240823173517366"></p><h2 id="5-具体实现-4"><a href="#5-具体实现-4" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231751721.png" alt="image-20240823175150666"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231751813.png" alt="image-20240823175156775"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231752619.png" alt="image-20240823175228561"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-4"><a href="#6-具体难点和亮点-4" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>需要注意的是，当用户删除某个问题时，也需要删除问题下的回答、评论。</p><p>整体业务流程如下：</p><ul><li>查询问题是否存在</li><li>判断是否是当前用户提问的</li><li>如果不是则报错</li><li>如果是则删除问题</li><li>然后删除问题下的回答及评论 【两个表根据问题表的主键id和评论问答表的question_id对应(1对多)】</li></ul><h1 id="—–用户端–评论相关接口—–"><a href="#—–用户端–评论相关接口—–" class="headerlink" title="==—–用户端–评论相关接口—–=="></a>==—–用户端–评论相关接口—–==</h1><h1 id="1-新增回答-评论-用户端"><a href="#1-新增回答-评论-用户端" class="headerlink" title="1.新增回答/评论(用户端)"></a>1.新增回答/评论(用户端)</h1><h2 id="1-原型图-5"><a href="#1-原型图-5" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241132207.png" alt="image-20240824113228150"></p><p>针对回答和评论的区别：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241142834.png" alt="image-20240824114211785"></p><h2 id="2-设计数据库-5"><a href="#2-设计数据库-5" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-5"><a href="#3-业务逻辑图-5" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241139109.png" alt="image-20240824113914047"></p><h2 id="4-接口分析-5"><a href="#4-接口分析-5" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，按照Restful的规范设计，接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241135827.png" alt="image-20240824113518775"></p><h2 id="5-具体实现-5"><a href="#5-具体实现-5" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251418226.png" alt="image-20240825141841133"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251418596.png" alt="image-20240825141848556"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251420599.png" alt></p><ul><li>4.mapper层</li></ul><p>无，使用mq即可</p><h2 id="6-具体难点和亮点-5"><a href="#6-具体难点和亮点-5" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：回复和评论的区别</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241142834.png" alt="image-20240824114211785"></p></li></ul><blockquote><p>回复：回答哪个问题，回复什么内容，要不要被看到</p><p>评论：回答哪个问题，回复什么内容，要不要被看到 + 【上一级】是哪个回答下面，评论哪个回答，针对谁</p></blockquote><ul><li>问题二：新增回答记得更新question的最近一次回答id</li><li>问题三：如果评论的用户是学生(前端传递是否是学生提交)，标记问题为未查看【管理端根据id查看问题详情会更改为已查看】</li></ul><h1 id="2-分页查询回答-评论列表-用户端"><a href="#2-分页查询回答-评论列表-用户端" class="headerlink" title="2.分页查询回答/评论列表(用户端)"></a>2.分页查询回答/评论列表(用户端)</h1><h2 id="1-原型图-6"><a href="#1-原型图-6" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在问题详情页，除了展示问题详情外，最重要的就是回答列表了，原型图如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251047717.png" alt="image-20240825104731667"></p><p>我们先来分析回答列表，需要展示的内容包括：</p><ul><li>回答id</li><li>回答内容</li><li>是否匿名</li><li>回答人信息（如果是匿名，则无需返回）<ul><li>id</li><li>昵称</li><li>头像</li></ul></li><li>回答时间</li><li>评论数量</li><li>点赞数量</li></ul><p>请求参数就是问题的id。不过需要注意的是，一个问题下的回答比较多，所以一次只能展示一部分，更多数据会采用滚动懒加载模式。简单来说说就是分页查询，所以也要带上分页参数。</p><p>再来看一下回答下的评论列表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251048184.png" alt="image-20240825104818133"></p><p>仔细观察后可以发现，需要展示的数据与回答及其相似，都包括：</p><ul><li>评论id</li><li>评论内容</li><li>是否匿名</li><li>评论人信息（如果是匿名，则无需返回）<ul><li>id</li><li>昵称</li><li>头像</li></ul></li><li>回答时间</li><li>评论数量(无）</li><li>点赞数量</li><li><strong>目标用户昵称（评论特有）</strong></li></ul><p>从返回结果来看：相比回答列表，评论无需展示评论下的评论数量，但是需要展示目标用户的昵称，因为评论是针对某个目标的。</p><p>从查询参数来看：查询评论需要知道回答的id，这点与查询回答列表不太一样。</p><h2 id="2-设计数据库-6"><a href="#2-设计数据库-6" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-6"><a href="#3-业务逻辑图-6" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408250941962.png" alt="image-20240825094145845"></p><h2 id="4-接口分析-6"><a href="#4-接口分析-6" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，按照Restful的规范设计，接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251051437.png" alt="image-20240825105158382"></p><h2 id="5-具体实现-6"><a href="#5-具体实现-6" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251038690.png" alt="image-20240825103843615"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251040629.png" alt="image-20240825104011588"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251040217.png" alt="image-20240825104004139"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-6"><a href="#6-具体难点和亮点-6" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>就是拼接数据，没啥难度</p><h1 id="—–管理端-问题相关接口—–"><a href="#—–管理端-问题相关接口—–" class="headerlink" title="==—–管理端-问题相关接口—–=="></a>==—–管理端-问题相关接口—–==</h1><h1 id="1-根据条件分页查询问题-管理端-—引入ES"><a href="#1-根据条件分页查询问题-管理端-—引入ES" class="headerlink" title="1.根据条件分页查询问题(管理端)—引入ES"></a>1.根据条件分页查询问题(管理端)—引入ES</h1><h2 id="1-原型图-7"><a href="#1-原型图-7" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在管理端后台存在问答管理列表页，与用户端类似都是分页查询，但是请求参数和返回值有较大差别：因此需要引入ES处理</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240942911.png" alt="image-20240824094210826"></p><p>从请求参数来看，除了分页参数，还包含3个：</p><ul><li>问题的查看状态</li><li>课程名称</li><li>提问时间</li></ul><p>从返回值来看，比用户端多了一些字段：</p><ul><li>是否匿名: 管理端不关心，全都展示</li><li>提问者信息：<ul><li>用户id</li><li>用户头像：匿名则不显示</li><li>用户 名称：匿名则不显示</li></ul></li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li>最近一次回答的信息：<ul><li>回答人名称</li><li>回答内容</li></ul></li><li>问题关联的课程名称</li><li>问题关联的章、节名称</li><li>问题关联课程的分类名称</li></ul><h2 id="2-设计数据库-7"><a href="#2-设计数据库-7" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-7"><a href="#3-业务逻辑图-7" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241633238.png" alt="image-20240824163306170"></p><h2 id="4-接口分析-7"><a href="#4-接口分析-7" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>由于请求入参和返回值与用户端有较大差异，因此我们需要设计一个新的接口：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240943151.png" alt="image-20240824094304095"></p><h2 id="5-具体实现-7"><a href="#5-具体实现-7" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240948897.png" alt="image-20240824094857852"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240949574.png" alt="image-20240824094931532"></p><ul><li>3.serviceimpl层</li></ul><p>第一部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241748042.png" alt="image-20240824174828966"></p><p>第二部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241749673.png" alt="image-20240824174932621"></p><p>第三部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241750548.png" alt="image-20240824175054481"></p><p>第四部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241752093.png" alt="image-20240824175209034"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-7"><a href="#6-具体难点和亮点-7" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241126242.png" alt="image-20240824112643164"></p><ul><li><p>问题二：查询条件是课程名称，数据是课程id，怎么实现模糊查询？</p><p>所有上线的课程数据都会存储到<code>Elasticsearch</code>中，方便用户检索课程。并且在<code>tj-search</code>模块中提供了相关的查询接口</p></li><li><p>问题三：那怎么保证ES和Mysql数据一致性？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法一：同步双写，课程上架的时候数据写入Mysql，同步也写入ES</span><br><span class="line">方法二：异步双写，课程上架的时候数据写入Mysql，发送消息给MQ，MQ通知ES更新  【项目使用】</span><br><span class="line">方法三：定时同步，对于数据库新增的时候，定时批量&#x2F;全量同步到ES</span><br><span class="line">方法四：基于Logstash输入输出插件</span><br><span class="line">方法五：基于cancal数据库增量日志解析工具，伪装主从数据库进行同步</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>策略</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>同步双写</td><td>- 简单易实现<br>- 实时性高</td><td>- 代码侵入性强<br>- 存在不一致的风险<br>- 可能影响系统性能</td></tr><tr><td>异步双写（MQ方式）</td><td>- 解耦数据写入操作<br>- 通过消息队列提升性能和扩展性</td><td>- 系统复杂度增加<br>- 可能存在消息丢失的风险<br>- 引入了消息中间件的依赖</td></tr><tr><td>定期同步</td><td>- 实现简单<br>- 无需改变现有业务逻辑</td><td>- 实时性差<br>- 可能给数据库带来额外压力</td></tr><tr><td>基于Binlog实时同步</td><td>- 无代码侵入<br>- 实时性较好<br>- 业务逻辑与数据同步解耦</td><td>- 构建Binlog系统复杂<br>- 可能存在MQ延时风险</td></tr><tr><td>使用Canal监听Binlog同步数据到ES</td><td>- 基于MySQL的Binlog，实现数据的实时同步<br>- 减少系统耦合</td><td>- 需要维护额外的Canal服务</td></tr></tbody></table><ul><li>问题四：CaffeineCache本地缓存怎么做的？</li></ul><h1 id="2-隐藏-显示问题-管理端"><a href="#2-隐藏-显示问题-管理端" class="headerlink" title="2.隐藏/显示问题(管理端)"></a>2.隐藏/显示问题(管理端)</h1><h2 id="1-原型图-8"><a href="#1-原型图-8" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在管理端的互动问题列表中，管理员可以隐藏某个问题，这样就不会在用户端页面展示了：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240950651.png" alt="image-20240824095044589"></p><h2 id="2-设计数据库-8"><a href="#2-设计数据库-8" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-8"><a href="#3-业务逻辑图-8" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>由于<code>interaction_question</code>表中有一个<code>hidden</code>字段来表示是否隐藏：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240951824.png" alt="image-20240824095143762"></p><p>因此，本质来说，这个接口是一个修改某字段值的接口，并不复杂。</p><h2 id="4-接口分析-8"><a href="#4-接口分析-8" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>我们按照Restful的风格来设定，接口信息如下：</p><ul><li><strong>接口地址</strong>:<code>/admin/questions/{id}/hidden/{hidden}</code></li><li><strong>请求方式</strong>:<code>PUT</code></li><li><strong>请求参数</strong>: 路径占位符参数<ul><li>id：问题id</li><li>hidden：是否隐藏</li></ul></li></ul><h2 id="5-具体实现-8"><a href="#5-具体实现-8" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241001834.png" alt="image-20240824100132775"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241001191.png" alt="image-20240824100138151"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241002829.png" alt="image-20240824100229780"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-8"><a href="#6-具体难点和亮点-8" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>就是简单修改字段</p><h1 id="3-根据id查询问题详情-管理端"><a href="#3-根据id查询问题详情-管理端" class="headerlink" title="3.根据id查询问题详情(管理端)"></a>3.根据id查询问题详情(管理端)</h1><h2 id="1-原型图-9"><a href="#1-原型图-9" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在管理端的问题管理页面，点击查看按钮就会进入问题详情页：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241003190.png" alt="image-20240824100328128"></p><p>问题详情页如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241004747.png" alt="image-20240824100430677"></p><h2 id="2-设计数据库-9"><a href="#2-设计数据库-9" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-9"><a href="#3-业务逻辑图-9" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>可以看到，这里需要查询的数据还是比较多的，包含：</p><ul><li>问题标题</li><li>问题描述</li><li>提问者信息<ul><li>id</li><li>昵称</li><li>头像</li></ul></li><li>课程三级分类</li><li>课程名称</li><li><strong>课程负责老师</strong></li><li>课程所属章节</li><li>回答数量</li><li>用户端是否显示</li></ul><p>返回值与管理端分页查询基本一致，多了一个课程负责老师信息。所以我们沿用之前的<code>QuestionAdminVO</code>即可。但是需要添加一个课程负责老师的字段：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241005205.png" alt></p><h2 id="4-接口分析-9"><a href="#4-接口分析-9" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>虽然用户端也有根据id查询问题，但是返回值与用户端存在较大差异，所以我们需要另外设计一个接口。</p><p>按照Restful风格，接口信息如下：</p><ul><li><strong>接口地址</strong>: <code>/admin/questions/{id}</code></li><li><strong>请求方式</strong>: <code>GET</code></li><li><strong>请求参数</strong>: 路径占位符格式</li><li><strong>返回值</strong>：与分页查询共享VO，这里不再赘述</li></ul><h2 id="5-具体实现-9"><a href="#5-具体实现-9" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241109970.png" alt="image-20240824110945921"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241109996.png" alt="image-20240824110950955"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241112109.png" alt="image-20240824111243999"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-9"><a href="#6-具体难点和亮点-9" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><blockquote><p> 问题表中有一个status字段，标记管理员是否已经查看过该问题。因此每当调用根据id查询问题接口，我们可以认为管理员查看了该问题，应该将问题status标记为<strong>已查看</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241057585.png" alt="image-20240824105707505"></p><h1 id="—–管理端–评论相关接口—–"><a href="#—–管理端–评论相关接口—–" class="headerlink" title="==—–管理端–评论相关接口—–=="></a>==—–管理端–评论相关接口—–==</h1><h1 id="1-分页查询问答-评论列表-管理端"><a href="#1-分页查询问答-评论列表-管理端" class="headerlink" title="1.分页查询问答/评论列表(管理端)"></a>1.分页查询问答/评论列表(管理端)</h1><h2 id="1-原型图-10"><a href="#1-原型图-10" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251055240.png" alt="image-20240825105504177"></p><p>可以看到，返回的数据格式包含：</p><ul><li>评论id</li><li>评论内容</li><li>评论人信息<ul><li>id</li><li>昵称</li><li>头像</li><li>类型</li></ul></li><li>回答时间</li><li>评论数量（回答时有）</li><li>点赞数量</li><li>目标用户昵称（评论特有）</li><li><strong>是否被隐藏（管理端特有）</strong></li></ul><p>与用户端查询几乎完全一致。</p><h2 id="2-设计数据库-10"><a href="#2-设计数据库-10" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-10"><a href="#3-业务逻辑图-10" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>与用户端查询几乎完全一致，为什么不使用同一个接口？</p><p>原因有两点：</p><ul><li>管理端在统计评论数量的时候，被隐藏的评论也要统计（用户端不统计隐藏回答）</li><li>管理端无视匿名，所有评论都要返回用户信息；用户端匿名评论不返回用户信息。</li></ul><p>所以在实现的时候，基本逻辑可以与用户端分页一致，但统计评论数量、处理用户信息时，需要区别对待。</p><h2 id="4-接口分析-10"><a href="#4-接口分析-10" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><strong>为了减少代码重复，大家可以对代码做改造抽取，不要重复copy代码</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408251056456.png" alt="image-20240825105639401"></p><h2 id="5-具体实现-10"><a href="#5-具体实现-10" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><p>在用户端的代码添加一个属性判断是否是真：用户端为false，管理端为true【区别：统计数量和用户信息字段】</p><h2 id="6-具体难点和亮点-10"><a href="#6-具体难点和亮点-10" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：为什么不复用接口？</li></ul><p>原因有两点：</p><p>​    ①管理端在统计评论数量的时候，被隐藏的评论也要统计（用户端不统计隐藏回答）</p><p>​    ②管理端无视匿名，所有评论都要返回用户信息；用户端匿名评论不返回用户信息。</p><h1 id="2-隐藏-显示评论-管理端"><a href="#2-隐藏-显示评论-管理端" class="headerlink" title="2.隐藏/显示评论(管理端)"></a>2.隐藏/显示评论(管理端)</h1><h2 id="1-原型图-11"><a href="#1-原型图-11" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>与问题类似，管理员也可以显示或隐藏某个评论或评论：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241407255.png" alt="image-20240824140709151"></p><p>与隐藏问题类似，同样是修改hidden字段。</p><h2 id="2-设计数据库-11"><a href="#2-设计数据库-11" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-11"><a href="#3-业务逻辑图-11" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>与隐藏问题类似，同样是修改hidden字段</p><p>【<strong>注意</strong>：如果隐藏的是回答，则回答下的评论也要隐藏】</p><h2 id="4-接口分析-11"><a href="#4-接口分析-11" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><ul><li><strong>接口地址：</strong><code>/admin/replies/{id}/hidden/{hidden}</code></li><li><strong>请求方式：</strong><code>PUT</code></li><li><strong>请求参数：</strong>路径占位符参数<ul><li>id：回答或评论id</li><li>hidden：是否被隐藏</li></ul></li></ul><h2 id="5-具体实现-11"><a href="#5-具体实现-11" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241614929.png" alt="image-20240824161407864"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241614435.png" alt="image-20240824161414397"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241615550.png" alt="image-20240824161530474"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241615800.png" alt="image-20240824161535756"></p><h2 id="6-具体难点和亮点-11"><a href="#6-具体难点和亮点-11" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-互动问答相关&quot;&gt;&lt;a href=&quot;#1-互动问答相关&quot; class=&quot;headerlink&quot; title=&quot;1.互动问答相关&quot;&gt;&lt;/a&gt;1.互动问答相关&lt;/h1&gt;&lt;h2 id=&quot;准备阶段—分析业务流程&quot;&gt;&lt;a href=&quot;#准备阶段—分析业务流程&quot; class
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂-我的课表相关</title>
    <link href="https://larkkkkkkk.github.io/2024/08/18/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E6%88%91%E7%9A%84%E8%AF%BE%E8%A1%A8%E7%9B%B8%E5%85%B3/"/>
    <id>https://larkkkkkkk.github.io/2024/08/18/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E6%88%91%E7%9A%84%E8%AF%BE%E8%A1%A8%E7%9B%B8%E5%85%B3/</id>
    <published>2024-08-18T08:36:47.000Z</published>
    <updated>2024-08-18T09:33:52.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-我的课表"><a href="#1-我的课表" class="headerlink" title="1.我的课表"></a>1.我的课表</h1><h2 id="准备阶段—业务流程"><a href="#准备阶段—业务流程" class="headerlink" title="准备阶段—业务流程"></a>准备阶段—业务流程</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172043546.png" alt="image-20240817204359442"></p><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>【主要涉及主键id，学员id和课程id也要记录[要考虑是谁学了什么课程]】</p><p>课表要记录的是用户的学习状态，所谓学习状态就是记录<strong>谁</strong>在学习<strong>哪个课程</strong>，<strong>学习的进度</strong>如何。</p><ul><li><p>其中，谁在学习哪个课程，就是一种关系。也就是说<strong>课表就是用户和课程的中间关系表</strong>。因此一定要包含三个字段：</p><ul><li>userId：用户id，也就是<strong>谁</strong></li><li>courseId：课程id，也就是学的<strong>课程</strong></li><li>id：唯一主键</li></ul></li><li><p>而学习进度，则是一些附加的功能字段，页面需要哪些功能就添加哪些字段即可：</p></li></ul><ul><li><p>status：课程学习状态。0-未学习，1-学习中，2-已学完，3-已过期</p></li><li><p>planStatus：学习计划状态，0-没有计划，1-计划进行中</p></li><li><p>weekFreq：计划的学习频率</p></li><li><p>learnedSections：已学习小节数量，【注意：课程总小节数、课程名称、封面等可由课程id查询得出，无需重复记录】</p></li><li><p>latestSectionId：最近一次学习的小节id，方便根据id查询最近学习的课程正在学第几节</p></li><li><p>latestLearnTime：最近一次学习时间，用于分页查询的排序：</p></li><li><p>createTime和expireTime，也就是课程加入时间和过期时间</p></li></ul><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172127956.png" alt="image-20240817212711903"></p><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172052867.png" alt="image-20240817205247815"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172050280.png" alt="image-20240817205028215"></p><h2 id="准备阶段—Mybatis-plus代码生成"><a href="#准备阶段—Mybatis-plus代码生成" class="headerlink" title="准备阶段—Mybatis-plus代码生成"></a>准备阶段—Mybatis-plus代码生成</h2><p>参考我的Mybatis-plus笔记-代码生成步骤：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141519620.png" alt="image-20240814151956565"></p><h2 id="准备阶段—状态枚举"><a href="#准备阶段—状态枚举" class="headerlink" title="准备阶段—状态枚举"></a>准备阶段—状态枚举</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141521880.png" alt="image-20240814152152815"></p><h2 id="准备阶段—所有接口"><a href="#准备阶段—所有接口" class="headerlink" title="准备阶段—所有接口"></a>准备阶段—所有接口</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408132134374.png" alt="image-20240813213435263"></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="==具体实现=="></a>==<strong>具体实现</strong>==</h1><h1 id="1-支付-报名课程后添加课表"><a href="#1-支付-报名课程后添加课表" class="headerlink" title="1.支付/报名课程后添加课表"></a>1.支付/报名课程后添加课表</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create table learning_lesson</span><br><span class="line">(</span><br><span class="line">    id                bigint                             not null comment &#39;主键&#39;</span><br><span class="line">        primary key,</span><br><span class="line">    user_id           bigint                             not null comment &#39;学员id&#39;,</span><br><span class="line">    course_id         bigint                             not null comment &#39;课程id&#39;,</span><br><span class="line">    status            tinyint  default 0                 null comment &#39;课程状态，0-未学习，1-学习中，2-已学完，3-已失效&#39;,</span><br><span class="line">    week_freq         tinyint                            null comment &#39;每周学习频率，例如每周学习6小节，则频率为6&#39;,</span><br><span class="line">    plan_status       tinyint  default 0                 not null comment &#39;学习计划状态，0-没有计划，1-计划进行中&#39;,</span><br><span class="line">    learned_sections  int      default 0                 not null comment &#39;已学习小节数量&#39;,</span><br><span class="line">    latest_section_id bigint                             null comment &#39;最近一次学习的小节id&#39;,</span><br><span class="line">    latest_learn_time datetime                           null comment &#39;最近一次学习的时间&#39;,</span><br><span class="line">    create_time       datetime default CURRENT_TIMESTAMP not null comment &#39;创建时间&#39;,</span><br><span class="line">    expire_time       datetime                           not null comment &#39;过期时间&#39;,</span><br><span class="line">    update_time       datetime default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment &#39;更新时间&#39;,</span><br><span class="line">    constraint idx_user_id</span><br><span class="line">        unique (user_id, course_id)</span><br><span class="line">)</span><br><span class="line">    comment &#39;学生课程表&#39; row_format &#x3D; DYNAMIC;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151658196.png" alt="image-20240815165857129"></p><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>接下来，我们来分析一下添加课表逻辑的业务流程。首先来对比一下请求参数和数据库字段：</p><p>参数：</p><ul><li>Long userId</li><li>List<Long> courseIds</Long></li></ul><p>数据表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172133522.png" alt="img"></p><p>一个userId和一个courseId是learning_lesson表中的一条数据。而订单中一个用户可能购买多个课程。因此请求参数中的courseId集合就需要逐个处理，将来会有多条课表数据。</p><p>另外，可以发现参数中只有userId和courseId，表中的其它字段都需要我们想办法来组织：</p><ul><li>status：课程状态，可以默认为0，代表未学习</li><li>week_freq：学习计划频率，可以为空，代表没有设置学习计划</li><li>plan_status：学习计划状态，默认为0，代表没有设置学习计划</li><li>learned_sections：已学习小节数，默认0，代表没有学习</li><li>latest_section_id：最近学习小节id，可以为空，代表最近没有学习任何小节</li><li>latest_learn_time：最近学习时间，可以为空，代表最近没有学习</li><li>create_time：创建时间，也就是当前时间</li><li><strong>expire_time</strong>：过期时间，这个要结合课程来计算。每个课程都有自己的有效期（valid_duration），因此过期时间就是create_time加上课程的有效期</li><li>update_time：更新时间，默认当前时间，有数据库实时更新，不用管</li></ul><p>可见在整张表中，需要我们在新增时处理的字段就剩下过期时间<code>expire_time</code>了。而要知道这个就必须根据courseId查询课程的信息，找到其中的课程有效期（<code>valid_duration</code>）。课程表结构如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172134616.png" alt="image-20240817213419509"></p><p>因此，我们要做的事情就是根据courseId集合查询课程信息，然后分别计算每个课程的有效期，组织多个LearingLesson的数据，形成集合。最终批量新增到数据库即可。</p><p>流程如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152124144.png" alt="image-20240815212456046"></p><p>其中消息发送者信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172111462.png" alt="image-20240817211108395"></p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152122557.png" alt="image-20240815212239468"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.数据库设计：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141457877.png" alt="image-20240814145734802"></p><ul><li>2.准备PO和枚举类：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141521880.png" alt="image-20240814152152815"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用枚举类的优点：</span><br><span class="line">1.类型安全：枚举提供了一种类型安全的方式来处理一组固定的常量。使用枚举可以确保status字段的值只限于预定义的四个选项，防止出现无效的值。【更安全】</span><br><span class="line">2.代码可读性：枚举使得代码更易读，更易于维护。开发者可以很容易地理解每个枚举值的含义，而不需要去查看数据库字段的注释或文档。【易读】</span><br><span class="line">3.减少错误：使用枚举可以减少因拼写错误或使用错误的整数值而导致的bug。【防止写错】</span><br><span class="line">4.便于比较：枚举类型之间的比较可以直接使用&#x3D;&#x3D;操作符，而不需要使用equals方法。【直接使用&#x3D;&#x3D;对比】</span><br><span class="line">5.可扩展性：如果未来需要添加更多的状态，枚举类可以很容易地进行扩展。【更容易扩展】</span><br><span class="line">6.方法和属性：枚举类型可以包含字段、方法和构造函数，这使得你可以在枚举值上添加更多的行为和数据。</span><br><span class="line">7.序列化：枚举类型默认实现了Serializable接口，这使得它们可以很容易地被序列化和反序列化。【搭配@JsonValue&#x2F;&#x2F;序列化的时候转为响应值 @EnumValue &#x2F;&#x2F;和数据库打交道时转为相对应值】</span><br><span class="line">8.switch语句支持：枚举类型可以作为switch语句的合法变量类型，使得代码更加清晰。</span><br></pre></td></tr></table></figure><ul><li>3.使用MybatisPlus生成其余基础代码：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141519620.png" alt="image-20240814151956565"></p><ul><li>4.设计MQ消费者信息</li></ul><p><strong>【我和课程下单统一OrderBasicDTO，主要传递orderId和courseID和userID以及完成时间】</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151620820.png" alt="image-20240815162011652"></p><ul><li>5.具体逻辑</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151624663.png" alt="image-20240815162411566"></p><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：课程过期时间怎么算？</p><p>课程过期时间=课程加入课程时间(当前)+课程有效期(通过传入的courseId课程id远程调用课程微服务获取media_duration有效时间)</p></li><li><p>问题二：如果这个人网络不好，重复下单怎么保证幂等性？</p><p>1.我给(courseId,userId)创建唯一索引，保证幂等性</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151652348.png" alt="image-20240815165221302"></p><p>2.我使用redis：进来的时候判断OrderId订单id是否有，有的话就重复，没有的话就存在redis[设置60s]</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151651884.png" alt="image-20240815165141761"></p><ul><li><p>问题三：Id如何设计？</p><p>分为分库和不分库情况：我考虑并发就分库，然后使用雪花算法【还有其他方法，在tk实习时候考虑的那个笔记里面】<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151701679.png" alt="image-20240815170139617"></p></li></ul><p>参考本文：<a href="https://mp.weixin.qq.com/s/zQNfcpCbPoo4yQFJR7FpqQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zQNfcpCbPoo4yQFJR7FpqQ</a></p><h1 id="2-分页查询我的课表"><a href="#2-分页查询我的课表" class="headerlink" title="2.分页查询我的课表"></a>2.分页查询我的课表</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172106757.png" alt="image-20240817210643678"></p><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172109033.png" alt="image-20240817210943970"></p><p>肉眼可见的字段就包含：</p><ul><li>课程名称</li><li>课程加入课表时间</li><li>课程有效期结束时间</li><li>课程状态</li><li>课程已学习小节数</li><li>课程总小节数</li><li>课程是否创建了学习计划</li></ul><p>还有一些字段是页面中没有的，但是可以从功能需要中推测出来，例如：</p><ul><li>课程id：因为我们点击卡片，需要跳转到对应课程页面，必须知道课程id</li><li>课程封面：页面渲染时为了美观，一定会展示一个课程的封面图片</li><li>学习计划频率：当用户点击修改学习计划时，需要回显目前的学习计划频率</li><li>课表id，当前课程在课表中的对应id，当用户点击继续学习，或创建集合，需要根据课表来操作</li></ul><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152119555.png" alt="image-20240815211955503"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151707675.png" alt></p><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151952385.png" alt="image-20240815195224271"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151952827.png" alt="image-20240815195238771"></p><ul><li>3.serviceImp层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151955124.png" alt="image-20240815195504036"></p><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：如何查询避免封装时候两次for循环</li></ul><p>​        使用courseList.stream().collect(Collectors.toMap(CourseSimpleInfoDTO::getId, c -&gt; c))转换为map，在后续直接取出来就行</p><h1 id="3-查看最近学习的课程-一门"><a href="#3-查看最近学习的课程-一门" class="headerlink" title="3. 查看最近学习的课程(一门)"></a>3. 查看最近学习的课程(一门)</h1><h2 id="1-原型图-2"><a href="#1-原型图-2" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172046051.png" alt="image-20240817204641999"></p><h2 id="2-设计数据库-2"><a href="#2-设计数据库-2" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><p>learning_lesson</p><p>course</p><p>course_catalogue</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152001995.png" alt="image-20240815200109908"></p><h2 id="3-业务逻辑图-2"><a href="#3-业务逻辑图-2" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>主要分为四个部分数据：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152107195.png" alt="image-20240815210724100"></p><h2 id="4-接口分析-2"><a href="#4-接口分析-2" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152001960.png" alt="image-20240815200138868"></p><h2 id="5-具体实现-2"><a href="#5-具体实现-2" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152115998.png" alt="image-20240815211536963"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152115196.png" alt="image-20240815211548167"></p><ul><li><p>3.serviceimpl层</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152114377.png" alt="image-20240815211458287"></p></li><li><p>4.mapper层</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161506339.png" alt="image-20240816150635247"></p><h2 id="6-具体难点和亮点-2"><a href="#6-具体难点和亮点-2" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：什么是最近学习的一门课程【基本上围绕learning-lesson和course以及course-catalogue三个数据库表获取数据】</p><p>可以在学习中心位置查看最近学习的一门课程，主要是通过userId用户id查询一条课程表信息；通过课程表信息的courseId课程id查询课程的具体信息；通过课程表信息的latest_section_id最近一次学习的小节名称远程调用课程学习微服务获取(通过latest_section_id查询course-catalogue表数据)；通过userId用户id来count(*)获得数据</p></li></ul><h1 id="4-根据id查询某个课程学习状态"><a href="#4-根据id查询某个课程学习状态" class="headerlink" title="4.根据id查询某个课程学习状态"></a>4.根据id查询某个课程学习状态</h1><h2 id="1-原型图-3"><a href="#1-原型图-3" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在课程详情页，课程展示有两种不同形式：</p><ul><li>对于未购买的课程：展示为立刻购买或加入购物车</li></ul><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=ODg4NjdmYWQwYWFjOTdjMGJiMGVlMThjODNkODA2OTBfYTRpZ3pFNU5sSUVqcjMwcFdLOU55cE9qTjg1dmhkd1FfVG9rZW46UFBjb2JtOXFpb01wVTh4TU9aMGNIcHJObmpjXzE3MjM5MDA2NTc6MTcyMzkwNDI1N19WNA" alt="img"></p><ul><li>对于已经购买的课程：展示为马上学习，并且显示学习的进度、有效期</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172117207.png" alt="img"></p><h2 id="2-设计数据库-3"><a href="#2-设计数据库-3" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-3"><a href="#3-业务逻辑图-3" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161446074.png" alt="image-20240816144647955"></p><h2 id="4-接口分析-3"><a href="#4-接口分析-3" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161447157.png" alt="image-20240816144722047"></p><h2 id="5-具体实现-3"><a href="#5-具体实现-3" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161513754.png" alt="image-20240816151331705"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161513942.png" alt="image-20240816151336910"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161514679.png" alt="image-20240816151452627"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161513482.png" alt="image-20240816151350430"></p><h2 id="6-具体难点和亮点-3"><a href="#6-具体难点和亮点-3" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：查询课表的课程还是课程表的信息？</li></ul><p>​        ①根据courseId和UserId(两者是唯一索引，能保证只有得到一条数据)查询课表得到公共数据，针对课程具体信息要传入courseId课程id远程调用查询</p><h1 id="5-删除课表中的课程"><a href="#5-删除课表中的课程" class="headerlink" title="5.删除课表中的课程"></a>5.删除课表中的课程</h1><h2 id="1-原型图-4"><a href="#1-原型图-4" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161644903.png" alt="image-20240816164422835"></p><h2 id="2-设计数据库-4"><a href="#2-设计数据库-4" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-4"><a href="#3-业务逻辑图-4" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>删除课表中的课程有两种场景：</p><ul><li>①用户直接删除已失效的课程【比较简单】</li><li>②用户退款后触发课表自动删除【涉及发送MQ消息给learning-service服务】</li></ul><p>现在那边退款成功之后增加步骤4[发送消息，我需要负责接受消息]</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161621711.png" alt="image-20240816162139654"></p><h2 id="4-接口分析-4"><a href="#4-接口分析-4" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>这里我们可以按照Restful的规范来定义这个删除接口：</p><ul><li>请求方式：删除业务的请求方式都是DELETE</li><li>请求路径：一般是资源名 + 标示，这里删除的是课表中的课程，因此：<code>/ls/lessons/{courseId}</code></li><li>请求参数：自然是路径中传递的课程id</li><li>返回值：无</li></ul><h2 id="5-具体实现-4"><a href="#5-具体实现-4" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161606364.png" alt="image-20240816160647290"></p><ul><li><p>2.service层</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161638997.png" alt="image-20240816163813941"></p></li><li><p>3.serviceimpl层</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161607824.png" alt="image-20240816160731775"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161638069.png" alt="image-20240816163833033"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161607360.png" alt="image-20240816160747311"></p><ul><li>5.learning-service微服务接收MQ消息</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161643160.png" alt="image-20240816164326102"></p><h2 id="6-具体难点和亮点-4"><a href="#6-具体难点和亮点-4" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：删除的有哪几种情况？</p><p>①根据用户下单，然后取消报名的时候发送MQ消息给learning-service微服务告知删除</p><p>②已经学习了很久，课程失效了就直接根据情况删除</p></li></ul><h1 id="6-检查课程是否有效"><a href="#6-检查课程是否有效" class="headerlink" title="6.检查课程是否有效"></a>6.检查课程是否有效</h1><h2 id="1-原型图-5"><a href="#1-原型图-5" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-5"><a href="#2-设计数据库-5" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-5"><a href="#3-业务逻辑图-5" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>这是一个微服务内部接口，当用户学习课程时，可能需要播放课程视频。此时提供视频播放功能的媒资系统就需要校验<code>用户是否有播放视频的资格</code>。所以，开发媒资服务（<code>tj-media</code>）的同事就请你提供这样一个接口。</p><p>用户要想有播放视频的资格，那就必须满足两个条件：</p><ul><li>用户课表中是否有该课程</li><li>课程状态是否是有效的状态（未过期）</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161656961.png" alt="image-20240816165647909"></p><h2 id="4-接口分析-5"><a href="#4-接口分析-5" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161646815.png" alt="image-20240816164643768"></p><h2 id="5-具体实现-5"><a href="#5-具体实现-5" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161658298.png" alt="image-20240816165802260"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161658718.png" alt="image-20240816165837661"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161659938.png" alt="image-20240816165901892"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161659486.png" alt="image-20240816165912431"></p><h2 id="6-具体难点和亮点-5"><a href="#6-具体难点和亮点-5" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：如何判断课程是否有效</p><p>就是①判断课表是否有这个课程，②这个课程的expire过期时间是否失效了，没办法学了</p></li></ul><h1 id="7-统计课程的学习人数"><a href="#7-统计课程的学习人数" class="headerlink" title="7.统计课程的学习人数"></a>7.统计课程的学习人数</h1><h2 id="1-原型图-6"><a href="#1-原型图-6" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>课程微服务中需要统计每个课程的报名人数，同样是一个内部调用接口，在tj-api模块中已经定义好了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计课程学习人数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> courseId 课程id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 学习人数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/lessons/&#123;courseId&#125;/count"</span>)</span><br><span class="line"><span class="function">Integer <span class="title">countLearningLessonByCourse</span><span class="params">(@PathVariable(<span class="string">"courseId"</span>)</span> Long courseId)</span>;</span><br></pre></td></tr></table></figure><h2 id="2-设计数据库-6"><a href="#2-设计数据库-6" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-6"><a href="#3-业务逻辑图-6" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-6"><a href="#4-接口分析-6" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>这里我们可以按照Restful的规范来定义这个统计接口：</p><ul><li>请求方式：删除业务的请求方式都是GET</li><li>请求路径：一般是资源名 + 标示，这里删除的是课表中的课程，因此：<code>/lessons/{courseId}</code></li><li>请求参数：自然是路径中传递的课程id</li><li>返回值：Integer学习人数</li></ul><h2 id="5-具体实现-6"><a href="#5-具体实现-6" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161732734.png" alt="image-20240816173242686"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161732033.png" alt="image-20240816173248999"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161733833.png" alt="image-20240816173314799"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161733551.png" alt="image-20240816173300519"></p><h2 id="6-具体难点和亮点-6"><a href="#6-具体难点和亮点-6" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：sql怎么写？怎么统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(user_id) </span><br><span class="line">from learning_lesson </span><br><span class="line">where course_id&#x3D;xx   【根据课程id分类】</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-我的课表&quot;&gt;&lt;a href=&quot;#1-我的课表&quot; class=&quot;headerlink&quot; title=&quot;1.我的课表&quot;&gt;&lt;/a&gt;1.我的课表&lt;/h1&gt;&lt;h2 id=&quot;准备阶段—业务流程&quot;&gt;&lt;a href=&quot;#准备阶段—业务流程&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂-学习计划和进度</title>
    <link href="https://larkkkkkkk.github.io/2024/08/16/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%92%8C%E8%BF%9B%E5%BA%A6/"/>
    <id>https://larkkkkkkk.github.io/2024/08/16/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%92%8C%E8%BF%9B%E5%BA%A6/</id>
    <published>2024-08-16T09:46:01.000Z</published>
    <updated>2024-08-22T13:40:07.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前提回顾"><a href="#0-前提回顾" class="headerlink" title="0.前提回顾"></a>0.前提回顾</h1><p>在东林在线微课堂-我的课表相关：已经可以实现课表的增删改查接口，但是在查看已学习课程时候有两个字段没有返回：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181654890.png" alt="image-20240818165409837"></p><p>我们需要在查询结果中返回已学习课时数、正在学习的章节名称。虽然我们在learning_lesson表中设计了两个字段：</p><ul><li>learned_sections：已学习章节数</li><li>latest_learn_time：最近学习时间</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181655768.png" alt="image-20240818165508732"></p><p>以上的问题归纳下来，就是一个<strong>学习进度统计</strong>问题，这在在线教育、视频播放领域是一个非常常见的问题。</p><ul><li>提出原因：</li></ul><p>大部分人的学习自律性是比较差的，属于“买了就算会了”的状态。如果学员学习积极性下降，学习结果也会不尽人意，从而产生挫败感。导致购买课程的欲望也会随之下降，形成恶性循环，不利于我们卖课。</p><p>所以，我们推出<strong>学习计划</strong>的功能，让学员制定一套学习计划，每周要学几节课。系统会做数据统计，每一周计划是否达标，达标后给予奖励，未达标则提醒用户，达到督促用户持续学习的目的。</p><p>用户学习效果好了，产生了好的结果，就会有继续学习、购买课程的欲望，形成良性循环。</p><p>因此，学习计划、学习进度统计其实是学习辅助中必不可少的环节。</p><h1 id="1-学习计划相关"><a href="#1-学习计划相关" class="headerlink" title="1.学习计划相关"></a>1.学习计划相关</h1><h2 id="准备阶段—分析业务流程"><a href="#准备阶段—分析业务流程" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><h2 id="1-学习计划"><a href="#1-学习计划" class="headerlink" title="1.==学习计划=="></a>1.==<strong>学习计划</strong>==</h2><p>在我的课程页面，可以对有效的课程添加学习计划：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181704360.png" alt="img"></p><p>学习计划就是简单设置一下用户每周计划学习几节课：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181706034.png" alt></p><p>有了计划以后，我们就可以在我的课程页面展示用户计划的完成情况，提醒用户尽快学习：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181709893.png" alt="image-20240818170916834"></p><p>可以看到，在学习计划中是需要统计用户“已经学习的课时数量”。</p><h2 id="2-学习进度统计"><a href="#2-学习进度统计" class="headerlink" title="2.==学习进度统计=="></a>2.<strong>==学习进度统计==</strong></h2><p>在原型图《课程学习页-录播课-课程学习页-目录》中，可以看到学习课程的原型图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181713079.png" alt="image-20240818171318018"></p><p>一个课程往往包含很多个<strong>章（chapter）</strong>，每一章下又包含了很多<strong>小节（section）</strong>。章本身没有课程内容，只是划分课程的一个概念。小节分两种，一种是<strong>视频</strong>；一种是每章最后的阶段<strong>考试</strong>  —-&gt; 用户学完一个视频/参加了最终的考试都算学完了一个小节。</p><blockquote><p> <strong>==统计学习进度：====用户学了多少小节[①视频：完播率超过75%②考试：考试提交]==</strong></p></blockquote><p>因而引出几个问题：</p><blockquote><p> 因此，用户在播放视频的过程中，需要不断地提交视频的播放进度，当我们发现视频进度超过75%的时候就标记这一小节为<strong>已完成</strong><br> 因此，我们需要记录<strong>视频是否完成</strong>，也需要记录<strong>用户具体播放到第几秒视频</strong>[这样下次播放就可以实现视频自动续播]</p></blockquote><p>也就是说，要记录用户学习进度，需要记录下列核心信息：</p><ul><li>小节的基础信息（id、关联的课程id等）</li><li>当前的播放进度（第几秒）</li><li>当前小节是否已学完（播放进度是否超75%）</li></ul><p>用户每学习一个小节，就会新增一条学习记录，当该课程的全部小节学习完毕，则该课程就从<strong>学习中</strong>进入<strong>已学完</strong>状态了。整体流程如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181730459.png" alt="image-20240818173039394"></p><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>数据表的设计要满足<strong>学习计划[<code>learning_lesson</code>表在我的课表需求完成设计]</strong>、<strong>学习进度[目前需要]</strong>的功能需求：</p><p>按照之前的分析，用户学习的课程包含多个小节，小节的类型包含两种：</p><ul><li>视频：视频播放进度超过50%就算当节学完</li><li>考试：考完就算一节学完</li></ul><p>学习进度除了要记录哪些小节学完，还要记录学过的小节、每小节的播放的进度（方便续播）。因此，需要记录的数据就包含以下部分：</p><ul><li>学过的小节的基础信息<ul><li>小节id</li><li>小节对应的lessonId课表id</li><li>用户id：学习课程的人</li></ul></li><li>小节的播放进度信息<ul><li>视频播放进度：也就是播放到了第几秒</li><li>是否已经学完：播放进度有没有超过50%</li><li>第一次学完的时间：用户可能重复学习，第一次从未学完到学完的时间要记录下来</li></ul></li></ul><p>再加上一些表基础字段，整张表结构就出来了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;learning_record&#96; (</span><br><span class="line">  &#96;id&#96; bigint NOT NULL COMMENT &#39;学习记录的id&#39;,</span><br><span class="line">  &#96;lesson_id&#96; bigint NOT NULL COMMENT &#39;对应课表的id&#39;,</span><br><span class="line">  &#96;section_id&#96; bigint NOT NULL COMMENT &#39;对应小节的id&#39;,</span><br><span class="line">  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,</span><br><span class="line">  &#96;moment&#96; int DEFAULT &#39;0&#39; COMMENT &#39;视频的当前观看时间点，单位秒&#39;,</span><br><span class="line">  &#96;finished&#96; bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否完成学习，默认false&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;第一次观看时间&#39;,</span><br><span class="line">  &#96;update_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间（最近一次观看时间）&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_update_time&#96; (&#96;update_time&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_user_id&#96; (&#96;user_id&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_lesson_id&#96; (&#96;lesson_id&#96;,&#96;section_id&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci ROW_FORMAT&#x3D;DYNAMIC COMMENT&#x3D;&#39;学习记录表&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182129542.png" alt="image-20240818212933490"></p><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><h2 id="准备阶段—Mybatis-Plus代码生成"><a href="#准备阶段—Mybatis-Plus代码生成" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191553192.png" alt="image-20240819155350133"></p><h2 id="准备阶段—类型枚举"><a href="#准备阶段—类型枚举" class="headerlink" title="准备阶段—类型枚举"></a>准备阶段—类型枚举</h2><p>我们需要准备一些VO和DTO等</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191553944.png" alt="image-20240819155305895"></p><h1 id="————————具体实现———————"><a href="#————————具体实现———————" class="headerlink" title="==————————具体实现———————-=="></a>==————————具体实现———————-==</h1><p>按照用户的学习顺序，依次有下面几个接口：</p><ul><li>创建学习计划</li><li>查询学习记录</li><li>提交学习记录</li><li>查询我的计划</li></ul><h1 id="1-创建学习计划"><a href="#1-创建学习计划" class="headerlink" title="1.创建学习计划"></a>1.创建学习计划</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在个人中心的我的课表列表中，没有学习计划的课程都会有一个<strong>创建学习计划</strong>的按钮，在原型图就能看到：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181752564.png" alt="image-20240818175247495"></p><p>创建学习计划，本质就是让用户设定自己每周的学习频率：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181753875.png" alt="image-20240818175308838"></p><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>当我们创建学习计划时，就是根据课程id和用户id去更新<code>learning_lesson</code>表，写入<code>week_freq</code>并更新<code>plan_status</code>为计划进行中即可。</p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>而学习频率我们在设计learning_lesson表的时候已经有两个字段来表示了：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181753822.png" alt="image-20240818175359777"></p><p>当我们创建学习计划时，就是根据课程id和用户id去更新<code>learning_lesson</code>表，写入<code>week_freq</code>并更新<code>plan_status</code>为计划进行中即可。</p><p>因此请求参数就是课程的id、每周学习频率。再按照Restful风格，最终接口如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181757610.png" alt="image-20240818175713570"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408201446412.png" alt="image-20240820144641297"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408201446574.png" alt="image-20240820144656535"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408201448389.png" alt="image-20240820144819334"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>就是简单的创建学习计划【根据userId和courseId课程id更新一行数据的weekFreq和status字段】</p><h1 id="2-查询学习记录"><a href="#2-查询学习记录" class="headerlink" title="2.查询学习记录"></a>2.查询学习记录</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>用户创建完计划自然要开始学习课程，在用户学习视频的页面，首先要展示课程的一些基础信息。例如课程信息、章节目录以及每个小节的学习进度：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182109390.png" alt="image-20240818210943313"></p><p>其中：</p><p>①课程、章节、目录信息等数据都在课程微服务。【课程信息是必备的】</p><p>②学习进度肯定是在学习微服务。<strong>【学习进度却不一定存在】</strong></p><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>①课程、章节、目录信息等数据都在课程微服务。【课程信息是必备的】</p><p>②学习进度肯定是在学习微服务。<strong>【学习进度却不一定存在】</strong></p><p>因此，查询这个接口的请求———&gt;课程微服务【查询课程、章节信息】，再由课程微服务———&gt;学习微服务【查询学习进度】，合并后一起返回给前端即可。</p><p>所以，学习中心要提供一个查询章节学习进度的Feign接口，事实上这个接口已经在tj-api模块的LearningClient中定义好了：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182115454.png" alt="image-20240818211523413"></p><p>根据courseId和userId获取课表id和最近学习的小节id，然后根据课表id获取多条学习记录。【小节id，小节视频播放进度，小节是否学习完】</p><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>对应的DTO也都在tj-api模块定义好了，因此整个接口规范如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182117802.png" alt="image-20240818211701755"></p><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191712804.png" alt="image-20240819171234727"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191714098.png" alt="image-20240819171400064"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191713413.png" alt="image-20240819171323344"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191713045.png" alt="image-20240819171336002"></p><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>无[就是查询而已]</p><h1 id="3-提交学习记录-每15秒提交–很难懂"><a href="#3-提交学习记录-每15秒提交–很难懂" class="headerlink" title="3.提交学习记录(每15秒提交–很难懂!!!)"></a>3.提交学习记录(每15秒提交–很难懂!!!)</h1><h2 id="1-原型图-2"><a href="#1-原型图-2" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-2"><a href="#2-设计数据库-2" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-2"><a href="#3-业务逻辑图-2" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>之前分析业务流程的时候已经聊过，学习记录==用户当前学了哪些小节，以及学习到该小节的进度如何。而小节类型分为考试、视频两种。</p><ul><li>考试比较简单，只要提交了就说明这一节学完了。</li><li>视频比较麻烦，需要记录用户的播放进度，进度超过75%才算学完。因此视频播放的过程中需要不断提交播放进度到服务端，而服务端则需要保存学习记录到数据库。</li></ul><p>只要记录了用户学过的每一个小节，以及小节对应的学习进度、是否学完。无论是<strong>视频续播</strong>、还是<strong>统计学习计划进度</strong>，都可以轻松实现了。</p><p>因此，提交学习记录就是提交小节的信息和小节的学习进度信息。考试提交一次即可，视频则是播放中频繁提交。提交的信息包括两大部分：</p><ul><li><p>小节的基本信息</p><ul><li>小节id</li><li>lessonId课程id</li><li>小节类型：可能是视频，也可能是考试。考试无需提供播放进度信息</li><li>提交时间</li></ul></li><li><p>播放进度信息</p><ul><li>视频时长：时长结合播放进度可以判断有没有超过50%</li><li>视频播放进度：也就是第几秒</li></ul></li></ul><p>具体业务思路：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191755416.png" alt="image-20240819175544333"></p><h2 id="4-接口分析-2"><a href="#4-接口分析-2" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，提交学习记录的接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182117498.png" alt="image-20240818211748452"></p><h2 id="5-具体实现-2"><a href="#5-具体实现-2" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408192139632.png" alt="image-20240819213932560"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408192139269.png" alt="image-20240819213937233"></p><ul><li>3.serviceimpl层</li></ul><p>serviceimpl层代码整体逻辑：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211501082.png" alt="image-20240821150157002"></p><p>其中处理课表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211510946.png" alt="image-20240821151018860"></p><p>其中处理视频：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211515607.png" alt="image-20240821151504478"></p><p>其中处理考试：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211519150.png" alt="image-20240821151957029"></p><ul><li>4.mapper层</li></ul><p>无【全用的mybatisplus完成】</p><h2 id="6-具体难点和亮点-2"><a href="#6-具体难点和亮点-2" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：学习记录服务有必要提交到服务端？在客户端不就可以保存</p><p>​    我设置的是课程学习页面播放视频时/考试后，需要提交学习记录信息到服务端保存。每隔15s提交一次。【保证换个设备还可以查看】</p></li><li><p>问题二：实现思路是什么？</p><p>​    ①获取当前用户</p><p>​    ②处理学习记录 —&gt;2.1判断提交类型，①处理视频[存在记录更新学习记录并且判断是否第一次学习，不存在就新增学习记录]②处理考试[只需要新增学习记录，返回true一定是已学习]</p><p>​    ③处理课表记录 —&gt; 3.1查找课表，3.2判断是否全部学完，3.3放在一个更新课表[①本来就修改的字段②学习完全部小节，多修改一个字段③第一次学习，多修改一个字段]</p></li></ul><ul><li>问题三：怎么判断的各个节点</li></ul><p>​        <strong>判断是否是考试</strong>：通过前端传入的dto判断sectionType字段</p><p>​        <strong>判断记录已经存在</strong>：通过lessonid课程id和sectionId小节id确定一行record，如果有就是存在</p><p>​        <strong>判断是否第一次学习完</strong>：通过判断record的finished字段未完成&amp;&amp;前端传入的视频播放秒数moment*2&gt;前端传入的视频总长duration</p><p>​        <strong>判断判断是否学习完全部课程</strong>：当前lesson的learnedsections已学习小节数+1&gt;课程总小节数【课程微服务查询出】</p><h1 id="4-查询我的计划-封装数据难"><a href="#4-查询我的计划-封装数据难" class="headerlink" title="4.查询我的计划(封装数据难)"></a>4.查询我的计划(封装数据难)</h1><h2 id="1-原型图-3"><a href="#1-原型图-3" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在个人中心的我的课程页面，会展示用户的学习计划及<strong>本周</strong>的学习进度，原型如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182118683.png" alt="image-20240818211809633"></p><h2 id="2-设计数据库-3"><a href="#2-设计数据库-3" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-3"><a href="#3-业务逻辑图-3" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>需要注意的是这个查询其实是一个分页查询，因为页面最多展示10行，而学员同时在学的课程可能会超过10个，这个时候就会分页展示，当然这个分页可能是滚动分页，所以没有进度条。另外，查询的是<strong>我的</strong>学习计划，隐含的查询条件就是当前登录用户，这个无需传递，通过请求头即可获得。</p><p>因此查询参数只需要<strong>分页</strong>参数即可。</p><p>查询结果中有很多对于已经学习的小节数量的统计，因此将来我们一定要保存用户对于每一个课程的<strong>学习记录</strong>，哪些小节已经学习了，哪些已经学完了。只有这样才能统计出学习进度。</p><p>查询的结果如页面所示，分上下两部分。：</p><p>①总的统计信息：</p><ul><li>本周已完成总章节数：需要对学习记录做统计</li><li>课程总计划学习数量：累加课程的总计划学习频率即可</li><li>本周学习积分：积分暂不实现</li></ul><p>②正在学习的N个课程信息的集合，其中每个课程包含下列字段：</p><ul><li>该课程本周学了几节：统计学习记录</li><li>计划学习频率：在learning_lesson表中有对应字段</li><li>该课程总共学了几节：在learning_lesson表中有对应字段</li><li>课程总章节数：查询课程微服务</li><li>该课程最近一次学习时间：在learning_lesson表中有对应字段</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408201519034.png" alt="image-20240820151930884"></p><h2 id="4-接口分析-3"><a href="#4-接口分析-3" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，查询学习计划进度的接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182118801.png" alt="image-20240818211836745"></p><h2 id="5-具体实现-3"><a href="#5-具体实现-3" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202036795.png" alt="image-20240820203649725"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202036413.png" alt="image-20240820203656379"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202051913.png" alt="image-20240820205151868"></p><p>输出结果分为两个模块：<br>①本周计划和积分奖励</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202056087.png" alt="image-20240820205620992"></p><p>②课程信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202106580.png" alt="image-20240820210625381"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202037831.png" alt="image-20240820203706792"></p><h2 id="6-具体难点和亮点-3"><a href="#6-具体难点和亮点-3" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：怎么统计用户本周已学习小节数和计划小节数</li></ul><p>【本质就是，学习记录表一行就是学了一个小节；表内每个课程都有一个week_freq，计算总和就是本周计划总数】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#统计用户本周已学习小节总数</span><br><span class="line">select count(*)</span><br><span class="line">from learning_record</span><br><span class="line">where user_id&#x3D;2 and finished&#x3D;true and finish_time between &#39;2022-10-11 10:12:34&#39; and &#39;2022-10-20 10:12:34&#39;;</span><br><span class="line"></span><br><span class="line">#统计用户本周计划学习小节总数</span><br><span class="line">select sum(week_freq)</span><br><span class="line">from learning_lesson</span><br><span class="line">where user_id&#x3D;129 and status in(0,1) and plan_status&#x3D;1;</span><br></pre></td></tr></table></figure><ul><li>问题二：怎么统计当前用户课表和某个课程本周的学习小节数</li></ul><p>【本质就是，分页查询就是加个limit；某个课程要根据group by lesson_id课程id，因为一个课程在record记录表每个小节id都有一行数据，一个课程id在lesson课表中每个课程有一个】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#分页查询当前用户的课表</span><br><span class="line">select *</span><br><span class="line">from learning_lesson</span><br><span class="line">where user_id&#x3D;2 and status in(0,1) and plan_status&#x3D;1</span><br><span class="line">limit 0,2;</span><br><span class="line"></span><br><span class="line">#查询某个课程本周的学习小节数</span><br><span class="line">select lesson_id,count(*)</span><br><span class="line">from learning_record</span><br><span class="line">where user_id&#x3D;2 and finished&#x3D;true and finish_time between &#39;2024-08-19 10:12:34&#39; and &#39;2024-08-26 10:12:34&#39;</span><br><span class="line">group by lesson_id;</span><br></pre></td></tr></table></figure><ul><li>问题三：怎么设置的开始和结束时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDateTime getWeekBeginTime(LocalDate now) &#123;</span><br><span class="line">    return now.minusDays(now.getDayOfWeek().getValue() - 1).atStartOfDay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static LocalDateTime getWeekEndTime(LocalDate now) &#123;</span><br><span class="line">    return LocalDateTime.of(now.plusDays(8 - now.getDayOfWeek().getValue()), LocalTime.MAX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-定时监测—课程是否过期"><a href="#5-定时监测—课程是否过期" class="headerlink" title="5.定时监测—课程是否过期"></a>5.定时监测—课程是否过期</h1><h2 id="1-原型图-4"><a href="#1-原型图-4" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>定期检查learning_lesson表中的课程是否过期，如果过期则将课程状态修改为已过期。</p><h2 id="2-设计数据库-4"><a href="#2-设计数据库-4" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-4"><a href="#3-业务逻辑图-4" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-4"><a href="#4-接口分析-4" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><h2 id="5-具体实现-4"><a href="#5-具体实现-4" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.启动类添加注解</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211749334.png" alt="image-20240821174944291"></p><ul><li>2.创建Task类</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211749076.png" alt="image-20240821174924986"></p><ul><li>3.mapper层<img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211732044.png" alt="image-20240821173237955"></li></ul><h2 id="6-具体难点和亮点-4"><a href="#6-具体难点和亮点-4" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>使用什么技术实现？</li></ul><p>①SpringTask定时任务使用@Scheduled注解+@Async异步调用+@Retryable重试机制 —》保证既定时执行又异步且具备重试功能的健壮任务</p><p>②实现SchedulingConfigurer接口</p><p>③Quartz框架</p><p>④MQ延迟队列  【在定时任务方法里面发送消息给MQ，让MQ进行业务修改】</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="==面试题=="></a>==面试题==</h1><ul><li>你在开发中参与了哪些功能开发让你觉得比较有挑战性？</li></ul><p>答：我参与了整个学习中心的功能开发，其中有很多的学习辅助功能都很有特色。比如视频播放的进度记录。我们网站的课程是以录播视频为主，为了提高用户的学习体验，需要实现视频续播功能。这个功能本身并不复杂，只不过我们产品提出的要求比较高：</p><ul><li><p>首先续播时间误差要控制在30秒以内[每隔15s发起一次心跳请求，请求最新的播放进度，存储在服务器]</p></li><li><p>而且要做到用户突然断开，甚至切换设备后，都可以继续上一次播放[播放记录必须保存在服务端，而不是客户端(传统的只能保证一个设备)]</p></li></ul><p>要达成这个目的，使用传统的手段显然是不行的。</p><p>首先，要做到切换设备后还能续播，用户的播放进度必须保存在服务端，而不是客户端。</p><p>其次，用户突然断开或者切换设备，续播的时间误差不能超过30秒，那播放进度的记录频率就需要比较高。我们会在前端每隔15秒就发起一次心跳请求，提交最新的播放进度，记录到服务端[写在数据库内，可能会导致数据库压力过大问题]。这样用户下一次续播时直接读取服务端的播放进度，就可以将时间误差控制在15秒左右。</p><h1 id="———————-高并发优化——————–"><a href="#———————-高并发优化——————–" class="headerlink" title="==———————-高并发优化——————–=="></a>==———————-高并发优化——————–==</h1><h1 id="1-高并发方案-三个"><a href="#1-高并发方案-三个" class="headerlink" title="1.高并发方案[三个]"></a>1.高并发方案[三个]</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408212138704.png" alt="image-20240821213816592"></p><p>其中，②水平扩展和③服务保护侧重的是运维层面的处理。而①提高单机并发能力侧重的则是业务层面的处理，也就是我们程序员在开发时可以做到的。</p><h2 id="1-1方案一：提高单机并发-数据库方面-读写优化"><a href="#1-1方案一：提高单机并发-数据库方面-读写优化" class="headerlink" title="1.1方案一：提高单机并发[数据库方面-读写优化]"></a>1.1方案一：提高单机并发[数据库方面-读写优化]</h2><p>在机器性能一定的情况下，提高单机并发能力就是要尽可能缩短业务的响应时间（<strong>R</strong>esponse<strong>T</strong>ime），而对响应时间影响最大的往往是对数据库的操作。而从数据库角度来说，我们的业务无非就是<strong>读</strong>/<strong>写</strong>两种类型。</p><p>对于<strong>==读&gt;写==</strong>的业务，其优化手段大家都比较熟悉了，主要包括两方面：</p><ul><li>优化代码和SQL</li><li>添加缓存</li></ul><p>对于<strong>==读&lt;写==</strong>的业务，大家可能较少碰到，优化的手段可能也不太熟悉，这也是我们要讲解的重点。</p><p>对于高并发写的优化方案有：</p><ul><li>优化代码和SQL</li><li>同步写 —&gt; 异步写</li><li>合并写数据请求</li></ul><h3 id="1-1-1-同步写-–-gt-异步写"><a href="#1-1-1-同步写-–-gt-异步写" class="headerlink" title="1.1.1 同步写 –&gt; 异步写"></a>1.1.1 同步写 –&gt; 异步写</h3><p>由于各个业务之间是同步串行执行，因此整个业务的响应时间就是每一次数据库写业务的响应时间之和，并发能力肯定不会太好。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221158868.png" alt="image-20240822115831779"></p><p>优化的思路很简单，利用MQ可以把同步业务变成异步，从而提高效率。</p><ul><li>当我们接收到用户请求后，可以先不处理业务，而是发送MQ消息并返回给用户结果。</li><li>而后通过消息监听器监听MQ消息，处理后续业务。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221408063.png" alt="image-20240822140833957"></p><p>这样一来，用户请求处理和后续数据库写就从同步变为异步，用户无需等待后续的数据库写操作，响应时间自然会大大缩短。并发能力自然大大提高。</p><ul><li>优点：</li></ul><p>​        ①无需等待复杂业务处理，大大减少了响应时间 ②利用MQ暂存消息，起到流量削峰整形 ③降低写数据库频率，减轻数据库并发压力</p><ul><li>缺点：</li></ul><p>​        ①依赖于MQ的可靠性 ②只是降低一些频率，但是没有减少数据库写次数</p><ul><li>适应场景：</li></ul><p>​        业务复杂， 业务链较长，有多次数据库写操作的业务</p><h3 id="1-1-2-合并写请求"><a href="#1-1-2-合并写请求" class="headerlink" title="1.1.2 合并写请求"></a>1.1.2 合并写请求</h3><p>合并写请求方案其实是参考高并发读的优化思路：当读数据库并发较高时，我们可以<strong>把数据缓存到Redis</strong>，这样就无需访问数据库，大大减少数据库压力，减少响应时间。</p><p>合并写请求就是指当写数据库并发较高时，不再直接写到数据库。而是先将数据缓存到Redis，然后定期将缓存中的数据批量写入数据库。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221415878.png" alt="image-20240822141520757"></p><p>由于Redis是内存操作，写的效率也非常高，这样每次请求的处理速度大大提高，响应时间大大缩短(↓)，并发能力肯定有很大的提升。</p><p>而且由于数据都缓存到Redis了，积累一些数据后再批量写入数据库，这样数据库的写频率(↓)、写次数(↓)都大大减少，对数据库压力小了非常多！</p><ul><li>优点：</li></ul><p>​        ①写缓存速度快，响应时间大大缩短(↓) ②降低数据库的写频率(↓)和写次数(↓)</p><ul><li>缺点：</li></ul><p>​        ①实现相对复杂 ②依赖Redis可靠性 ③不支持事务和复杂业务</p><ul><li>适应场景：</li></ul><p>​        写频率高，写业务相对简单的业务</p><h1 id="2-业务优化-提交学习记录"><a href="#2-业务优化-提交学习记录" class="headerlink" title="2.业务优化-提交学习记录"></a>2.业务优化-提交学习记录</h1><h2 id="2-1-业务优化选型分析"><a href="#2-1-业务优化选型分析" class="headerlink" title="2.1 业务优化选型分析"></a>2.1 业务优化选型分析</h2><p>提交进度统计包含大量的<strong>数据库读、写操作</strong>。不过提交播放记录还是以<strong>写数据库</strong>为主。因此优化的方向还是以高并发写优化为主。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221431688.png" alt="image-20240822143119605"></p><ul><li>考试：每章只能考一次，还不能重复考试。因此属于低频行为(×)，可以忽略</li><li>视频进度：前端每隔15秒就提交一次请求。在一个视频播放的过程中，可能有数十次请求，但完播（进度超50%）的请求只会有一次。因此多数情况下都是更新一下播放进度即可。</li></ul><p>也就是说，95%的请求都是在更新<code>learning_record</code>表中的<code>moment</code>视频播放秒数字段，以及<code>learning_lesson</code>表中的最近正在学习的小节id和最近学习时间两个字段上。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221438579.png" alt="image-20240822143815456"></p><p>而播放进度信息，不管更新多少次，下一次续播肯定是从最后的一次播放进度开始续播。也就是说我们只需要记住最后一次即可。因此可以采用合并写方案来降低数据库写的次数和频率，而异步写做不到。</p><p>综上，提交播放进度业务虽然看起来复杂，但大多数请求的处理很简单，就是==<strong>更新播放进度</strong>==。并且播放进度数据是可以合并的（覆盖之前旧数据）。我们建议采用合并写请求方案：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221439769.png" alt="image-20240822143954705"></p><h2 id="2-2-Redis数据结构-hash哈希"><a href="#2-2-Redis数据结构-hash哈希" class="headerlink" title="2.2 Redis数据结构[hash哈希]"></a>2.2 Redis数据结构[hash哈希]</h2><p>我们的优化方案要处理的不是所有的提交学习记录请求。仅仅是视频播放时的高频更新播放进度的请求，对应的业务分支如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221438579.png" alt="image-20240822143815456"></p><p>这条业务支线的流程如下：</p><ul><li>查询播放记录，判断是否存在【存在就更新学习记录，不存在就新增学习记录】</li><li>判断当前进度是否是第一次学完【播放进度要超过50% + 原本的记录状态是未学完】</li><li>更新课表中最近学习小节id、学习时间【无论如何】</li></ul><p>这里有多次数据库操作，例如：</p><ul><li>查询播放记录：需要知道播放记录是否存在、播放记录当前的完成状态</li><li>更新record学习记录表的播放记录：更新播放进度</li><li>更新课表lesson表最近学习小节id、时间</li></ul><p>一方面我们要<strong>缓存写数据</strong>，减少写数据库频率；另一方面我们要<strong>缓存播放记录</strong>，减少查询数据库。因此，缓存中至少要包含3个字段：</p><ul><li><p>记录id：id，用于根据id更新数据库</p></li><li><p>播放进度：moment，用于缓存播放进度</p></li><li><p>播放状态（是否学完）：finished，用于判断是否是第一次学完</p></li></ul><p>既然一个课程包含多个小节，我们完全可以把一个课程的多个小节作为一个KEY来缓存，==Redis最终数据结构如图==：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221449014.png" alt="image-20240822144903928"></p><p>这样做有两个好处：</p><ul><li>可以大大减少需要创建的KEY的数量，减少内存占用。</li><li>一个课程创建一个缓存，当用户在多个视频间跳转时，整个缓存的有效期都会被延续，不会频繁的创建和销毁缓存数据</li></ul><h2 id="2-3-业务逻辑修改–redis缓存"><a href="#2-3-业务逻辑修改–redis缓存" class="headerlink" title="2.3 业务逻辑修改–redis缓存"></a>2.3 业务逻辑修改–redis缓存</h2><p>添加缓存之后，业务逻辑更改为：</p><ul><li>提交播放进度后，如果是更新播放进度则不写数据库，而是写缓存</li><li>需要一个定时任务，定期将缓存数据写入数据库</li></ul><p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20240822151218103.png" alt="image-20240822151218103"></p><p>变化后的业务具体流程为：</p><ul><li>1.提交学习记录</li><li>2.判断是否是考试<ul><li>是：新增学习记录，并标记有小节被学完。走步骤8</li><li>否：走视频流程，步骤3</li></ul></li><li>3.查询播放记录缓存，如果缓存不存在则查询数据库并建立缓存</li><li>4.判断记录是否存在<ul><li>4.1.否：新增一条学习记录</li><li>4.2.是：走更新学习记录流程，步骤5</li></ul></li><li>5.判断是否是第一次学完（进度超50%，旧的状态是未学完）<ul><li>5.1.不是第一次学完：仅仅是要更新播放进度，因此直接写入Redis并结束</li><li>5.2.是第一次学完：代表小节学完，走步骤6</li></ul></li><li>6.更新学习记录状态为已学完</li><li>7.清理Redis缓存：因为学习状态变为已学完，与缓存不一致，因此这里清理掉缓存，这样下次查询时自然会更新缓存，保证数据一致。</li><li>8.更新课表中已学习小节的数量+1</li><li>9.判断课程的小节是否全部学完<ul><li>是：更新课表状态为已学完</li><li>否：结束</li></ul></li></ul><h2 id="2-4-业务逻辑修改–定时任务将redis缓存到数据库"><a href="#2-4-业务逻辑修改–定时任务将redis缓存到数据库" class="headerlink" title="2.4 业务逻辑修改–定时任务将redis缓存到数据库"></a>2.4 业务逻辑修改–定时任务将redis缓存到数据库</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221523244.png" alt="image-20240822152304129"></p><p>但是定时任务的持久化方式在播放进度记录业务中存在一些问题，主要就是时效性问题。我们的产品要求视频续播的时间误差不能超过30秒。</p><ul><li>假如定时任务间隔较短，例如20秒一次，对数据库的更新频率太高，压力太大</li><li>假如定时任务间隔较长，例如2分钟一次，更新频率较低，续播误差可能超过2分钟，不满足需求</li></ul><p>因此，我们考虑将用户==最后一次提交==的播放进度写入数据库</p><p>==【只要用户一直在提交记录，Redis中的播放进度就会一直变化。如果Redis中的播放进度不变，肯定是停止了播放，是最后一次提交】==</p><p>因此，我们只要能判断Redis中的<strong>播放进度是否变化</strong>即可—–&gt;每当前端提交(15s)播放记录时，我们可以设置一个<strong>延迟任务</strong>并<strong>保存这次提交的进度</strong>。等待20秒后（因为前端每15秒提交一次，20秒就是等待下一次提交），检查Redis中的缓存的进度与任务中的进度是否一致。</p><ul><li>不一致：说明持续在提交，无需处理</li><li>一致：说明是最后一次提交，更新学习记录、更新课表最近学习小节和时间到数据库中</li></ul><p>流程如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221527300.png" alt="image-20240822152717163"></p><h1 id="3-延迟任务方案-定时任务"><a href="#3-延迟任务方案-定时任务" class="headerlink" title="3.延迟任务方案(定时任务)"></a>3.延迟任务方案(定时任务)</h1><p>针对2.4提出用户提交的播放记录是否变化，我们需要将更新播放记录做一个延迟任务，等待超过一个提交周期（20s）后检查播放进度</p><p>延迟任务的实现方案有很多，常见的有四类：</p><table><thead><tr><th align="left"></th><th align="left">DelayQueue</th><th align="left">Redisson</th><th align="left">MQ</th><th align="left">时间轮</th></tr></thead><tbody><tr><td align="left"><strong>原理</strong></td><td align="left">JDK自带延迟队列，基于阻塞队列实现。</td><td align="left">基于Redis数据结构模拟JDK的DelayQueue实现</td><td align="left">利用MQ的特性。例如RabbitMQ的死信队列</td><td align="left">时间轮算法</td></tr><tr><td align="left"><strong>优点</strong></td><td align="left">不依赖第三方服务</td><td align="left">分布式系统下可用不占用JVM内存</td><td align="left">分布式系统下可以不占用JVM内存</td><td align="left">不依赖第三方服务性能优异</td></tr><tr><td align="left"><strong>缺点</strong></td><td align="left">占用JVM内存只能单机使用</td><td align="left">依赖第三方服务</td><td align="left">依赖第三方服务</td><td align="left">只能单机使用</td></tr></tbody></table><p>以上四种方案都可以解决问题，不过本例中我们会使用DelayQueue方案。因为这种方案使用成本最低，而且不依赖任何第三方服务，减少了网络交互。</p><p>但缺点也很明显，就是需要占用JVM内存，在数据量非常大的情况下可能会有问题。但考虑到任务存储时间比较短（只有20秒），因此也可以接收。</p><p>【如果数据量非常大，DelayQueue不能满足业务需求，大家也可以替换为其它延迟队列方式，例如Redisson、MQ等】</p><h2 id="3-1-DelayQueue实现原理"><a href="#3-1-DelayQueue实现原理" class="headerlink" title="3.1 DelayQueue实现原理"></a>3.1 DelayQueue实现原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现了BlockingQueue接口【是一个阻塞队列】</span><br><span class="line">public class DelayQueue&lt;E extends Delayed&gt; extends AbstractQueue&lt;E&gt; implements BlockingQueue&lt;E&gt; &#123;</span><br><span class="line">    private final transient ReentrantLock lock &#x3D; new ReentrantLock();</span><br><span class="line">    private final PriorityQueue&lt;E&gt; q &#x3D; new PriorityQueue&lt;E&gt;();</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; ... 略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<E extends delayed>:DelayQueue内部的元素必须是Delayed类型，这其实就是一个延迟任务的规范接口<br>从源码中可以看出，Delayed类型必须具备两个方法：</E></p><ul><li><strong>getDelay()</strong>：获取延迟任务的剩余延迟时间</li><li><strong>compareTo(T t)</strong>：比较两个延迟任务的延迟时间，判断执行顺序</li></ul><p>可见，Delayed类型的延迟任务具备两个功能：①获取剩余延迟时间、②比较执行顺序</p><p>将来每一次提交播放记录，就可以将播放记录保存在这样的一个<code>Delayed</code>类型的延迟任务里并设定20秒的延迟时间。然后交给<code>DelayQueue</code>队列。<code>DelayQueue</code>会调用<code>compareTo</code>方法，根据剩余延迟时间对任务排序。剩余延迟时间越短的越靠近队首，这样就会被优先执行。</p><h2 id="3-2-DelayQueue具体用法"><a href="#3-2-DelayQueue具体用法" class="headerlink" title="3.2 DelayQueue具体用法"></a>3.2 DelayQueue具体用法</h2><p>首先定义一个Delayed类型的延迟任务类，要能保持任务数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class DelayTask&lt;T&gt; implements Delayed &#123;  &#x2F;&#x2F;实现Delayed接口【实现两个方法】</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;数据</span><br><span class="line">    private T data;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;执行时间(纳秒)</span><br><span class="line">    private long activeTime;</span><br><span class="line"></span><br><span class="line">    public DelayTask(T data, Duration delayTime) &#123;</span><br><span class="line">        this.data &#x3D; data;</span><br><span class="line">        this.activeTime &#x3D; System.nanoTime() + delayTime.toNanos();  &#x2F;&#x2F;当前时间+延迟时间</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;返回任务剩余的时间</span><br><span class="line">    @Override</span><br><span class="line">    public long getDelay(TimeUnit unit) &#123;</span><br><span class="line">    &#x2F;&#x2F;设定时间-当前时间[和构造方法不一定是一个时间]</span><br><span class="line">        return unit.convert(Math.max(0,activeTime-System.nanoTime()), TimeUnit.NANOSECONDS); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;排序</span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Delayed o) &#123;</span><br><span class="line">        long l&#x3D;this.getDelay(TimeUnit.NANOSECONDS)-o.getDelay(TimeUnit.NANOSECONDS);</span><br><span class="line">        if(l&gt;0)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else if(l&lt;0)&#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以创建延迟任务，交给延迟队列保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">class DelayTaskTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    void testDelayQueue() throws InterruptedException &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.初始化延迟队列</span><br><span class="line">        DelayQueue&lt;DelayTask&lt;String&gt;&gt; queue &#x3D; new DelayQueue&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; 2.向队列中添加延迟执行的任务</span><br><span class="line">        log.info(&quot;开始初始化延迟任务。。。。&quot;);</span><br><span class="line">        queue.add(new DelayTask&lt;&gt;(&quot;延迟任务3&quot;, Duration.ofSeconds(3)));</span><br><span class="line">        queue.add(new DelayTask&lt;&gt;(&quot;延迟任务1&quot;, Duration.ofSeconds(1)));</span><br><span class="line">        queue.add(new DelayTask&lt;&gt;(&quot;延迟任务2&quot;, Duration.ofSeconds(2)));</span><br><span class="line">        &#x2F;&#x2F; 3.尝试执行任务</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            DelayTask&lt;String&gt; task &#x3D; queue.take();  &#x2F;&#x2F;take方法是阻塞式，如果没有延迟任务就会阻塞</span><br><span class="line">            log.info(&quot;开始执行延迟任务：&#123;&#125;&quot;, task.getData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​    <strong>注意</strong>：本用例直接同一个线程来执行任务了。当没有任务的时候线程会被阻塞。而在实际开发中，我们会准备线程池，开启多个线程来执行队列中的任务。</p></blockquote><h1 id="4-具体改造-直接看这里"><a href="#4-具体改造-直接看这里" class="headerlink" title="4.具体改造[直接看这里!!!]"></a>4.具体改造[直接看这里!!!]</h1><p>具体改造之后的业务逻辑图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222108156.png" alt="image-20240822210809060"></p><h2 id="4-1-定义延迟任务工具类"><a href="#4-1-定义延迟任务工具类" class="headerlink" title="4.1 定义延迟任务工具类"></a>4.1 定义延迟任务工具类</h2><ul><li>读取redis数据【用于判断记录是否已经存在，先在redis查询】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222115307.png" alt="image-20240822211557257"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222115663.png" alt="image-20240822211514592"></p><ul><li>缓存到redis并且提交延迟检测任务</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222116644.png" alt="image-20240822211659588"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222118198.png" alt="image-20240822211856114"></p><ul><li>异步任务处理</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222119476.png" alt="image-20240822211919420"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222125186.png" alt="image-20240822212516067"></p><ul><li><p>是第一次学习，更新学习记录，删除redis</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222127315.png" alt="image-20240822212711271"></p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222128146.png" alt="image-20240822212818101"></p><ul><li>延迟任务传递的三个参数</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222129870.png" alt="image-20240822212910818"></p><ul><li>redis的value值三个参数</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222130833.png" alt="image-20240822213014775"></p><ul><li>完整代码：    </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">package com.tianji.learning.task;</span><br><span class="line">import com.tianji.common.utils.JsonUtils;</span><br><span class="line">import com.tianji.common.utils.StringUtils;</span><br><span class="line">import com.tianji.learning.domain.po.LearningLesson;</span><br><span class="line">import com.tianji.learning.domain.po.LearningRecord;</span><br><span class="line">import com.tianji.learning.mapper.LearningRecordMapper;</span><br><span class="line">import com.tianji.learning.service.ILearningLessonService;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import lombok.RequiredArgsConstructor;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line">import javax.annotation.PreDestroy;</span><br><span class="line">import java.time.Duration;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.Objects;</span><br><span class="line">import java.util.concurrent.CompletableFuture;</span><br><span class="line">import java.util.concurrent.DelayQueue;</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">public class LearningRecordDelayTaskHandler &#123;</span><br><span class="line"></span><br><span class="line">    private final StringRedisTemplate redisTemplate;</span><br><span class="line">    private final LearningRecordMapper recordMapper;</span><br><span class="line">    private final ILearningLessonService lessonService;</span><br><span class="line">    private final DelayQueue&lt;DelayTask&lt;RecordTaskData&gt;&gt; queue &#x3D; new DelayQueue&lt;&gt;();</span><br><span class="line">    private final static String RECORD_KEY_TEMPLATE &#x3D; &quot;learning:record:&#123;&#125;&quot;;  &#x2F;&#x2F;业务前缀【防止只有一个1不知道是谁的课表1】</span><br><span class="line">    private static volatile boolean begin &#x3D; true;</span><br><span class="line"></span><br><span class="line">    @PostConstruct &#x2F;&#x2F;项目初始前执行</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        &#x2F;&#x2F;异步</span><br><span class="line">        &#x2F;&#x2F;1.自定义线程池【注册到spring容器内，注入线程池，线程池调用业务】</span><br><span class="line">        &#x2F;&#x2F;2.使用CompletableFuture【内部也是多线程】</span><br><span class="line">        CompletableFuture.runAsync(this::handleDelayTask);</span><br><span class="line">    &#125;</span><br><span class="line">    @PreDestroy</span><br><span class="line">    public void destroy()&#123;</span><br><span class="line">        begin &#x3D; false;  &#x2F;&#x2F;多线程共享数据begin，必须用volatile其他线程可见性！！！</span><br><span class="line">        log.debug(&quot;延迟任务停止执行！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;处理延迟任务[判断数据是否一致]</span><br><span class="line">    public void handleDelayTask()&#123;</span><br><span class="line">        while (begin) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 1.[不断地取]获取到期的延迟任务</span><br><span class="line">                DelayTask&lt;RecordTaskData&gt; task &#x3D; queue.take(); &#x2F;&#x2F;take是阻塞式，没有任务就阻塞</span><br><span class="line">                RecordTaskData data &#x3D; task.getData();</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 2.查询Redis缓存</span><br><span class="line">                LearningRecord record &#x3D; readRecordCache(data.getLessonId(), data.getSectionId());</span><br><span class="line">                if (record &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 3.比较数据，moment值</span><br><span class="line">                if(!Objects.equals(data.getMoment(), record.getMoment())) &#123;  &#x2F;&#x2F;redis中数据和任务中的数据</span><br><span class="line">                    &#x2F;&#x2F; 不一致，说明用户还在持续提交播放进度，放弃旧数据</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 4.一致，持久化播放进度数据到数据库</span><br><span class="line">                &#x2F;&#x2F; 4.1.更新学习记录的moment时刻</span><br><span class="line">                record.setFinished(null);</span><br><span class="line">                recordMapper.updateById(record);</span><br><span class="line">                &#x2F;&#x2F; 4.2.更新课表最近学习信息</span><br><span class="line">                LearningLesson lesson &#x3D; new LearningLesson();</span><br><span class="line">                lesson.setId(data.getLessonId());</span><br><span class="line">                lesson.setLatestSectionId(data.getSectionId());</span><br><span class="line">                lesson.setLatestLearnTime(LocalDateTime.now());</span><br><span class="line">                lessonService.updateById(lesson);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;处理延迟任务发生异常&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将数据添加到redis，并且添加一个延迟检查任务到DelayQueue</span><br><span class="line">    public void addLearningRecordTask(LearningRecord record)&#123;</span><br><span class="line">        &#x2F;&#x2F; 1.添加数据到Redis缓存</span><br><span class="line">        writeRecordCache(record);</span><br><span class="line">        &#x2F;&#x2F; 2.提交延迟任务到延迟队列 DelayQueue</span><br><span class="line">        queue.add(new DelayTask&lt;&gt;(new RecordTaskData(record), Duration.ofSeconds(20)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将更新学习记录的数据缓存起来</span><br><span class="line">    public void writeRecordCache(LearningRecord record) &#123;</span><br><span class="line">        log.debug(&quot;更新学习记录的缓存数据&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 1.数据转换</span><br><span class="line">            String json &#x3D; JsonUtils.toJsonStr(new RecordCacheData(record));  &#x2F;&#x2F;转为json【id，moment，finished】</span><br><span class="line">            &#x2F;&#x2F; 2.写入Redis</span><br><span class="line">            String key &#x3D; StringUtils.format(RECORD_KEY_TEMPLATE, record.getLessonId());  &#x2F;&#x2F;learning:record:&#123;lessonId&#125;</span><br><span class="line">            redisTemplate.opsForHash().put(key, record.getSectionId().toString(), json); &#x2F;&#x2F;KEY[lessonid]-HashKey[sectionid]-HashValue[&#123;id:xxx,moment:xxx,finished:xxx&#125;]</span><br><span class="line">            &#x2F;&#x2F; 3.添加缓存过期时间</span><br><span class="line">            redisTemplate.expire(key, Duration.ofMinutes(1)); &#x2F;&#x2F;设置过期时间1分钟</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;更新学习记录缓存异常&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读取redis数据[检查记录是否已经存在]</span><br><span class="line">    public LearningRecord readRecordCache(Long lessonId, Long sectionId)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 1.读取Redis数据</span><br><span class="line">            String key &#x3D; StringUtils.format(RECORD_KEY_TEMPLATE, lessonId);  &#x2F;&#x2F;learning:record:&#123;lessonId&#125;</span><br><span class="line">            Object cacheData &#x3D; redisTemplate.opsForHash().get(key, sectionId.toString()); &#x2F;&#x2F;根据hash类型，根据key获取hashkey[sectionId]对应的一行数据value</span><br><span class="line">            if (cacheData &#x3D;&#x3D; null) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 2.数据检查和转换</span><br><span class="line">            return JsonUtils.toBean(cacheData.toString(), LearningRecord.class); &#x2F;&#x2F;转为json</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;缓存读取异常&quot;, e);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除redis数据</span><br><span class="line">    public void cleanRecordCache(Long lessonId, Long sectionId)&#123;</span><br><span class="line">        &#x2F;&#x2F; 删除数据---删除hashKey里面的一行数据[不能是redisTemplate.delete()这样是删除lessonId了，太大了]</span><br><span class="line">        String key &#x3D; StringUtils.format(RECORD_KEY_TEMPLATE, lessonId);</span><br><span class="line">        redisTemplate.opsForHash().delete(key, sectionId.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Data</span><br><span class="line">    @NoArgsConstructor</span><br><span class="line">    &#x2F;&#x2F;redis的hash里面value的三个属性</span><br><span class="line">    private static class RecordCacheData&#123;</span><br><span class="line">        private Long id;</span><br><span class="line">        private Integer moment;</span><br><span class="line">        private Boolean finished;</span><br><span class="line"></span><br><span class="line">        public RecordCacheData(LearningRecord record) &#123;</span><br><span class="line">            this.id &#x3D; record.getId();</span><br><span class="line">            this.moment &#x3D; record.getMoment();</span><br><span class="line">            this.finished &#x3D; record.getFinished();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    @NoArgsConstructor</span><br><span class="line">    &#x2F;&#x2F;延迟任务所需要的三个属性</span><br><span class="line">    private static class RecordTaskData&#123;</span><br><span class="line">        private Long lessonId;</span><br><span class="line">        private Long sectionId;</span><br><span class="line">        private Integer moment;</span><br><span class="line"></span><br><span class="line">        public RecordTaskData(LearningRecord record) &#123;</span><br><span class="line">            this.lessonId &#x3D; record.getLessonId();</span><br><span class="line">            this.sectionId &#x3D; record.getSectionId();</span><br><span class="line">            this.moment &#x3D; record.getMoment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-改造提交学习记录"><a href="#4-2-改造提交学习记录" class="headerlink" title="4.2 改造提交学习记录"></a>4.2 改造提交学习记录</h2><ul><li>修改整体逻辑</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222133816.png" alt="image-20240822213351745"></p><ul><li>修改课表</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222136611.png" alt="image-20240822213659512"></p><p>插入到redis，直接返回false这样后续4的更新学习记录就不会执行</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222138175.png" alt="image-20240822213850097"></p><h2 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h2><p>不是第一次学完，多次提交的情况：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222104006.png" alt="image-20240822210450880"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-前提回顾&quot;&gt;&lt;a href=&quot;#0-前提回顾&quot; class=&quot;headerlink&quot; title=&quot;0.前提回顾&quot;&gt;&lt;/a&gt;0.前提回顾&lt;/h1&gt;&lt;p&gt;在东林在线微课堂-我的课表相关：已经可以实现课表的增删改查接口，但是在查看已学习课程时候有两个字段没有返回：
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂</title>
    <link href="https://larkkkkkkk.github.io/2024/08/12/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82/"/>
    <id>https://larkkkkkkk.github.io/2024/08/12/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82/</id>
    <published>2024-08-12T02:14:44.000Z</published>
    <updated>2024-09-02T08:31:10.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-项目概述"><a href="#1-项目概述" class="headerlink" title="1.项目概述"></a>1.项目概述</h2><p>这是我和本科生的大创项目，我主要负责后端开发的部分模块</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-项目概述&quot;&gt;&lt;a href=&quot;#1-项目概述&quot; class=&quot;headerlink&quot; title=&quot;1.项目概述&quot;&gt;&lt;/a&gt;1.项目概述&lt;/h2&gt;&lt;p&gt;这是我和本科生的大创项目，我主要负责后端开发的部分模块&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>持续集成</title>
    <link href="https://larkkkkkkk.github.io/2024/08/12/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>https://larkkkkkkk.github.io/2024/08/12/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</id>
    <published>2024-08-12T01:43:11.000Z</published>
    <updated>2024-08-13T11:18:29.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-项目部署"><a href="#1-项目部署" class="headerlink" title="1.项目部署"></a>1.项目部署</h1><ul><li>项目打成jar包</li><li>Docker部署(项目打成jar包 —&gt;docker镜像文件—&gt;docker容器)</li><li>K8S</li></ul><h1 id="2-持续集成CI"><a href="#2-持续集成CI" class="headerlink" title="2.持续集成CI"></a>2.持续集成CI</h1><p>持续集成是一种<strong>软件开发实践</strong>，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，就意味着每天有多次集成。每次集成都通过自动化的构建(包括编译，发布，自动化测试)来验证，从而尽早发现集成错误。</p><h2 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h2><ul><li>1.自动构建，发布，测试</li><li>2.降低风险</li></ul><h2 id="2-2-分类"><a href="#2-2-分类" class="headerlink" title="2.2 分类"></a>2.2 分类</h2><ul><li>Jenkins[tk旧项目使用]</li><li>坎特[tk新项目使用]</li></ul><h1 id="3-Jenkins-老头"><a href="#3-Jenkins-老头" class="headerlink" title="3.Jenkins(老头)"></a>3.Jenkins(老头)</h1><p>Jenkins是一个开源的实现持续集成的软件工具：<a href="https://www.jenkins.io/zh/" target="_blank" rel="noopener">Jenkins</a></p><p>==<strong>原理图</strong>：每当我们push代码时候就触发项目完成自动编译和打包==</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408121010483.png" alt="image-20240812101022218" style="zoom:150%;"> <h1 id="4-项目部署"><a href="#4-项目部署" class="headerlink" title="4.项目部署"></a>4.项目部署</h1><p>微服务部署比较麻烦，所以企业中都会采用持续集成的方式，快捷实现开发、部署一条龙服务。</p><p>为了模拟真实环境，我们在虚拟机中已经提供了一套持续集成的开发环境，代码一旦自测完成，push到Git私服后即可自动编译部署。</p><p>==<strong>原理图</strong>：每当我们push代码时候就触发项目完成自动编译和打包==</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408121010483.png" alt="image-20240812101022218" style="zoom:150%;"><p>而开发我们负责的微服务时，则需要在本地启动运行部分微服务。</p><h2 id="4-1-虚拟机部署"><a href="#4-1-虚拟机部署" class="headerlink" title="4.1 虚拟机部署"></a>4.1 虚拟机部署</h2><h2 id="4-2-本地部署"><a href="#4-2-本地部署" class="headerlink" title="4.2 本地部署"></a>4.2 本地部署</h2><p>如果需要运行某个微服务时，只需要以下两步：</p><ul><li>第一步：访问Jenkins控制台</li><li>第二步：点击对应微服务后面的绿色运行按钮</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408122119180.png" alt="image-20240812211957065"></p><p>构建过程中，可以在页面左侧看到构建进度，如果没有说明构建已经结束了（你的机器速度太快了！）：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408122120448.png" alt="image-20240812212051332" style="zoom:67%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-项目部署&quot;&gt;&lt;a href=&quot;#1-项目部署&quot; class=&quot;headerlink&quot; title=&quot;1.项目部署&quot;&gt;&lt;/a&gt;1.项目部署&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;项目打成jar包&lt;/li&gt;
&lt;li&gt;Docker部署(项目打成jar包 —&amp;gt;docker镜
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
