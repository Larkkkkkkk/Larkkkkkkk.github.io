<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Larkkkkkkk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://larkkkkkkk.github.io/"/>
  <updated>2024-08-24T13:41:12.709Z</updated>
  <id>https://larkkkkkkk.github.io/</id>
  
  <author>
    <name>Larkkkkkkk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>东林在线微课堂-点赞相关</title>
    <link href="https://larkkkkkkk.github.io/2024/08/24/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E7%82%B9%E8%B5%9E%E7%9B%B8%E5%85%B3/"/>
    <id>https://larkkkkkkk.github.io/2024/08/24/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E7%82%B9%E8%B5%9E%E7%9B%B8%E5%85%B3/</id>
    <published>2024-08-24T12:57:54.000Z</published>
    <updated>2024-08-24T13:41:12.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-互动问答相关"><a href="#1-互动问答相关" class="headerlink" title="1.互动问答相关"></a>1.互动问答相关</h1><h2 id="准备阶段—分析业务流程"><a href="#准备阶段—分析业务流程" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><p>一个通用点赞系统需要满足下列特性：</p><ul><li>通用：点赞业务在设计的时候不要与业务系统耦合，必须同时<strong>支持不同业务的点赞功能</strong>【数据库多一个字段描述点赞的业务类型】【单独微服务】</li><li>独立：点赞功能是<strong>独立系统</strong>，并且不依赖其它服务。这样才具备可迁移性【单独】</li><li>并发：一些热点业务点赞会很多，所以点赞功能必须支持<strong>高并发</strong>【可以在同一时间点内承受住多次点赞】</li><li>安全：要做好<strong>并发安全控制</strong>，避免重复点赞【防止重复点赞】</li></ul><p>而要保证安全，避免重复点赞，我们就必须保存每一次点赞记录。只有这样在下次用户点赞时我们才能查询数据，判断是否是重复点赞。同时，因为业务方经常需要根据点赞数量排序，因此每个业务的点赞数量也需要记录下来。</p><p>综上，点赞的基本思路如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242100576.png" alt="image-20240824210015490" style="zoom: 80%;"><p>点赞服务必须独立，因此必须抽取为一个<strong>独立服务</strong>。点赞系统可以在点赞数变更时，通过MQ通知业务方，这样业务方就可以更新自己的点赞数量了。并且还避免了点赞系统与业务方的耦合。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242114276.png" alt="image-20240824211454190" style="zoom: 67%;"><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>点赞的数据结构分两部分，一是<strong>点赞记录</strong>，二是与业务关联的<strong>点赞数</strong>【基本每个具体业务都预留了一个点赞数量的字段liked_times】</p><p>点赞记录本质就是记录<strong>谁给什么内容点了赞</strong>，所以核心属性包括：</p><ul><li>点赞目标id   —-给谁点赞了</li><li>点赞人id   —-我是谁，我点赞了</li><li>点赞时间  —-我啥时候点赞的</li></ul><p>不过点赞的内容多种多样，为了加以区分，我们还需要把点赞内的类型记录下来：</p><ul><li>点赞对象类型（为了通用性）   —-知道是给啥类型点赞了，是内容还是回复还是笔记</li></ul><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242121256.png" alt="image-20240824212133197"></p><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;liked_record&#96; (</span><br><span class="line">  &#96;id&#96; bigint NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,</span><br><span class="line">  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,</span><br><span class="line">  &#96;biz_id&#96; bigint NOT NULL COMMENT &#39;点赞的业务id&#39;,</span><br><span class="line">  &#96;biz_type&#96; VARCHAR(16) NOT NULL COMMENT &#39;点赞的业务类型&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span><br><span class="line">  &#96;update_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;idx_biz_user&#96; (&#96;biz_id&#96;,&#96;user_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;8 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci COMMENT&#x3D;&#39;点赞记录表&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242125727.png" alt="image-20240824212552680"></p><h2 id="准备阶段—Mybatis-Plus代码生成"><a href="#准备阶段—Mybatis-Plus代码生成" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><h2 id="准备阶段–类型枚举"><a href="#准备阶段–类型枚举" class="headerlink" title="准备阶段–类型枚举"></a>准备阶段–类型枚举</h2><h2 id="准备阶段–接口统计"><a href="#准备阶段–接口统计" class="headerlink" title="准备阶段–接口统计"></a>准备阶段–接口统计</h2><p>从表面来看，点赞功能要实现的接口就是一个点赞接口。不过仔细观察所有的点赞页面，你会发现点赞按钮有灰色和点亮两种状态。</p><p>也就是说我们还需要实现查询用户点赞状态的接口，这样前端才能根据点赞状态渲染不同效果。因此我们要实现的接口包括：</p><ul><li>点赞/取消点赞</li><li>根据多个业务id批量查询用户是否点赞多个业务</li></ul><h1 id="————————具体实现———————"><a href="#————————具体实现———————" class="headerlink" title="==————————具体实现———————-=="></a>==————————具体实现———————-==</h1><h1 id="1-点赞-取消点赞"><a href="#1-点赞-取消点赞" class="headerlink" title="1.点赞/取消点赞"></a>1.点赞/取消点赞</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>当用户点击点赞按钮的时候，第一次点击是点赞，按钮会高亮；第二次点击是取消，点赞按钮变灰：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242137655.png" alt="image-20240824213704561"></p><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>从后台实现来看，点赞就是新增(insert)一条点赞记录，取消就是删除(delete)这条点赞记录。——为了方便前端交互——-&gt;个合并为一个接口即可。</p><p>因此，请求参数首先要包含点赞有关的数据，并且要标记是点赞还是取消：</p><ul><li>点赞给谁:点赞的目标业务id：bizId</li><li>谁在点赞（就是登陆用户，可以不用提交）</li><li>是取消还是点赞</li></ul><p>除此以外，我们之前说过，在问答、笔记等功能中都会出现点赞功能，所以点赞必须具备通用性。因此还需要在提交一个参数标记点赞的类型：</p><ul><li>点赞目标的类型</li></ul><p>返回值有两种设计：</p><ul><li>方案一：无返回值，200就是成功，页面直接把点赞数+1展示给用户即可</li><li>方案二：返回点赞数量，页面渲染【还需要回查一次数据库，太消耗性能】</li></ul><p>这里推荐使用方案一，因为每次统计点赞数量也有很大的性能消耗。</p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，按照Restful风格设计，接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408242140613.png" alt="image-20240824214034557"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><ul><li>2.service层</li></ul><ul><li>3.serviceimpl层</li></ul><ul><li>4.mapper层</li></ul><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><h1 id="2-批量查询点赞状态"><a href="#2-批量查询点赞状态" class="headerlink" title="2.批量查询点赞状态"></a>2.批量查询点赞状态</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>前端根据不同状态显示不同样式：</p><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><ul><li>2.service层</li></ul><ul><li>3.serviceimpl层</li></ul><ul><li>4.mapper层</li></ul><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-互动问答相关&quot;&gt;&lt;a href=&quot;#1-互动问答相关&quot; class=&quot;headerlink&quot; title=&quot;1.互动问答相关&quot;&gt;&lt;/a&gt;1.互动问答相关&lt;/h1&gt;&lt;h2 id=&quot;准备阶段—分析业务流程&quot;&gt;&lt;a href=&quot;#准备阶段—分析业务流程&quot; class
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂-互动问答</title>
    <link href="https://larkkkkkkk.github.io/2024/08/23/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E4%BA%92%E5%8A%A8%E9%97%AE%E7%AD%94/"/>
    <id>https://larkkkkkkk.github.io/2024/08/23/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E4%BA%92%E5%8A%A8%E9%97%AE%E7%AD%94/</id>
    <published>2024-08-23T02:10:26.000Z</published>
    <updated>2024-08-24T13:35:17.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-互动问答相关"><a href="#1-互动问答相关" class="headerlink" title="1.互动问答相关"></a>1.互动问答相关</h1><h2 id="准备阶段—分析业务流程"><a href="#准备阶段—分析业务流程" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><ul><li>主流程 </li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231530488.png" alt="image-20240823153033439"></p><p>整体来说，流程是这样的：</p><ul><li>学员在学习的过程中可以随时提问问题</li><li>老师、其他学员都可以回答问题</li><li>老师、学员也都可以对回答多次回复</li><li>老师、学员也都可以对评论多次回复</li><li>老师可以在管理端管理问题、回答、评论的状态</li></ul><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>根据原型图可以得到对应字段</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241502965.png" alt="image-20240824150214835"></p><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p>基本上根据页面原型图得到的字段：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231536709.png" alt="image-20240823153635633"></p><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><ul><li>问题表</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231540083.png" alt="image-20240823154007026"></p><ul><li>回答/评论表</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241506442.png" alt="image-20240824150648355"></p><h2 id="准备阶段—Mybatis-Plus代码生成"><a href="#准备阶段—Mybatis-Plus代码生成" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><p>可以生成对应的文件和实体类等信息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231456518.png" alt="image-20240823145646440"></p><h2 id="准备阶段–类型枚举"><a href="#准备阶段–类型枚举" class="headerlink" title="准备阶段–类型枚举"></a>准备阶段–类型枚举</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231519881.png" alt="image-20240823151906796"></p><h2 id="准备阶段—接口统计"><a href="#准备阶段—接口统计" class="headerlink" title="准备阶段—接口统计"></a>准备阶段—接口统计</h2><p>理论上我们应该先设计所有接口，再继续设计接口对应的表结构。不过由于接口较多，这里我们先对接口做简单统计。然后直接设计数据库，最后边设计接口，边实现接口。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231522635.png" alt="image-20240823152213586"></p><h3 id="1-用户端"><a href="#1-用户端" class="headerlink" title="1.用户端"></a>1.用户端</h3><p>问题页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231556265.png" alt="image-20240823155633183"></p><p>结合原型设计图我们可以看到这里包含4个接口：</p><ul><li>带条件过滤的分页查询</li><li>新增提问</li><li>修改提问</li><li>删除提问</li></ul><p>问题的回答和评论页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231557226.png" alt="image-20240823155743166"></p><p>可以看到页面中包含5个接口：</p><ul><li>根据id查询问题详情</li><li>分页查询问题下的所有回答</li><li>分页查询回答下的评论</li><li>点赞/取消点赞某个回答或评论</li><li>回答某个提问、评论他人回答</li></ul><h3 id="2-管理端"><a href="#2-管理端" class="headerlink" title="2.管理端"></a>2.管理端</h3><p>刚才分析的都是用户端的相关接口，这些接口部分可以与管理端共用，但管理端也有自己的特有需求。</p><p>管理端也可以分页查询问题列表，而且过滤条件、查询结果会有很大不同：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231558362.png" alt="image-20240823155824265"></p><p>比较明显的有两个接口：</p><ul><li>管理端分页查询问题列表：与用户端分页查询不通用，功能更复杂，查询条件更多</li><li>隐藏或显示指定问题</li></ul><p>除此以外，这里有一个问题状态字段，表示管理员是否查看了该问题以及问题中的回答。默认是未查看状态；当管理员点击查看后，状态会变化为已查看；当<strong>学员</strong>再次回答或评论，状态会再次变为未查看。</p><p>因此，需要注意的是：</p><ul><li>每当用户点击查看按钮，需要根据根据id查询问题详情，此时应标记问题状态为已查看</li><li>每当<strong>学员</strong>回答或评论时，需要将问题标记为未查看</li></ul><p>管理端也会有回答列表、评论列表。另外，回答和评论同样有隐藏功能。</p><p>问题详情和回答列表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231558293.png" alt="image-20240823155848228"></p><p>还有评论列表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231559432.png" alt="image-20240823155908368"></p><p>总结一下，回答和评论包含的接口有：</p><ul><li>管理端根据id查询问题详情</li><li>分页查询问题下的回答</li><li>分页查询回答下的评论</li><li>点赞/取消点赞某个回答或评论</li><li>隐藏/显示指定回答或评论</li><li>回答某个提问、评论他人回答、评论（与用户端共用）</li></ul><h1 id="—–用户端–问题相关接口—–"><a href="#—–用户端–问题相关接口—–" class="headerlink" title="==—–用户端–问题相关接口—–=="></a>==—–用户端–问题相关接口—–==</h1><h1 id="1-新增互动问题-用户端"><a href="#1-新增互动问题-用户端" class="headerlink" title="1.新增互动问题(用户端)"></a>1.新增互动问题(用户端)</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231610729.png" alt="image-20240823161022682"></p><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>比较简单，通过前端传递给我{课程id，章id，小节id，问题标题，问题具体描述，问题是否匿名}</p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231611595.png" alt="image-20240823161128538"></p><p>通过新增的问题的表单即可分析出接口的请求参数信息了，然后按照Restful的风格设计即可：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231612484.png" alt="image-20240823161245433"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231656927.png" alt="image-20240823165642847"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231657852.png" alt="image-20240823165750814"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231658343.png" alt="image-20240823165804291"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>无</p><h1 id="2-修改问题-用户端"><a href="#2-修改问题-用户端" class="headerlink" title="2.修改问题(用户端)"></a>2.修改问题(用户端)</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>修改与新增表单基本类似，此处不再分析。我们可以参考新增的接口，然后按照Restful的风格设计为更新即可：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231700907.png" alt="image-20240823170039855"></p><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231731666.png" alt="image-20240823173145619"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231731292.png" alt="image-20240823173150262"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231732876.png" alt="image-20240823173243825"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>要注意校验问题是否是自己的，校验是否有这条问题</p><h1 id="3-分页查询问题-用户端"><a href="#3-分页查询问题-用户端" class="headerlink" title="3.分页查询问题(用户端)"></a>3.分页查询问题(用户端)</h1><h2 id="1-原型图-2"><a href="#1-原型图-2" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232035487.png" alt="image-20240823203525426"></p><h2 id="2-设计数据库-2"><a href="#2-设计数据库-2" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-2"><a href="#3-业务逻辑图-2" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>这就是一个典型的分页查询。主要分析请求参数和返回值就行了。</p><p>请求参数就是过滤条件，页面可以看到的条件有：</p><ul><li>分页条件</li><li>全部回答/我的回答：也就是要不要基于用户id过滤</li><li>课程id：隐含条件，因为问题列表是在某课程详情页面查看的，所以一定要以课程id为条件</li><li>章节id：可选条件，当用户点击小节时传递</li></ul><p>返回值格式，从页面可以看到属性有：</p><ul><li>是否匿名：如果提交问题是选择了匿名，则页面不能展示用户信息</li><li>用户id：匿名则不显示</li><li>用户头像：匿名则不显示</li><li>用户名称：匿名则不显示</li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li>最近一次回答的信息：<ul><li>回答人名称</li><li>回答内容</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232043572.png" alt="image-20240823204307508"></p><h2 id="4-接口分析-2"><a href="#4-接口分析-2" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，按照Restful来设计接口，信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232036669.png" alt="image-20240823203613606"></p><h2 id="5-具体实现-2"><a href="#5-具体实现-2" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232123047.png" alt="image-20240823212331980"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232123875.png" alt="image-20240823212338832"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232133199.png" alt="image-20240823213318136"></p><p>[for循环遍历组装数据]</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232129522.png" alt="image-20240823212921387"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-2"><a href="#6-具体难点和亮点-2" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>主要就是根据问题表和问答表查询对应信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232044754.png" alt="image-20240823204407682"></p><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;total&quot;: &quot;2&quot;,</span><br><span class="line">  &quot;pages&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;list&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;1552212554946768897&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;redis安装的时候有问题，一直报错是怎么回事？&quot;,</span><br><span class="line">      &quot;answerTimes&quot;: 1,</span><br><span class="line">      &quot;createTime&quot;: &quot;2022-07-27 16:41:27&quot;,</span><br><span class="line">      &quot;userId&quot;: &quot;2&quot;,</span><br><span class="line">      &quot;userName&quot;: &quot;jack&quot;,</span><br><span class="line">      &quot;userIcon&quot;: &quot;&#x2F;img-tx&#x2F;0abcd1d7a66a4fad98b80c1bb48ec6ec.png&quot;,</span><br><span class="line">      &quot;latestReplyContent&quot;: &quot;是不是Redis的依赖没有安装呢？&quot;,</span><br><span class="line">      &quot;latestReplyUser&quot;: &quot;13500010005&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;如果问题的提问者是匿名的就不显示userName userId userIcon属性</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;1585589766919852033&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;Java的IO是阻塞IO吗？&quot;,</span><br><span class="line">      &quot;answerTimes&quot;: 1,</span><br><span class="line">      &quot;createTime&quot;: &quot;2022-10-27 12:31:44&quot;,</span><br><span class="line">      &quot;latestReplyContent&quot;: &quot;阻塞IO和非阻塞IO都有。java.io包下的都是阻塞IO，java.nio下的是非阻塞IO&quot;,</span><br><span class="line">      &quot;latestReplyUser&quot;: &quot;admin&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装过程：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232129522.png" alt></p><h1 id="4-根据id查询问题详情-用户端"><a href="#4-根据id查询问题详情-用户端" class="headerlink" title="4.根据id查询问题详情(用户端)"></a>4.根据id查询问题详情(用户端)</h1><h2 id="1-原型图-3"><a href="#1-原型图-3" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231755685.png" alt="image-20240823175553623"></p><p>由此可以看出详情页所需要的信息相比分页时，主要多了问题详情，主要字段有：</p><ul><li>是否匿名</li><li>用户id：匿名则不显示</li><li>用户头像：匿名则不显示</li><li>用户名称：匿名则不显示</li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li>问题描述详情</li></ul><h2 id="2-设计数据库-3"><a href="#2-设计数据库-3" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-3"><a href="#3-业务逻辑图-3" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.根据问题id获取一条问题</span><br><span class="line">2.根据1步骤信息判断是否匿名情况：不匿名才赋用户信息</span><br></pre></td></tr></table></figure><h2 id="4-接口分析-3"><a href="#4-接口分析-3" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>而请求参数则更加简单了，就是问题的id</p><p>然后，再按照Restful风格设计，接口就出来了：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231757470.png" alt="image-20240823175701421"></p><h2 id="5-具体实现-3"><a href="#5-具体实现-3" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232025723.png" alt="image-20240823202537651"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232025492.png" alt="image-20240823202543455"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408232026385.png" alt="image-20240823202608324"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-3"><a href="#6-具体难点和亮点-3" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>要注意只有不匿名的情况下才能获取用户信息</p><h1 id="5-删除问题-用户端"><a href="#5-删除问题-用户端" class="headerlink" title="5.删除问题(用户端)"></a>5.删除问题(用户端)</h1><h2 id="1-原型图-4"><a href="#1-原型图-4" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231734595.png" alt="image-20240823173457552"></p><h2 id="2-设计数据库-4"><a href="#2-设计数据库-4" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231754864.png" alt="image-20240823175401802"></p><h2 id="3-业务逻辑图-4"><a href="#3-业务逻辑图-4" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>需要注意的是，当用户删除某个问题时，也需要删除问题下的回答、评论。</p><p>整体业务流程如下：</p><ul><li>查询问题是否存在</li><li>判断是否是当前用户提问的</li><li>如果不是则报错</li><li>如果是则删除问题</li><li>然后删除问题下的回答及评论 【两个表根据问题表的主键id和评论问答表的question_id对应(1对多)】</li></ul><h2 id="4-接口分析-4"><a href="#4-接口分析-4" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231735398.png" alt="image-20240823173517366"></p><h2 id="5-具体实现-4"><a href="#5-具体实现-4" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231751721.png" alt="image-20240823175150666"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231751813.png" alt="image-20240823175156775"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408231752619.png" alt="image-20240823175228561"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-4"><a href="#6-具体难点和亮点-4" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>需要注意的是，当用户删除某个问题时，也需要删除问题下的回答、评论。</p><p>整体业务流程如下：</p><ul><li>查询问题是否存在</li><li>判断是否是当前用户提问的</li><li>如果不是则报错</li><li>如果是则删除问题</li><li>然后删除问题下的回答及评论 【两个表根据问题表的主键id和评论问答表的question_id对应(1对多)】</li></ul><h1 id="—–用户端–评论相关接口—–"><a href="#—–用户端–评论相关接口—–" class="headerlink" title="==—–用户端–评论相关接口—–=="></a>==—–用户端–评论相关接口—–==</h1><h1 id="1-新增回答-评论-用户端"><a href="#1-新增回答-评论-用户端" class="headerlink" title="1.新增回答/评论(用户端)"></a>1.新增回答/评论(用户端)</h1><h2 id="1-原型图-5"><a href="#1-原型图-5" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241132207.png" alt="image-20240824113228150"></p><p>针对回答和评论的区别：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241142834.png" alt="image-20240824114211785"></p><h2 id="2-设计数据库-5"><a href="#2-设计数据库-5" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-5"><a href="#3-业务逻辑图-5" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241139109.png" alt="image-20240824113914047"></p><h2 id="4-接口分析-5"><a href="#4-接口分析-5" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，按照Restful的规范设计，接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241135827.png" alt="image-20240824113518775"></p><h2 id="5-具体实现-5"><a href="#5-具体实现-5" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><ul><li>2.service层</li></ul><ul><li>3.serviceimpl层</li></ul><ul><li>4.mapper层</li></ul><h2 id="6-具体难点和亮点-5"><a href="#6-具体难点和亮点-5" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：回复和评论的区别</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241142834.png" alt="image-20240824114211785"></p></li></ul><blockquote><p>回复：回答哪个问题，回复什么内容，要不要被看到</p><p>评论：回答哪个问题，回复什么内容，要不要被看到 + 【上一级】是哪个回答下面，评论哪个回答，针对谁</p></blockquote><ul><li>问题二：新增回答记得更新question的最近一次回答id</li><li>问题三：如果评论的用户是学生(前端传递是否是学生提交)，标记问题为未查看【管理端根据id查看问题详情会更改为已查看】</li></ul><h1 id="2-分页查询回答-评论列表-用户端"><a href="#2-分页查询回答-评论列表-用户端" class="headerlink" title="2.分页查询回答/评论列表(用户端)"></a>2.分页查询回答/评论列表(用户端)</h1><h2 id="1-原型图-6"><a href="#1-原型图-6" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-6"><a href="#2-设计数据库-6" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-6"><a href="#3-业务逻辑图-6" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-6"><a href="#4-接口分析-6" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><h2 id="5-具体实现-6"><a href="#5-具体实现-6" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><ul><li>2.service层</li></ul><ul><li>3.serviceimpl层</li></ul><ul><li>4.mapper层</li></ul><h2 id="6-具体难点和亮点-6"><a href="#6-具体难点和亮点-6" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><h1 id="—–管理端-问题相关接口—–"><a href="#—–管理端-问题相关接口—–" class="headerlink" title="==—–管理端-问题相关接口—–=="></a>==—–管理端-问题相关接口—–==</h1><h1 id="1-根据条件分页查询问题-管理端-—引入ES"><a href="#1-根据条件分页查询问题-管理端-—引入ES" class="headerlink" title="1.根据条件分页查询问题(管理端)—引入ES"></a>1.根据条件分页查询问题(管理端)—引入ES</h1><h2 id="1-原型图-7"><a href="#1-原型图-7" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在管理端后台存在问答管理列表页，与用户端类似都是分页查询，但是请求参数和返回值有较大差别：因此需要引入ES处理</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240942911.png" alt="image-20240824094210826"></p><p>从请求参数来看，除了分页参数，还包含3个：</p><ul><li>问题的查看状态</li><li>课程名称</li><li>提问时间</li></ul><p>从返回值来看，比用户端多了一些字段：</p><ul><li>是否匿名: 管理端不关心，全都展示</li><li>提问者信息：<ul><li>用户id</li><li>用户头像：匿名则不显示</li><li>用户 名称：匿名则不显示</li></ul></li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li>最近一次回答的信息：<ul><li>回答人名称</li><li>回答内容</li></ul></li><li>问题关联的课程名称</li><li>问题关联的章、节名称</li><li>问题关联课程的分类名称</li></ul><h2 id="2-设计数据库-7"><a href="#2-设计数据库-7" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-7"><a href="#3-业务逻辑图-7" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241633238.png" alt="image-20240824163306170"></p><h2 id="4-接口分析-7"><a href="#4-接口分析-7" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>由于请求入参和返回值与用户端有较大差异，因此我们需要设计一个新的接口：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240943151.png" alt="image-20240824094304095"></p><h2 id="5-具体实现-7"><a href="#5-具体实现-7" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240948897.png" alt="image-20240824094857852"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240949574.png" alt="image-20240824094931532"></p><ul><li>3.serviceimpl层</li></ul><p>第一部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241748042.png" alt="image-20240824174828966"></p><p>第二部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241749673.png" alt="image-20240824174932621"></p><p>第三部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241750548.png" alt="image-20240824175054481"></p><p>第四部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241752093.png" alt="image-20240824175209034"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-7"><a href="#6-具体难点和亮点-7" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241126242.png" alt="image-20240824112643164"></p><ul><li><p>问题二：查询条件是课程名称，数据是课程id，怎么实现模糊查询？</p><p>所有上线的课程数据都会存储到<code>Elasticsearch</code>中，方便用户检索课程。并且在<code>tj-search</code>模块中提供了相关的查询接口</p></li><li><p>问题三：那怎么保证ES和Mysql数据一致性？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法一：同步双写，课程上架的时候数据写入Mysql，同步也写入ES</span><br><span class="line">方法二：异步双写，课程上架的时候数据写入Mysql，发送消息给MQ，MQ通知ES更新  【项目使用】</span><br><span class="line">方法三：定时同步，对于数据库新增的时候，定时批量&#x2F;全量同步到ES</span><br><span class="line">方法四：基于Logstash输入输出插件</span><br><span class="line">方法五：基于cancal数据库增量日志解析工具，伪装主从数据库进行同步</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>策略</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>同步双写</td><td>- 简单易实现<br>- 实时性高</td><td>- 代码侵入性强<br>- 存在不一致的风险<br>- 可能影响系统性能</td></tr><tr><td>异步双写（MQ方式）</td><td>- 解耦数据写入操作<br>- 通过消息队列提升性能和扩展性</td><td>- 系统复杂度增加<br>- 可能存在消息丢失的风险<br>- 引入了消息中间件的依赖</td></tr><tr><td>定期同步</td><td>- 实现简单<br>- 无需改变现有业务逻辑</td><td>- 实时性差<br>- 可能给数据库带来额外压力</td></tr><tr><td>基于Binlog实时同步</td><td>- 无代码侵入<br>- 实时性较好<br>- 业务逻辑与数据同步解耦</td><td>- 构建Binlog系统复杂<br>- 可能存在MQ延时风险</td></tr><tr><td>使用Canal监听Binlog同步数据到ES</td><td>- 基于MySQL的Binlog，实现数据的实时同步<br>- 减少系统耦合</td><td>- 需要维护额外的Canal服务</td></tr></tbody></table><ul><li>问题四：CaffeineCache本地缓存怎么做的？</li></ul><h1 id="2-隐藏-显示问题-管理端"><a href="#2-隐藏-显示问题-管理端" class="headerlink" title="2.隐藏/显示问题(管理端)"></a>2.隐藏/显示问题(管理端)</h1><h2 id="1-原型图-8"><a href="#1-原型图-8" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在管理端的互动问题列表中，管理员可以隐藏某个问题，这样就不会在用户端页面展示了：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240950651.png" alt="image-20240824095044589"></p><h2 id="2-设计数据库-8"><a href="#2-设计数据库-8" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-8"><a href="#3-业务逻辑图-8" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>由于<code>interaction_question</code>表中有一个<code>hidden</code>字段来表示是否隐藏：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408240951824.png" alt="image-20240824095143762"></p><p>因此，本质来说，这个接口是一个修改某字段值的接口，并不复杂。</p><h2 id="4-接口分析-8"><a href="#4-接口分析-8" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>我们按照Restful的风格来设定，接口信息如下：</p><ul><li><strong>接口地址</strong>:<code>/admin/questions/{id}/hidden/{hidden}</code></li><li><strong>请求方式</strong>:<code>PUT</code></li><li><strong>请求参数</strong>: 路径占位符参数<ul><li>id：问题id</li><li>hidden：是否隐藏</li></ul></li></ul><h2 id="5-具体实现-8"><a href="#5-具体实现-8" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241001834.png" alt="image-20240824100132775"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241001191.png" alt="image-20240824100138151"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241002829.png" alt="image-20240824100229780"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-8"><a href="#6-具体难点和亮点-8" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>就是简单修改字段</p><h1 id="3-根据id查询问题详情-管理端"><a href="#3-根据id查询问题详情-管理端" class="headerlink" title="3.根据id查询问题详情(管理端)"></a>3.根据id查询问题详情(管理端)</h1><h2 id="1-原型图-9"><a href="#1-原型图-9" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在管理端的问题管理页面，点击查看按钮就会进入问题详情页：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241003190.png" alt="image-20240824100328128"></p><p>问题详情页如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241004747.png" alt="image-20240824100430677"></p><h2 id="2-设计数据库-9"><a href="#2-设计数据库-9" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-9"><a href="#3-业务逻辑图-9" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>可以看到，这里需要查询的数据还是比较多的，包含：</p><ul><li>问题标题</li><li>问题描述</li><li>提问者信息<ul><li>id</li><li>昵称</li><li>头像</li></ul></li><li>课程三级分类</li><li>课程名称</li><li><strong>课程负责老师</strong></li><li>课程所属章节</li><li>回答数量</li><li>用户端是否显示</li></ul><p>返回值与管理端分页查询基本一致，多了一个课程负责老师信息。所以我们沿用之前的<code>QuestionAdminVO</code>即可。但是需要添加一个课程负责老师的字段：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241005205.png" alt></p><h2 id="4-接口分析-9"><a href="#4-接口分析-9" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>虽然用户端也有根据id查询问题，但是返回值与用户端存在较大差异，所以我们需要另外设计一个接口。</p><p>按照Restful风格，接口信息如下：</p><ul><li><strong>接口地址</strong>: <code>/admin/questions/{id}</code></li><li><strong>请求方式</strong>: <code>GET</code></li><li><strong>请求参数</strong>: 路径占位符格式</li><li><strong>返回值</strong>：与分页查询共享VO，这里不再赘述</li></ul><h2 id="5-具体实现-9"><a href="#5-具体实现-9" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241109970.png" alt="image-20240824110945921"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241109996.png" alt="image-20240824110950955"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241112109.png" alt="image-20240824111243999"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点-9"><a href="#6-具体难点和亮点-9" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><blockquote><p> 问题表中有一个status字段，标记管理员是否已经查看过该问题。因此每当调用根据id查询问题接口，我们可以认为管理员查看了该问题，应该将问题status标记为<strong>已查看</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241057585.png" alt="image-20240824105707505"></p><h1 id="—–管理端–评论相关接口—–"><a href="#—–管理端–评论相关接口—–" class="headerlink" title="==—–管理端–评论相关接口—–=="></a>==—–管理端–评论相关接口—–==</h1><h1 id="1-分页查询问答-评论列表-管理端"><a href="#1-分页查询问答-评论列表-管理端" class="headerlink" title="1.分页查询问答/评论列表(管理端)"></a>1.分页查询问答/评论列表(管理端)</h1><h2 id="1-原型图-10"><a href="#1-原型图-10" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-10"><a href="#2-设计数据库-10" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-10"><a href="#3-业务逻辑图-10" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-10"><a href="#4-接口分析-10" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><h2 id="5-具体实现-10"><a href="#5-具体实现-10" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><ul><li>2.service层</li></ul><ul><li>3.serviceimpl层</li></ul><ul><li>4.mapper层</li></ul><h2 id="6-具体难点和亮点-10"><a href="#6-具体难点和亮点-10" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><h1 id="2-隐藏-显示评论-管理端"><a href="#2-隐藏-显示评论-管理端" class="headerlink" title="2.隐藏/显示评论(管理端)"></a>2.隐藏/显示评论(管理端)</h1><h2 id="1-原型图-11"><a href="#1-原型图-11" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>与问题类似，管理员也可以显示或隐藏某个评论或评论：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241407255.png" alt="image-20240824140709151"></p><p>与隐藏问题类似，同样是修改hidden字段。</p><h2 id="2-设计数据库-11"><a href="#2-设计数据库-11" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-11"><a href="#3-业务逻辑图-11" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>与隐藏问题类似，同样是修改hidden字段</p><p>【<strong>注意</strong>：如果隐藏的是回答，则回答下的评论也要隐藏】</p><h2 id="4-接口分析-11"><a href="#4-接口分析-11" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><ul><li><strong>接口地址：</strong><code>/admin/replies/{id}/hidden/{hidden}</code></li><li><strong>请求方式：</strong><code>PUT</code></li><li><strong>请求参数：</strong>路径占位符参数<ul><li>id：回答或评论id</li><li>hidden：是否被隐藏</li></ul></li></ul><h2 id="5-具体实现-11"><a href="#5-具体实现-11" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241614929.png" alt="image-20240824161407864"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241614435.png" alt="image-20240824161414397"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241615550.png" alt="image-20240824161530474"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408241615800.png" alt="image-20240824161535756"></p><h2 id="6-具体难点和亮点-11"><a href="#6-具体难点和亮点-11" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-互动问答相关&quot;&gt;&lt;a href=&quot;#1-互动问答相关&quot; class=&quot;headerlink&quot; title=&quot;1.互动问答相关&quot;&gt;&lt;/a&gt;1.互动问答相关&lt;/h1&gt;&lt;h2 id=&quot;准备阶段—分析业务流程&quot;&gt;&lt;a href=&quot;#准备阶段—分析业务流程&quot; class
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂-我的课表相关</title>
    <link href="https://larkkkkkkk.github.io/2024/08/18/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E6%88%91%E7%9A%84%E8%AF%BE%E8%A1%A8%E7%9B%B8%E5%85%B3/"/>
    <id>https://larkkkkkkk.github.io/2024/08/18/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E6%88%91%E7%9A%84%E8%AF%BE%E8%A1%A8%E7%9B%B8%E5%85%B3/</id>
    <published>2024-08-18T08:36:47.000Z</published>
    <updated>2024-08-18T09:33:52.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-我的课表"><a href="#1-我的课表" class="headerlink" title="1.我的课表"></a>1.我的课表</h1><h2 id="准备阶段—业务流程"><a href="#准备阶段—业务流程" class="headerlink" title="准备阶段—业务流程"></a>准备阶段—业务流程</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172043546.png" alt="image-20240817204359442"></p><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>【主要涉及主键id，学员id和课程id也要记录[要考虑是谁学了什么课程]】</p><p>课表要记录的是用户的学习状态，所谓学习状态就是记录<strong>谁</strong>在学习<strong>哪个课程</strong>，<strong>学习的进度</strong>如何。</p><ul><li><p>其中，谁在学习哪个课程，就是一种关系。也就是说<strong>课表就是用户和课程的中间关系表</strong>。因此一定要包含三个字段：</p><ul><li>userId：用户id，也就是<strong>谁</strong></li><li>courseId：课程id，也就是学的<strong>课程</strong></li><li>id：唯一主键</li></ul></li><li><p>而学习进度，则是一些附加的功能字段，页面需要哪些功能就添加哪些字段即可：</p></li></ul><ul><li><p>status：课程学习状态。0-未学习，1-学习中，2-已学完，3-已过期</p></li><li><p>planStatus：学习计划状态，0-没有计划，1-计划进行中</p></li><li><p>weekFreq：计划的学习频率</p></li><li><p>learnedSections：已学习小节数量，【注意：课程总小节数、课程名称、封面等可由课程id查询得出，无需重复记录】</p></li><li><p>latestSectionId：最近一次学习的小节id，方便根据id查询最近学习的课程正在学第几节</p></li><li><p>latestLearnTime：最近一次学习时间，用于分页查询的排序：</p></li><li><p>createTime和expireTime，也就是课程加入时间和过期时间</p></li></ul><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172127956.png" alt="image-20240817212711903"></p><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172052867.png" alt="image-20240817205247815"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172050280.png" alt="image-20240817205028215"></p><h2 id="准备阶段—Mybatis-plus代码生成"><a href="#准备阶段—Mybatis-plus代码生成" class="headerlink" title="准备阶段—Mybatis-plus代码生成"></a>准备阶段—Mybatis-plus代码生成</h2><p>参考我的Mybatis-plus笔记-代码生成步骤：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141519620.png" alt="image-20240814151956565"></p><h2 id="准备阶段—状态枚举"><a href="#准备阶段—状态枚举" class="headerlink" title="准备阶段—状态枚举"></a>准备阶段—状态枚举</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141521880.png" alt="image-20240814152152815"></p><h2 id="准备阶段—所有接口"><a href="#准备阶段—所有接口" class="headerlink" title="准备阶段—所有接口"></a>准备阶段—所有接口</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408132134374.png" alt="image-20240813213435263"></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="==具体实现=="></a>==<strong>具体实现</strong>==</h1><h1 id="1-支付-报名课程后添加课表"><a href="#1-支付-报名课程后添加课表" class="headerlink" title="1.支付/报名课程后添加课表"></a>1.支付/报名课程后添加课表</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create table learning_lesson</span><br><span class="line">(</span><br><span class="line">    id                bigint                             not null comment &#39;主键&#39;</span><br><span class="line">        primary key,</span><br><span class="line">    user_id           bigint                             not null comment &#39;学员id&#39;,</span><br><span class="line">    course_id         bigint                             not null comment &#39;课程id&#39;,</span><br><span class="line">    status            tinyint  default 0                 null comment &#39;课程状态，0-未学习，1-学习中，2-已学完，3-已失效&#39;,</span><br><span class="line">    week_freq         tinyint                            null comment &#39;每周学习频率，例如每周学习6小节，则频率为6&#39;,</span><br><span class="line">    plan_status       tinyint  default 0                 not null comment &#39;学习计划状态，0-没有计划，1-计划进行中&#39;,</span><br><span class="line">    learned_sections  int      default 0                 not null comment &#39;已学习小节数量&#39;,</span><br><span class="line">    latest_section_id bigint                             null comment &#39;最近一次学习的小节id&#39;,</span><br><span class="line">    latest_learn_time datetime                           null comment &#39;最近一次学习的时间&#39;,</span><br><span class="line">    create_time       datetime default CURRENT_TIMESTAMP not null comment &#39;创建时间&#39;,</span><br><span class="line">    expire_time       datetime                           not null comment &#39;过期时间&#39;,</span><br><span class="line">    update_time       datetime default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment &#39;更新时间&#39;,</span><br><span class="line">    constraint idx_user_id</span><br><span class="line">        unique (user_id, course_id)</span><br><span class="line">)</span><br><span class="line">    comment &#39;学生课程表&#39; row_format &#x3D; DYNAMIC;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151658196.png" alt="image-20240815165857129"></p><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>接下来，我们来分析一下添加课表逻辑的业务流程。首先来对比一下请求参数和数据库字段：</p><p>参数：</p><ul><li>Long userId</li><li>List<Long> courseIds</Long></li></ul><p>数据表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172133522.png" alt="img"></p><p>一个userId和一个courseId是learning_lesson表中的一条数据。而订单中一个用户可能购买多个课程。因此请求参数中的courseId集合就需要逐个处理，将来会有多条课表数据。</p><p>另外，可以发现参数中只有userId和courseId，表中的其它字段都需要我们想办法来组织：</p><ul><li>status：课程状态，可以默认为0，代表未学习</li><li>week_freq：学习计划频率，可以为空，代表没有设置学习计划</li><li>plan_status：学习计划状态，默认为0，代表没有设置学习计划</li><li>learned_sections：已学习小节数，默认0，代表没有学习</li><li>latest_section_id：最近学习小节id，可以为空，代表最近没有学习任何小节</li><li>latest_learn_time：最近学习时间，可以为空，代表最近没有学习</li><li>create_time：创建时间，也就是当前时间</li><li><strong>expire_time</strong>：过期时间，这个要结合课程来计算。每个课程都有自己的有效期（valid_duration），因此过期时间就是create_time加上课程的有效期</li><li>update_time：更新时间，默认当前时间，有数据库实时更新，不用管</li></ul><p>可见在整张表中，需要我们在新增时处理的字段就剩下过期时间<code>expire_time</code>了。而要知道这个就必须根据courseId查询课程的信息，找到其中的课程有效期（<code>valid_duration</code>）。课程表结构如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172134616.png" alt="image-20240817213419509"></p><p>因此，我们要做的事情就是根据courseId集合查询课程信息，然后分别计算每个课程的有效期，组织多个LearingLesson的数据，形成集合。最终批量新增到数据库即可。</p><p>流程如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152124144.png" alt="image-20240815212456046"></p><p>其中消息发送者信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172111462.png" alt="image-20240817211108395"></p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152122557.png" alt="image-20240815212239468"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.数据库设计：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141457877.png" alt="image-20240814145734802"></p><ul><li>2.准备PO和枚举类：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141521880.png" alt="image-20240814152152815"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用枚举类的优点：</span><br><span class="line">1.类型安全：枚举提供了一种类型安全的方式来处理一组固定的常量。使用枚举可以确保status字段的值只限于预定义的四个选项，防止出现无效的值。【更安全】</span><br><span class="line">2.代码可读性：枚举使得代码更易读，更易于维护。开发者可以很容易地理解每个枚举值的含义，而不需要去查看数据库字段的注释或文档。【易读】</span><br><span class="line">3.减少错误：使用枚举可以减少因拼写错误或使用错误的整数值而导致的bug。【防止写错】</span><br><span class="line">4.便于比较：枚举类型之间的比较可以直接使用&#x3D;&#x3D;操作符，而不需要使用equals方法。【直接使用&#x3D;&#x3D;对比】</span><br><span class="line">5.可扩展性：如果未来需要添加更多的状态，枚举类可以很容易地进行扩展。【更容易扩展】</span><br><span class="line">6.方法和属性：枚举类型可以包含字段、方法和构造函数，这使得你可以在枚举值上添加更多的行为和数据。</span><br><span class="line">7.序列化：枚举类型默认实现了Serializable接口，这使得它们可以很容易地被序列化和反序列化。【搭配@JsonValue&#x2F;&#x2F;序列化的时候转为响应值 @EnumValue &#x2F;&#x2F;和数据库打交道时转为相对应值】</span><br><span class="line">8.switch语句支持：枚举类型可以作为switch语句的合法变量类型，使得代码更加清晰。</span><br></pre></td></tr></table></figure><ul><li>3.使用MybatisPlus生成其余基础代码：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408141519620.png" alt="image-20240814151956565"></p><ul><li>4.设计MQ消费者信息</li></ul><p><strong>【我和课程下单统一OrderBasicDTO，主要传递orderId和courseID和userID以及完成时间】</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151620820.png" alt="image-20240815162011652"></p><ul><li>5.具体逻辑</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151624663.png" alt="image-20240815162411566"></p><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：课程过期时间怎么算？</p><p>课程过期时间=课程加入课程时间(当前)+课程有效期(通过传入的courseId课程id远程调用课程微服务获取media_duration有效时间)</p></li><li><p>问题二：如果这个人网络不好，重复下单怎么保证幂等性？</p><p>1.我给(courseId,userId)创建唯一索引，保证幂等性</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151652348.png" alt="image-20240815165221302"></p><p>2.我使用redis：进来的时候判断OrderId订单id是否有，有的话就重复，没有的话就存在redis[设置60s]</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151651884.png" alt="image-20240815165141761"></p><ul><li><p>问题三：Id如何设计？</p><p>分为分库和不分库情况：我考虑并发就分库，然后使用雪花算法【还有其他方法，在tk实习时候考虑的那个笔记里面】<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151701679.png" alt="image-20240815170139617"></p></li></ul><p>参考本文：<a href="https://mp.weixin.qq.com/s/zQNfcpCbPoo4yQFJR7FpqQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zQNfcpCbPoo4yQFJR7FpqQ</a></p><h1 id="2-分页查询我的课表"><a href="#2-分页查询我的课表" class="headerlink" title="2.分页查询我的课表"></a>2.分页查询我的课表</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172106757.png" alt="image-20240817210643678"></p><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172109033.png" alt="image-20240817210943970"></p><p>肉眼可见的字段就包含：</p><ul><li>课程名称</li><li>课程加入课表时间</li><li>课程有效期结束时间</li><li>课程状态</li><li>课程已学习小节数</li><li>课程总小节数</li><li>课程是否创建了学习计划</li></ul><p>还有一些字段是页面中没有的，但是可以从功能需要中推测出来，例如：</p><ul><li>课程id：因为我们点击卡片，需要跳转到对应课程页面，必须知道课程id</li><li>课程封面：页面渲染时为了美观，一定会展示一个课程的封面图片</li><li>学习计划频率：当用户点击修改学习计划时，需要回显目前的学习计划频率</li><li>课表id，当前课程在课表中的对应id，当用户点击继续学习，或创建集合，需要根据课表来操作</li></ul><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152119555.png" alt="image-20240815211955503"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151707675.png" alt></p><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151952385.png" alt="image-20240815195224271"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151952827.png" alt="image-20240815195238771"></p><ul><li>3.serviceImp层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408151955124.png" alt="image-20240815195504036"></p><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：如何查询避免封装时候两次for循环</li></ul><p>​        使用courseList.stream().collect(Collectors.toMap(CourseSimpleInfoDTO::getId, c -&gt; c))转换为map，在后续直接取出来就行</p><h1 id="3-查看最近学习的课程-一门"><a href="#3-查看最近学习的课程-一门" class="headerlink" title="3. 查看最近学习的课程(一门)"></a>3. 查看最近学习的课程(一门)</h1><h2 id="1-原型图-2"><a href="#1-原型图-2" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172046051.png" alt="image-20240817204641999"></p><h2 id="2-设计数据库-2"><a href="#2-设计数据库-2" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><p>learning_lesson</p><p>course</p><p>course_catalogue</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152001995.png" alt="image-20240815200109908"></p><h2 id="3-业务逻辑图-2"><a href="#3-业务逻辑图-2" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>主要分为四个部分数据：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152107195.png" alt="image-20240815210724100"></p><h2 id="4-接口分析-2"><a href="#4-接口分析-2" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152001960.png" alt="image-20240815200138868"></p><h2 id="5-具体实现-2"><a href="#5-具体实现-2" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152115998.png" alt="image-20240815211536963"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152115196.png" alt="image-20240815211548167"></p><ul><li><p>3.serviceimpl层</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408152114377.png" alt="image-20240815211458287"></p></li><li><p>4.mapper层</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161506339.png" alt="image-20240816150635247"></p><h2 id="6-具体难点和亮点-2"><a href="#6-具体难点和亮点-2" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：什么是最近学习的一门课程【基本上围绕learning-lesson和course以及course-catalogue三个数据库表获取数据】</p><p>可以在学习中心位置查看最近学习的一门课程，主要是通过userId用户id查询一条课程表信息；通过课程表信息的courseId课程id查询课程的具体信息；通过课程表信息的latest_section_id最近一次学习的小节名称远程调用课程学习微服务获取(通过latest_section_id查询course-catalogue表数据)；通过userId用户id来count(*)获得数据</p></li></ul><h1 id="4-根据id查询某个课程学习状态"><a href="#4-根据id查询某个课程学习状态" class="headerlink" title="4.根据id查询某个课程学习状态"></a>4.根据id查询某个课程学习状态</h1><h2 id="1-原型图-3"><a href="#1-原型图-3" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在课程详情页，课程展示有两种不同形式：</p><ul><li>对于未购买的课程：展示为立刻购买或加入购物车</li></ul><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=ODg4NjdmYWQwYWFjOTdjMGJiMGVlMThjODNkODA2OTBfYTRpZ3pFNU5sSUVqcjMwcFdLOU55cE9qTjg1dmhkd1FfVG9rZW46UFBjb2JtOXFpb01wVTh4TU9aMGNIcHJObmpjXzE3MjM5MDA2NTc6MTcyMzkwNDI1N19WNA" alt="img"></p><ul><li>对于已经购买的课程：展示为马上学习，并且显示学习的进度、有效期</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408172117207.png" alt="img"></p><h2 id="2-设计数据库-3"><a href="#2-设计数据库-3" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-3"><a href="#3-业务逻辑图-3" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161446074.png" alt="image-20240816144647955"></p><h2 id="4-接口分析-3"><a href="#4-接口分析-3" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161447157.png" alt="image-20240816144722047"></p><h2 id="5-具体实现-3"><a href="#5-具体实现-3" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161513754.png" alt="image-20240816151331705"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161513942.png" alt="image-20240816151336910"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161514679.png" alt="image-20240816151452627"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161513482.png" alt="image-20240816151350430"></p><h2 id="6-具体难点和亮点-3"><a href="#6-具体难点和亮点-3" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：查询课表的课程还是课程表的信息？</li></ul><p>​        ①根据courseId和UserId(两者是唯一索引，能保证只有得到一条数据)查询课表得到公共数据，针对课程具体信息要传入courseId课程id远程调用查询</p><h1 id="5-删除课表中的课程"><a href="#5-删除课表中的课程" class="headerlink" title="5.删除课表中的课程"></a>5.删除课表中的课程</h1><h2 id="1-原型图-4"><a href="#1-原型图-4" class="headerlink" title="1.原型图"></a>1.原型图</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161644903.png" alt="image-20240816164422835"></p><h2 id="2-设计数据库-4"><a href="#2-设计数据库-4" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-4"><a href="#3-业务逻辑图-4" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>删除课表中的课程有两种场景：</p><ul><li>①用户直接删除已失效的课程【比较简单】</li><li>②用户退款后触发课表自动删除【涉及发送MQ消息给learning-service服务】</li></ul><p>现在那边退款成功之后增加步骤4[发送消息，我需要负责接受消息]</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161621711.png" alt="image-20240816162139654"></p><h2 id="4-接口分析-4"><a href="#4-接口分析-4" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>这里我们可以按照Restful的规范来定义这个删除接口：</p><ul><li>请求方式：删除业务的请求方式都是DELETE</li><li>请求路径：一般是资源名 + 标示，这里删除的是课表中的课程，因此：<code>/ls/lessons/{courseId}</code></li><li>请求参数：自然是路径中传递的课程id</li><li>返回值：无</li></ul><h2 id="5-具体实现-4"><a href="#5-具体实现-4" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161606364.png" alt="image-20240816160647290"></p><ul><li><p>2.service层</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161638997.png" alt="image-20240816163813941"></p></li><li><p>3.serviceimpl层</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161607824.png" alt="image-20240816160731775"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161638069.png" alt="image-20240816163833033"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161607360.png" alt="image-20240816160747311"></p><ul><li>5.learning-service微服务接收MQ消息</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161643160.png" alt="image-20240816164326102"></p><h2 id="6-具体难点和亮点-4"><a href="#6-具体难点和亮点-4" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：删除的有哪几种情况？</p><p>①根据用户下单，然后取消报名的时候发送MQ消息给learning-service微服务告知删除</p><p>②已经学习了很久，课程失效了就直接根据情况删除</p></li></ul><h1 id="6-检查课程是否有效"><a href="#6-检查课程是否有效" class="headerlink" title="6.检查课程是否有效"></a>6.检查课程是否有效</h1><h2 id="1-原型图-5"><a href="#1-原型图-5" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-5"><a href="#2-设计数据库-5" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-5"><a href="#3-业务逻辑图-5" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>这是一个微服务内部接口，当用户学习课程时，可能需要播放课程视频。此时提供视频播放功能的媒资系统就需要校验<code>用户是否有播放视频的资格</code>。所以，开发媒资服务（<code>tj-media</code>）的同事就请你提供这样一个接口。</p><p>用户要想有播放视频的资格，那就必须满足两个条件：</p><ul><li>用户课表中是否有该课程</li><li>课程状态是否是有效的状态（未过期）</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161656961.png" alt="image-20240816165647909"></p><h2 id="4-接口分析-5"><a href="#4-接口分析-5" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161646815.png" alt="image-20240816164643768"></p><h2 id="5-具体实现-5"><a href="#5-具体实现-5" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161658298.png" alt="image-20240816165802260"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161658718.png" alt="image-20240816165837661"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161659938.png" alt="image-20240816165901892"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161659486.png" alt="image-20240816165912431"></p><h2 id="6-具体难点和亮点-5"><a href="#6-具体难点和亮点-5" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：如何判断课程是否有效</p><p>就是①判断课表是否有这个课程，②这个课程的expire过期时间是否失效了，没办法学了</p></li></ul><h1 id="7-统计课程的学习人数"><a href="#7-统计课程的学习人数" class="headerlink" title="7.统计课程的学习人数"></a>7.统计课程的学习人数</h1><h2 id="1-原型图-6"><a href="#1-原型图-6" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>课程微服务中需要统计每个课程的报名人数，同样是一个内部调用接口，在tj-api模块中已经定义好了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计课程学习人数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> courseId 课程id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 学习人数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/lessons/&#123;courseId&#125;/count"</span>)</span><br><span class="line"><span class="function">Integer <span class="title">countLearningLessonByCourse</span><span class="params">(@PathVariable(<span class="string">"courseId"</span>)</span> Long courseId)</span>;</span><br></pre></td></tr></table></figure><h2 id="2-设计数据库-6"><a href="#2-设计数据库-6" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-6"><a href="#3-业务逻辑图-6" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-6"><a href="#4-接口分析-6" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>这里我们可以按照Restful的规范来定义这个统计接口：</p><ul><li>请求方式：删除业务的请求方式都是GET</li><li>请求路径：一般是资源名 + 标示，这里删除的是课表中的课程，因此：<code>/lessons/{courseId}</code></li><li>请求参数：自然是路径中传递的课程id</li><li>返回值：Integer学习人数</li></ul><h2 id="5-具体实现-6"><a href="#5-具体实现-6" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161732734.png" alt="image-20240816173242686"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161732033.png" alt="image-20240816173248999"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161733833.png" alt="image-20240816173314799"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408161733551.png" alt="image-20240816173300519"></p><h2 id="6-具体难点和亮点-6"><a href="#6-具体难点和亮点-6" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：sql怎么写？怎么统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(user_id) </span><br><span class="line">from learning_lesson </span><br><span class="line">where course_id&#x3D;xx   【根据课程id分类】</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-我的课表&quot;&gt;&lt;a href=&quot;#1-我的课表&quot; class=&quot;headerlink&quot; title=&quot;1.我的课表&quot;&gt;&lt;/a&gt;1.我的课表&lt;/h1&gt;&lt;h2 id=&quot;准备阶段—业务流程&quot;&gt;&lt;a href=&quot;#准备阶段—业务流程&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂-学习计划和进度</title>
    <link href="https://larkkkkkkk.github.io/2024/08/16/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%92%8C%E8%BF%9B%E5%BA%A6/"/>
    <id>https://larkkkkkkk.github.io/2024/08/16/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82-%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%E5%92%8C%E8%BF%9B%E5%BA%A6/</id>
    <published>2024-08-16T09:46:01.000Z</published>
    <updated>2024-08-22T13:40:07.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前提回顾"><a href="#0-前提回顾" class="headerlink" title="0.前提回顾"></a>0.前提回顾</h1><p>在东林在线微课堂-我的课表相关：已经可以实现课表的增删改查接口，但是在查看已学习课程时候有两个字段没有返回：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181654890.png" alt="image-20240818165409837"></p><p>我们需要在查询结果中返回已学习课时数、正在学习的章节名称。虽然我们在learning_lesson表中设计了两个字段：</p><ul><li>learned_sections：已学习章节数</li><li>latest_learn_time：最近学习时间</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181655768.png" alt="image-20240818165508732"></p><p>以上的问题归纳下来，就是一个<strong>学习进度统计</strong>问题，这在在线教育、视频播放领域是一个非常常见的问题。</p><ul><li>提出原因：</li></ul><p>大部分人的学习自律性是比较差的，属于“买了就算会了”的状态。如果学员学习积极性下降，学习结果也会不尽人意，从而产生挫败感。导致购买课程的欲望也会随之下降，形成恶性循环，不利于我们卖课。</p><p>所以，我们推出<strong>学习计划</strong>的功能，让学员制定一套学习计划，每周要学几节课。系统会做数据统计，每一周计划是否达标，达标后给予奖励，未达标则提醒用户，达到督促用户持续学习的目的。</p><p>用户学习效果好了，产生了好的结果，就会有继续学习、购买课程的欲望，形成良性循环。</p><p>因此，学习计划、学习进度统计其实是学习辅助中必不可少的环节。</p><h1 id="1-学习计划相关"><a href="#1-学习计划相关" class="headerlink" title="1.学习计划相关"></a>1.学习计划相关</h1><h2 id="准备阶段—分析业务流程"><a href="#准备阶段—分析业务流程" class="headerlink" title="准备阶段—分析业务流程"></a>准备阶段—分析业务流程</h2><h2 id="1-学习计划"><a href="#1-学习计划" class="headerlink" title="1.==学习计划=="></a>1.==<strong>学习计划</strong>==</h2><p>在我的课程页面，可以对有效的课程添加学习计划：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181704360.png" alt="img"></p><p>学习计划就是简单设置一下用户每周计划学习几节课：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181706034.png" alt></p><p>有了计划以后，我们就可以在我的课程页面展示用户计划的完成情况，提醒用户尽快学习：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181709893.png" alt="image-20240818170916834"></p><p>可以看到，在学习计划中是需要统计用户“已经学习的课时数量”。</p><h2 id="2-学习进度统计"><a href="#2-学习进度统计" class="headerlink" title="2.==学习进度统计=="></a>2.<strong>==学习进度统计==</strong></h2><p>在原型图《课程学习页-录播课-课程学习页-目录》中，可以看到学习课程的原型图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181713079.png" alt="image-20240818171318018"></p><p>一个课程往往包含很多个<strong>章（chapter）</strong>，每一章下又包含了很多<strong>小节（section）</strong>。章本身没有课程内容，只是划分课程的一个概念。小节分两种，一种是<strong>视频</strong>；一种是每章最后的阶段<strong>考试</strong>  —-&gt; 用户学完一个视频/参加了最终的考试都算学完了一个小节。</p><blockquote><p> <strong>==统计学习进度：====用户学了多少小节[①视频：完播率超过75%②考试：考试提交]==</strong></p></blockquote><p>因而引出几个问题：</p><blockquote><p> 因此，用户在播放视频的过程中，需要不断地提交视频的播放进度，当我们发现视频进度超过75%的时候就标记这一小节为<strong>已完成</strong><br> 因此，我们需要记录<strong>视频是否完成</strong>，也需要记录<strong>用户具体播放到第几秒视频</strong>[这样下次播放就可以实现视频自动续播]</p></blockquote><p>也就是说，要记录用户学习进度，需要记录下列核心信息：</p><ul><li>小节的基础信息（id、关联的课程id等）</li><li>当前的播放进度（第几秒）</li><li>当前小节是否已学完（播放进度是否超75%）</li></ul><p>用户每学习一个小节，就会新增一条学习记录，当该课程的全部小节学习完毕，则该课程就从<strong>学习中</strong>进入<strong>已学完</strong>状态了。整体流程如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181730459.png" alt="image-20240818173039394"></p><h2 id="准备阶段—字段分析"><a href="#准备阶段—字段分析" class="headerlink" title="准备阶段—字段分析"></a>准备阶段—字段分析</h2><p>数据表的设计要满足<strong>学习计划[<code>learning_lesson</code>表在我的课表需求完成设计]</strong>、<strong>学习进度[目前需要]</strong>的功能需求：</p><p>按照之前的分析，用户学习的课程包含多个小节，小节的类型包含两种：</p><ul><li>视频：视频播放进度超过50%就算当节学完</li><li>考试：考完就算一节学完</li></ul><p>学习进度除了要记录哪些小节学完，还要记录学过的小节、每小节的播放的进度（方便续播）。因此，需要记录的数据就包含以下部分：</p><ul><li>学过的小节的基础信息<ul><li>小节id</li><li>小节对应的lessonId课表id</li><li>用户id：学习课程的人</li></ul></li><li>小节的播放进度信息<ul><li>视频播放进度：也就是播放到了第几秒</li><li>是否已经学完：播放进度有没有超过50%</li><li>第一次学完的时间：用户可能重复学习，第一次从未学完到学完的时间要记录下来</li></ul></li></ul><p>再加上一些表基础字段，整张表结构就出来了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;learning_record&#96; (</span><br><span class="line">  &#96;id&#96; bigint NOT NULL COMMENT &#39;学习记录的id&#39;,</span><br><span class="line">  &#96;lesson_id&#96; bigint NOT NULL COMMENT &#39;对应课表的id&#39;,</span><br><span class="line">  &#96;section_id&#96; bigint NOT NULL COMMENT &#39;对应小节的id&#39;,</span><br><span class="line">  &#96;user_id&#96; bigint NOT NULL COMMENT &#39;用户id&#39;,</span><br><span class="line">  &#96;moment&#96; int DEFAULT &#39;0&#39; COMMENT &#39;视频的当前观看时间点，单位秒&#39;,</span><br><span class="line">  &#96;finished&#96; bit(1) NOT NULL DEFAULT b&#39;0&#39; COMMENT &#39;是否完成学习，默认false&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;第一次观看时间&#39;,</span><br><span class="line">  &#96;update_time&#96; datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间（最近一次观看时间）&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_update_time&#96; (&#96;update_time&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_user_id&#96; (&#96;user_id&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_lesson_id&#96; (&#96;lesson_id&#96;,&#96;section_id&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci ROW_FORMAT&#x3D;DYNAMIC COMMENT&#x3D;&#39;学习记录表&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182129542.png" alt="image-20240818212933490"></p><h2 id="准备阶段—ER图"><a href="#准备阶段—ER图" class="headerlink" title="准备阶段—ER图"></a>准备阶段—ER图</h2><h2 id="准备阶段—表结构"><a href="#准备阶段—表结构" class="headerlink" title="准备阶段—表结构"></a>准备阶段—表结构</h2><h2 id="准备阶段—Mybatis-Plus代码生成"><a href="#准备阶段—Mybatis-Plus代码生成" class="headerlink" title="准备阶段—Mybatis-Plus代码生成"></a>准备阶段—Mybatis-Plus代码生成</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191553192.png" alt="image-20240819155350133"></p><h2 id="准备阶段—类型枚举"><a href="#准备阶段—类型枚举" class="headerlink" title="准备阶段—类型枚举"></a>准备阶段—类型枚举</h2><p>我们需要准备一些VO和DTO等</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191553944.png" alt="image-20240819155305895"></p><h1 id="————————具体实现———————"><a href="#————————具体实现———————" class="headerlink" title="==————————具体实现———————-=="></a>==————————具体实现———————-==</h1><p>按照用户的学习顺序，依次有下面几个接口：</p><ul><li>创建学习计划</li><li>查询学习记录</li><li>提交学习记录</li><li>查询我的计划</li></ul><h1 id="1-创建学习计划"><a href="#1-创建学习计划" class="headerlink" title="1.创建学习计划"></a>1.创建学习计划</h1><h2 id="1-原型图"><a href="#1-原型图" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在个人中心的我的课表列表中，没有学习计划的课程都会有一个<strong>创建学习计划</strong>的按钮，在原型图就能看到：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181752564.png" alt="image-20240818175247495"></p><p>创建学习计划，本质就是让用户设定自己每周的学习频率：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181753875.png" alt="image-20240818175308838"></p><h2 id="2-设计数据库"><a href="#2-设计数据库" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图"><a href="#3-业务逻辑图" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>当我们创建学习计划时，就是根据课程id和用户id去更新<code>learning_lesson</code>表，写入<code>week_freq</code>并更新<code>plan_status</code>为计划进行中即可。</p><h2 id="4-接口分析"><a href="#4-接口分析" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>而学习频率我们在设计learning_lesson表的时候已经有两个字段来表示了：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181753822.png" alt="image-20240818175359777"></p><p>当我们创建学习计划时，就是根据课程id和用户id去更新<code>learning_lesson</code>表，写入<code>week_freq</code>并更新<code>plan_status</code>为计划进行中即可。</p><p>因此请求参数就是课程的id、每周学习频率。再按照Restful风格，最终接口如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408181757610.png" alt="image-20240818175713570"></p><h2 id="5-具体实现"><a href="#5-具体实现" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408201446412.png" alt="image-20240820144641297"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408201446574.png" alt="image-20240820144656535"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408201448389.png" alt="image-20240820144819334"></p><ul><li>4.mapper层</li></ul><p>无</p><h2 id="6-具体难点和亮点"><a href="#6-具体难点和亮点" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>就是简单的创建学习计划【根据userId和courseId课程id更新一行数据的weekFreq和status字段】</p><h1 id="2-查询学习记录"><a href="#2-查询学习记录" class="headerlink" title="2.查询学习记录"></a>2.查询学习记录</h1><h2 id="1-原型图-1"><a href="#1-原型图-1" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>用户创建完计划自然要开始学习课程，在用户学习视频的页面，首先要展示课程的一些基础信息。例如课程信息、章节目录以及每个小节的学习进度：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182109390.png" alt="image-20240818210943313"></p><p>其中：</p><p>①课程、章节、目录信息等数据都在课程微服务。【课程信息是必备的】</p><p>②学习进度肯定是在学习微服务。<strong>【学习进度却不一定存在】</strong></p><h2 id="2-设计数据库-1"><a href="#2-设计数据库-1" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-1"><a href="#3-业务逻辑图-1" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>①课程、章节、目录信息等数据都在课程微服务。【课程信息是必备的】</p><p>②学习进度肯定是在学习微服务。<strong>【学习进度却不一定存在】</strong></p><p>因此，查询这个接口的请求———&gt;课程微服务【查询课程、章节信息】，再由课程微服务———&gt;学习微服务【查询学习进度】，合并后一起返回给前端即可。</p><p>所以，学习中心要提供一个查询章节学习进度的Feign接口，事实上这个接口已经在tj-api模块的LearningClient中定义好了：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182115454.png" alt="image-20240818211523413"></p><p>根据courseId和userId获取课表id和最近学习的小节id，然后根据课表id获取多条学习记录。【小节id，小节视频播放进度，小节是否学习完】</p><h2 id="4-接口分析-1"><a href="#4-接口分析-1" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>对应的DTO也都在tj-api模块定义好了，因此整个接口规范如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182117802.png" alt="image-20240818211701755"></p><h2 id="5-具体实现-1"><a href="#5-具体实现-1" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191712804.png" alt="image-20240819171234727"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191714098.png" alt="image-20240819171400064"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191713413.png" alt="image-20240819171323344"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191713045.png" alt="image-20240819171336002"></p><h2 id="6-具体难点和亮点-1"><a href="#6-具体难点和亮点-1" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><p>无[就是查询而已]</p><h1 id="3-提交学习记录-每15秒提交–很难懂"><a href="#3-提交学习记录-每15秒提交–很难懂" class="headerlink" title="3.提交学习记录(每15秒提交–很难懂!!!)"></a>3.提交学习记录(每15秒提交–很难懂!!!)</h1><h2 id="1-原型图-2"><a href="#1-原型图-2" class="headerlink" title="1.原型图"></a>1.原型图</h2><h2 id="2-设计数据库-2"><a href="#2-设计数据库-2" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-2"><a href="#3-业务逻辑图-2" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>之前分析业务流程的时候已经聊过，学习记录==用户当前学了哪些小节，以及学习到该小节的进度如何。而小节类型分为考试、视频两种。</p><ul><li>考试比较简单，只要提交了就说明这一节学完了。</li><li>视频比较麻烦，需要记录用户的播放进度，进度超过75%才算学完。因此视频播放的过程中需要不断提交播放进度到服务端，而服务端则需要保存学习记录到数据库。</li></ul><p>只要记录了用户学过的每一个小节，以及小节对应的学习进度、是否学完。无论是<strong>视频续播</strong>、还是<strong>统计学习计划进度</strong>，都可以轻松实现了。</p><p>因此，提交学习记录就是提交小节的信息和小节的学习进度信息。考试提交一次即可，视频则是播放中频繁提交。提交的信息包括两大部分：</p><ul><li><p>小节的基本信息</p><ul><li>小节id</li><li>lessonId课程id</li><li>小节类型：可能是视频，也可能是考试。考试无需提供播放进度信息</li><li>提交时间</li></ul></li><li><p>播放进度信息</p><ul><li>视频时长：时长结合播放进度可以判断有没有超过50%</li><li>视频播放进度：也就是第几秒</li></ul></li></ul><p>具体业务思路：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408191755416.png" alt="image-20240819175544333"></p><h2 id="4-接口分析-2"><a href="#4-接口分析-2" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，提交学习记录的接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182117498.png" alt="image-20240818211748452"></p><h2 id="5-具体实现-2"><a href="#5-具体实现-2" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408192139632.png" alt="image-20240819213932560"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408192139269.png" alt="image-20240819213937233"></p><ul><li>3.serviceimpl层</li></ul><p>serviceimpl层代码整体逻辑：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211501082.png" alt="image-20240821150157002"></p><p>其中处理课表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211510946.png" alt="image-20240821151018860"></p><p>其中处理视频：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211515607.png" alt="image-20240821151504478"></p><p>其中处理考试：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211519150.png" alt="image-20240821151957029"></p><ul><li>4.mapper层</li></ul><p>无【全用的mybatisplus完成】</p><h2 id="6-具体难点和亮点-2"><a href="#6-具体难点和亮点-2" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li><p>问题一：学习记录服务有必要提交到服务端？在客户端不就可以保存</p><p>​    我设置的是课程学习页面播放视频时/考试后，需要提交学习记录信息到服务端保存。每隔15s提交一次。【保证换个设备还可以查看】</p></li><li><p>问题二：实现思路是什么？</p><p>​    ①获取当前用户</p><p>​    ②处理学习记录 —&gt;2.1判断提交类型，①处理视频[存在记录更新学习记录并且判断是否第一次学习，不存在就新增学习记录]②处理考试[只需要新增学习记录，返回true一定是已学习]</p><p>​    ③处理课表记录 —&gt; 3.1查找课表，3.2判断是否全部学完，3.3放在一个更新课表[①本来就修改的字段②学习完全部小节，多修改一个字段③第一次学习，多修改一个字段]</p></li></ul><ul><li>问题三：怎么判断的各个节点</li></ul><p>​        <strong>判断是否是考试</strong>：通过前端传入的dto判断sectionType字段</p><p>​        <strong>判断记录已经存在</strong>：通过lessonid课程id和sectionId小节id确定一行record，如果有就是存在</p><p>​        <strong>判断是否第一次学习完</strong>：通过判断record的finished字段未完成&amp;&amp;前端传入的视频播放秒数moment*2&gt;前端传入的视频总长duration</p><p>​        <strong>判断判断是否学习完全部课程</strong>：当前lesson的learnedsections已学习小节数+1&gt;课程总小节数【课程微服务查询出】</p><h1 id="4-查询我的计划-封装数据难"><a href="#4-查询我的计划-封装数据难" class="headerlink" title="4.查询我的计划(封装数据难)"></a>4.查询我的计划(封装数据难)</h1><h2 id="1-原型图-3"><a href="#1-原型图-3" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>在个人中心的我的课程页面，会展示用户的学习计划及<strong>本周</strong>的学习进度，原型如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182118683.png" alt="image-20240818211809633"></p><h2 id="2-设计数据库-3"><a href="#2-设计数据库-3" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-3"><a href="#3-业务逻辑图-3" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><p>需要注意的是这个查询其实是一个分页查询，因为页面最多展示10行，而学员同时在学的课程可能会超过10个，这个时候就会分页展示，当然这个分页可能是滚动分页，所以没有进度条。另外，查询的是<strong>我的</strong>学习计划，隐含的查询条件就是当前登录用户，这个无需传递，通过请求头即可获得。</p><p>因此查询参数只需要<strong>分页</strong>参数即可。</p><p>查询结果中有很多对于已经学习的小节数量的统计，因此将来我们一定要保存用户对于每一个课程的<strong>学习记录</strong>，哪些小节已经学习了，哪些已经学完了。只有这样才能统计出学习进度。</p><p>查询的结果如页面所示，分上下两部分。：</p><p>①总的统计信息：</p><ul><li>本周已完成总章节数：需要对学习记录做统计</li><li>课程总计划学习数量：累加课程的总计划学习频率即可</li><li>本周学习积分：积分暂不实现</li></ul><p>②正在学习的N个课程信息的集合，其中每个课程包含下列字段：</p><ul><li>该课程本周学了几节：统计学习记录</li><li>计划学习频率：在learning_lesson表中有对应字段</li><li>该课程总共学了几节：在learning_lesson表中有对应字段</li><li>课程总章节数：查询课程微服务</li><li>该课程最近一次学习时间：在learning_lesson表中有对应字段</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408201519034.png" alt="image-20240820151930884"></p><h2 id="4-接口分析-3"><a href="#4-接口分析-3" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><p>综上，查询学习计划进度的接口信息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408182118801.png" alt="image-20240818211836745"></p><h2 id="5-具体实现-3"><a href="#5-具体实现-3" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.controller层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202036795.png" alt="image-20240820203649725"></p><ul><li>2.service层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202036413.png" alt="image-20240820203656379"></p><ul><li>3.serviceimpl层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202051913.png" alt="image-20240820205151868"></p><p>输出结果分为两个模块：<br>①本周计划和积分奖励</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202056087.png" alt="image-20240820205620992"></p><p>②课程信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202106580.png" alt="image-20240820210625381"></p><ul><li>4.mapper层</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408202037831.png" alt="image-20240820203706792"></p><h2 id="6-具体难点和亮点-3"><a href="#6-具体难点和亮点-3" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>问题一：怎么统计用户本周已学习小节数和计划小节数</li></ul><p>【本质就是，学习记录表一行就是学了一个小节；表内每个课程都有一个week_freq，计算总和就是本周计划总数】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#统计用户本周已学习小节总数</span><br><span class="line">select count(*)</span><br><span class="line">from learning_record</span><br><span class="line">where user_id&#x3D;2 and finished&#x3D;true and finish_time between &#39;2022-10-11 10:12:34&#39; and &#39;2022-10-20 10:12:34&#39;;</span><br><span class="line"></span><br><span class="line">#统计用户本周计划学习小节总数</span><br><span class="line">select sum(week_freq)</span><br><span class="line">from learning_lesson</span><br><span class="line">where user_id&#x3D;129 and status in(0,1) and plan_status&#x3D;1;</span><br></pre></td></tr></table></figure><ul><li>问题二：怎么统计当前用户课表和某个课程本周的学习小节数</li></ul><p>【本质就是，分页查询就是加个limit；某个课程要根据group by lesson_id课程id，因为一个课程在record记录表每个小节id都有一行数据，一个课程id在lesson课表中每个课程有一个】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#分页查询当前用户的课表</span><br><span class="line">select *</span><br><span class="line">from learning_lesson</span><br><span class="line">where user_id&#x3D;2 and status in(0,1) and plan_status&#x3D;1</span><br><span class="line">limit 0,2;</span><br><span class="line"></span><br><span class="line">#查询某个课程本周的学习小节数</span><br><span class="line">select lesson_id,count(*)</span><br><span class="line">from learning_record</span><br><span class="line">where user_id&#x3D;2 and finished&#x3D;true and finish_time between &#39;2024-08-19 10:12:34&#39; and &#39;2024-08-26 10:12:34&#39;</span><br><span class="line">group by lesson_id;</span><br></pre></td></tr></table></figure><ul><li>问题三：怎么设置的开始和结束时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDateTime getWeekBeginTime(LocalDate now) &#123;</span><br><span class="line">    return now.minusDays(now.getDayOfWeek().getValue() - 1).atStartOfDay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static LocalDateTime getWeekEndTime(LocalDate now) &#123;</span><br><span class="line">    return LocalDateTime.of(now.plusDays(8 - now.getDayOfWeek().getValue()), LocalTime.MAX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-定时监测—课程是否过期"><a href="#5-定时监测—课程是否过期" class="headerlink" title="5.定时监测—课程是否过期"></a>5.定时监测—课程是否过期</h1><h2 id="1-原型图-4"><a href="#1-原型图-4" class="headerlink" title="1.原型图"></a>1.原型图</h2><p>定期检查learning_lesson表中的课程是否过期，如果过期则将课程状态修改为已过期。</p><h2 id="2-设计数据库-4"><a href="#2-设计数据库-4" class="headerlink" title="2.设计数据库"></a>2.设计数据库</h2><h2 id="3-业务逻辑图-4"><a href="#3-业务逻辑图-4" class="headerlink" title="3.业务逻辑图"></a>3.业务逻辑图</h2><h2 id="4-接口分析-4"><a href="#4-接口分析-4" class="headerlink" title="4.接口分析"></a>4.接口分析</h2><h2 id="5-具体实现-4"><a href="#5-具体实现-4" class="headerlink" title="5.具体实现"></a>5.具体实现</h2><ul><li>1.启动类添加注解</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211749334.png" alt="image-20240821174944291"></p><ul><li>2.创建Task类</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211749076.png" alt="image-20240821174924986"></p><ul><li>3.mapper层<img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408211732044.png" alt="image-20240821173237955"></li></ul><h2 id="6-具体难点和亮点-4"><a href="#6-具体难点和亮点-4" class="headerlink" title="6.具体难点和亮点"></a>6.具体难点和亮点</h2><ul><li>使用什么技术实现？</li></ul><p>①SpringTask定时任务使用@Scheduled注解+@Async异步调用+@Retryable重试机制 —》保证既定时执行又异步且具备重试功能的健壮任务</p><p>②实现SchedulingConfigurer接口</p><p>③Quartz框架</p><p>④MQ延迟队列  【在定时任务方法里面发送消息给MQ，让MQ进行业务修改】</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="==面试题=="></a>==面试题==</h1><ul><li>你在开发中参与了哪些功能开发让你觉得比较有挑战性？</li></ul><p>答：我参与了整个学习中心的功能开发，其中有很多的学习辅助功能都很有特色。比如视频播放的进度记录。我们网站的课程是以录播视频为主，为了提高用户的学习体验，需要实现视频续播功能。这个功能本身并不复杂，只不过我们产品提出的要求比较高：</p><ul><li><p>首先续播时间误差要控制在30秒以内[每隔15s发起一次心跳请求，请求最新的播放进度，存储在服务器]</p></li><li><p>而且要做到用户突然断开，甚至切换设备后，都可以继续上一次播放[播放记录必须保存在服务端，而不是客户端(传统的只能保证一个设备)]</p></li></ul><p>要达成这个目的，使用传统的手段显然是不行的。</p><p>首先，要做到切换设备后还能续播，用户的播放进度必须保存在服务端，而不是客户端。</p><p>其次，用户突然断开或者切换设备，续播的时间误差不能超过30秒，那播放进度的记录频率就需要比较高。我们会在前端每隔15秒就发起一次心跳请求，提交最新的播放进度，记录到服务端[写在数据库内，可能会导致数据库压力过大问题]。这样用户下一次续播时直接读取服务端的播放进度，就可以将时间误差控制在15秒左右。</p><h1 id="———————-高并发优化——————–"><a href="#———————-高并发优化——————–" class="headerlink" title="==———————-高并发优化——————–=="></a>==———————-高并发优化——————–==</h1><h1 id="1-高并发方案-三个"><a href="#1-高并发方案-三个" class="headerlink" title="1.高并发方案[三个]"></a>1.高并发方案[三个]</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408212138704.png" alt="image-20240821213816592"></p><p>其中，②水平扩展和③服务保护侧重的是运维层面的处理。而①提高单机并发能力侧重的则是业务层面的处理，也就是我们程序员在开发时可以做到的。</p><h2 id="1-1方案一：提高单机并发-数据库方面-读写优化"><a href="#1-1方案一：提高单机并发-数据库方面-读写优化" class="headerlink" title="1.1方案一：提高单机并发[数据库方面-读写优化]"></a>1.1方案一：提高单机并发[数据库方面-读写优化]</h2><p>在机器性能一定的情况下，提高单机并发能力就是要尽可能缩短业务的响应时间（<strong>R</strong>esponse<strong>T</strong>ime），而对响应时间影响最大的往往是对数据库的操作。而从数据库角度来说，我们的业务无非就是<strong>读</strong>/<strong>写</strong>两种类型。</p><p>对于<strong>==读&gt;写==</strong>的业务，其优化手段大家都比较熟悉了，主要包括两方面：</p><ul><li>优化代码和SQL</li><li>添加缓存</li></ul><p>对于<strong>==读&lt;写==</strong>的业务，大家可能较少碰到，优化的手段可能也不太熟悉，这也是我们要讲解的重点。</p><p>对于高并发写的优化方案有：</p><ul><li>优化代码和SQL</li><li>同步写 —&gt; 异步写</li><li>合并写数据请求</li></ul><h3 id="1-1-1-同步写-–-gt-异步写"><a href="#1-1-1-同步写-–-gt-异步写" class="headerlink" title="1.1.1 同步写 –&gt; 异步写"></a>1.1.1 同步写 –&gt; 异步写</h3><p>由于各个业务之间是同步串行执行，因此整个业务的响应时间就是每一次数据库写业务的响应时间之和，并发能力肯定不会太好。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221158868.png" alt="image-20240822115831779"></p><p>优化的思路很简单，利用MQ可以把同步业务变成异步，从而提高效率。</p><ul><li>当我们接收到用户请求后，可以先不处理业务，而是发送MQ消息并返回给用户结果。</li><li>而后通过消息监听器监听MQ消息，处理后续业务。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221408063.png" alt="image-20240822140833957"></p><p>这样一来，用户请求处理和后续数据库写就从同步变为异步，用户无需等待后续的数据库写操作，响应时间自然会大大缩短。并发能力自然大大提高。</p><ul><li>优点：</li></ul><p>​        ①无需等待复杂业务处理，大大减少了响应时间 ②利用MQ暂存消息，起到流量削峰整形 ③降低写数据库频率，减轻数据库并发压力</p><ul><li>缺点：</li></ul><p>​        ①依赖于MQ的可靠性 ②只是降低一些频率，但是没有减少数据库写次数</p><ul><li>适应场景：</li></ul><p>​        业务复杂， 业务链较长，有多次数据库写操作的业务</p><h3 id="1-1-2-合并写请求"><a href="#1-1-2-合并写请求" class="headerlink" title="1.1.2 合并写请求"></a>1.1.2 合并写请求</h3><p>合并写请求方案其实是参考高并发读的优化思路：当读数据库并发较高时，我们可以<strong>把数据缓存到Redis</strong>，这样就无需访问数据库，大大减少数据库压力，减少响应时间。</p><p>合并写请求就是指当写数据库并发较高时，不再直接写到数据库。而是先将数据缓存到Redis，然后定期将缓存中的数据批量写入数据库。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221415878.png" alt="image-20240822141520757"></p><p>由于Redis是内存操作，写的效率也非常高，这样每次请求的处理速度大大提高，响应时间大大缩短(↓)，并发能力肯定有很大的提升。</p><p>而且由于数据都缓存到Redis了，积累一些数据后再批量写入数据库，这样数据库的写频率(↓)、写次数(↓)都大大减少，对数据库压力小了非常多！</p><ul><li>优点：</li></ul><p>​        ①写缓存速度快，响应时间大大缩短(↓) ②降低数据库的写频率(↓)和写次数(↓)</p><ul><li>缺点：</li></ul><p>​        ①实现相对复杂 ②依赖Redis可靠性 ③不支持事务和复杂业务</p><ul><li>适应场景：</li></ul><p>​        写频率高，写业务相对简单的业务</p><h1 id="2-业务优化-提交学习记录"><a href="#2-业务优化-提交学习记录" class="headerlink" title="2.业务优化-提交学习记录"></a>2.业务优化-提交学习记录</h1><h2 id="2-1-业务优化选型分析"><a href="#2-1-业务优化选型分析" class="headerlink" title="2.1 业务优化选型分析"></a>2.1 业务优化选型分析</h2><p>提交进度统计包含大量的<strong>数据库读、写操作</strong>。不过提交播放记录还是以<strong>写数据库</strong>为主。因此优化的方向还是以高并发写优化为主。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221431688.png" alt="image-20240822143119605"></p><ul><li>考试：每章只能考一次，还不能重复考试。因此属于低频行为(×)，可以忽略</li><li>视频进度：前端每隔15秒就提交一次请求。在一个视频播放的过程中，可能有数十次请求，但完播（进度超50%）的请求只会有一次。因此多数情况下都是更新一下播放进度即可。</li></ul><p>也就是说，95%的请求都是在更新<code>learning_record</code>表中的<code>moment</code>视频播放秒数字段，以及<code>learning_lesson</code>表中的最近正在学习的小节id和最近学习时间两个字段上。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221438579.png" alt="image-20240822143815456"></p><p>而播放进度信息，不管更新多少次，下一次续播肯定是从最后的一次播放进度开始续播。也就是说我们只需要记住最后一次即可。因此可以采用合并写方案来降低数据库写的次数和频率，而异步写做不到。</p><p>综上，提交播放进度业务虽然看起来复杂，但大多数请求的处理很简单，就是==<strong>更新播放进度</strong>==。并且播放进度数据是可以合并的（覆盖之前旧数据）。我们建议采用合并写请求方案：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221439769.png" alt="image-20240822143954705"></p><h2 id="2-2-Redis数据结构-hash哈希"><a href="#2-2-Redis数据结构-hash哈希" class="headerlink" title="2.2 Redis数据结构[hash哈希]"></a>2.2 Redis数据结构[hash哈希]</h2><p>我们的优化方案要处理的不是所有的提交学习记录请求。仅仅是视频播放时的高频更新播放进度的请求，对应的业务分支如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221438579.png" alt="image-20240822143815456"></p><p>这条业务支线的流程如下：</p><ul><li>查询播放记录，判断是否存在【存在就更新学习记录，不存在就新增学习记录】</li><li>判断当前进度是否是第一次学完【播放进度要超过50% + 原本的记录状态是未学完】</li><li>更新课表中最近学习小节id、学习时间【无论如何】</li></ul><p>这里有多次数据库操作，例如：</p><ul><li>查询播放记录：需要知道播放记录是否存在、播放记录当前的完成状态</li><li>更新record学习记录表的播放记录：更新播放进度</li><li>更新课表lesson表最近学习小节id、时间</li></ul><p>一方面我们要<strong>缓存写数据</strong>，减少写数据库频率；另一方面我们要<strong>缓存播放记录</strong>，减少查询数据库。因此，缓存中至少要包含3个字段：</p><ul><li><p>记录id：id，用于根据id更新数据库</p></li><li><p>播放进度：moment，用于缓存播放进度</p></li><li><p>播放状态（是否学完）：finished，用于判断是否是第一次学完</p></li></ul><p>既然一个课程包含多个小节，我们完全可以把一个课程的多个小节作为一个KEY来缓存，==Redis最终数据结构如图==：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221449014.png" alt="image-20240822144903928"></p><p>这样做有两个好处：</p><ul><li>可以大大减少需要创建的KEY的数量，减少内存占用。</li><li>一个课程创建一个缓存，当用户在多个视频间跳转时，整个缓存的有效期都会被延续，不会频繁的创建和销毁缓存数据</li></ul><h2 id="2-3-业务逻辑修改–redis缓存"><a href="#2-3-业务逻辑修改–redis缓存" class="headerlink" title="2.3 业务逻辑修改–redis缓存"></a>2.3 业务逻辑修改–redis缓存</h2><p>添加缓存之后，业务逻辑更改为：</p><ul><li>提交播放进度后，如果是更新播放进度则不写数据库，而是写缓存</li><li>需要一个定时任务，定期将缓存数据写入数据库</li></ul><p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20240822151218103.png" alt="image-20240822151218103"></p><p>变化后的业务具体流程为：</p><ul><li>1.提交学习记录</li><li>2.判断是否是考试<ul><li>是：新增学习记录，并标记有小节被学完。走步骤8</li><li>否：走视频流程，步骤3</li></ul></li><li>3.查询播放记录缓存，如果缓存不存在则查询数据库并建立缓存</li><li>4.判断记录是否存在<ul><li>4.1.否：新增一条学习记录</li><li>4.2.是：走更新学习记录流程，步骤5</li></ul></li><li>5.判断是否是第一次学完（进度超50%，旧的状态是未学完）<ul><li>5.1.不是第一次学完：仅仅是要更新播放进度，因此直接写入Redis并结束</li><li>5.2.是第一次学完：代表小节学完，走步骤6</li></ul></li><li>6.更新学习记录状态为已学完</li><li>7.清理Redis缓存：因为学习状态变为已学完，与缓存不一致，因此这里清理掉缓存，这样下次查询时自然会更新缓存，保证数据一致。</li><li>8.更新课表中已学习小节的数量+1</li><li>9.判断课程的小节是否全部学完<ul><li>是：更新课表状态为已学完</li><li>否：结束</li></ul></li></ul><h2 id="2-4-业务逻辑修改–定时任务将redis缓存到数据库"><a href="#2-4-业务逻辑修改–定时任务将redis缓存到数据库" class="headerlink" title="2.4 业务逻辑修改–定时任务将redis缓存到数据库"></a>2.4 业务逻辑修改–定时任务将redis缓存到数据库</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221523244.png" alt="image-20240822152304129"></p><p>但是定时任务的持久化方式在播放进度记录业务中存在一些问题，主要就是时效性问题。我们的产品要求视频续播的时间误差不能超过30秒。</p><ul><li>假如定时任务间隔较短，例如20秒一次，对数据库的更新频率太高，压力太大</li><li>假如定时任务间隔较长，例如2分钟一次，更新频率较低，续播误差可能超过2分钟，不满足需求</li></ul><p>因此，我们考虑将用户==最后一次提交==的播放进度写入数据库</p><p>==【只要用户一直在提交记录，Redis中的播放进度就会一直变化。如果Redis中的播放进度不变，肯定是停止了播放，是最后一次提交】==</p><p>因此，我们只要能判断Redis中的<strong>播放进度是否变化</strong>即可—–&gt;每当前端提交(15s)播放记录时，我们可以设置一个<strong>延迟任务</strong>并<strong>保存这次提交的进度</strong>。等待20秒后（因为前端每15秒提交一次，20秒就是等待下一次提交），检查Redis中的缓存的进度与任务中的进度是否一致。</p><ul><li>不一致：说明持续在提交，无需处理</li><li>一致：说明是最后一次提交，更新学习记录、更新课表最近学习小节和时间到数据库中</li></ul><p>流程如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408221527300.png" alt="image-20240822152717163"></p><h1 id="3-延迟任务方案-定时任务"><a href="#3-延迟任务方案-定时任务" class="headerlink" title="3.延迟任务方案(定时任务)"></a>3.延迟任务方案(定时任务)</h1><p>针对2.4提出用户提交的播放记录是否变化，我们需要将更新播放记录做一个延迟任务，等待超过一个提交周期（20s）后检查播放进度</p><p>延迟任务的实现方案有很多，常见的有四类：</p><table><thead><tr><th align="left"></th><th align="left">DelayQueue</th><th align="left">Redisson</th><th align="left">MQ</th><th align="left">时间轮</th></tr></thead><tbody><tr><td align="left"><strong>原理</strong></td><td align="left">JDK自带延迟队列，基于阻塞队列实现。</td><td align="left">基于Redis数据结构模拟JDK的DelayQueue实现</td><td align="left">利用MQ的特性。例如RabbitMQ的死信队列</td><td align="left">时间轮算法</td></tr><tr><td align="left"><strong>优点</strong></td><td align="left">不依赖第三方服务</td><td align="left">分布式系统下可用不占用JVM内存</td><td align="left">分布式系统下可以不占用JVM内存</td><td align="left">不依赖第三方服务性能优异</td></tr><tr><td align="left"><strong>缺点</strong></td><td align="left">占用JVM内存只能单机使用</td><td align="left">依赖第三方服务</td><td align="left">依赖第三方服务</td><td align="left">只能单机使用</td></tr></tbody></table><p>以上四种方案都可以解决问题，不过本例中我们会使用DelayQueue方案。因为这种方案使用成本最低，而且不依赖任何第三方服务，减少了网络交互。</p><p>但缺点也很明显，就是需要占用JVM内存，在数据量非常大的情况下可能会有问题。但考虑到任务存储时间比较短（只有20秒），因此也可以接收。</p><p>【如果数据量非常大，DelayQueue不能满足业务需求，大家也可以替换为其它延迟队列方式，例如Redisson、MQ等】</p><h2 id="3-1-DelayQueue实现原理"><a href="#3-1-DelayQueue实现原理" class="headerlink" title="3.1 DelayQueue实现原理"></a>3.1 DelayQueue实现原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现了BlockingQueue接口【是一个阻塞队列】</span><br><span class="line">public class DelayQueue&lt;E extends Delayed&gt; extends AbstractQueue&lt;E&gt; implements BlockingQueue&lt;E&gt; &#123;</span><br><span class="line">    private final transient ReentrantLock lock &#x3D; new ReentrantLock();</span><br><span class="line">    private final PriorityQueue&lt;E&gt; q &#x3D; new PriorityQueue&lt;E&gt;();</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; ... 略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<E extends delayed>:DelayQueue内部的元素必须是Delayed类型，这其实就是一个延迟任务的规范接口<br>从源码中可以看出，Delayed类型必须具备两个方法：</E></p><ul><li><strong>getDelay()</strong>：获取延迟任务的剩余延迟时间</li><li><strong>compareTo(T t)</strong>：比较两个延迟任务的延迟时间，判断执行顺序</li></ul><p>可见，Delayed类型的延迟任务具备两个功能：①获取剩余延迟时间、②比较执行顺序</p><p>将来每一次提交播放记录，就可以将播放记录保存在这样的一个<code>Delayed</code>类型的延迟任务里并设定20秒的延迟时间。然后交给<code>DelayQueue</code>队列。<code>DelayQueue</code>会调用<code>compareTo</code>方法，根据剩余延迟时间对任务排序。剩余延迟时间越短的越靠近队首，这样就会被优先执行。</p><h2 id="3-2-DelayQueue具体用法"><a href="#3-2-DelayQueue具体用法" class="headerlink" title="3.2 DelayQueue具体用法"></a>3.2 DelayQueue具体用法</h2><p>首先定义一个Delayed类型的延迟任务类，要能保持任务数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class DelayTask&lt;T&gt; implements Delayed &#123;  &#x2F;&#x2F;实现Delayed接口【实现两个方法】</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;数据</span><br><span class="line">    private T data;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;执行时间(纳秒)</span><br><span class="line">    private long activeTime;</span><br><span class="line"></span><br><span class="line">    public DelayTask(T data, Duration delayTime) &#123;</span><br><span class="line">        this.data &#x3D; data;</span><br><span class="line">        this.activeTime &#x3D; System.nanoTime() + delayTime.toNanos();  &#x2F;&#x2F;当前时间+延迟时间</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;返回任务剩余的时间</span><br><span class="line">    @Override</span><br><span class="line">    public long getDelay(TimeUnit unit) &#123;</span><br><span class="line">    &#x2F;&#x2F;设定时间-当前时间[和构造方法不一定是一个时间]</span><br><span class="line">        return unit.convert(Math.max(0,activeTime-System.nanoTime()), TimeUnit.NANOSECONDS); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;排序</span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Delayed o) &#123;</span><br><span class="line">        long l&#x3D;this.getDelay(TimeUnit.NANOSECONDS)-o.getDelay(TimeUnit.NANOSECONDS);</span><br><span class="line">        if(l&gt;0)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else if(l&lt;0)&#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以创建延迟任务，交给延迟队列保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">class DelayTaskTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    void testDelayQueue() throws InterruptedException &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.初始化延迟队列</span><br><span class="line">        DelayQueue&lt;DelayTask&lt;String&gt;&gt; queue &#x3D; new DelayQueue&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; 2.向队列中添加延迟执行的任务</span><br><span class="line">        log.info(&quot;开始初始化延迟任务。。。。&quot;);</span><br><span class="line">        queue.add(new DelayTask&lt;&gt;(&quot;延迟任务3&quot;, Duration.ofSeconds(3)));</span><br><span class="line">        queue.add(new DelayTask&lt;&gt;(&quot;延迟任务1&quot;, Duration.ofSeconds(1)));</span><br><span class="line">        queue.add(new DelayTask&lt;&gt;(&quot;延迟任务2&quot;, Duration.ofSeconds(2)));</span><br><span class="line">        &#x2F;&#x2F; 3.尝试执行任务</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            DelayTask&lt;String&gt; task &#x3D; queue.take();  &#x2F;&#x2F;take方法是阻塞式，如果没有延迟任务就会阻塞</span><br><span class="line">            log.info(&quot;开始执行延迟任务：&#123;&#125;&quot;, task.getData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​    <strong>注意</strong>：本用例直接同一个线程来执行任务了。当没有任务的时候线程会被阻塞。而在实际开发中，我们会准备线程池，开启多个线程来执行队列中的任务。</p></blockquote><h1 id="4-具体改造-直接看这里"><a href="#4-具体改造-直接看这里" class="headerlink" title="4.具体改造[直接看这里!!!]"></a>4.具体改造[直接看这里!!!]</h1><p>具体改造之后的业务逻辑图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222108156.png" alt="image-20240822210809060"></p><h2 id="4-1-定义延迟任务工具类"><a href="#4-1-定义延迟任务工具类" class="headerlink" title="4.1 定义延迟任务工具类"></a>4.1 定义延迟任务工具类</h2><ul><li>读取redis数据【用于判断记录是否已经存在，先在redis查询】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222115307.png" alt="image-20240822211557257"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222115663.png" alt="image-20240822211514592"></p><ul><li>缓存到redis并且提交延迟检测任务</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222116644.png" alt="image-20240822211659588"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222118198.png" alt="image-20240822211856114"></p><ul><li>异步任务处理</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222119476.png" alt="image-20240822211919420"></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222125186.png" alt="image-20240822212516067"></p><ul><li><p>是第一次学习，更新学习记录，删除redis</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222127315.png" alt="image-20240822212711271"></p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222128146.png" alt="image-20240822212818101"></p><ul><li>延迟任务传递的三个参数</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222129870.png" alt="image-20240822212910818"></p><ul><li>redis的value值三个参数</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222130833.png" alt="image-20240822213014775"></p><ul><li>完整代码：    </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">package com.tianji.learning.task;</span><br><span class="line">import com.tianji.common.utils.JsonUtils;</span><br><span class="line">import com.tianji.common.utils.StringUtils;</span><br><span class="line">import com.tianji.learning.domain.po.LearningLesson;</span><br><span class="line">import com.tianji.learning.domain.po.LearningRecord;</span><br><span class="line">import com.tianji.learning.mapper.LearningRecordMapper;</span><br><span class="line">import com.tianji.learning.service.ILearningLessonService;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import lombok.RequiredArgsConstructor;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line">import javax.annotation.PreDestroy;</span><br><span class="line">import java.time.Duration;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.Objects;</span><br><span class="line">import java.util.concurrent.CompletableFuture;</span><br><span class="line">import java.util.concurrent.DelayQueue;</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">public class LearningRecordDelayTaskHandler &#123;</span><br><span class="line"></span><br><span class="line">    private final StringRedisTemplate redisTemplate;</span><br><span class="line">    private final LearningRecordMapper recordMapper;</span><br><span class="line">    private final ILearningLessonService lessonService;</span><br><span class="line">    private final DelayQueue&lt;DelayTask&lt;RecordTaskData&gt;&gt; queue &#x3D; new DelayQueue&lt;&gt;();</span><br><span class="line">    private final static String RECORD_KEY_TEMPLATE &#x3D; &quot;learning:record:&#123;&#125;&quot;;  &#x2F;&#x2F;业务前缀【防止只有一个1不知道是谁的课表1】</span><br><span class="line">    private static volatile boolean begin &#x3D; true;</span><br><span class="line"></span><br><span class="line">    @PostConstruct &#x2F;&#x2F;项目初始前执行</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        &#x2F;&#x2F;异步</span><br><span class="line">        &#x2F;&#x2F;1.自定义线程池【注册到spring容器内，注入线程池，线程池调用业务】</span><br><span class="line">        &#x2F;&#x2F;2.使用CompletableFuture【内部也是多线程】</span><br><span class="line">        CompletableFuture.runAsync(this::handleDelayTask);</span><br><span class="line">    &#125;</span><br><span class="line">    @PreDestroy</span><br><span class="line">    public void destroy()&#123;</span><br><span class="line">        begin &#x3D; false;  &#x2F;&#x2F;多线程共享数据begin，必须用volatile其他线程可见性！！！</span><br><span class="line">        log.debug(&quot;延迟任务停止执行！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;处理延迟任务[判断数据是否一致]</span><br><span class="line">    public void handleDelayTask()&#123;</span><br><span class="line">        while (begin) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 1.[不断地取]获取到期的延迟任务</span><br><span class="line">                DelayTask&lt;RecordTaskData&gt; task &#x3D; queue.take(); &#x2F;&#x2F;take是阻塞式，没有任务就阻塞</span><br><span class="line">                RecordTaskData data &#x3D; task.getData();</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 2.查询Redis缓存</span><br><span class="line">                LearningRecord record &#x3D; readRecordCache(data.getLessonId(), data.getSectionId());</span><br><span class="line">                if (record &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 3.比较数据，moment值</span><br><span class="line">                if(!Objects.equals(data.getMoment(), record.getMoment())) &#123;  &#x2F;&#x2F;redis中数据和任务中的数据</span><br><span class="line">                    &#x2F;&#x2F; 不一致，说明用户还在持续提交播放进度，放弃旧数据</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 4.一致，持久化播放进度数据到数据库</span><br><span class="line">                &#x2F;&#x2F; 4.1.更新学习记录的moment时刻</span><br><span class="line">                record.setFinished(null);</span><br><span class="line">                recordMapper.updateById(record);</span><br><span class="line">                &#x2F;&#x2F; 4.2.更新课表最近学习信息</span><br><span class="line">                LearningLesson lesson &#x3D; new LearningLesson();</span><br><span class="line">                lesson.setId(data.getLessonId());</span><br><span class="line">                lesson.setLatestSectionId(data.getSectionId());</span><br><span class="line">                lesson.setLatestLearnTime(LocalDateTime.now());</span><br><span class="line">                lessonService.updateById(lesson);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;处理延迟任务发生异常&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将数据添加到redis，并且添加一个延迟检查任务到DelayQueue</span><br><span class="line">    public void addLearningRecordTask(LearningRecord record)&#123;</span><br><span class="line">        &#x2F;&#x2F; 1.添加数据到Redis缓存</span><br><span class="line">        writeRecordCache(record);</span><br><span class="line">        &#x2F;&#x2F; 2.提交延迟任务到延迟队列 DelayQueue</span><br><span class="line">        queue.add(new DelayTask&lt;&gt;(new RecordTaskData(record), Duration.ofSeconds(20)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将更新学习记录的数据缓存起来</span><br><span class="line">    public void writeRecordCache(LearningRecord record) &#123;</span><br><span class="line">        log.debug(&quot;更新学习记录的缓存数据&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 1.数据转换</span><br><span class="line">            String json &#x3D; JsonUtils.toJsonStr(new RecordCacheData(record));  &#x2F;&#x2F;转为json【id，moment，finished】</span><br><span class="line">            &#x2F;&#x2F; 2.写入Redis</span><br><span class="line">            String key &#x3D; StringUtils.format(RECORD_KEY_TEMPLATE, record.getLessonId());  &#x2F;&#x2F;learning:record:&#123;lessonId&#125;</span><br><span class="line">            redisTemplate.opsForHash().put(key, record.getSectionId().toString(), json); &#x2F;&#x2F;KEY[lessonid]-HashKey[sectionid]-HashValue[&#123;id:xxx,moment:xxx,finished:xxx&#125;]</span><br><span class="line">            &#x2F;&#x2F; 3.添加缓存过期时间</span><br><span class="line">            redisTemplate.expire(key, Duration.ofMinutes(1)); &#x2F;&#x2F;设置过期时间1分钟</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;更新学习记录缓存异常&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读取redis数据[检查记录是否已经存在]</span><br><span class="line">    public LearningRecord readRecordCache(Long lessonId, Long sectionId)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 1.读取Redis数据</span><br><span class="line">            String key &#x3D; StringUtils.format(RECORD_KEY_TEMPLATE, lessonId);  &#x2F;&#x2F;learning:record:&#123;lessonId&#125;</span><br><span class="line">            Object cacheData &#x3D; redisTemplate.opsForHash().get(key, sectionId.toString()); &#x2F;&#x2F;根据hash类型，根据key获取hashkey[sectionId]对应的一行数据value</span><br><span class="line">            if (cacheData &#x3D;&#x3D; null) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 2.数据检查和转换</span><br><span class="line">            return JsonUtils.toBean(cacheData.toString(), LearningRecord.class); &#x2F;&#x2F;转为json</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;缓存读取异常&quot;, e);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除redis数据</span><br><span class="line">    public void cleanRecordCache(Long lessonId, Long sectionId)&#123;</span><br><span class="line">        &#x2F;&#x2F; 删除数据---删除hashKey里面的一行数据[不能是redisTemplate.delete()这样是删除lessonId了，太大了]</span><br><span class="line">        String key &#x3D; StringUtils.format(RECORD_KEY_TEMPLATE, lessonId);</span><br><span class="line">        redisTemplate.opsForHash().delete(key, sectionId.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Data</span><br><span class="line">    @NoArgsConstructor</span><br><span class="line">    &#x2F;&#x2F;redis的hash里面value的三个属性</span><br><span class="line">    private static class RecordCacheData&#123;</span><br><span class="line">        private Long id;</span><br><span class="line">        private Integer moment;</span><br><span class="line">        private Boolean finished;</span><br><span class="line"></span><br><span class="line">        public RecordCacheData(LearningRecord record) &#123;</span><br><span class="line">            this.id &#x3D; record.getId();</span><br><span class="line">            this.moment &#x3D; record.getMoment();</span><br><span class="line">            this.finished &#x3D; record.getFinished();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    @NoArgsConstructor</span><br><span class="line">    &#x2F;&#x2F;延迟任务所需要的三个属性</span><br><span class="line">    private static class RecordTaskData&#123;</span><br><span class="line">        private Long lessonId;</span><br><span class="line">        private Long sectionId;</span><br><span class="line">        private Integer moment;</span><br><span class="line"></span><br><span class="line">        public RecordTaskData(LearningRecord record) &#123;</span><br><span class="line">            this.lessonId &#x3D; record.getLessonId();</span><br><span class="line">            this.sectionId &#x3D; record.getSectionId();</span><br><span class="line">            this.moment &#x3D; record.getMoment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-改造提交学习记录"><a href="#4-2-改造提交学习记录" class="headerlink" title="4.2 改造提交学习记录"></a>4.2 改造提交学习记录</h2><ul><li>修改整体逻辑</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222133816.png" alt="image-20240822213351745"></p><ul><li>修改课表</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222136611.png" alt="image-20240822213659512"></p><p>插入到redis，直接返回false这样后续4的更新学习记录就不会执行</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222138175.png" alt="image-20240822213850097"></p><h2 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h2><p>不是第一次学完，多次提交的情况：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408222104006.png" alt="image-20240822210450880"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-前提回顾&quot;&gt;&lt;a href=&quot;#0-前提回顾&quot; class=&quot;headerlink&quot; title=&quot;0.前提回顾&quot;&gt;&lt;/a&gt;0.前提回顾&lt;/h1&gt;&lt;p&gt;在东林在线微课堂-我的课表相关：已经可以实现课表的增删改查接口，但是在查看已学习课程时候有两个字段没有返回：
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>东林在线微课堂</title>
    <link href="https://larkkkkkkk.github.io/2024/08/12/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82/"/>
    <id>https://larkkkkkkk.github.io/2024/08/12/%E4%B8%9C%E6%9E%97%E5%9C%A8%E7%BA%BF%E5%BE%AE%E8%AF%BE%E5%A0%82/</id>
    <published>2024-08-12T02:14:44.000Z</published>
    <updated>2024-08-18T08:47:38.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-项目概述"><a href="#1-项目概述" class="headerlink" title="1.项目概述"></a>1.项目概述</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-项目概述&quot;&gt;&lt;a href=&quot;#1-项目概述&quot; class=&quot;headerlink&quot; title=&quot;1.项目概述&quot;&gt;&lt;/a&gt;1.项目概述&lt;/h2&gt;
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>持续集成</title>
    <link href="https://larkkkkkkk.github.io/2024/08/12/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>https://larkkkkkkk.github.io/2024/08/12/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</id>
    <published>2024-08-12T01:43:11.000Z</published>
    <updated>2024-08-13T11:18:29.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-项目部署"><a href="#1-项目部署" class="headerlink" title="1.项目部署"></a>1.项目部署</h1><ul><li>项目打成jar包</li><li>Docker部署(项目打成jar包 —&gt;docker镜像文件—&gt;docker容器)</li><li>K8S</li></ul><h1 id="2-持续集成CI"><a href="#2-持续集成CI" class="headerlink" title="2.持续集成CI"></a>2.持续集成CI</h1><p>持续集成是一种<strong>软件开发实践</strong>，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，就意味着每天有多次集成。每次集成都通过自动化的构建(包括编译，发布，自动化测试)来验证，从而尽早发现集成错误。</p><h2 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h2><ul><li>1.自动构建，发布，测试</li><li>2.降低风险</li></ul><h2 id="2-2-分类"><a href="#2-2-分类" class="headerlink" title="2.2 分类"></a>2.2 分类</h2><ul><li>Jenkins[tk旧项目使用]</li><li>坎特[tk新项目使用]</li></ul><h1 id="3-Jenkins-老头"><a href="#3-Jenkins-老头" class="headerlink" title="3.Jenkins(老头)"></a>3.Jenkins(老头)</h1><p>Jenkins是一个开源的实现持续集成的软件工具：<a href="https://www.jenkins.io/zh/" target="_blank" rel="noopener">Jenkins</a></p><p>==<strong>原理图</strong>：每当我们push代码时候就触发项目完成自动编译和打包==</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408121010483.png" alt="image-20240812101022218" style="zoom:150%;"> <h1 id="4-项目部署"><a href="#4-项目部署" class="headerlink" title="4.项目部署"></a>4.项目部署</h1><p>微服务部署比较麻烦，所以企业中都会采用持续集成的方式，快捷实现开发、部署一条龙服务。</p><p>为了模拟真实环境，我们在虚拟机中已经提供了一套持续集成的开发环境，代码一旦自测完成，push到Git私服后即可自动编译部署。</p><p>==<strong>原理图</strong>：每当我们push代码时候就触发项目完成自动编译和打包==</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408121010483.png" alt="image-20240812101022218" style="zoom:150%;"><p>而开发我们负责的微服务时，则需要在本地启动运行部分微服务。</p><h2 id="4-1-虚拟机部署"><a href="#4-1-虚拟机部署" class="headerlink" title="4.1 虚拟机部署"></a>4.1 虚拟机部署</h2><h2 id="4-2-本地部署"><a href="#4-2-本地部署" class="headerlink" title="4.2 本地部署"></a>4.2 本地部署</h2><p>如果需要运行某个微服务时，只需要以下两步：</p><ul><li>第一步：访问Jenkins控制台</li><li>第二步：点击对应微服务后面的绿色运行按钮</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408122119180.png" alt="image-20240812211957065"></p><p>构建过程中，可以在页面左侧看到构建进度，如果没有说明构建已经结束了（你的机器速度太快了！）：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202408122120448.png" alt="image-20240812212051332" style="zoom:67%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-项目部署&quot;&gt;&lt;a href=&quot;#1-项目部署&quot; class=&quot;headerlink&quot; title=&quot;1.项目部署&quot;&gt;&lt;/a&gt;1.项目部署&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;项目打成jar包&lt;/li&gt;
&lt;li&gt;Docker部署(项目打成jar包 —&amp;gt;docker镜
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://Larkkkkkkk.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Mysql分表分库-Sharding-Sphere</title>
    <link href="https://larkkkkkkk.github.io/2024/07/22/Mysql%E5%88%86%E8%A1%A8%E5%88%86%E5%BA%93-Sharding-Sphere/"/>
    <id>https://larkkkkkkk.github.io/2024/07/22/Mysql%E5%88%86%E8%A1%A8%E5%88%86%E5%BA%93-Sharding-Sphere/</id>
    <published>2024-07-22T01:39:47.000Z</published>
    <updated>2024-07-22T08:28:57.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-分表分库概念"><a href="#1-分表分库概念" class="headerlink" title="1.分表分库概念"></a>1.分表分库概念</h1><h2 id="1-1-分表"><a href="#1-1-分表" class="headerlink" title="1.1 分表"></a>1.1 分表</h2><ul><li><strong>水平分表</strong>[根据一些维度横向]</li></ul><p>水平分表是将表中的数据行拆分到多个不同的表/数据库，通常是根据某种键值来拆分</p><ul><li><strong>垂直分表</strong>[部分字段拆分到别的表]</li></ul><p>垂直分表是将表中的列拆分到多个不同的表，通常是根据列的使用频率或者业务逻辑来拆分</p><ul><li>两者区别</li></ul><table><thead><tr><th></th><th>垂直分表</th><th>水平分表</th></tr></thead><tbody><tr><td>拆分依据</td><td>列的使用频率/业务逻辑</td><td>某种键值[用户ID,时间戳]</td></tr><tr><td>目的</td><td>优化表结构，提高访问速度</td><td>解决单表数据量过大导致性能问题，分散数据到多个表提高查询和更新性能</td></tr><tr><td>优点</td><td>1.可以减少页面加载时间，只查询必要的列2.降低数据冗余，提高存储效率</td><td>1.减少单个表数据量，提高单表管理能力和访问速度2.易于实现，大多数据库中间件都支持水平分表</td></tr><tr><td>缺点</td><td>1.增加了数据库复杂性，需要更多join连接合并数据2.分表策略要根据业务仔细设计</td><td>1.例如联表查询就需要额外的逻辑处理[有的符合行在A，有的符合行在B]2.键值需要谨慎设计</td></tr><tr><td>应用场景</td><td>表中有大量列，但是访问只有少数几个列情况</td><td>处理具有明显数据划分界限情况</td></tr><tr><td>注意事项</td><td></td><td>1.分表操作可能会影响数据库的事务管理，需要考虑跨表操作的一致性2.分表策略应该基于实际的业务需求和数据访问模式来设计3.分表后的数据迁移和数据完整性保持是实施过程中最难的挑战</td></tr></tbody></table><h2 id="1-2-分库"><a href="#1-2-分库" class="headerlink" title="1.2 分库"></a>1.2 分库</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407220944195.png" alt="image-20240722094437153"></p><ul><li>1.考虑分库的目标：提高读写性能，写入性能还是两者兼顾</li><li>2.考虑分片键的选择：通常是表中某个字段</li><li>3.考虑分片策略：①范围分片(基于数值范围)②哈希分片(基于哈希算法)③列表分片(基于枚举值)</li></ul><h1 id="2-Sharding-Sphere概念"><a href="#2-Sharding-Sphere概念" class="headerlink" title="2.Sharding-Sphere概念"></a>2.Sharding-Sphere概念</h1><h2 id="2-1-Sharding-JDBC框架简介-配置麻烦"><a href="#2-1-Sharding-JDBC框架简介-配置麻烦" class="headerlink" title="2.1 Sharding-JDBC框架简介[配置麻烦]"></a>2.1 Sharding-JDBC框架简介[配置麻烦]</h2><p><code>Sharding-JDBC</code>的定位是一款轻量级<code>Java</code>框架，它会以<code>POM</code>依赖的形式嵌入程序，运行期间会和<code>Java</code>应用共享资源，这款框架的本质可以理解成是<code>JDBC</code>的增强版，只不过<code>Java</code>原生的<code>JDBC</code>仅支持单数据源的连接，而<code>Sharding-JDBC</code>则支持多数据源的管理，部署形态如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407220946256.png" alt="image-20240722094656183"></p><p><code>Java-ORM</code>框架在执行<code>SQL</code>语句时，<code>Sharding-JDBC</code>会以切面的形式拦截发往数据库的语句，接着根据配置好的数据源、分片规则和路由键，为<code>SQL</code>选择一个目标数据源，然后再发往对应的数据库节点处理。</p><blockquote><p><code>Sharding-JDBC</code>在整个业务系统中对性能损耗极低，但为何后面又会推出<code>Sharding-Proxy</code>呢？因为<code>Sharding-JDBC</code>配置较为麻烦，比如在分布式系统中，任何使用分库分表的服务都需要单独配置多数据源地址、路由键、分片策略….等信息，同时它也仅支持<code>Java</code>语言，当一个系统是用多语言异构的，此时其他语言开发的子服务，则无法使用分库分表策略。</p></blockquote><h2 id="2-2-Sharding-Proxy中间件简介-成本过大"><a href="#2-2-Sharding-Proxy中间件简介-成本过大" class="headerlink" title="2.2 Sharding-Proxy中间件简介[成本过大]"></a>2.2 Sharding-Proxy中间件简介[成本过大]</h2><p>也正是由于配置无法统一管理、不支持异构系统的原因，后面又引入<code>Sharding-Proxy</code>来解决这两个问题，<code>Sharding-Proxy</code>可以将其理解成一个伪数据库，对于应用程序而言是完全透明的，它会以中间件的形式独立部署在系统中，部署形态如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407220951753.png" alt="image-20240722095156667"></p><p>使用<code>Sharding-Proxy</code>的子服务都会以连接数据库的形式，与其先建立数据库连接，然后将<code>SQL</code>发给它执行，<code>Sharding-Proxy</code>会根据分片规则和路由键，将<code>SQL</code>语句发给具体的数据库节点处理，数据库节点处理完成后，又会将结果集返回给<code>Sharding-Proxy</code>，最终再由它将结果集返回给具体的子服务。</p><blockquote><p>但<code>Sharding-Proxy</code>虽然可以实现分库分表配置的统一管理，以及支持异构的系统，但因为需要使用独立的机器部署，同时还会依赖<code>Zookeeper</code>作为注册中心，所以硬件成本会直线增高，至少需要多出<code>3~4</code>台服务器来部署。</p></blockquote><p>同时<code>SQL</code>执行时，需要先发给<code>Proxy</code>，再由<code>Proxy</code>发给数据库节点，执行完成后又会从数据库返回到<code>Proxy</code>，再由<code>Proxy</code>返回给具体的应用，这个过程会经过四次网络传输的动作，因此相较于原本的<code>Sharding-JDBC</code>来说，性能、资源开销更大，响应速度也会变慢。</p><h2 id="2-3-JDBC、Proxy混合部署模式-取长补短"><a href="#2-3-JDBC、Proxy混合部署模式-取长补短" class="headerlink" title="2.3 JDBC、Proxy混合部署模式[取长补短]"></a>2.3 JDBC、Proxy混合部署模式[取长补短]</h2><p>如果用驱动式分库分表，虽然能够让<code>Java</code>程序的性能最好，但无法支持多语言异构的系统，但如果纯用代理式分库分表，这显然会损害<code>Java</code>程序的性能，因此在<code>Sharding-Sphere</code>中也支持<code>JDBC、Proxy</code>做混合式部署，也就是<code>Java</code>程序用<code>JDBC</code>做分库分表，其他语言的子服务用<code>Proxy</code>做分库分表，部署形态如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407220952897.png" alt="image-20240722095231817"></p><p>这种混合式的部署方案，所有的数据分片策略都会放到<code>Zookeeper</code>中统一管理，然后所有的子服务都去<code>Zookeeper</code>中拉取配置文件，这样就能很方便的根据业务情况，来灵活的搭建适用于各种场景的应用系统，这样也能够让数据源、分片策略、路由键….等配置信息灵活，可以在线上动态修改配置信息，修改后能够在线上环境中动态感知。</p><blockquote><p>但<code>Sharding-Sphere</code>还提供了一种单机模式，即直接将数据分片配置放在<code>Proxy</code>中，但这种方式仅适用于开发环境，因为无法将分片配置同步给多个实例使用，也就意味着会导致其他实例由于感知不到配置变化，从而造成配置信息不一致的错误。</p></blockquote><h1 id="3-Sharding-Sphere核心概念—路由键-分片算法"><a href="#3-Sharding-Sphere核心概念—路由键-分片算法" class="headerlink" title="3.Sharding-Sphere核心概念—路由键/分片算法"></a>3.Sharding-Sphere核心概念—路由键/分片算法</h1><ul><li><p><strong>路由键/分片键</strong>：作为数据分片的基准字段[可以是一个/多个字段组成]</p></li><li><p><strong>分片算法</strong>：基于路由键做一定逻辑处理，从而计算出一个最终节点位置的算法</p></li></ul><p>举例：好比按<code>user_id</code>将用户表数据分片，每八百万条数据划分一张表。<code>user_id</code>就是路由键，而按<code>user_id</code>做范围判断则属于分片算法，一张表中的所有数据都会依据这两个基础，后续对所有的读写<code>SQL</code>进行改写，从而定位到具体的库、表位置。</p><h1 id="4-Sharding-Sphere分表分库的工作流程"><a href="#4-Sharding-Sphere分表分库的工作流程" class="headerlink" title="4.Sharding-Sphere分表分库的工作流程"></a>4.Sharding-Sphere分表分库的工作流程</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407221014403.png" alt="image-20240722101404319"></p><ul><li><p>逻辑表：提供给应用程序操作的表名，程序可以像操作原本的单表一样，灵活的操作逻辑表(逻辑表并不是一种真实存在的表结构，而是提供给<code>Sharding-Sphere</code>使用的)</p></li><li><p>真实表：在各个数据库节点上真实存在的物理表，但表名一般都会和逻辑表存在偏差。</p></li><li><p>数据节点：主要是用于定位具体真实表的库表名称，如<code>DB1.tb_user1、DB2.tb_user2.....</code></p></li><li><ul><li>均匀分布：指一张表的数量在每个数据源中都是一致的。</li><li>自定义分布：指一张表在每个数据源中，具体的数量由自己来定义，上图就是一种自定义分布。</li></ul></li><li></li></ul><p>Java为例：</p><p>编写业务代码的SQL语句直接基于<strong>逻辑表</strong>操作；当<code>Sharding-Sphere</code>接收到一条操作某张逻辑表的<code>SQL</code>语句—–已配置好的路由键和分片算法—–&gt;对相应的SQL语句进行解析，然后计算出<code>SQL</code>要落入的数据节点(是哪个真实表)，最后再将语句发给具体的真实表上处理即可</p><blockquote><p><code>JDBC和Proxy</code>的主要区别就在于：解析<code>SQL</code>语句计算数据节点的时机不同</p><ul><li><code>JDBC</code>是在<strong>Java程序中</strong>就完成相应计算，从<code>Java</code>程序中发出SQL语句就已经是操作真实表的SQL</li><li><code>Proxy</code>是在<strong>Java程序外</strong>做解析工作，它会接收程序操作逻辑表的<code>SQL</code>语句。然后再做解析得到具体要操作的真实表，然后再执行，同时<code>Proxy</code>还要作为应用程序和数据库之间，传输数据的中间人</li></ul></blockquote><h1 id="5-Sharding-Sphere概念—表"><a href="#5-Sharding-Sphere概念—表" class="headerlink" title="5.Sharding-Sphere概念—表"></a>5.Sharding-Sphere概念—表</h1><h2 id="5-1-绑定表-解决主外键数据落不同库产生跨库查询"><a href="#5-1-绑定表-解决主外键数据落不同库产生跨库查询" class="headerlink" title="5.1 绑定表[解决主外键数据落不同库产生跨库查询]"></a>5.1 绑定表[解决主外键数据落不同库产生跨库查询]</h2><ul><li><strong>现有问题：</strong></li></ul><p>多张表之间存在物理或逻辑上的主外键关系，如果无法保障同一主键值的外键数据落入同一节点，显然在查询时就会发生跨库查询，这无疑对性能影响是极大的。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407221100877.png" alt="image-20240722110038729"></p><ul><li><strong>解决方案：</strong></li></ul><p>比如：前面案例中的<code>order_id、order_info_id</code>可以配置一组绑定表关系，这样就能够让订单详情数据随着订单数据一同落库，简单的说就是：配置绑定表的关系后，外键的表数据会随着主键的表数据落入同一个库中，这样在做主外键关联查询时，就能有效避免跨库查询的情景出现。</p><h2 id="5-2-广播表-解决跨库join问题"><a href="#5-2-广播表-解决跨库join问题" class="headerlink" title="5.2 广播表[解决跨库join问题]"></a>5.2 广播表[解决跨库join问题]</h2><ul><li><strong>现有问题：</strong></li></ul><p>当有些表需要经常被用来做连表查询时，这种频繁关联查询的表，如果每次都走跨库<code>Join</code>，这显然又会造成一个令人头疼的性能问题。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407221104028.png" alt="image-20240722110446940"></p><ul><li><strong>解决方案：</strong></li></ul><p>对于一些经常用来做关联查询的表，就可以将其配置为广播表</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407221129198.png" alt="image-20240722112901134"></p><p>广播表是一种会在所有库中都创建的表，以系统字典表为例，将其配置为广播表之后，向其增、删、改一条或多条数据时，所有的写操作都会发给全部库执行，从而确保每个库中的表数据都一致，后续在需要做连表查询时，只需要关联自身库中的字典表即可，从而避免了跨库<code>Join</code>的问题出现。</p><h2 id="5-3-单表-不分表分库"><a href="#5-3-单表-不分表分库" class="headerlink" title="5.3 单表[不分表分库]"></a>5.3 单表[不分表分库]</h2><p>单表的含义比较简单，并非所有的表都需要做分库分表操作，所以当一张表的数据无需分片到多个数据源中时，就可将其配置为单表，这样所有的读写操作最终都会落入这一张单表中处理。</p><h2 id="5-4-动态表"><a href="#5-4-动态表" class="headerlink" title="5.4 动态表"></a>5.4 动态表</h2><p>动态表是指表会随着数据增长、或随着时间推移，不断的去创建新表，如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407221341864.png" alt="image-20240722134127808"></p><p>在<code>Sharding-Sphere</code>中可以直接支持配置，无需自己去从头搭建，因此实现起来尤为简单，配置好之后会按照时间或数据量动态创建表。</p><h1 id="6-Sharding-Sphere数据分片策略"><a href="#6-Sharding-Sphere数据分片策略" class="headerlink" title="6.Sharding-Sphere数据分片策略"></a>6.Sharding-Sphere数据分片策略</h1><p>分库分表之后读写操作具体会落入哪个库中，这是根据路由键和分片算法来决定的</p><p><code>Sharding-Sphere</code>中的数据分片策略又分为：</p><ul><li><p>1.内置的自动化分片算法：[取模分片、哈希分片、范围分片、时间分片等这积累常规算法]</p></li><li><p>2.用户自定义的分片算法：[标准分片、复合分片、强制分片]</p><ul><li><p>2.1 标准分片算法：适合基于单一路由键进行<code>=、in、between、&gt;、&lt;、&gt;=、&lt;=...</code>进行查询的场景。</p></li><li><p>2.2 复合分片算法：适用于多个字段组成路由键的场景，但路由算法需要自己继承接口重写实现。</p></li><li><p>2.3 强制分片算法：适用于一些特殊<code>SQL</code>的强制执行，在这种模式中可以强制指定处理语句的节点。</p></li></ul></li></ul><p>综上所述，在<code>Sharding-Sphere</code>内部将这四种<strong>分片策略</strong>称为：<code>Inline、Standard、Complex、Hint</code>，分别与上述四种策略一一对应，但这四种仅代表四种策略，具体的数据分片算法，可以由使用者自身来定义。</p><h1 id="7-Sharding-Sphere分库方式"><a href="#7-Sharding-Sphere分库方式" class="headerlink" title="7.Sharding-Sphere分库方式"></a>7.Sharding-Sphere分库方式</h1><p>在<code>Sharding-Sphere</code>生态中，支持传统的主从集群分库，[如搭建出读写分离架构、双主双写架构]，同时也支持按业务进行垂直分库，也支持对单个库进行横向拓展，做到水平分库。</p><blockquote><p>但通常都是用它来实现水平分库和读写分离，因为分布式架构的系统默认都有独享库的概念，也就是分布式系统默认就会做垂直分库，因此无需引入<code>Sharding-Sphere</code>来做垂直分库。</p></blockquote><h1 id="Sharding-Sphere实际操作"><a href="#Sharding-Sphere实际操作" class="headerlink" title="==Sharding-Sphere实际操作=="></a>==Sharding-Sphere实际操作==</h1><p>  之前提到过，<code>Sharding-Sphere</code>的所有产品对业务代码都是零侵入的，无论是<code>Sharding-JDBC</code>也好，<code>Sharding-Proxy</code>也罢，都不需要更改业务代码，这也就意味着大家在分库分表环境下做业务开发时，可以像传统的单库开发一样轻松。</p><ul><li><code>Sharding-Sphere</code>中最主要的是对配置文件的更改</li><li><code>Sharding-JDBC</code>主要修改<code>application.properties/yml</code>文件</li><li><code>Sharding-Proxy</code>主要修改自身的配置文件</li></ul><h1 id="1-配置yml文件-业务代码零侵入"><a href="#1-配置yml文件-业务代码零侵入" class="headerlink" title="1.配置yml文件[业务代码零侵入]"></a>1.配置yml文件[业务代码零侵入]</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;后期补充</span><br></pre></td></tr></table></figure><h1 id="Sharding-Sphere工作原理"><a href="#Sharding-Sphere工作原理" class="headerlink" title="==Sharding-Sphere工作原理=="></a>==Sharding-Sphere工作原理==</h1><h1 id="1-核心工作步骤"><a href="#1-核心工作步骤" class="headerlink" title="1.核心工作步骤"></a>1.核心工作步骤</h1><p>其核心工作步骤会分为如下几步：</p><ul><li>• 配置加载：在程序启动时，会读取用户的配置好的数据源、数据节点、分片规则等信息。</li><li>• <code>SQL</code>解析：<code>SQL</code>执行时，会先根据配置的数据源来调用对应的解析器，然后对语句进行拆解。</li><li>• <code>SQL</code>路由：拆解<code>SQL</code>后会从中得到路由键的值，接着会根据分片算法选择单或多个数据节点。</li><li>• <code>SQL</code>改写：选择了目标数据节点后，接着会改写、优化用户的逻辑<code>SQL</code>，指向真实的库、表。</li><li>• <code>SQL</code>执行：对于要在多个数据节点上执行的语句，内部开启多线程执行器异步执行每条<code>SQL</code>。</li><li>• 结果归并：持续收集每条线程执行完成后返回的结果集，最终将所有线程的结果集合并。</li><li>• 结果处理：如果<code>SQL</code>中使用了<code>order by、max()、count()...</code>等操作，对结果处理后再返回。</li></ul><p>整个<code>Sharding-Sphere</code>大致工作步骤如上，这个过程相对来说也比较简单，但具体的实现会比较复杂，针对于不同的数据库，内部都会实现不同的解析器，如<code>MySQL</code>有<code>MySQL</code>的解析器，<code>PgSQL</code>也会有对应的解析器，同时还会做<code>SQL</code>语句做优化。而<code>SQL</code>路由时，除开要考虑最基本的数据分片算法外，还需要考虑绑定表、广播表等配置，来对具体的<code>SQL</code>进行路由。</p><h1 id="2-分库分表产品对比"><a href="#2-分库分表产品对比" class="headerlink" title="2.分库分表产品对比"></a>2.分库分表产品对比</h1><table><thead><tr><th>对比项</th><th>Sharding-JDBC</th><th>Sharding-Proxy</th><th>MyCat</th></tr></thead><tbody><tr><td>性能开销</td><td>较低</td><td>较高</td><td>高</td></tr><tr><td>异构支持</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>网络次数</td><td>最少一次</td><td>最少两次</td><td>最少两次</td></tr><tr><td>异构语言</td><td>仅支持Java</td><td>支持异构</td><td>支持异构</td></tr><tr><td>数据库支持</td><td>任意数据库</td><td>MySQL、PgSQL</td><td>任意数据库</td></tr><tr><td>配置管理</td><td>去中心化</td><td>中心化</td><td>中心化</td></tr><tr><td>部署方式</td><td>依赖工程</td><td>中间件</td><td>中间件</td></tr><tr><td>业务侵入性</td><td>较低</td><td>无</td><td>无</td></tr><tr><td>连接开销</td><td>高</td><td>低</td><td>低</td></tr><tr><td>事务支持</td><td>XA、Base、Local事务</td><td>同前者</td><td>XA事务</td></tr><tr><td>功能丰富度</td><td>多</td><td>多</td><td>一般</td></tr><tr><td>社区活跃性</td><td>活跃</td><td>活跃</td><td>一言难尽</td></tr><tr><td>版本迭代性</td><td>高</td><td>高</td><td>极低</td></tr><tr><td>多路由键支持</td><td>2</td><td>2</td><td>1</td></tr><tr><td>集群部署</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>分布式序列</td><td>雪花算法</td><td>雪花算法</td><td>自增序列</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-分表分库概念&quot;&gt;&lt;a href=&quot;#1-分表分库概念&quot; class=&quot;headerlink&quot; title=&quot;1.分表分库概念&quot;&gt;&lt;/a&gt;1.分表分库概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-分表&quot;&gt;&lt;a href=&quot;#1-1-分表&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="Mysql" scheme="https://Larkkkkkkk.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql排查</title>
    <link href="https://larkkkkkkk.github.io/2024/07/10/Mysql%E6%8E%92%E6%9F%A5/"/>
    <id>https://larkkkkkkk.github.io/2024/07/10/Mysql%E6%8E%92%E6%9F%A5/</id>
    <published>2024-07-10T05:31:21.000Z</published>
    <updated>2024-07-10T10:59:59.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>在程序开发与运行过程中，出现<code>Bug</code>问题的几率无可避免，数据库出现问题一般会发生在下述几方面：</p><ul><li><p>①撰写的<code>SQL</code>语句执行出错，俗称为业务代码<code>Bug</code>。</p></li><li><p>②开发环境执行一切正常，线上偶发<code>SQL</code>执行缓慢的情况。</p></li><li><p>③线上部署<code>MySQL</code>的机器故障，如磁盘、内存、<code>CPU100%</code>，<code>MySQL</code>自身故障等。</p></li></ul><h2 id="1-1-线上排查和解决问题思路"><a href="#1-1-线上排查和解决问题思路" class="headerlink" title="1.1 线上排查和解决问题思路"></a>1.1 线上排查和解决问题思路</h2><p> 相对而言，解决故障问题也好，处理性能瓶颈也罢，通常思路大致都是相同的，步骤如下：</p><ul><li>①分析问题：根据理论知识+经验分析问题，判断问题可能出现的位置或可能引起问题的原因，将目标缩小到一定范围。</li><li>②排查问题：基于上一步的结果，从引发问题的“可疑性”角度出发，从高到低依次进行排查，进一步排除一些选项，将目标范围进一步缩小。</li><li>③定位问题：通过相关的监控数据的辅助，以更“细粒度”的手段，将引发问题的原因定位到精准位置。</li><li>④解决问题：判断到问题出现的具体位置以及引发的原因后，采取相关措施对问题加以解决。</li><li>⑤尝试最优解（非必须）：将原有的问题解决后，在能力范围内，且环境允许的情况下，应该适当考虑问题的最优解（可以从性能、拓展性、并发等角度出发）。</li></ul><p><strong>我的解决方案：</strong></p><p>  当然，上述过程是针对特殊问题以及经验老道的开发者而言的，作为“新时代的程序构建者”，那当然得学会合理使用工具来帮助我们快速解决问题：</p><ul><li>①摘取或复制问题的关键片段。</li><li>②打开百度或谷歌后粘贴搜索。</li><li>③观察返回结果中，选择标题与描述与自己问题较匹配的资料进入。</li><li>④多看几个后，根据其解决方案尝试解决问题。</li><li>⑤成功解决后皆大欢喜，尝试无果后“找人/问群”。</li><li>⑥“外力”无法解决问题时自己动手，根据之前的步骤依次排查解决。</li></ul><h2 id="1-2-线上排查方向"><a href="#1-2-线上排查方向" class="headerlink" title="1.2 线上排查方向"></a>1.2 线上排查方向</h2><p>==①发生问题的大体定位，②逐步推导出具体问题的位置==</p><ul><li><p>1.应用程序本身导致的问题</p></li><li><ul><li>程序内部频繁触发GC，造成系统出现长时间停顿，导致客户端堆积大量请求。</li><li>JVM参数配置不合理，导致线上运行失控，如堆内存、各内存区域太小等。【遇到启动项目OOM,在idea创建设置堆空间大小700到10000解决】</li><li>Java程序代码存在缺陷，导致线上运行出现Bug，如死锁/内存泄漏、溢出等。</li><li>程序内部资源使用不合理，导致出现问题，如线程/DB连接/网络连接/堆外内存等。</li></ul></li><li><p>2.上下游内部系统导致的问题</p></li><li><ul><li>上游服务出现并发情况，导致当前程序请求量急剧增加，从而引发问题拖垮系统。</li><li>下游服务出现问题，导致当前程序堆积大量请求拖垮系统，如Redis宕机/DB阻塞等。</li></ul></li><li><p>3.程序所部署的机器本身导致的问题</p></li><li><ul><li>服务器机房网络出现问题，导致网络出现阻塞、当前程序假死等故障。</li><li>服务器中因其他程序原因、硬件问题、环境因素（如断电）等原因导致系统不可用。</li><li>服务器因遭到入侵导致Java程序受到影响，如木马病毒/矿机、劫持脚本等。</li></ul></li><li><p>4.第三方的RPC远程调用导致的问题</p></li><li><ul><li>作为被调用者提供给第三方调用，第三方流量突增，导致当前程序负载过重出现问题。</li><li>作为调用者调用第三方，但因第三方出现问题，引发雪崩问题而造成当前程序崩溃。</li></ul></li></ul><h1 id="2-Sql语句执行出错—排查"><a href="#2-Sql语句执行出错—排查" class="headerlink" title="2.Sql语句执行出错—排查"></a>2.Sql语句执行出错—排查</h1><p>作为一个程序员，对<code>MySQL</code>数据库而言，接触最多的就是<code>SQL</code>语句的撰写，和写业务代码时一样，写代码时会碰到异常、错误，而写<code>SQL</code>时同样如此，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1064 (42000):</span><br><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;xxxxxxx&#39; at line 1</span><br></pre></td></tr></table></figure><p>Mysql的错误信息会由三部分组成：</p><ul><li><p>ErrorCode：错误码【1064这种】</p></li><li><p>SQLState：Sql状态【42000这种】</p></li><li><p>ErrorInfo：错误详情【；之后跟一长串描述具体错误详情】</p></li></ul><p>Mysql的错误类型：</p><ul><li>根据ErrorInfo位置根据错误类型定位，认真对准之后百度搜索</li><li>没有定位，只能通过SQLstate和网上办法解决</li></ul><h1 id="3-Mysql线上慢查询语句—排查"><a href="#3-Mysql线上慢查询语句—排查" class="headerlink" title="3.Mysql线上慢查询语句—排查"></a>3.Mysql线上慢查询语句—排查</h1><p>有些SQL可能在开发环境没有任何问题，但放到线上时就会出现偶发式执行耗时较长的情况，所以这类情况就只能真正在线上环境才能测出来，尤其是一些不支持灰度发布的中小企业，也只能放到线上测才能发现问题。</p><h2 id="3-1-打开Mysql慢查询日志"><a href="#3-1-打开Mysql慢查询日志" class="headerlink" title="3.1 打开Mysql慢查询日志"></a>3.1 打开Mysql慢查询日志</h2><p>一般在上线前，Mysql手动打开慢查询日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启慢查询日志需要配置两个关键参数：</span><br><span class="line">• slow_query_log：取值为on&#x2F;off[默认]-----项目上线前需要手动开启。</span><br><span class="line">• long_query_time：指定记录慢查询日志的阈值，[单位是秒,指定更细粒度用小数表示]-----阈值根据不同的业务系统取值也不同【①设置一个大概值，灰度发布时走正式运营场景效果更好②开启查询日志，压测所有业务，紧接着分析查询日志中sql的平均耗时，再根据正常的sql执行时间，设置一个偏大的慢查询阈值即可】---公司内设置的是3s</span><br></pre></td></tr></table></figure><h2 id="3-2-查看Mysql慢查询日志"><a href="#3-2-查看Mysql慢查询日志" class="headerlink" title="3.2 查看Mysql慢查询日志"></a>3.2 查看Mysql慢查询日志</h2><p>查看慢查询日志的方式：</p><ul><li>拥有完善的监控系统：【自动】读取磁盘中的慢查询日志，然后可以通过监控系统大屏观察</li><li>未拥有完善的监控系统：linux系统通过cat类指令查看本地日志文件/windows记事本打开</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101502616.png" alt="image-20240710150212444"></p><p>从上面日志中记录的查询信息来看，可以得知几个信息：</p><ul><li>• 执行慢查询<code>SQL</code>的用户：<code>root</code>，登录<code>IP</code>为：<code>localhost[127.0.0.1]</code>。</li><li>• 慢查询执行的具体耗时为：<code>0.014960s</code>，锁等待时间为<code>0s</code>。</li><li>• 本次<code>SQL</code>执行后的结果集为<code>4</code>行数据，累计扫描<code>6</code>行数据。</li><li>• 本次慢查询发生在<code>db_zhuzi</code>这个库中，发生时间为<code>1667466932（2022-11-03 17:15:32）</code>。</li><li>• 最后一行为具体的慢查询<code>SQL</code>语句。</li></ul><h2 id="3-3-排查sql执行缓慢问题"><a href="#3-3-排查sql执行缓慢问题" class="headerlink" title="3.3 排查sql执行缓慢问题"></a>3.3 排查sql执行缓慢问题</h2><p>通过3.2步骤我们读取慢查询日志后，能够精准定位到发生慢查询Sql的用户、客户端机器、执行耗时、锁阻塞耗时、结果集行数、扫描行数、发生的库和事件、具体的慢查询sql语句。</p><p>得到这些信息之后，其实排查引起慢查询的原因就通过以下<strong>步骤</strong>就可以：</p><ul><li>①根据本地慢查询日志文件中的记录，得到具体慢查询sql执行的相关信息</li><li>②查看lock_time的耗时，判断本次执行缓慢是否由于并发事务导致的长时间阻塞【多半原因】<ul><li>2.1 如果是，是由于并发事务导致的长时间阻塞【并发事务抢占锁，造成当前事务长时间无法获取锁资源】，看到大量由于<strong>锁阻塞</strong>导致执行超过阈值，那就执行查看mysql锁状态，如果值都比较大意味着当前这个mysql节点承担的并发压力过大，急需mysql架构优化</li><li>2.2 如果不是，通过①explain索引分析工具，先判断索引使用情况，找到那些执行计划中扫描行数过多、<code>type=index/all</code>的<code>SQL</code>语句，尝试优化掉即可；②人肉排查法解决</li></ul></li></ul><p>一般来说在开发环境中没有问题的<code>SQL</code>语句，放到线上环境出现执行缓慢的情况，多半原因是由于并发事务抢占锁，造成当前事务长时间无法获取锁资源，因此导致当前事务执行的<code>SQL</code>出现超时，这种情况下需要去定位操作相同行数据的大事务，一般长时间的阻塞是由于大事务持有锁导致的，找出对应的大事务并拆解或优化掉即可。【<strong>基本就是操作相同行数据的大事务持有锁</strong>】</p><h3 id="3-3-1-长时间锁阻塞的排查方法-查看lock-time时间"><a href="#3-3-1-长时间锁阻塞的排查方法-查看lock-time时间" class="headerlink" title="3.3.1 长时间锁阻塞的排查方法[查看lock_time时间]"></a>3.3.1 长时间锁阻塞的排查方法[查看lock_time时间]</h3><p>通过<code>show status like &#39;innodb_row_lock_%&#39;;</code>命令可以查询<code>MySQL</code>整体的锁状态，如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101710220.png" alt="image-20240710171033106"></p><ul><li><code>Innodb_row_lock_current_waits</code>：当前正在阻塞等待锁的事务数量。</li><li><code>Innodb_row_lock_time</code>：<code>MySQL</code>启动到现在，所有事务总共阻塞等待的总时长。</li><li><code>Innodb_row_lock_time_avg</code>：平均每次事务阻塞等待锁时，其平均阻塞时长。</li><li><code>Innodb_row_lock_time_max</code>：<code>MySQL</code>启动至今，最长的一次阻塞时间。</li><li><code>Innodb_row_lock_waits</code>：<code>MySQL</code>启动到现在，所有事务总共阻塞等待的总次数。</li></ul><h3 id="3-3-2-非锁阻塞的排查方法-explain-拆分语句"><a href="#3-3-2-非锁阻塞的排查方法-explain-拆分语句" class="headerlink" title="3.3.2 非锁阻塞的排查方法[explain/拆分语句]"></a>3.3.2 非锁阻塞的排查方法[explain/拆分语句]</h3><ul><li>方法一：explain解释方法：</li></ul><p>找到那些执行计划中扫描行数过多、<code>type=index/all</code>的<code>SQL</code>语句，尝试优化掉即可</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101717137.png" alt="image-20240710171706075"></p><ul><li>方法二：人肉排查法：</li></ul><p>【对于一些较为复杂或庞大的业务需求，可以采取<strong>拆分法</strong>去逐步实现，最后组装所有的子语句，最终推导出符合业务需求的<code>SQL</code>语句】</p><p>一条复杂的查询语句，拆解成一条条子语句，对每条子语句使用<code>explain</code>工具分析，精准定位到：复杂语句中导致耗时较长的具体子语句，最后将这条子语句优化后重新组装即可。</p><p>【拆解排除法有一个最大的好处是：有时组成复杂<code>SQL</code>的每条子语句都不存在问题，也就是每条子语句的执行效率都挺不错的，但是拼到一起之后就会出现执行缓慢的现象，这时拆解后就可以一步步的将每条子语句组装回去，每组装一条子语句都可以用<code>explain</code>工具分析一次，这样也能够精准定位到是由于那条子语句组合之后导致执行缓慢的，然后进行对应优化即可。】</p><h1 id="4-Mysql线上机器故障排查"><a href="#4-Mysql线上机器故障排查" class="headerlink" title="4.Mysql线上机器故障排查"></a>4.Mysql线上机器故障排查</h1><p> <code>MySQL</code>数据库线上的机器故障主要分为两方面，①是由于<strong>MySQL自身</strong>引起的问题，比如连接异常、死锁问题等，②是部署<strong>MySQL的服务器硬件文件，如磁盘、<code>CPU100%</code></strong>等现象，对于不同的故障问题排查手段也不同，下面将展开聊一聊常见的线上故障及解决方案。</p><h2 id="4-1-客户端连接异常"><a href="#4-1-客户端连接异常" class="headerlink" title="4.1 客户端连接异常"></a>4.1 客户端连接异常</h2><p>当数据库出现连接异常时，基本上就是因为四种原因导致：</p><p>【①②比较简单，设置两者参数就行】</p><ul><li>①数据库总体的现有连接数，超出了<code>MySQL</code>中的最大连接数，此时再出现新连接时会出异常。【遇到过，直接更新参数，加大核心线程数即可】</li><li>②客户端数据库连接池与<code>MySQL</code>版本不匹配，或超时时间过小，也可能导致出现连接中断。</li></ul><p>【③④比较特殊】</p><ul><li>③<code>MySQL、Java</code>程序所部署的机器不位于同一个网段，两台机器之间网络存在通信故障。</li><li>④部署<code>MySQL</code>的机器资源被耗尽，如<code>CPU</code>、硬盘过高，导致<code>MySQL</code>没有资源分配给新连接。</li></ul><hr><p>其中，介绍一下③④情况：</p><p><strong>③<code>MySQL、Java</code>程序所部署的机器不位于同一个网段，两台机器之间网络存在通信故障</strong></p><p>这种情况，问题一般都出在交换机上面，由于<code>Java</code>程序和数据库两者不在同一个网段，所以相互之间通信需要利用交换机来完成，但默认情况下，交换机和防火墙一般会认为时间超过<code>3~5</code>分钟的连接是不正常的，因此就会中断相应的连接，而有些低版本的数据库连接池，如<code>Druid</code>只会在获取连接时检测连接是否有效，此时就会出现一个问题：</p><p>交换机把两个网段之间的长连接嘎了，但是<code>Druid</code>因为<strong>只在最开始检测了一次</strong>，后续不会继续检测连接是否有效，所以会认为获取连接后是一直有效的，最终就导致了数据库连接出现异常（<strong>后续</strong>高版本的<code>Druid</code>修复了该问题，可以配置<strong>间隔一段时间检测一次连接</strong>）</p><p>一般如果是由于网络导致出现连接异常，通常排查方向如下：</p><ul><li>• 检测防火墙与安全组的端口是否开放，或与外网机器是否做了端口映射。</li><li>• 检查部署<code>MySQL</code>的服务器白名单，以及登录的用户<code>IP</code>限制，可能是<code>IP</code>不在白名单范围内。</li><li>• 如果整个系统各节点部署的网段不同，检查各网段之间交换机的连接超时时间是多少。</li><li>• 检查不同网段之间的网络带宽大小，以及具体的带宽使用情况，有时因带宽占满也会出现问题。</li><li>• 如果用了<code>MyCat、MySQL-Proxy</code>这类代理中间件，记得检查中间件的白名单、超时时间配置。</li></ul><p>一般来说上述各方面都不存在问题，基本上连接异常应该不是由于网络导致的问题，要做更为细致的排查，可以在请求链路的各节点上，<strong>使用网络抓包工具，抓取对应的网络包，看看网络包是否能够抵达每个节点</strong>，如果每个节点的出入站都正常，此时就可以排除掉网络方面的原因。</p><p><strong>④部署<code>MySQL</code>的机器资源被耗尽，如<code>CPU</code>、硬盘过高，导致<code>MySQL</code>没有资源分配给新连接。</strong></p><p>这种情况更为特殊，网络正常、连接数未满、连接未超时、数据库和客户端连接池配置正常….，在一切正常的情况下，有时候照样出现连接不上<code>MySQL</code>的情况咋整呢？在这种情况下基本上会陷入僵局，这时你可以去<strong>查一下部署<code>MySQL</code>服务的机器，</strong>其硬件的使用情况，如<code>CPU</code>、内存、磁盘等，如果其中一项达到了<code>100%</code>，这时就能够确定问题了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为数据库连接的本质，在MySQL内部是一条条的工作线程，要牢记的一点是：操作系统在创建一条线程时，都需要为其分配相关的资源，如果一个客户端尝试与数据库建立新的连接时，此刻正好有一个数据库连接在执行某个操作，导致CPU被打满，这时就会由于没有资源来创建新的线程，因此会向客户端直接返回连接异常的信息。</span><br></pre></td></tr></table></figure><p>先找到导致资源耗尽的连接/线程，然后找到它当时正在执行的<code>SQL</code>语句，最后需要优化相应的<code>SQL</code>语句后才能彻底根治问题。</p><h2 id="4-2-Mysql死锁频发-业务出发解决"><a href="#4-2-Mysql死锁频发-业务出发解决" class="headerlink" title="4.2 Mysql死锁频发[业务出发解决]"></a>4.2 Mysql死锁频发[业务出发解决]</h2><p><code>MySQL</code>内部其实会【默认】开启死锁检测算法，当运行期间出现死锁问题时，会主动介入并解除死锁，但要记住：<strong>虽然数据库能够主动介入解除死锁问题，但这种方法治标不治本</strong>因为死锁现象是由于业务不合理造成的，能出现一次死锁问题，自然后续也可能会多次出现，因此优化业务才是最好的选择，这样才能根治死锁问题。</p><p>从业务上解决死锁问题：①先定准定位到产生死锁的<code>SQL</code>语句，根据查看<strong>innodb存储引擎的运行状态日志</strong>【找到内部latest detected deadlock区域日志】</p><p>例如：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101832765.png" alt="image-20240710183226640"></p><p>在上面的日志中，基本上已经写的很清楚了，在<code>2022-11-04 23:04:34</code>这个时间点上，检测到了一个死锁出现，该死锁主要由两个事务产生，<code>SQL</code>如下：</p><ul><li>• <code>(1)：UPDATE</code>zz_account<code>SET balance = balance + 888 WHERE user_name = &quot;熊猫&quot;;</code></li><li>• <code>(2)：UPDATE</code>zz_account<code>SET balance = balance + 666 WHERE user_name = &quot;竹子&quot;;</code></li></ul><p>在事务信息除开列出了导致死锁的<code>SQL</code>语句外，还给出了两个事务对应的线程<code>ID</code>、登录的用户和<code>IP</code>、事务的存活时间与系统线程<code>ID</code>、持有的锁信息与等待的锁信息….</p><p>除开两个发生死锁的事务信息外，倒数第二段落还给出了两个事务在哪个锁上产生了冲突，以上述日志为例，发生死锁冲突的地点位于<code>db_zhuzi</code>库中<code>zz_account</code>表的主键上，两个事务都在尝试获取对方持有的<code>X</code>排他锁，后面还给出了具体的页位置、内存地址….。</p><p>最后一条信息中，给出了<code>MySQL</code>介入解除死锁的方案，也就是回滚了事务<code>(2)</code>的操作，强制结束了事务<code>(2)</code>并释放了其持有的锁资源，从而能够让事务<code>(1)</code>继续运行。</p><p>经过查看上述日志后，其实<code>MySQL</code>已经为我们记录了产生死锁的事务、线程、<code>SQL</code>、时间、地点等各类信息，因此想要彻底解决死锁问题的方案也很简单了，<strong>根据日志中给出的信息，去找到执行相应<code>SQL</code>的业务和库表，优化<code>SQL</code>语句的执行顺序，或<code>SQL</code>的执行逻辑，从而避免死锁产生即可。</strong></p><p>最后要注意：如果是一些偶发类的死锁问题，也就是很少出现的死锁现象，其实不解决也行，毕竟只有在一些特殊场景下才有可能触发，重点是要关注死锁日志中那些频繁出现的死锁问题，也就是多次死锁时，每次死锁出现的库、表、字段都相同，这种情况时需要额外重视并着手解决。</p><h2 id="4-3-服务器CPU100"><a href="#4-3-服务器CPU100" class="headerlink" title="4.3 服务器CPU100%"></a>4.3 服务器CPU100%</h2><p>排查思路：</p><ul><li>①先找到<code>CPU</code>过高的<strong>服务器</strong>。</li><li>②然后在其中定位到具体的进程。【top指令】</li><li>③再定位到进程中具体的<strong>线程</strong>。【top -Hpxxxx】 xxxx就是②查出来的PID进程号</li><li>④再查看线程<strong>正在执行的代码逻辑</strong>。【mysql5.7以下查找innodb运行状态日志的某个部分/mysql5.7以上通过threads表信息查找】</li><li>⑤最后从<strong>代码层面着手优化</strong>掉即可。</li></ul><p>②先使用<strong>top指令</strong>查看系统后台的进程状态：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101839522.png" alt="image-20240710183927468"></p><p>从如上结果中不难发现，<code>PID</code>为<code>76661</code>的<code>MySQL</code>进程对<code>CPU</code>的占用率达到<code>99.9%</code>，此时就可以确定，机器的<code>CPU</code>利用率飙升是由于该进程引起的。</p><p>③根据<strong>top -Hp [PID]指令</strong>查看进程中cpu占用率最高的线程：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101841870.png" alt="image-20240710184121817"></p><p>从<code>top -Hp 76661</code>命令的执行结果中可以看出：其他线程均为休眠状态，并未持有<code>CPU</code>资源，而PID为<code>77935</code>的线程对CPU资源的占用率却高达<code>99.9%</code>！</p><p>到此时，导致<code>CPU</code>利用率飙升的“罪魁祸首”已经浮现水面，但此时问题来了！在如果这里是<code>Java</code>程序，此时可以先将该线程的<code>PID</code>转换为<code>16</code>进制的值，然后进一步排查日志信息来确定具体线程执行的业务方法。但此时这里是<code>MySQL</code>程序，咱们得到了操作系统层面的线程<code>ID</code>后，如何根据这个<code>ID</code>在<code>MySQL</code>中找到对应的线程呢？</p><p>④分为Mysql5.7以上和Mysql5.7以下两种情况：</p><ul><li>在<code>MySQL5.7</code>及以上的版本中，<code>MySQL</code>会自带一个名为<code>performance_schema</code>的库，在其中有一张名为<code>threads</code>的表，其中表中有一个<code>thread_os_id</code>字段，其中会保存每个连接/工作线程与操作系统线程之间的关系（在<code>5.7</code>以下的版本是隐式的，存在于<code>MySQL</code>内部无法查看）。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101851349.png" alt="image-20240710185143259"></p><p>可以通过查询threads表，输出所有已经创建的线程：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101852819.png" alt="image-20240710185225772"></p><p>从上述中可以明显看出<code>MySQL</code>线程和<code>OS</code>线程之间的关系，当通过前面的<code>top</code>指令拿到<code>CPU</code>利用率最高的线程<code>ID</code>后，在再这里找到与之对应的<code>MySQL</code>线程，同时也能够看到此线程正在执行的<code>SQL</code>语句，最后优化对应<code>SQL</code>语句的逻辑即可。</p><ul><li>在<code>MySQL5.7</code>以下的版本中，我们只能通过Innodb存储引擎状态表的transactions板块查看，</li></ul><p>统计着所有存活事务的信息，此时也可以从中得到相应的<code>OS</code>线程、<code>MySQL</code>线程的映射关系</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101854479.png" alt="image-20240710185424434"></p><p>是这种方式仅能够获取到<code>OS</code>线程、<code>MySQL</code>线程之间的映射关系，无法获取到对应线程/连接正在执行的<code>SQL</code>语句，此时如果线程还在运行，则可以通过<code>show processlist;</code>查询，如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202407101854968.png" alt="image-20240710185448934"></p><p>但这种方式<strong>只能看到正在执行的<code>SQL</code>语句</strong>，无法查询到最近执行过的语句，所以这种方式仅适用于：==线上<code>SQL</code>还在继续跑的情况==。</p><h2 id="4-4-Mysql刷盘100"><a href="#4-4-Mysql刷盘100" class="headerlink" title="4.4 Mysql刷盘100%"></a>4.4 Mysql刷盘100%</h2><p>指磁盘<code>IO</code>达到<code>100%</code>利用率，这种情况下一般会导致其他读写操作都被阻塞，因为操作系统中的<code>IO</code>总线会被占满，无法让给其他线程来读写数据，先来总结一下出现磁盘<code>IO</code>占用过高的原因：</p><ul><li>• ①突然大批量变更库中数据，需要执行大量写入操作，如主从数据同步时就会出现这个问题。</li><li>• ②<code>MySQL</code>处理的整体并发过高，磁盘<code>I/O</code>频率跟不上，比如是机械硬盘材质，读写速率过慢。</li><li>• ③内存中的<code>BufferPool</code>缓冲池过小，大量读写操作需要落入磁盘处理，导致磁盘利用率过高。</li><li>• ④频繁创建和销毁临时表，导致内存无法存储临时表数据，因而转到磁盘存储，导致磁盘飙升。</li><li>• ⑤执行某些<code>SQL</code>时从磁盘加载海量数据，如超<code>12</code>张表的联查，并每张表数据较大，最终导致<code>IO</code>打满。</li><li>• ⑥日志刷盘频率过高，其实这条是①、②的附带情况，毕竟日志的刷盘频率，跟整体并发直接挂钩。</li></ul><p>一般情况下，磁盘<code>IO</code>利用率居高不下，甚至超过<code>100%</code>，基本上是由于上述几个原因造成的，当需要排查磁盘<code>IO</code>占用率过高的问题时，可以先通过<code>iotop</code>工具找到磁盘<code>IO</code>开销最大的线程，然后利用<code>pstack</code>工具查看其堆栈信息，从堆栈信息来判断具体是啥原因导致的，如果是并发过高，则需要优化整体架构。如果是执行<code>SQL</code>加载数据过大，需要优化<code>SQL</code>语句……</p><p>磁盘利用率过高的问题其实也比较好解决，方案如下：</p><ul><li>• ①如果磁盘不是<code>SSD</code>材质，请先将磁盘升级成固态硬盘，<code>MySQL</code>对<code>SSD</code>硬盘做了特殊优化。</li><li>• ②在项目中记得引入<code>Redis</code>降低读压力，引入<code>MQ</code>对写操作做流量削峰。</li><li>• ③调大内存中<code>BufferPool</code>缓冲池的大小，最好设置成机器内存的<code>70~75%</code>左右。</li><li>• ④撰写<code>SQL</code>语句时尽量减少多张大表联查，不要频繁的使用和销毁临时表。</li></ul><p>基本上把上述工作都做好后，线上也不会出现磁盘<code>IO</code>占用过高的问题，对于前面说到的：利用<code>iotop、pstack</code>工具排查的过程，就不再做实际演示了，其过程与前面排查<code>CPU</code>占用率过高的步骤类似，大家学习<code>iotop、pstack</code>两个工具的用法后，其实实操起来也十分简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;在程序开发与运行过程中，出现&lt;code&gt;Bug&lt;/code&gt;问题的几率无可避免，数据库出现问题一般会发生在下述几方面：&lt;/p
      
    
    </summary>
    
    
    
      <category term="Mysql" scheme="https://Larkkkkkkk.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>微服务-分布式链路追踪</title>
    <link href="https://larkkkkkkk.github.io/2024/06/25/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>https://larkkkkkkk.github.io/2024/06/25/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2024-06-25T06:30:57.000Z</published>
    <updated>2024-07-05T09:38:12.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-引入原因"><a href="#1-引入原因" class="headerlink" title="1.引入原因"></a>1.引入原因</h1><p><a href="https://mp.weixin.qq.com/s/YsYIZ3bEEd4h67NgBr0VFQ" target="_blank" rel="noopener">微信公众平台 (qq.com)</a></p><h1 id="2-常见的链路追踪技术"><a href="#2-常见的链路追踪技术" class="headerlink" title="2.常见的链路追踪技术"></a>2.常见的链路追踪技术</h1><ul><li>cat</li><li>zipkin</li><li>Sleuth</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-引入原因&quot;&gt;&lt;a href=&quot;#1-引入原因&quot; class=&quot;headerlink&quot; title=&quot;1.引入原因&quot;&gt;&lt;/a&gt;1.引入原因&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/YsYIZ3bEEd4h67NgBr
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch-黑马商城为例</title>
    <link href="https://larkkkkkkk.github.io/2024/06/22/Elasticsearch-%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E4%B8%BA%E4%BE%8B/"/>
    <id>https://larkkkkkkk.github.io/2024/06/22/Elasticsearch-%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E4%B8%BA%E4%BE%8B/</id>
    <published>2024-06-22T12:37:34.000Z</published>
    <updated>2024-06-23T10:01:04.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-启动ES"><a href="#1-启动ES" class="headerlink" title="1.启动ES"></a>1.启动ES</h1><h2 id="1-1-安装elasticsearch"><a href="#1-1-安装elasticsearch" class="headerlink" title="1.1 安装elasticsearch"></a>1.1 安装elasticsearch</h2><p>通过下面的Docker命令即可安装单机版本的elasticsearch：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#先在tar所在目录下打开cmd</span><br><span class="line">docker load -i es.tar</span><br><span class="line"></span><br><span class="line">#创建一个网络【不然kibana不能连接es，踩坑了！！】</span><br><span class="line">docker network create elastic</span><br><span class="line"></span><br><span class="line">#黑马安装：</span><br><span class="line">docker run -d \</span><br><span class="line">  --name es \</span><br><span class="line">  -e &quot;ES_JAVA_OPTS&#x3D;-Xms512m -Xmx512m&quot; \        #配置jvm的内存</span><br><span class="line">  -e &quot;discovery.type&#x3D;single-node&quot; \            #配置运行模式【单点模式&#x2F;集群模式】</span><br><span class="line">  -v es-data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data \   #挂载</span><br><span class="line">  -v es-plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network hm-net \   </span><br><span class="line">  -p 9200:9200 \  #访问http端口</span><br><span class="line">  -p 9300:9300 \  #集群使用</span><br><span class="line">  elasticsearch:7.12.1</span><br><span class="line">  </span><br><span class="line">#csdn安装:</span><br><span class="line">docker run -d --name es -e ES_JAVA_OPTS&#x3D;&quot;-Xms512m -Xmx512m&quot; -e &quot;discovery.type&#x3D;single-node&quot; --privileged --network elastic -p 9200:9200 -p 9300:9300 elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><p>启动之后访问<a href="http://localhost:9200/就可以看到elasticsearch信息：" target="_blank" rel="noopener">http://localhost:9200/就可以看到elasticsearch信息：</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072044725.png" alt="image-20240507204417602" style="zoom:67%;"><h2 id="1-2-安装Kibana"><a href="#1-2-安装Kibana" class="headerlink" title="1.2 安装Kibana"></a>1.2 安装Kibana</h2><p>通过下面的Docker命令，即可部署Kibana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#先在tar所在目录下打开cmd</span><br><span class="line">docker load -i kibana.tar</span><br><span class="line"></span><br><span class="line">#黑马安装：</span><br><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es:9200 \   #es的地址，这里的es要和es配置docker的时候--name一致</span><br><span class="line">--network&#x3D;hm-net \  #网络和es一个网络</span><br><span class="line">-p 5601:5601  \</span><br><span class="line">kibana:7.12.1  #要保证和es版本一致！！！</span><br><span class="line"></span><br><span class="line">#csdn安装：</span><br><span class="line">docker run -d --name kibana -e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es:9200 --network elastic -p 5601:5601  kibana:7.12.1</span><br></pre></td></tr></table></figure><p>启动之后访问<a href="http://localhost:5601/就可以通过kibana数据化访问elasticsearch：" target="_blank" rel="noopener">http://localhost:5601/就可以通过kibana数据化访问elasticsearch：</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072046111.png" alt="image-20240507204635028" style="zoom:80%;"><p>可以点击右上角Dev tools，进入开发工具页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221602466.png" alt="image-20240507204914788"></p><p>点击之后：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072051099.png" alt="image-20240507205135009"></p><h1 id="2-改造操作步骤"><a href="#2-改造操作步骤" class="headerlink" title="2.改造操作步骤"></a>2.改造操作步骤</h1><p>在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为<code>RestHighLevelClient</code>的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。</p><h2 id="2-1-初始化RestClient"><a href="#2-1-初始化RestClient" class="headerlink" title="2.1 初始化RestClient"></a>2.1 初始化RestClient</h2><h3 id="2-1-1-引入RestHighLevelClient依赖"><a href="#2-1-1-引入RestHighLevelClient依赖" class="headerlink" title="2.1.1 引入RestHighLevelClient依赖"></a>2.1.1 引入RestHighLevelClient依赖</h3><p>在微服务模块中引入<code>es</code>的<code>RestHighLevelClient</code>依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-覆盖ES版本"><a href="#2-1-2-覆盖ES版本" class="headerlink" title="2.1.2 覆盖ES版本"></a>2.1.2 覆盖ES版本</h3><p>因为SpringBoot默认的ES版本是<code>7.17.10</code>，所以我们需要覆盖默认的ES版本【黑马商城是在pom.xml中修改】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;!--覆盖成7.12.1--&gt;</span><br><span class="line">    &lt;elasticsearch.version&gt;7.12.1&lt;&#x2F;elasticsearch.version&gt;  </span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-初始化RestHighLevelClient"><a href="#2-1-3-初始化RestHighLevelClient" class="headerlink" title="2.1.3 初始化RestHighLevelClient"></a>2.1.3 初始化RestHighLevelClient</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RestHighLevelClient client &#x3D; new RestHighLevelClient(</span><br><span class="line">    &#x2F;&#x2F;使用RestClient的builder方法创建</span><br><span class="line">    RestClient.builder(</span><br><span class="line">        HttpHost.create(&quot;http:&#x2F;&#x2F;192.168.xxx.xxx:9200&quot;)</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="2-2-分析Mysql设计ES实现"><a href="#2-2-分析Mysql设计ES实现" class="headerlink" title="2.2 分析Mysql设计ES实现"></a>2.2 分析Mysql设计ES实现</h2><p>我们针对购物车数据库进行分析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201728989.png" alt="image-20240520172813812"></p><p>我们可以对购物车的所有字段进行分析，判断哪些字段必须添加到ElasticSearch中，判断哪些字段必须添加搜索功能。从而进行新建索引库和映射：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201717606.png" alt="image-20240520171754450"></p><p>具体代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;items</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;stock&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;image&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;category&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;sold&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;commentCount&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;isAD&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;boolean&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;updateTime&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-索引库操作-client-indices-xxx"><a href="#2-3-索引库操作-client-indices-xxx" class="headerlink" title="2.3 索引库操作(client.indices.xxx)"></a>2.3 索引库操作(client.indices.xxx)</h2><p>JavaRestClient操作elasticsearch的流程基本类似。核心是<code>client.indices()</code>方法来获取索引库的操作对象。</p><p>索引库操作的基本步骤：</p><ul><li>1.初始化RestHighLevelClient类对象client【创建客户端】</li><li>2.创建XxxIndexRequest对象request【XXX是<code>Create</code>、<code>Get</code>、<code>Delete</code>】</li><li>3.准备请求参数request.source()方法【只有新增<code>Create</code>需要参数，其他情况不需要】</li><li>4.发送请求client.indices().xxx()方法【xxx是<code>create</code>、<code>exists</code>、<code>delete</code>】</li></ul><h3 id="2-3-1-创建索引库"><a href="#2-3-1-创建索引库" class="headerlink" title="2.3.1 创建索引库"></a>2.3.1 创建索引库</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201733352.png" alt="image-20240520173351287"></p><h3 id="2-3-2-删除索引库"><a href="#2-3-2-删除索引库" class="headerlink" title="2.3.2 删除索引库"></a>2.3.2 删除索引库</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211351946.png" alt="image-20240521135115905" style="zoom:80%;"><h3 id="2-3-2-查询索引库"><a href="#2-3-2-查询索引库" class="headerlink" title="2.3.2 查询索引库"></a>2.3.2 查询索引库</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211351275.png" style="zoom:80%;"><h2 id="2-4-文档操作-client-xxx"><a href="#2-4-文档操作-client-xxx" class="headerlink" title="2.4 文档操作(client.xxx)"></a>2.4 文档操作(client.xxx)</h2><p>文档操作的基本步骤：</p><ul><li>1.初始化RestHighLevelClient类对象client【创建客户端】</li><li>2.创建XxxRequest对象request【Xxx是<code>Index</code>、<code>Update</code>、<code>Delete</code>、<code>Bulk</code>】</li><li>3.准备请求参数request.source()方法（<code>Index</code>、<code>Update</code>、<code>Bulk</code>时需要）</li><li>4.发送请求client.Xxx()方法【Xxx是<code>index</code>、<code>get</code>、<code>update</code>、<code>delete</code>、<code>bulk</code>】</li><li>5.解析结果（<code>Get</code>查询时需要，数据在_source内部）</li></ul><h3 id="2-4-1-新增文档"><a href="#2-4-1-新增文档" class="headerlink" title="2.4.1 新增文档"></a>2.4.1 新增文档</h3><ul><li>1.创建Request对象，这里是<code>IndexRequest</code>，因为添加文档就是创建倒排索引的过程</li><li>2.准备请求参数，本例中就是Json文档</li><li>3.发送请求【client.index()方法就好了】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211427513.png" alt="image-20240521142712455"></p><h3 id="2-4-2-查询文档"><a href="#2-4-2-查询文档" class="headerlink" title="2.4.2 查询文档"></a>2.4.2 查询文档</h3><p>与之前的流程类似，代码大概分2步：</p><ul><li>创建Request对象</li><li>准备请求参数，这里是无参，【直接省略】</li><li>发送请求</li><li>解析结果【因为结果在_source部分内】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211428059.png" alt="image-20240521142844007"></p><p>可以看到，响应结果是一个JSON，其中文档放在一个<code>_source</code>属性中，因此解析就是拿到<code>_source</code>，反序列化为Java对象即可</p><h3 id="2-4-3-删除文档"><a href="#2-4-3-删除文档" class="headerlink" title="2.4.3 删除文档"></a>2.4.3 删除文档</h3><p>与查询相比，仅仅是请求方式从<code>DELETE</code>变成<code>GET</code>，可以想象Java代码应该依然是2步走：</p><ul><li>1）准备Request对象，因为是删除，这次是<code>DeleteRequest</code>对象。要指定索引库名和id</li><li>2）准备参数，无参，直接省略</li><li>3）发送请求。因为是删除，所以是<code>client.delete()</code>方法</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211430055.png" alt="image-20240521143043972"></p><h3 id="2-4-4-修改文档"><a href="#2-4-4-修改文档" class="headerlink" title="2.4.4 修改文档"></a>2.4.4 修改文档</h3><p>修改我们讲过两种方式：</p><ul><li>全量修改：本质是先根据id删除，再新增【与新增文档】</li><li>局部修改：修改文档中的指定字段值</li></ul><p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：</p><ul><li>如果新增时，ID已经存在，则修改</li><li>如果新增时，ID不存在，则新增</li></ul><p>这里不再赘述，我们主要关注局部修改的API即可</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211431593.png" alt="image-20240521143147541"></p><h3 id="2-4-5-批量导入文档"><a href="#2-4-5-批量导入文档" class="headerlink" title="2.4.5 批量导入文档"></a>2.4.5 批量导入文档</h3><p>因此<code>BulkRequest</code>中提供了<code>add</code>方法，用以添加其它CRUD的请求：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211441488.png" alt="image-20240521144140401"></p><p>具体代码：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211439619.png" alt="image-20240521143955532"></p><h2 id="2-5-高级查询"><a href="#2-5-高级查询" class="headerlink" title="2.5 高级查询"></a>2.5 高级查询</h2><p>文档搜索的基本步骤是：</p><ol><li>创建<code>SearchRequest</code>对象实例request</li><li>准备<code>request.source()</code>，也就是DSL语句【这个位置可以创建查询，分页，排序，聚合，高亮等操作】<ol><li><code>QueryBuilders</code>来构建查询条件</li><li>传入<code>request.source()</code> 的<code>query()</code>方法</li></ol></li><li>发送请求，得到结果</li><li>解析结果（参考DSL查询得到的JSON结果，从外到内，逐层解析）</li></ol><h3 id="2-5-1-查询数据"><a href="#2-5-1-查询数据" class="headerlink" title="2.5.1 查询数据"></a>2.5.1 查询数据</h3><p>我们可以分三步拼凑DSL语句和发起请求获取相应结果：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221720814.png" alt="image-20240522172046658"></p><p>其中2.组织DSL参数的步骤中source()方法下面对应的查询/高亮/分页/排序/聚合：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221728464.png" alt="image-20240522172832347"></p><p>在查询方面我们直接可以通过QueryBuilders类调用对应的叶子查询/复杂查询</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221729417.png" alt="image-20240522172921305"></p><h3 id="2-5-2-解析数据"><a href="#2-5-2-解析数据" class="headerlink" title="2.5.2 解析数据"></a>2.5.2 解析数据</h3><p>我们可以通过响应结果和Elasticsearch页面返回结果获取具体细节: 【<strong>可以扩展很多，但其实就是对照DSL查询结果写</strong>】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221738726.png" alt="image-20240522173851593"></p><p>黑马的图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221739571.png" alt="image-20240522173920457"></p><h1 id="3-代码实现思路"><a href="#3-代码实现思路" class="headerlink" title="3.代码实现思路"></a>3.代码实现思路</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="==基础操作=="></a>==基础操作==</h2><ul><li><p>1.引入RestHighLevelClient依赖</p></li><li><p>2.初始化RestHighLevelClient</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RestHighLevelClient client &#x3D; new RestHighLevelClient(</span><br><span class="line">    RestClient.builder(</span><br><span class="line">        HttpHost.create(&quot;http:&#x2F;&#x2F;192.168.xxx.xxx:9200&quot;)  &#x2F;&#x2F;使用RestClient的builder方法创建</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>3.针对索引库(数据库表)操作【创建，查询，修改，删除】</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">索引库操作的基本步骤：</span><br><span class="line">- 1.初始化RestHighLevelClient类对象client【创建客户端】</span><br><span class="line">- 2.创建XxxIndexRequest对象request【XXX是&#96;Create&#96;、&#96;Get&#96;、&#96;Delete&#96;】</span><br><span class="line">- 3.准备请求参数request.source()方法【只有新增&#96;Create&#96;需要参数，其他情况不需要】</span><br><span class="line">- 4.发送请求client.indices().xxx()方法【xxx是&#96;create&#96;、&#96;exists&#96;、&#96;delete&#96;】</span><br></pre></td></tr></table></figure><ul><li>4.针对文档(每一行数据)操作【创建，查询，修改，删除】</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文档操作的基本步骤：</span><br><span class="line">- 1.初始化RestHighLevelClient类对象client【创建客户端】</span><br><span class="line">- 2.创建XxxRequest对象request【Xxx是&#96;Index&#96;、&#96;Update&#96;、&#96;Delete&#96;、&#96;Bulk&#96;】</span><br><span class="line">- 3.准备请求参数request.source()方法（&#96;Index&#96;、&#96;Update&#96;、&#96;Bulk&#96;时需要）</span><br><span class="line">- 4.发送请求client.Xxx()方法【Xxx是&#96;index&#96;、&#96;get&#96;、&#96;update&#96;、&#96;delete&#96;、&#96;bulk&#96;】</span><br><span class="line">- 5.解析结果（&#96;Get&#96;查询时需要，数据在_source内部）</span><br></pre></td></tr></table></figure><h2 id="高级操作-复杂的DSL查询"><a href="#高级操作-复杂的DSL查询" class="headerlink" title="==高级操作(复杂的DSL查询)=="></a>==高级操作(复杂的DSL查询)==</h2><p>5.在具体位置就可以进行复杂的DSL查询【可以进行查询，分页，排序，高亮，聚合等操作】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文档搜索的基本步骤是：</span><br><span class="line">1. 创建&#96;SearchRequest&#96;对象实例request</span><br><span class="line">2. 准备&#96;request.source()&#96;，也就是DSL语句【这个位置可以创建查询，分页，排序，聚合，高亮等操作】</span><br><span class="line">   1. &#96;QueryBuilders&#96;来构建查询条件</span><br><span class="line">   2. 传入&#96;request.source()&#96; 的&#96; query() &#96;方法</span><br><span class="line">3. 发送请求，得到结果</span><br><span class="line">4. 解析结果（参考DSL查询得到的JSON结果，从外到内，逐层解析）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-启动ES&quot;&gt;&lt;a href=&quot;#1-启动ES&quot; class=&quot;headerlink&quot; title=&quot;1.启动ES&quot;&gt;&lt;/a&gt;1.启动ES&lt;/h1&gt;&lt;h2 id=&quot;1-1-安装elasticsearch&quot;&gt;&lt;a href=&quot;#1-1-安装elasticsearc
      
    
    </summary>
    
    
    
      <category term="Elasticsearch" scheme="https://Larkkkkkkk.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ-黑马商城为例</title>
    <link href="https://larkkkkkkk.github.io/2024/06/22/RabbitMQ-%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E4%B8%BA%E4%BE%8B/"/>
    <id>https://larkkkkkkk.github.io/2024/06/22/RabbitMQ-%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E4%B8%BA%E4%BE%8B/</id>
    <published>2024-06-22T12:37:17.704Z</published>
    <updated>2024-06-23T08:26:22.013Z</updated>
    
    <content type="html"><![CDATA[<p>title: RabbitMQ-黑马商城为例<br>date: 2024-06-22 20:37:17<br>tags: RabbitMQ</p><h1 id="1-启动RabbitMQ"><a href="#1-启动RabbitMQ" class="headerlink" title="1.启动RabbitMQ"></a>1.启动RabbitMQ</h1><p>基于Docker来安装RabbitMQ，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker run </span><br><span class="line">-e RABBITMQ_DEFAULT_USER&#x3D;itheima   #设置默认用户名</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS&#x3D;123456   #设置默认密码</span><br><span class="line">-v mq-plugins:&#x2F;plugins   #将本地主机上的mq-plugins目录挂载到容器内部的&#x2F;plugins目录，可以存放插件</span><br><span class="line">--name mq    #指定容器名</span><br><span class="line">--hostname mq  #指定容器的主机名</span><br><span class="line">-p 15672:15672 #RabbitMQ管理页面登录的端口号 [浏览器输入http:&#x2F;&#x2F;localhost:15672&#x2F;即可进入]</span><br><span class="line">-p 5672:5672  #RabbitMQ用于AMQP协议通信 [SpringAMQP配置时候用]</span><br><span class="line">--network heima #将容器连接到名字为heima的网络中  [如果没有就使用命令创建hmall网络 docker network create heima]</span><br><span class="line">-d  #在后台运行容器</span><br><span class="line">rabbitmq:3.8-management  #使用RabbitMQ 3.8版本带有管理界面的镜像来创建容器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">精简版 --直接在虚拟机上启动docker然后docker run</span><br><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER&#x3D;itheima \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS&#x3D;123456 \</span><br><span class="line"> -v mq-plugins:&#x2F;plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> --network heima\</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><p>可以看到在安装命令中有两个映射的端口：</p><ul><li>15672：RabbitMQ提供的管理控制台的端口</li><li>5672：RabbitMQ的消息发送处理接口</li></ul><p>通过访问 <a href="http://localhost:15672或者http://192.168.92.129:15672即可看到本地/服务器上的管理控制台。首次访问登录，需要配置文件中设定的用户名和密码">http://localhost:15672或者http://192.168.92.129:15672即可看到本地/服务器上的管理控制台。首次访问登录，需要配置文件中设定的用户名和密码</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407126.png" alt="image-20240319192803935"></p><p>创建hmall用户，并且配置一个hmall2虚拟空间</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406230026606.png" alt="image-20240623002616496"></p><h1 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2.操作步骤"></a>2.操作步骤</h1><ul><li><p>1.pom.xml中<strong>引入AMQP依赖</strong>：消费者和生产者项目</p></li><li><p>2.<strong>yml文件中配置</strong>RabbitMQ信息：</p><ul><li>2.1消费者项目【基础配置，消费者重试机制，消费者确认机制】</li><li>2.2生产者项目【基础配置，生产者重试机制，生产者确认机制】</li></ul></li><li><p>3.<strong>发送消息</strong>：生产者利用RabbitTemplate.convertAndSend(exchange交换机, routingKey路由key，message消息【传递的字段】(.setDelay设置延迟时间)，confirm消息确认机制信息);</p><ul><li>3.1 message默认是JDK序列化有一堆问题 –&gt;<strong>引入Jackson序列化</strong>【①引入依赖，②生产者和消费者的启动类添加@Bean注入】</li></ul></li><li><p>4.<strong>接收消息</strong>：消费者在方法上添加@RabbitListener注解</p><p>具体就是@RabbitListener(bindings=@QueueBinding(</p><p>​         value=@Queue(name=队列名，durable=true持久化，惰性队列arguments = @Argument(name=”x-queue-mode”,value = “lazy”)),</p><p>​         exchange=@Exchange(name=交换机名,type = ExchangeTypes.TOPIC，delayed=”true”延迟属性),</p><p>​         key={“绑定条件1”,”绑定条件2”}</p><p>​                                               ))</p><p>方法(原来传递的字段){</p><p>​    //里面写的就是之前直接调用的那个方法(serviceimpl层代码)</p><p>}</p></li></ul><h1 id="3-更改余额支付需求"><a href="#3-更改余额支付需求" class="headerlink" title="3.更改余额支付需求"></a>3.更改余额支付需求</h1><p>改造余额支付功能，将支付成功后基于OpenFeign的交易服务的更新订单状态接口的同步调用—–&gt;基于RabbitMQ的异步通知</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406222228873.png" alt="image-20240622222844704"></p><p>说明：目前没有通知服务和积分服务，因此我们只关注交易服务，步骤如下：</p><ul><li>定义<code>direct</code>类型交换机，命名为<code>pay.direct</code></li><li>定义消息队列，命名为<code>trade.pay.success.queue</code></li><li>将<code>trade.pay.success.queue</code>与<code>pay.direct</code>绑定，<code>BindingKey</code>为<code>pay.success</code></li><li>支付成功时不再调用交易服务更新订单状态的接口，而是发送一条消息到<code>pay.direct</code>，发送消息的<code>RoutingKey</code>  为<code>pay.success</code>，消息内容是订单id</li><li>交易服务监听<code>trade.pay.success.queue</code>队列，接收到消息后更新订单状态为已支付</li></ul><p>分析：</p><ul><li><p>生产者：支付服务pay-service</p></li><li><p>消费者：交易服务trade-service</p></li></ul><h2 id="3-1-pom-xml导入依赖"><a href="#3-1-pom-xml导入依赖" class="headerlink" title="3.1 pom.xml导入依赖"></a>3.1 pom.xml导入依赖</h2><p>在生产者和消费者的pom.xml文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--消息发送--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-yml配置RabbitMQ信息"><a href="#3-2-yml配置RabbitMQ信息" class="headerlink" title="3.2 yml配置RabbitMQ信息"></a>3.2 yml配置RabbitMQ信息</h2><h3 id="3-2-1-简单配置"><a href="#3-2-1-简单配置" class="headerlink" title="3.2.1 简单配置"></a>3.2.1 简单配置</h3><p>在生产者和消费者的application.yml文件中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: 192.168.92.129 # 你的虚拟机IP</span><br><span class="line">    port: 5672 # 端口</span><br><span class="line">    virtual-host: &#x2F;hmall2 # 虚拟主机</span><br><span class="line">    username: hmall # 用户名</span><br><span class="line">    password: 123456 # 密码</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;消费者和生产者会在对应位置添加配置 【例如：生产者消费者的确认机制，重试机制等】</span><br></pre></td></tr></table></figure><h3 id="3-2-2-nacos统一配置管理"><a href="#3-2-2-nacos统一配置管理" class="headerlink" title="3.2.2 nacos统一配置管理"></a>3.2.2 nacos统一配置管理</h3><ul><li>将rabbitmq配置放在nacos平台：【如果使用统一配置管理，记得导入对应nacos统一配置的config依赖和读取bootstrap.yml文件依赖】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406230027202.png" alt="image-20240623002711143"></p><ul><li>bootstrap.yml添加读取nacos配置</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406222242743.png" alt="image-20240622224211688" style="zoom:50%;"><h2 id="3-3-支付服务–发送消息"><a href="#3-3-支付服务–发送消息" class="headerlink" title="3.3 支付服务–发送消息"></a>3.3 支付服务–发送消息</h2><h3 id="3-3-1-修改原来业务"><a href="#3-3-1-修改原来业务" class="headerlink" title="3.3.1 修改原来业务"></a>3.3.1 修改原来业务</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406222302954.png" alt="image-20240622230216876"></p><h3 id="3-3-2-配置Jackson消息转换器"><a href="#3-3-2-配置Jackson消息转换器" class="headerlink" title="3.3.2 配置Jackson消息转换器"></a>3.3.2 配置Jackson消息转换器</h3><ul><li>导入依赖：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406222322731.png" alt="image-20240622232241693"></p><ul><li>直接配置到hm-common微服务下：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406222316090.png" alt="image-20240622231633000" style="zoom:67%;"><ul><li>因为要考虑trade-service和pay-service调用时候springboot扫描问题：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406222320694.png" alt="image-20240622232005648" style="zoom: 67%;"><ul><li>然后在生产者和消费者启动类添加bean注入：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406231250160.png" alt="image-20240623124959823" style="zoom:67%;"><h2 id="3-4-交易服务–接受消息"><a href="#3-4-交易服务–接受消息" class="headerlink" title="3.4 交易服务–接受消息"></a>3.4 交易服务–接受消息</h2><p>在trade-service服务中定义一个消息监听类，方法外用注解标注队列，交换机和路由key，方法内写之前调用的方法：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406222334214.png" alt="image-20240622233402122"></p><h2 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5 测试"></a>3.5 测试</h2><h3 id="3-5-1-重启两个服务"><a href="#3-5-1-重启两个服务" class="headerlink" title="3.5.1 重启两个服务"></a>3.5.1 重启两个服务</h3><p>可以通过hmall用户的hmall虚拟主机看到队列：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406230037080.png" alt="image-20240623003731861" style="zoom: 50%;"><p>可以通过hmall用户的hmall虚拟主机看到交换机：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406230038295.png" alt="image-20240623003857226"></p><h3 id="3-5-2-前端下单"><a href="#3-5-2-前端下单" class="headerlink" title="3.5.2 前端下单"></a>3.5.2 前端下单</h3><p>前端下单然后支付成功之后，查看数据库信息变化了，并且有一条消息进入到mq之中。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406230042563.png" alt="image-20240623004203477"></p><h1 id="4-更改清除购物车需求"><a href="#4-更改清除购物车需求" class="headerlink" title="4.更改清除购物车需求"></a>4.更改清除购物车需求</h1><p>==这个需求参考3步骤做的，以下只介绍生产者和消费者部分代码修改==</p><h2 id="4-1-订单服务–发送消息"><a href="#4-1-订单服务–发送消息" class="headerlink" title="4.1 订单服务–发送消息"></a>4.1 订单服务–发送消息</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406231355009.png" alt="image-20240623135513712"></p><h2 id="4-2-购物车服务–接收消息"><a href="#4-2-购物车服务–接收消息" class="headerlink" title="4.2 购物车服务–接收消息"></a>4.2 购物车服务–接收消息</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406231355460.png" alt="image-20240623135542378"></p><h1 id="5-改造代码总结"><a href="#5-改造代码总结" class="headerlink" title="5.改造代码总结"></a>5.改造代码总结</h1><p>原来的设计：我在方法位置直接调用tradeClient的方法<br>现在的设计：①生产者只需要传递原来的参数和声明交换机名和key路由；②消费者需要声明交换机名，key路由和队列名，在方法里面直接调用底层方法(serviceimpl层方法)，就不用像openFeign方式。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406231257241.png" alt="image-20240623125707127"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: RabbitMQ-黑马商城为例&lt;br&gt;date: 2024-06-22 20:37:17&lt;br&gt;tags: RabbitMQ&lt;/p&gt;
&lt;h1 id=&quot;1-启动RabbitMQ&quot;&gt;&lt;a href=&quot;#1-启动RabbitMQ&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Jmeter</title>
    <link href="https://larkkkkkkk.github.io/2024/06/20/Jmeter/"/>
    <id>https://larkkkkkkk.github.io/2024/06/20/Jmeter/</id>
    <published>2024-06-20T05:36:09.000Z</published>
    <updated>2024-06-20T05:42:03.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装Jmeter"><a href="#1-安装Jmeter" class="headerlink" title="1.安装Jmeter"></a>1.安装Jmeter</h1><p>Jmeter依赖于JDK，所以必须确保当前计算机上已经安装了JDK，并且配置了环境变量。</p><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1.下载"></a>1.1.下载</h2><p>可以Apache Jmeter官网下载，地址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201337282.png" alt="image-20240620133703234" style="zoom:67%;"><h2 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h2><p>因为下载的是zip包，解压缩即可使用，目录结构如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201337683.png" alt="image-20240620133725523" style="zoom:67%;"><p>其中的bin目录就是执行的脚本，其中包含启动脚本：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201338495.png" alt="image-20240620133802462"></p><h3 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h3><p>双击即可运行，但是有两点注意：</p><ul><li>启动速度比较慢，要耐心等待</li><li>启动后黑窗口不能关闭，否则Jmeter也跟着关闭了</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201338318.png" alt="image-20240620133825276"></p><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h1><h2 id="2-1-设置中文语言"><a href="#2-1-设置中文语言" class="headerlink" title="2.1.设置中文语言"></a>2.1.设置中文语言</h2><p>默认Jmeter的语言是英文，需要设置：</p><ul><li>==设置本地运行中文==</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201338568.png" alt="image-20240620133838529"></p><p>效果：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201338496.png" alt="image-20240620133844456"></p><blockquote><p><strong>注意</strong>：上面的配置只能保证本次运行是中文，如果要永久中文，需要修改Jmeter的配置文件</p></blockquote><ul><li>==设置永久中文==</li></ul><p>打开jmeter文件夹，在bin目录中找到 <strong>jmeter.properties</strong>，添加下面配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language</span>=<span class="string">zh_CN</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201338792.png" alt="image-20240620133857758"></p><blockquote><p>注意：前面不要出现#，#代表注释，另外这里是下划线，不是中划线</p></blockquote><h2 id="2-2-基本用法"><a href="#2-2-基本用法" class="headerlink" title="2.2.基本用法"></a>2.2.基本用法</h2><p>在测试计划上点鼠标右键，选择添加 &gt; 线程（用户） &gt; 线程组：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201340160.png" alt="image-20240620134023118"></p><p>在新增的线程组中，填写线程信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201340827.png" alt="image-20240620134032791"></p><p>给线程组点鼠标右键，添加http取样器：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201340416.png" alt="image-20240620134051379"></p><p>编写取样器内容：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201340926.png" alt="image-20240620134057894"></p><p>添加监听报告：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201341755.png" alt="image-20240620134103715" style="zoom: 67%;"><p>添加监听结果树：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201341007.png" alt="image-20240620134118963" style="zoom: 67%;"><p>汇总报告结果：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201341069.png" alt="image-20240620134130039"></p><p>结果树：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201341623.png" alt="image-20240620134154569" style="zoom:80%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-安装Jmeter&quot;&gt;&lt;a href=&quot;#1-安装Jmeter&quot; class=&quot;headerlink&quot; title=&quot;1.安装Jmeter&quot;&gt;&lt;/a&gt;1.安装Jmeter&lt;/h1&gt;&lt;p&gt;Jmeter依赖于JDK，所以必须确保当前计算机上已经安装了JDK，并且配置
      
    
    </summary>
    
    
    
      <category term="Jmeter" scheme="https://Larkkkkkkk.github.io/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>微服务-黑马商城为例</title>
    <link href="https://larkkkkkkk.github.io/2024/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E4%B8%BA%E4%BE%8B/"/>
    <id>https://larkkkkkkk.github.io/2024/05/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%BB%91%E9%A9%AC%E5%95%86%E5%9F%8E%E4%B8%BA%E4%BE%8B/</id>
    <published>2024-05-28T06:23:36.000Z</published>
    <updated>2024-06-20T05:29:41.405Z</updated>
    
    <content type="html"><![CDATA[<p>前提：我们以单体架构的黑马商城为例</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281424756.png" alt="image-20240528142451641" style="zoom: 50%;"><p>代码结构如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281426453.png" alt="image-20240528142611395" style="zoom:67%;"><h1 id="服务拆分–各个模块各司其职"><a href="#服务拆分–各个模块各司其职" class="headerlink" title="==服务拆分–各个模块各司其职=="></a>==服务拆分–各个模块各司其职==</h1><h1 id="1-微服务拆分"><a href="#1-微服务拆分" class="headerlink" title="1.微服务拆分"></a>1.微服务拆分</h1><p>拆分工程结构有两种：</p><ul><li>1.独立project：总黑马商城设置一个空项目(各个模块都在这个目录下) –不怎么美观和使用</li><li>2.Maven聚合：总黑马商城设置一个空项目(各个模块成为一个module模块，根据maven管理) –只是代码放一起但是各自可以打包开发编译</li></ul><p><strong>我们以第二种Maven聚合方式进行拆分</strong></p><h2 id="1-1-新建项目"><a href="#1-1-新建项目" class="headerlink" title="1.1 新建项目"></a>1.1 新建项目</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281656699.png" alt="image-20240528165608489"></p><h2 id="1-2-导入依赖"><a href="#1-2-导入依赖" class="headerlink" title="1.2 导入依赖"></a>1.2 导入依赖</h2><p>直接从hm-service中导入，然后删除一些不需要的依赖</p><h2 id="1-3-编写启动类"><a href="#1-3-编写启动类" class="headerlink" title="1.3 编写启动类"></a>1.3 编写启动类</h2><p><strong>一定记得和其他包是同一级，不然他妈的扫描不到报bean冲突！！！！！</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281657536.png" alt="image-20240528165703436"></p><h2 id="1-4-编写yml配置文件"><a href="#1-4-编写yml配置文件" class="headerlink" title="1.4 编写yml配置文件"></a>1.4 编写yml配置文件</h2><p>直接从hm-service中导入，然后删除和修改一些配置</p><h2 id="1-5-挪动代码"><a href="#1-5-挪动代码" class="headerlink" title="1.5 挪动代码"></a>1.5 挪动代码</h2><p>挪动步骤：</p><p>①domain实体，</p><p>②mapper数据库打交道的，</p><p>③service和serviceimpl，</p><p>④controller</p><p>==在这一步拆分多个子项目之后，我们可能会发现cart购物车服务会调用查询item商品服务，之前我们可以在一个模块中直接调用mapper，但是分开之后只能发送请求访问==</p><h1 id="2-远程调用-RestTemplate"><a href="#2-远程调用-RestTemplate" class="headerlink" title="2.远程调用-RestTemplate"></a>2.远程调用-RestTemplate</h1><p>之前通过调用item的mapper层方法即可，现在需要通过RestTemplate发送http请求给item服务获取数据。【但是有个致命问题是，exchange方法的url是写死的就很麻烦】</p><p>使用方法：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405291107820.png" alt="image-20240529110754747"></p><p>具体操作：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405291104162.png" alt="image-20240529110418958"></p><h1 id="服务治理–更高效管理调用者和被调用者"><a href="#服务治理–更高效管理调用者和被调用者" class="headerlink" title="==服务治理–更高效管理调用者和被调用者=="></a>==服务治理–更高效管理调用者和被调用者==</h1><h1 id="1-注册中心-增加调用中间商"><a href="#1-注册中心-增加调用中间商" class="headerlink" title="1.注册中心(增加调用中间商)"></a>1.注册中心(增加调用中间商)</h1><p>为了解决RestTemplate发送http请求时会写死url问题【如果被调用服务有多台负载均衡，就会报错更改也很麻烦】。==其实注册中心就相当于docker中的数据卷一样，我们可以当做中间商然后把调用者(服务调用者)和被调用者(服务注册者)联系起来。==</p><h2 id="1-1-注册中心原理"><a href="#1-1-注册中心原理" class="headerlink" title="1.1 注册中心原理"></a>1.1 注册中心原理</h2><p>流程如下：</p><ul><li>服务启动时就会注册自己的服务信息（服务名、IP、端口）到注册中心   –<strong>让注册中心知道我可以被调用</strong></li><li>调用者可以从注册中心订阅想要的服务，获取服务对应的实例列表（1个服务可能多实例部署） –<strong>让调用者知道有哪些可以调用</strong></li><li>调用者自己对实例列表负载均衡，挑选一个实例  –<strong>让调用者选一个被调用者</strong></li><li>调用者向该实例发起远程调用 –<strong>远程调用</strong></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405291714600.png" alt="image-20240529171431457"></p><ul><li>服务治理中的三个角色分别是什么？</li></ul><p>​        服务提供者：暴露服务接口，供其它服务调用</p><p>​        服务消费者：调用其它服务提供的接口</p><p>​        注册中心：记录并监控微服务各实例状态，推送服务变更信息</p><ul><li>消费者如何知道提供者的地址？</li></ul><p>​        服务提供者会在启动时注册自己信息到注册中心，消费者可以从注册中心订阅和拉取服务信息</p><ul><li>消费者如何得知服务状态变更？</li></ul><p>​        服务提供者通过心跳机制向注册中心报告自己的健康状态，当心跳异常时注册中心会将异常服务剔除，并通知订阅了该服务的消费者</p><ul><li>当提供者有多个实例时，消费者该选择哪一个？</li></ul><p>​        消费者可以通过负载均衡算法，从多个实例中选择一个【==以前SpringMVC默认是Ribbon负载均衡，后来默认是loadbalancer负载均衡==】</p><h2 id="1-2注册中心方式"><a href="#1-2注册中心方式" class="headerlink" title="1.2注册中心方式"></a>1.2注册中心方式</h2><h3 id="1-1-1-Eureka-之前使用"><a href="#1-1-1-Eureka-之前使用" class="headerlink" title="1.1.1 Eureka(之前使用)"></a>1.1.1 Eureka(之前使用)</h3><p>具体使用可以去SpringCloud篇笔记查找。</p><h3 id="1-1-2-Nacos-目前使用"><a href="#1-1-2-Nacos-目前使用" class="headerlink" title="1.1.2 Nacos(目前使用)"></a>1.1.2 Nacos(目前使用)</h3><h4 id="1-角色1-注册中心"><a href="#1-角色1-注册中心" class="headerlink" title="1.角色1-注册中心"></a>1.角色1-注册中心</h4><ul><li><p>1.准备配置文件和tar包</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405311725981.png" alt="image-20240531172545922" style="zoom: 80%;"></li><li><p>2.linux服务器docker容器启动</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405300953686.png" alt="image-20240530095352569"></p></li><li><p>3.可以在windows系统下访问</p></li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405300955865.png" alt="image-20240530095505769"></p><h4 id="2-角色2-服务注册"><a href="#2-角色2-服务注册" class="headerlink" title="2.角色2-服务注册"></a>2.角色2-服务注册</h4><p>主要用于对服务提供者进行信息注册，注册到nacos中。</p><ul><li>1.在pom.xml中导入依赖和在application.yml文件中配置nacos地址</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405300951547.png" alt="image-20240530095103394"></p><ul><li>2.我们添加完成之后可以刷新nacos地址，就可以在网页中看到</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405300956689.png" alt="image-20240530095604593"></p><h4 id="3-角色3-服务发现"><a href="#3-角色3-服务发现" class="headerlink" title="3.角色3-服务发现"></a>3.角色3-服务发现</h4><ul><li><p>1.在pom.xml中导入依赖和在application.yml文件中配置nacos地址</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406011612724.png" alt="image-20240601161204592"></p><p>【<strong>Nacos的依赖于服务注册时一致，这个依赖中同时包含了服务注册和发现的功能。因为任何一个微服务都可以调用别人，也可以被别人调用，即可以是调用者，也可以是提供者。</strong>】</p></li></ul><ul><li>2.我们添加完成之后可以刷新nacos地址，就可以在网页中看到</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405311731643.png" alt="image-20240531173131580"></p><ul><li>3.进行远程调用</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405311731800.png" alt></p><h1 id="服务调用–更高效发送http请求"><a href="#服务调用–更高效发送http请求" class="headerlink" title="==服务调用–更高效发送http请求=="></a>==服务调用–更高效发送http请求==</h1><h1 id="1-OpenFeign-优化发送http请求"><a href="#1-OpenFeign-优化发送http请求" class="headerlink" title="1.OpenFeign(优化发送http请求)"></a>1.OpenFeign(优化发送http请求)</h1><p>之前使用的RestTemplate发起远程调用的代码：</p>  <img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232026757.png" alt="image-20240423202621703" style="zoom:150%;"><p>存在下面的问题：</p><p>•代码可读性差，编程体验不统一</p><p>•参数复杂URL难以维护</p><p>==Feign==是一个声明式的http客户端。其作用是帮助我们优雅地实现http请求发送，解决了上述的问题</p><h2 id="1-1-使用步骤"><a href="#1-1-使用步骤" class="headerlink" title="1.1 使用步骤"></a>1.1 使用步骤</h2><ul><li>1.导入依赖</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406011646223.png" alt="image-20240601164647179"></p><ul><li>2.服务发现方启动类添加注解</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406011646990.png" alt="image-20240601164613950"></p><ul><li>3.服务发现方编写接口</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406011655989.png" alt="image-20240601165533941"></p><p>这里只需要声明接口，无需实现方法[<strong>OpenFeign动态代理实现</strong>]。接口中的几个关键信息：</p><ul><li><code>@FeignClient(&quot;item-service&quot;)</code> ：声明服务名称</li><li><code>@GetMapping</code> ：声明请求方式</li><li><code>@GetMapping(&quot;/items&quot;)</code> ：声明请求路径</li><li><code>@RequestParam(&quot;ids&quot;) Collection&lt;Long&gt; ids</code> ：声明请求参数</li><li><code>List&lt;ItemDTO&gt;</code> ：返回值类型</li></ul><p>有了上述信息，OpenFeign就可以利用动态代理帮我们实现这个方法，并且向<code>http://item-service/items</code>发送一个<code>GET</code>请求，携带ids为请求参数，并自动将返回值处理为<code>List&lt;ItemDTO&gt;</code>。我们只需要直接调用这个方法，即可实现远程调用了。</p><ul><li>4.服务发现方直接远程调用<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406011651403.png" alt="image-20240601165127358"></li></ul><p>总而言之，OpenFeign替我们完成了服务拉取、负载均衡、发送http请求的所有工作</p><h2 id="1-2-连接池"><a href="#1-2-连接池" class="headerlink" title="1.2 连接池"></a>1.2 连接池</h2><p>==Feign底层发起http请求，依赖于其它的框架==。其底层客户端实现包括：</p><ul><li><p>URLConnection：[默认]不支持连接池</p></li><li><p>Apache HttpClient ：支持连接池</p></li><li><p>OKHttp：支持连接池</p></li></ul><p>以HttpClient为例:</p><p>①pom.xml文件引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--httpClient的依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-httpclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>②yml配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  httpclient:</span><br><span class="line">    enabled: true # 开启feign对HttpClient的支持</span><br><span class="line">    #线程池的核心值需要压测和实际情况调整！！！！！！！！！！！1</span><br><span class="line">    max-connections: 200 # 最大的连接数</span><br><span class="line">    max-connections-per-route: 50 # 每个路径的最大连接数</span><br></pre></td></tr></table></figure><h2 id="1-3-最佳实践方案"><a href="#1-3-最佳实践方案" class="headerlink" title="1.3 最佳实践方案"></a>1.3 最佳实践方案</h2><p>我们在2.1的使用步骤其实只是模拟了一种调用，但可能多个模块之间互相调用这种方式就有很大弊端。</p><p>因此可以提出继承方式和抽取方式：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406012050559.png" alt="image-20240601205026514"></p><p>方案1抽取更加简单，工程结构也比较清晰，但缺点是整个项目耦合度偏高。</p><p>方案2抽取相对麻烦，工程结构相对更复杂，但服务之间耦合度降低。</p><h3 id="1-3-1-两种抽取方式"><a href="#1-3-1-两种抽取方式" class="headerlink" title="1.3.1 两种抽取方式"></a>1.3.1 两种抽取方式</h3><h4 id="1-继承方式"><a href="#1-继承方式" class="headerlink" title="1.继承方式"></a>1.继承方式</h4><p>就是将所有用得到的dto，po，vo啥的都放到一个微服务里面。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406012048451.png" alt="image-20240601204832364"></p><h4 id="2-抽取方式"><a href="#2-抽取方式" class="headerlink" title="2.抽取方式"></a>2.抽取方式</h4><p>每个微服务存放自己需要的dto，po，vo啥的。只有需要的放到对应微服务。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406012048695.png" alt="image-20240601204850644"></p><h3 id="1-3-2-抽取Feign客户端"><a href="#1-3-2-抽取Feign客户端" class="headerlink" title="1.3.2 抽取Feign客户端"></a>1.3.2 抽取Feign客户端</h3><p>就是将cart-service关于调用的代码和vo，dto等挪到hm-api公共模块内。</p><h3 id="1-3-3-扫描包"><a href="#1-3-3-扫描包" class="headerlink" title="1.3.3 扫描包"></a>1.3.3 扫描包</h3><p>一般情况下，如果调用feign和注册feign不在一个微服务内，那就可能出现扫描包扫描不到报错。就需要进行设置扫描包：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406012043897.png" alt="image-20240601204312798"></p><h2 id="1-4-日志管理"><a href="#1-4-日志管理" class="headerlink" title="1.4 日志管理"></a>1.4 日志管理</h2><p>OpenFeign只会在FeignClient所在包的日志级别为<strong>DEBUG</strong>时，才会输出日志。而且其日志级别有4级：</p><ul><li><strong>NONE</strong>：不记录任何日志信息，这是默认值。</li><li><strong>BASIC</strong>：仅记录请求的方法，URL以及响应状态码和执行时间</li><li><strong>HEADERS</strong>：在BASIC的基础上，额外记录了请求和响应的头信息</li><li><strong>FULL</strong>：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>Feign默认的日志级别就是NONE，所以默认我们看不到请求日志。</p><h3 id="1-4-1-配置文件yml方式"><a href="#1-4-1-配置文件yml方式" class="headerlink" title="1.4.1 配置文件yml方式"></a>1.4.1 配置文件yml方式</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232253759.png" alt="image-20240423213829442"></p><h3 id="1-4-2-Java代码方式"><a href="#1-4-2-Java代码方式" class="headerlink" title="1.4.2 Java代码方式"></a>1.4.2 Java代码方式</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404232147785.png" alt="image-20240423214701673"></p><p>提出一些问题：</p><p>我们将黑马商城拆分为5个微服务：</p><ul><li>用户服务</li><li>商品服务</li><li>购物车服务</li><li>交易服务</li><li>支付服务 </li></ul><p>由于每个微服务都有不同的地址或端口，入口不同，在与前端联调的时候发现了一些问题：</p><ul><li>请求不同数据时要访问不同的入口，需要维护多个入口地址，麻烦</li><li>前端无法调用nacos，无法实时更新服务列表</li></ul><p>单体架构时我们只需要完成一次用户登录、身份校验，就可以在所有业务中获取到用户信息。而微服务拆分后，每个微服务都独立部署，这就存在一些问题：</p><ul><li>每个微服务都需要编写登录校验、用户信息获取的功能吗？</li><li>当微服务之间调用时，该如何传递用户信息？</li></ul><p>通过==网关==技术解决上述问题。笔记分为3章：</p><ul><li>第一章：网关路由，解决前端请求入口的问题。</li><li>第二章：网关鉴权，解决统一登录校验和用户信息获取的问题。</li><li>第三章：统一配置管理，解决微服务的配置文件重复和配置热更新问题。</li></ul><h1 id="服务管理–帮助前端和后端联调，全局门卫"><a href="#服务管理–帮助前端和后端联调，全局门卫" class="headerlink" title="==服务管理–帮助前端和后端联调，全局门卫=="></a>==服务管理–帮助前端和后端联调，全局门卫==</h1><h1 id="1-网关路由"><a href="#1-网关路由" class="headerlink" title="1.网关路由"></a>1.网关路由</h1><h2 id="1-1-网关概述-门卫"><a href="#1-1-网关概述-门卫" class="headerlink" title="1.1 网关概述(门卫)"></a>1.1 网关概述(门卫)</h2><p>顾明思议，网关就是网络的==关口==。数据在网络间传输，当一个网络  –传输–&gt; 另一网络时,就需要经过网关来做数据的<strong>路由</strong>，<strong>转发</strong>，<strong>数据安全的校验</strong>。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406061723224.png" alt="image-20240606172320142"></p><p>现在，微服务网关就起到同样的作用。前端请求不能直接访问微服务，而是要请求网关：</p><ul><li>网关可以做安全控制，也就是<strong>登录身份校验</strong>，校验通过才放行</li><li>通过认证后，网关再根据<strong>请求转发</strong>到想要访问的微服务</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406061726330.png" alt="image-20240606172632286"></p><p>在SpringCloud当中，提供了两种网关实现方案：</p><ul><li>Netflix Zuul：早期实现，目前已经淘汰</li><li>SpringCloudGateway：基于Spring的WebFlux技术，完全支持响应式编程，吞吐能力更强</li></ul><h2 id="1-2-在项目中的地位"><a href="#1-2-在项目中的地位" class="headerlink" title="1.2 在项目中的地位"></a>1.2 在项目中的地位</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406041729806.png" alt="image-20240604172940613"></p><h2 id="1-3-快速入门"><a href="#1-3-快速入门" class="headerlink" title="1.3 快速入门"></a>1.3 快速入门</h2><h3 id="1-3-1-创建项目"><a href="#1-3-1-创建项目" class="headerlink" title="1.3.1 创建项目"></a>1.3.1 创建项目</h3><p>创建一个微服务hm-gateway项目：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406061734174.png" alt="image-20240606173445134" style="zoom:80%;"><h3 id="1-3-2-引入依赖"><a href="#1-3-2-引入依赖" class="headerlink" title="1.3.2 引入依赖"></a>1.3.2 引入依赖</h3><p>pom.xml文件引入依赖：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406061734057.png" alt="image-20240606173435981"></p><h3 id="1-3-3-启动类"><a href="#1-3-3-启动类" class="headerlink" title="1.3.3 启动类"></a>1.3.3 启动类</h3><p>创建启动类【一定要注意启动类位置和其他包在同一级，不然启动类扫描注解就报错】：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181104984.png" alt="image-20240618110428918"></p><h3 id="1-3-4-配置路由"><a href="#1-3-4-配置路由" class="headerlink" title="1.3.4 配置路由"></a>1.3.4 配置路由</h3><p>==(目前最全，直接挪进去改改)==</p><p>接下来，在hm-gateway模块的resources目录新建一个application.yaml文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#端口信息</span><br><span class="line">server:</span><br><span class="line">  port: 8087</span><br><span class="line">#spring配置</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway #微服务名称(用于nacos微服务注册)</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: 192.168.92.129:8848  #微服务nacos地址</span><br><span class="line">    #路由过滤</span><br><span class="line">    gateway:</span><br><span class="line">      #1.路由过滤</span><br><span class="line">      routes:</span><br><span class="line">      #第一个微服务</span><br><span class="line">        - id: item # 路由规则id，自定义，唯一</span><br><span class="line">          uri: lb:&#x2F;&#x2F;item-service # 路由的目标服务，lb代表负载均衡，会从注册中心拉取服务列表</span><br><span class="line">          predicates: # 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务</span><br><span class="line">            - Path&#x3D;&#x2F;items&#x2F;**,&#x2F;search&#x2F;** # 这里是以请求路径作为判断规则</span><br><span class="line">        #第二个微服务    </span><br><span class="line">        - id: cart</span><br><span class="line">          uri: lb:&#x2F;&#x2F;cart-service</span><br><span class="line">          predicates:</span><br><span class="line">            - Path&#x3D;&#x2F;carts&#x2F;**</span><br><span class="line">        #第三个微服务</span><br><span class="line">        - id: user</span><br><span class="line">          uri: lb:&#x2F;&#x2F;user-service</span><br><span class="line">          predicates:</span><br><span class="line">            - Path&#x3D;&#x2F;users&#x2F;**,&#x2F;addresses&#x2F;**</span><br><span class="line">        #第四个微服务</span><br><span class="line">        - id: trade</span><br><span class="line">          uri: lb:&#x2F;&#x2F;trade-service</span><br><span class="line">          predicates:</span><br><span class="line">            - Path&#x3D;&#x2F;orders&#x2F;**</span><br><span class="line">        #第五个微服务</span><br><span class="line">        - id: pay</span><br><span class="line">          uri: lb:&#x2F;&#x2F;pay-service</span><br><span class="line">          predicates:</span><br><span class="line">            - Path&#x3D;&#x2F;pay-orders&#x2F;**</span><br><span class="line"></span><br><span class="line">      #2.默认过滤器</span><br><span class="line">      default-filters: # 默认过滤项</span><br><span class="line">        - AddRequestHeader&#x3D;Truth,Itcast is freaking awesome!</span><br><span class="line"></span><br><span class="line">      #3.跨域问题</span><br><span class="line">      globalcors:</span><br><span class="line">        add-to-simple-url-handler-mapping: true #解决options请求被拦截问题</span><br><span class="line">        cors-configurations:</span><br><span class="line">          &#39;[&#x2F;**]&#39;: #拦截一切请求</span><br><span class="line">            allowedOrigins: # 允许哪些网站的跨域请求</span><br><span class="line">              - &quot;http:&#x2F;&#x2F;localhost:8090&quot;</span><br><span class="line">            allowedMethods: # 允许的跨域ajax的请求方式</span><br><span class="line">              - &quot;GET&quot;</span><br><span class="line">              - &quot;POST&quot;</span><br><span class="line">              - &quot;DELETE&quot;</span><br><span class="line">              - &quot;PUT&quot;</span><br><span class="line">              - &quot;OPTIONS&quot;</span><br><span class="line">            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息</span><br><span class="line">            allowCredentials: true # 是否允许携带cookie</span><br><span class="line">            maxAge: 360000 # 这次跨域检测的有效期</span><br></pre></td></tr></table></figure><p>==配置文件概述：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406071113462.png" alt></p><p>其中，路由规则的定义语法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://item-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/items/**,/search/**</span></span><br></pre></td></tr></table></figure><p>四个属性含义如下：</p><ul><li><code>id</code>：路由的唯一标示</li><li><code>predicates</code>：路由断言【判断是否符合条件】 –&gt;十一种，但是只用Path这一类</li><li><code>filters</code>：路由过滤条件【请求时添加信息】 –&gt;三大类过滤器(执行顺序：默认过滤器，路由过滤器，全局过滤器)</li><li><code>uri</code>：路由目标地址，<code>lb://</code>代表负载均衡，从注册中心获取目标微服务的实例列表，并且负载均衡选择一个访问。</li></ul><p>其中yml配置中的routes可以查看源码(底层其实就是我们配置的6个属性，其中我们常用其中4个)：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406071456129.png" alt="image-20240607145613009"></p><h3 id="1-3-5-测试"><a href="#1-3-5-测试" class="headerlink" title="1.3.5 测试"></a>1.3.5 测试</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406071115423.png" alt="image-20240607111543349" style="zoom:67%;"><h1 id="2-网关鉴权-登录校验"><a href="#2-网关鉴权-登录校验" class="headerlink" title="2.网关鉴权(+登录校验)"></a>2.网关鉴权(+登录校验)</h1><ul><li>单体架构，我们只需要完成一次用户登录，身份校验就可以在所有业务中获取到用户信息。</li><li>微服务架构，每个微服务都需要做用户登录校验就不太合理了</li></ul><h2 id="2-1-鉴权思路分析"><a href="#2-1-鉴权思路分析" class="headerlink" title="2.1 鉴权思路分析"></a>2.1 鉴权思路分析</h2><p>我们的登录是基于JWT来实现的，校验JWT的算法复杂，而且需要用到秘钥。如果每个微服务都去做登录校验，这就存在着两大问题：</p><ul><li>每个微服务都需要知道JWT的秘钥，×不安全</li><li>每个微服务重复编写登录校验代码、权限校验代码，×麻烦</li></ul><p>既然网关是所有微服务的入口，一切请求都需要先经过网关。我们完全可以把登录校验的工作放到网关去做，这样之前说的问题就解决了：</p><ul><li>只需要在网关和用户服务保存秘钥</li><li>只需要在网关开发登录校验功能</li></ul><p>【顺序：登录校验 –&gt; 请求转发到微服务】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181119594.png" alt="image-20240618111909518"></p><p>因此，①JWT登录校验 —-&gt;② 网关请求转发(gateway内部代码实现)</p><h2 id="2-2-Gateway内部工作基本原理"><a href="#2-2-Gateway内部工作基本原理" class="headerlink" title="2.2 Gateway内部工作基本原理"></a>2.2 Gateway内部工作基本原理</h2><p>登录校验必须在请求转发到微服务之前做，否则就失去了意义。而网关的请求转发是<code>Gateway</code>内部代码实现的，要想在请求转发之前做登录校验，就必须了解<code>Gateway</code>内部工作的基本原理。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406071512162.png" alt="image-20240607151254092"></p><p>如图所示：</p><ol><li>客户端请求进入网关后由<code>HandlerMapping</code>对请求做判断，找到与当前请求匹配的路由规则（<strong><code>Route</code></strong>），然后将请求交给<code>WebHandler</code>去处理。</li><li><code>WebHandler</code>则会加载当前路由下需要执行的过滤器链（<strong><code>Filter chain</code></strong>），然后按照顺序逐一执行过滤器（后面称为<strong><code>Filter</code></strong>）。</li><li>图中<code>Filter</code>被虚线分为左右两部分，是因为<code>Filter</code>内部的逻辑分为<code>pre</code>和<code>post</code>两部分，分别会在请求路由到微服务<strong>之前</strong>和<strong>之后</strong>被执行。</li><li>只有所有<code>Filter</code>的<code>pre</code>逻辑都依次顺序执行通过后，请求才会被路由到微服务。</li><li>微服务返回结果后，再倒序执行<code>Filter</code>的<code>post</code>逻辑。</li><li>最终把响应结果返回。</li></ol><p>==总结：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181340271.png" alt="image-20240618134038219"></p><p>如图所示，最终请求转发是有一个名为<code>NettyRoutingFilter</code>的过滤器来执行的，而且这个过滤器是整个过滤器链中顺序最靠后的一个。</p><p><strong>如果我们能够定义一个过滤器，在其中实现登录校验逻辑，并且将过滤器执行顺序定义到<code>NettyRoutingFilter</code>之前</strong>，这就符合我们的需求。</p><h2 id="2-3-网关过滤链-三种过滤器"><a href="#2-3-网关过滤链-三种过滤器" class="headerlink" title="2.3 网关过滤链-三种过滤器"></a>2.3 网关过滤链-三种过滤器</h2><p>网关过滤器链中的过滤器有两种：</p><ul><li><strong><code>GatewayFilter</code></strong>：<strong>路由过滤器</strong>(gateway自带)，作用范围比较灵活，可以：【指定的路由<code>Route</code>】   –一般自定义的话比较麻烦【直接yml配置】</li><li><strong><code>GlobalFilter</code></strong>：<strong>全局过滤器</strong>，作用范围：【所有路由】，不可配置。 –一般使用这个好弄</li><li><strong><code>HttpHeadersFilter</code></strong>：<strong>处理传递到下游微服务的请求头</strong></li></ul><p>其实<code>GatewayFilter</code>和<code>GlobalFilter</code>这两种过滤器的方法签名完全一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理请求并将其传递给下一个过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exchange 当前请求的上下文，其中包含request、response等各种数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain 过滤器链，基于它向下传递请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 根据返回值标记当前请求是否被完成或拦截，chain.filter(exchange)就放行了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;</span><br></pre></td></tr></table></figure><p>工作基本原理的第二步WebHandler：<code>FilteringWebHandler</code>请求处理器在处理请求时，会将<code>②GlobalFilter</code>装饰为<code>①GatewayFilter</code>，然后放到同一个过滤器链中，排序以后依次执行。</p><h2 id="2-4-自定义过滤器"><a href="#2-4-自定义过滤器" class="headerlink" title="2.4 自定义过滤器"></a>2.4 自定义过滤器</h2><h3 id="2-4-1-GatewayFilter"><a href="#2-4-1-GatewayFilter" class="headerlink" title="2.4.1 GatewayFilter"></a>2.4.1 GatewayFilter</h3><p><code>Gateway</code>内置的<code>GatewayFilter</code>过滤器使用起来非常简单，无需编码，只要在yaml文件中简单配置即可。而且其作用范围也很灵活，配置在哪个<code>Route</code>下，就作用于哪个<code>Route</code></p><h4 id="方式一-yml文件配置"><a href="#方式一-yml文件配置" class="headerlink" title="方式一-yml文件配置"></a>方式一-yml文件配置</h4><p>例如，有一个过滤器叫做<code>AddRequestHeaderGatewayFilterFacotry</code>，顾明思议，就是添加请求头的过滤器，可以给请求添加一个请求头并传递到下游微服务。</p><p>使用只需要在application.yaml中这样配置：【配置到gateway-routes下面就表明属于一个route】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: test_route</span><br><span class="line">        uri: lb:&#x2F;&#x2F;test-service</span><br><span class="line">        predicates:</span><br><span class="line">          -Path&#x3D;&#x2F;test&#x2F;**</span><br><span class="line">        #过滤器  </span><br><span class="line">        filters:</span><br><span class="line">          - AddRequestHeader&#x3D;key, value # 逗号之前是请求头的key，逗号之后是value</span><br></pre></td></tr></table></figure><p>如果想作用于全部路由，则可以配置：【配置到gateway下面就表明不属于任何一个route，属于全部路由】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      #在这里配置只在部分route下有效</span><br><span class="line">      - id: test_route</span><br><span class="line">        uri: lb:&#x2F;&#x2F;test-service</span><br><span class="line">        predicates:</span><br><span class="line">          -Path&#x3D;&#x2F;test&#x2F;**</span><br><span class="line">          </span><br><span class="line">     #默认过滤器【全部路由】     </span><br><span class="line">     default-filters: # default-filters下的过滤器可以作用于所有路由</span><br><span class="line">        - AddRequestHeader&#x3D;key, value</span><br></pre></td></tr></table></figure><h4 id="方式二-自定义类"><a href="#方式二-自定义类" class="headerlink" title="方式二-自定义类"></a>方式二-自定义类</h4><p>自定义<code>GatewayFilter</code>不是直接实现<code>GatewayFilter</code>，而是实现<code>AbstractGatewayFilterFactory</code>。</p><ul><li><strong>第一种</strong>：参数yml配置+自定义过滤器</li></ul><p>【注意:该类的名称一定要以<code>GatewayFilterFactory</code>为后缀！】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181351674.png" alt="image-20240618135158605"></p><p>然后在yml配置中使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      default-filters:</span><br><span class="line">            - PrintAny #直接写自定义GatewayFilterFactory类名称中前缀类声明过滤器</span><br></pre></td></tr></table></figure><ul><li><strong>第二种</strong>：自定义过滤器+动态配置参数【比较复杂不建议】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406071535309.png" alt="image-20240607153516182"></p><p>然后在yml配置中使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrintAny=1,2,3</span> <span class="comment"># 注意，这里多个参数以","隔开，将来会按照shortcutFieldOrder()方法返回的参数顺序依次复制</span></span><br></pre></td></tr></table></figure><p>上面这种配置方式参数必须严格按照shortcutFieldOrder()方法的返回参数名顺序来赋值。</p><p>还有一种用法，无需按照这个顺序，就是手动指定参数名：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PrintAny</span></span><br><span class="line">              <span class="attr">args:</span> <span class="comment"># 手动指定参数名，无需按照参数顺序</span></span><br><span class="line">                <span class="attr">a:</span> <span class="number">1</span></span><br><span class="line">                <span class="attr">b:</span> <span class="number">2</span></span><br><span class="line">                <span class="attr">c:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>第二种方法的总体图对比：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406071543417.png" alt="image-20240607154320369"></p><h3 id="2-4-2-GlobalFilter"><a href="#2-4-2-GlobalFilter" class="headerlink" title="2.4.2 GlobalFilter"></a>2.4.2 GlobalFilter</h3><p>自定义GlobalFilter则简单很多，直接实现GlobalFilter即可，而且也无法设置动态参数[因为默认是全局路由]:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406071538497.png" alt="image-20240607153823420"></p><h2 id="2-5-问题一-怎么进行登录校验"><a href="#2-5-问题一-怎么进行登录校验" class="headerlink" title="2.5 问题一-怎么进行登录校验"></a>2.5 问题一-怎么进行登录校验</h2><p>现在我们知道可以通过定义两种过滤器，定义到<code>NettyRoutingFilter</code>之前就行。</p><p>我们以自定义GlobalFilter来完成登录校验：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406102133789.png" alt="image-20240610213352568"></p><p>完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.hmall.gateway.filter;</span><br><span class="line">import com.hmall.common.exception.UnauthorizedException;</span><br><span class="line">import com.hmall.gateway.config.AuthProperties;</span><br><span class="line">import com.hmall.gateway.util.JwtTool;</span><br><span class="line">import lombok.RequiredArgsConstructor;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.util.AntPathMatcher;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line">import java.util.List;</span><br><span class="line">@Component</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">@EnableConfigurationProperties(AuthProperties.class)</span><br><span class="line">public class AuthGlobalFilter implements GlobalFilter, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    private final JwtTool jwtTool;</span><br><span class="line"></span><br><span class="line">    private final AuthProperties authProperties;</span><br><span class="line">&#x2F;&#x2F;因为不需要拦截的路径有&#x2F;** 所以我们使用这种特殊matcher类进行匹配</span><br><span class="line">    private final AntPathMatcher antPathMatcher &#x3D; new AntPathMatcher();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.获取Request</span><br><span class="line">        ServerHttpRequest request &#x3D; exchange.getRequest();</span><br><span class="line">        &#x2F;&#x2F; 2.判断是否不需要拦截</span><br><span class="line">        if(isExclude(request.getPath().toString()))&#123;  &#x2F;&#x2F;yml配置的不需要拦截的路径和request的路径进行判断</span><br><span class="line">            &#x2F;&#x2F; 无需拦截，直接放行</span><br><span class="line">            return chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 3.获取请求头中的token</span><br><span class="line">        String token &#x3D; null;</span><br><span class="line">        List&lt;String&gt; headers &#x3D; request.getHeaders().get(&quot;authorization&quot;);</span><br><span class="line">        if (headers!&#x3D;null &amp;&amp; !headers.isEmpty()) &#123;</span><br><span class="line">            token &#x3D; headers.get(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 4.校验并解析token</span><br><span class="line">        Long userId &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            userId &#x3D; jwtTool.parseToken(token);</span><br><span class="line">        &#125; catch (UnauthorizedException e) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果无效，拦截</span><br><span class="line">            ServerHttpResponse response &#x3D; exchange.getResponse();</span><br><span class="line">            response.setRawStatusCode(401);</span><br><span class="line">            return response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; TODO 5.如果有效，传递用户信息</span><br><span class="line">        System.out.println(&quot;userId &#x3D; &quot; + userId);</span><br><span class="line">        &#x2F;&#x2F; 6.放行</span><br><span class="line">        return chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isExclude(String antPath) &#123;</span><br><span class="line">        for (String pathPattern : authProperties.getExcludePaths()) &#123;</span><br><span class="line">            if(antPathMatcher.match(pathPattern, antPath))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-问题二-网关怎么传递用户信息"><a href="#2-6-问题二-网关怎么传递用户信息" class="headerlink" title="2.6 问题二-网关怎么传递用户信息"></a>2.6 问题二-网关怎么传递用户信息</h2><p>截止到2.5，网关已经可以完成登录校验并获取登录用户身份信息。</p><p>但是当网关将请求转发到微服务时，微服务又该如何获取用户身份呢？由于网关发送请求到微服务依然采用的是<code>Http</code>请求，因此我们可以将用户信息以<strong>请求头</strong>的方式传递到下游微服务。然后微服务可以从请求头中获取登录用户信息。考虑到微服务内部可能很多地方都需要用到登录用户信息，因此我们可以利用<strong>SpringMVC的拦截器</strong>来获取登录用户信息，并<strong>存入ThreadLocal</strong>，方便后续使用。</p><p>据图流程图如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406102139229.png" alt="image-20240610213950132"></p><h3 id="2-6-1-网关如何转发用户信息"><a href="#2-6-1-网关如何转发用户信息" class="headerlink" title="2.6.1 网关如何转发用户信息"></a>2.6.1 网关如何转发用户信息</h3><p>网关发送请求到微服务依然采用的是<code>Http</code>请求，因此我们可以将用户信息以<strong>请求头</strong>的方式传递到下游微服务。</p><p>具体操作：【在2.5校验器实现的登录校验里面将jwt解析出来的UserId以请求头方式传递】</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181521260.png" alt="image-20240618152159108" style="zoom:67%;"><h3 id="2-6-2-下游微服务怎么获取用户信息"><a href="#2-6-2-下游微服务怎么获取用户信息" class="headerlink" title="2.6.2 下游微服务怎么获取用户信息"></a>2.6.2 下游微服务怎么获取用户信息</h3><p>微服务可以从请求头中获取登录用户信息。利用<strong>SpringMVC的拦截器</strong>来获取登录用户信息，并<strong>存入ThreadLocal</strong>，方便后续使用。</p><p>据图流程图如下：【==编写微服务拦截器，拦截请求获取用户信息，保存到ThreadLocal后放行==】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181618019.png" alt="image-20240618161828959"></p><p>整体代码结构：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181629309.png" alt="image-20240618162921217" style="zoom:67%;"><p><strong>具体操作：</strong></p><p>因为当前用户ID会在多个微服务中使用，所以我们可以在<strong>hm-common</strong>微服务中编写：</p><ul><li>1.根据SpringMvc拦截器创建规则创建自定义拦截器</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181609940.png" alt="image-20240618160956852"></p><ul><li>2.创建MvcConfig添加自定义的拦截器</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181611139.png" alt="image-20240618161119070"></p><ul><li>3.可以修改之前写死的位置业务逻辑，这样可以在通过Threadlocal获取信息</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181614885.png" alt></p><ul><li>4.需要注意的是：因为是写在hm-common微服务，这个配置类默认不会生效(和其他微服务的扫描包不一致，无法扫描到，因此无法生效)。基于<strong>SpringBoot自动装配原理</strong>，我们可以将其添加到resources目录下的META-INF/Spring.factories文件中：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181625369.png" alt></p><ul><li>5.如果我们需要保证其他微服务获取这个拦截器，而网关不获取(登录校验了，所以没必要获取啊)，就可以添加注解</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181627597.png" alt="image-20240618162712521"></p><h2 id="2-7-问题三-微服务之间怎么传递用户信息"><a href="#2-7-问题三-微服务之间怎么传递用户信息" class="headerlink" title="2.7 问题三-微服务之间怎么传递用户信息"></a>2.7 问题三-微服务之间怎么传递用户信息</h2><p>前端发起的请求都会经过网关再到微服务，由于我们之前编写的过滤器和拦截器功能，微服务可以轻松获取登录用户信息。</p><p>但有些业务是比较复杂的，请求到达微服务后还需要调用其它多个微服务。</p><p>比如<strong>下单业务</strong>，流程如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406181638193.png" alt="image-20240618163838037"></p><p>下单的过程中，需要调用商品服务扣减库存，调用购物车服务清理用户购物车。而清理购物车时必须知道当前登录的用户身份。但是，<strong>订单服务调用购物车时并没有传递用户信息</strong>，购物车服务无法知道当前用户是谁！</p><p>由于微服务获取用户信息是通过拦截器在请求头中读取，因此要想实现微服务之间的用户信息传递，就<strong>必须在微服务发起调用时把用户信息存入请求头</strong>。</p><p>微服务之间调用是基于OpenFeign来实现的，并不是我们自己发送的请求。我们如何才能让每一个由OpenFeign发起的请求自动携带登录用户信息呢？–借助Feign中提供的一个拦截器接口：<strong>RequestInterceptor</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191425670.png" alt="image-20240619142520506"></p><p>我们只需要==实现这个接口，然后实现apply方法，利用RequestTemplate类来添加请求头，将用户信息保存到请求头中==。这样以来，每次OpenFeign发起请求的时候都会调用该方法，传递用户信息。</p><p>具体实现：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191428852.png" alt="image-20240619142843772"></p><p>这样注入bean之后如果要使用，就要在Openfeign远程调用的启动类添加：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191430814.png" alt="image-20240619143047728"></p><h2 id="总结：网关解决传递信息的三大问题"><a href="#总结：网关解决传递信息的三大问题" class="headerlink" title="==总结：网关解决传递信息的三大问题=="></a>==总结：网关解决传递信息的三大问题==</h2><ul><li>1.<strong>怎么做到先校验?后转发(网关路由是配置的，请求转发是Gateway内部代码)</strong>  —在gateway内部工作基本原理的NettyRoutingFilter过滤器前面定义一个过滤器(①路由过滤器②全局过滤器)，过滤器中进行校验JWT信息，然后通过mutate方法转发用户信息。</li><li>2.<strong>怎么做到网关给用户传递用户信息</strong>  —网关到微服务通过API添加用户信息到http请求头，微服务通过SpringMVC拦截器获取用户信息，将用户信息存储到ThreadLocal中</li><li>3.<strong>怎么做到用户之间调用传递用户信息</strong>  —就是利用发送http请求(Openfeign)时通过提供的拦截器添加</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191439587.png" alt="image-20240619143917520"></p><p>[JWT里面传递UserId信息，网关添加过滤器进行校验token同时将UserId添加到请求头，通过mutate方法传递给微服务，微服务通过SpringMVC拦截器获取UserId信息，然后存储到ThreadLocal，业务就可以使用。如果微服务之间调用就通过OpenFeign发送http请求的时候添加拦截器保存UserId]</p><h1 id="配置管理–高效维护配置和动态变更属性"><a href="#配置管理–高效维护配置和动态变更属性" class="headerlink" title="==配置管理–高效维护配置和动态变更属性=="></a>==配置管理–高效维护配置和动态变更属性==</h1><p>1.微服务重复配置过多，维护成本高  —-&gt; 共享配置</p><p>2.业务配置经常变动，每次修改都要重启服务  —-&gt; 热更新</p><p>3.网关路由配置写死，如果变更就要重启网关 —-&gt; 热更新</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191455894.png" alt="image-20240619145505779"></p><p>这些问题都可以通过统一的<strong>配置管理器服务[Nacos第二大特性]</strong>解决 —–Nacos不仅仅具备注册中心功能，也具备配置管理的功能：</p><p>微服务共享的配置可以统一交给Nacos保存和管理，在Nacos控制台修改配置后，Nacos会将配置变更推送给相关的微服务，并且无需重启即可生效，实现配置热更新。</p><p>网关的路由同样是配置，因此同样可以基于这个功能实现动态路由功能，无需重启网关即可修改路由配置。</p><h1 id="1-配置共享"><a href="#1-配置共享" class="headerlink" title="1.配置共享"></a>1.配置共享</h1><p>我们可以把微服务共享的配置抽取到Nacos中统一管理，这样就不需要每个微服务都重复配置了。分为两步：</p><ul><li>①在Nacos中添加共享配置</li><li>②微服务拉取配置</li></ul><h2 id="1-1-添加共享配置"><a href="#1-1-添加共享配置" class="headerlink" title="1.1 添加共享配置"></a>1.1 添加共享配置</h2><p>在nacos控制台分别添加微服务共同配置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191533467.png" alt="image-20240619153300369"></p><p>最终形成多个yaml文档：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191533456.png" alt="image-20240619153352401"></p><h2 id="1-2-拉取共享配置"><a href="#1-2-拉取共享配置" class="headerlink" title="1.2 拉取共享配置"></a>1.2 拉取共享配置</h2><p>将拉取到的共享配置与本地的<code>application.yaml</code>配置合并，完成项目上下文的初始化。</p><p>不过，需要注意的是，读取Nacos配置是SpringCloud上下文（<code>ApplicationContext</code>）初始化时处理的，发生在项目的引导阶段。然后才会初始化SpringBoot上下文，去读取<code>application.yaml</code>。</p><p>也就是说引导阶段，<code>application.yaml</code>文件尚未读取，根本不知道nacos 地址，该如何去加载nacos中的配置文件呢？</p><p>SpringCloud在初始化上下文的时候会先读取一个名为<code>bootstrap.yaml</code>(或者<code>bootstrap.properties</code>)的文件，如果我们将nacos地址配置到<code>bootstrap.yaml</code>中，那么在项目引导阶段就可以读取nacos中的配置了。</p><h3 id="1-2-1-文件读取顺序"><a href="#1-2-1-文件读取顺序" class="headerlink" title="1.2.1 文件读取顺序"></a>1.2.1 文件读取顺序</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191540790.png" alt="image-20240619154015718" style="zoom:67%;"><h3 id="1-2-2-拉取步骤"><a href="#1-2-2-拉取步骤" class="headerlink" title="1.2.2 拉取步骤"></a>1.2.2 拉取步骤</h3><ul><li>1.导入依赖：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--nacos配置管理--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--读取bootstrap文件--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191541489.png" alt="image-20240619154146436"></p><ul><li>2.编写bootstrap文件：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191543053.png" alt="image-20240619154311986"></p><h2 id="1-3-多配置文件读取顺序"><a href="#1-3-多配置文件读取顺序" class="headerlink" title="1.3 多配置文件读取顺序"></a>1.3 多配置文件读取顺序</h2><p>可能不同环境下有不同的yaml文件[像单体架构的时候properties，yml，yaml等情况]，因此当出现相同属性时就有优先级：==名字越长越牛逼==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404231735276.png" alt="image-20240423173524235"></p><h2 id="1-4-配置共享整理总结"><a href="#1-4-配置共享整理总结" class="headerlink" title="1.4 配置共享整理总结"></a>1.4 配置共享整理总结</h2><p>其实就是把原来的application.yml文件拆分成三个部分：①application公共配置；②Nacos地址和读取①文件配置；③application个性化配置</p><p>①nacos空间多个共享文件：原来application.yml中多个微服务可共享的信息</p><p>②新建bootstrap.yml文件：原来application.yml里面关于nacos的配置+添加config信息(读取nacos配置的多个共同部分yml文件)；</p><p>③application.yml：保留一部分自己特有的属性和①nacos里面${}需要的属性</p><h1 id="2-配置热更新-无需重启"><a href="#2-配置热更新-无需重启" class="headerlink" title="2.配置热更新(无需重启)"></a>2.配置热更新(无需重启)</h1><p>这就要用到Nacos的配置热更新能力了，分为两步：</p><ul><li>在Nacos中添加配置[配置属性]</li><li>在微服务读取配置[bootstrap.yml文件拉取配置，具体业务位置使用]</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191607049.png" alt="image-20240619160718950"></p><h2 id="2-1-Nacos配置文件"><a href="#2-1-Nacos配置文件" class="headerlink" title="2.1 Nacos配置文件"></a>2.1 Nacos配置文件</h2><p>首先，我们在nacos中添加一个配置文件，将购物车的上限数量添加到配置中：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191609209.png" alt="image-20240619160940082"></p><p>注意文件的dataId格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[服务名]-[spring.active.profile].[后缀名]</span><br></pre></td></tr></table></figure><p>文件名称由三部分组成：</p><ul><li><strong><code>服务名</code></strong>：我们是购物车服务，所以是<code>cart-service</code></li><li><strong><code>spring.active.profile</code></strong>：就是spring boot中的<code>spring.active.profile</code>，可以省略，则所有profile共享该配置</li><li><strong><code>后缀名</code></strong>：例如yaml</li></ul><h2 id="2-2-配置热更新"><a href="#2-2-配置热更新" class="headerlink" title="2.2 配置热更新"></a>2.2 配置热更新</h2><p>我们在微服务中读取配置，实现配置热更新。【一般我们使用第一种方式，第二种要用两个注解】</p><p>现在我们需要读取Nacos配置文件中的信息hm.cart.maxAmount属性:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191619117.png" alt="image-20240619161955080"></p><h3 id="2-2-1-方式一"><a href="#2-2-1-方式一" class="headerlink" title="2.2.1 方式一"></a>2.2.1 方式一</h3><p>在<code>cart-service</code>中新建一个属性读取类：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191611194.png" alt="image-20240619161154107"></p><p>接着，在业务中使用该属性加载类：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191612768.png" alt="image-20240619161245631"></p><h3 id="2-2-2-方式二"><a href="#2-2-2-方式二" class="headerlink" title="2.2.2 方式二"></a>2.2.2 方式二</h3><p>直接搭配@RefreshScope注解和@Value注解获取</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191619789.png" alt="image-20240619161914727"></p><h1 id="3-动态路由"><a href="#3-动态路由" class="headerlink" title="3.动态路由"></a>3.动态路由</h1><p>用到了在学</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前提：我们以单体架构的黑马商城为例&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281424756.png&quot; alt=&quot;image-20
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客报错github传输大文件GH001异常</title>
    <link href="https://larkkkkkkk.github.io/2024/05/28/Hexo%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99github%E4%BC%A0%E8%BE%93%E5%A4%A7%E6%96%87%E4%BB%B6GH001%E5%BC%82%E5%B8%B8/"/>
    <id>https://larkkkkkkk.github.io/2024/05/28/Hexo%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99github%E4%BC%A0%E8%BE%93%E5%A4%A7%E6%96%87%E4%BB%B6GH001%E5%BC%82%E5%B8%B8/</id>
    <published>2024-05-28T02:51:54.000Z</published>
    <updated>2024-05-28T03:02:45.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-报错原因"><a href="#1-报错原因" class="headerlink" title="1.报错原因"></a>1.报错原因</h1><p>我在Docker文件夹下上传了一个iso文件，这个文件大于了github的100M大小报错。</p><p>在我hexo g的时候没问题，但是hexo d的时候会出错。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281055923.png" alt="image-20240528105520819"></p><p>但是本地删除了iso文件还是不行，最后查询意思是之前的记录仍然存在，只能从本地仓库删除并且把以前的提交记录全部修改</p><h1 id="2-修改办法"><a href="#2-修改办法" class="headerlink" title="2.修改办法"></a>2.修改办法</h1><p>2.1 在此目录下打开git bash</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281057150.png" alt="image-20240528105706115"></p><p>2.2 输入指令 git log通过此处找到报错前最新的版本</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281059890.png" alt="image-20240528105915849"></p><p>2.2 还有一种办法就是通过github查看版本</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281101521.png" alt="image-20240528110139383"></p><p>2.3 至此直接git reset id 就可以恢复到对应版本</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405281102890.png" alt="image-20240528110223842"></p><h1 id="3-参考办法"><a href="#3-参考办法" class="headerlink" title="3.参考办法"></a>3.参考办法</h1><p><a href="https://rimbaud-lee.github.io/2021/08/25/blog_deploy_2/" target="_blank" rel="noopener">记一次异常艰难的博客部署（二）—— hexo d 指令向GitHub传输大文件导致的 GH001 报错解决 | 邓小闲的小楼 (rimbaud-lee.github.io)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-报错原因&quot;&gt;&lt;a href=&quot;#1-报错原因&quot; class=&quot;headerlink&quot; title=&quot;1.报错原因&quot;&gt;&lt;/a&gt;1.报错原因&lt;/h1&gt;&lt;p&gt;我在Docker文件夹下上传了一个iso文件，这个文件大于了github的100M大小报错。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
      <category term="Hexo博客" scheme="https://Larkkkkkkk.github.io/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>微服务-分布式事务</title>
    <link href="https://larkkkkkkk.github.io/2024/05/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>https://larkkkkkkk.github.io/2024/05/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2024-05-27T08:58:36.000Z</published>
    <updated>2024-06-23T07:49:02.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式事务产生原因"><a href="#分布式事务产生原因" class="headerlink" title="==分布式事务产生原因=="></a>==分布式事务产生原因==</h1><p>首先我们看看项目中的下单业务整体流程：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201548015.png" alt="image-20240620154853978"></p><p>由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务：</p><ul><li>交易服务：下单事务</li><li>购物车服务：清理购物车事务</li><li>库存服务：扣减库存事务</li></ul><p>整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为<strong>分支事务</strong>。多个有关联的分支事务一起就组成了<strong>全局事务</strong>。我们必须保证整个全局事务同时成功或失败。</p><p>我们知道每一个分支事务就是传统的<strong>单体事务</strong>，都可以满足ACID特性，但全局事务跨越多个服务、多个数据库，不能满足!!!!!!!!!!!!</p><ul><li><strong>产生原因</strong>：</li></ul><p>事务并未遵循ACID的原则，归其原因就是参与事务的多个子业务在不同的微服务，跨越了不同的数据库。虽然每个单独的业务都能在本地遵循ACID，但是它们<strong>互相之间没有感知</strong>，不知道有人失败了，无法保证最终结果的统一，也就无法遵循ACID的事务特性了。</p><p>这就是分布式事务问题，出现以下情况之一就可能产生分布式事务问题：</p><ul><li>业务跨多个服务实现</li><li>业务跨多个数据源实现</li></ul><h1 id="分布式事务解决方案-中间人-事务协调者"><a href="#分布式事务解决方案-中间人-事务协调者" class="headerlink" title="==分布式事务解决方案(中间人-事务协调者)=="></a>==分布式事务解决方案(中间人-事务协调者)==</h1><p>解决分布式事务的方案有很多，但实现起来都比较复杂，因此我们一般会使用<strong>开源框架</strong>来解决分布式事务问题。在众多的开源分布式事务框架中，功能最完善、使用最多的就是阿里巴巴在2019年开源的Seata了。</p><h1 id="1-Seata"><a href="#1-Seata" class="headerlink" title="1.Seata"></a>1.Seata</h1><p>官方地址：<a href="https://seata.apache.org/zh-cn/docs/overview/what-is-seata/" target="_blank" rel="noopener">Seata</a></p><p>分布式事务产生的一个重要原因：参与事务的多个分支事务互相无感知，不知道彼此的执行状态。</p><p>解决方案：就是找一个统一的<strong>事务协调者</strong>，与多个分支事务通信，检测每个分支事务的执行状态，保证全局事务下的每一个分支事务同时成功或失败即可。大多数的分布式事务框架都是基于这个理论来实现的。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201612930.png" alt="image-20240620161226852"></p><h2 id="1-1-Seata架构"><a href="#1-1-Seata架构" class="headerlink" title="1.1 Seata架构"></a>1.1 Seata架构</h2><p>Seata也不例外，在Seata的事务管理中有三个重要的角色：</p><ul><li><strong>TC (Transaction Coordinator) - 事务协调者</strong>：维护全局和分支事务的状态，协调全局事务提交或回滚。 </li><li><strong>TM (Transaction Manager) -</strong> <strong>事务管理器：</strong>定义全局事务的范围、开始全局事务、提交或回滚全局事务。 </li><li><strong>RM (Resource Manager) -</strong> <strong>资源管理器：</strong>管理分支事务，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。 </li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201622767.png" alt="image-20240620162213687"></p><ul><li><p><strong>现来方式</strong>：直接执行全局事务，然后中途调用各个分支事务，执行结束就完成【各个分支不知道彼此是否正确】</p></li><li><p><strong>现在方式</strong>：直接执行全局事务(事务管理器TM管理开始和结束)，然后中途调用各个分支事务(各个RM告知TC这个全局事务有我，我开始了，我结束了)，执行结束就完成【中途有什么问题TC都知道，随时可能回滚】</p></li></ul><h2 id="1-2-代码实现思路-两个方面"><a href="#1-2-代码实现思路-两个方面" class="headerlink" title="1.2 代码实现思路(两个方面)"></a>1.2 代码实现思路(两个方面)</h2><p>①<strong>TM</strong>和<strong>RM</strong>可以理解为Seata的客户端部分，引入到参与事务的微服务依赖中即可。(将来<strong>TM</strong>和<strong>RM</strong>就会协助微服务，实现本地分支事务与<strong>TC</strong>之间交互，实现事务的提交或回滚。)</p><p>②<strong>TC</strong>服务则是事务协调中心，是一个独立的微服务，需要单独部署。</p><h1 id="Seata具体操作-分两个部分"><a href="#Seata具体操作-分两个部分" class="headerlink" title="==Seata具体操作(分两个部分)=="></a>==Seata具体操作(分两个部分)==</h1><h1 id="1-TC部署"><a href="#1-TC部署" class="headerlink" title="1.TC部署"></a>1.TC部署</h1><h2 id="1-1-准备数据库表"><a href="#1-1-准备数据库表" class="headerlink" title="1.1 准备数据库表"></a>1.1 准备数据库表</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201709606.png" alt="image-20240620170911535"></p><p>其中seata-tc.sql内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS &#96;seata&#96;;</span><br><span class="line">USE &#96;seata&#96;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;global_table&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;xid&#96;                       VARCHAR(128) NOT NULL,</span><br><span class="line">    &#96;transaction_id&#96;            BIGINT,</span><br><span class="line">    &#96;status&#96;                    TINYINT      NOT NULL,</span><br><span class="line">    &#96;application_id&#96;            VARCHAR(32),</span><br><span class="line">    &#96;transaction_service_group&#96; VARCHAR(32),</span><br><span class="line">    &#96;transaction_name&#96;          VARCHAR(128),</span><br><span class="line">    &#96;timeout&#96;                   INT,</span><br><span class="line">    &#96;begin_time&#96;                BIGINT,</span><br><span class="line">    &#96;application_data&#96;          VARCHAR(2000),</span><br><span class="line">    &#96;gmt_create&#96;                DATETIME,</span><br><span class="line">    &#96;gmt_modified&#96;              DATETIME,</span><br><span class="line">    PRIMARY KEY (&#96;xid&#96;),</span><br><span class="line">    KEY &#96;idx_status_gmt_modified&#96; (&#96;status&#96; , &#96;gmt_modified&#96;),</span><br><span class="line">    KEY &#96;idx_transaction_id&#96; (&#96;transaction_id&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;branch_table&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;branch_id&#96;         BIGINT       NOT NULL,</span><br><span class="line">    &#96;xid&#96;               VARCHAR(128) NOT NULL,</span><br><span class="line">    &#96;transaction_id&#96;    BIGINT,</span><br><span class="line">    &#96;resource_group_id&#96; VARCHAR(32),</span><br><span class="line">    &#96;resource_id&#96;       VARCHAR(256),</span><br><span class="line">    &#96;branch_type&#96;       VARCHAR(8),</span><br><span class="line">    &#96;status&#96;            TINYINT,</span><br><span class="line">    &#96;client_id&#96;         VARCHAR(64),</span><br><span class="line">    &#96;application_data&#96;  VARCHAR(2000),</span><br><span class="line">    &#96;gmt_create&#96;        DATETIME(6),</span><br><span class="line">    &#96;gmt_modified&#96;      DATETIME(6),</span><br><span class="line">    PRIMARY KEY (&#96;branch_id&#96;),</span><br><span class="line">    KEY &#96;idx_xid&#96; (&#96;xid&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;lock_table&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;row_key&#96;        VARCHAR(128) NOT NULL,</span><br><span class="line">    &#96;xid&#96;            VARCHAR(128),</span><br><span class="line">    &#96;transaction_id&#96; BIGINT,</span><br><span class="line">    &#96;branch_id&#96;      BIGINT       NOT NULL,</span><br><span class="line">    &#96;resource_id&#96;    VARCHAR(256),</span><br><span class="line">    &#96;table_name&#96;     VARCHAR(32),</span><br><span class="line">    &#96;pk&#96;             VARCHAR(36),</span><br><span class="line">    &#96;status&#96;         TINYINT      NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;0:locked ,1:rollbacking&#39;,</span><br><span class="line">    &#96;gmt_create&#96;     DATETIME,</span><br><span class="line">    &#96;gmt_modified&#96;   DATETIME,</span><br><span class="line">    PRIMARY KEY (&#96;row_key&#96;),</span><br><span class="line">    KEY &#96;idx_status&#96; (&#96;status&#96;),</span><br><span class="line">    KEY &#96;idx_branch_id&#96; (&#96;branch_id&#96;),</span><br><span class="line">    KEY &#96;idx_xid_and_branch_id&#96; (&#96;xid&#96; , &#96;branch_id&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;distributed_lock&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;lock_key&#96;       CHAR(20) NOT NULL,</span><br><span class="line">    &#96;lock_value&#96;     VARCHAR(20) NOT NULL,</span><br><span class="line">    &#96;expire&#96;         BIGINT,</span><br><span class="line">    primary key (&#96;lock_key&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8mb4;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;distributed_lock&#96; (lock_key, lock_value, expire) VALUES (&#39;AsyncCommitting&#39;, &#39; &#39;, 0);</span><br><span class="line">INSERT INTO &#96;distributed_lock&#96; (lock_key, lock_value, expire) VALUES (&#39;RetryCommitting&#39;, &#39; &#39;, 0);</span><br><span class="line">INSERT INTO &#96;distributed_lock&#96; (lock_key, lock_value, expire) VALUES (&#39;RetryRollbacking&#39;, &#39; &#39;, 0);</span><br><span class="line">INSERT INTO &#96;distributed_lock&#96; (lock_key, lock_value, expire) VALUES (&#39;TxTimeoutCheck&#39;, &#39; &#39;, 0);</span><br></pre></td></tr></table></figure><h2 id="1-2-准备配置文件"><a href="#1-2-准备配置文件" class="headerlink" title="1.2 准备配置文件"></a>1.2 准备配置文件</h2><ul><li>准备seata目录(包含application.yml配置文件)，到时候docker容器可以挂载</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201727302.png" alt="image-20240620172739258"></p><p>其中application.yml信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7099  #控制台端口</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: seata-server</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  config: classpath:logback-spring.xml</span><br><span class="line">  file:</span><br><span class="line">    path: $&#123;user.home&#125;&#x2F;logs&#x2F;seata</span><br><span class="line">  # extend:</span><br><span class="line">  #   logstash-appender:</span><br><span class="line">  #     destination: 127.0.0.1:4560</span><br><span class="line">  #   kafka-appender:</span><br><span class="line">  #     bootstrap-servers: 127.0.0.1:9092</span><br><span class="line">  #     topic: logback_to_logstash</span><br><span class="line"></span><br><span class="line">#控制台信息 ip:7099进入之后账号和密码</span><br><span class="line">console:</span><br><span class="line">  user:</span><br><span class="line">    username: admin</span><br><span class="line">    password: admin</span><br><span class="line"></span><br><span class="line">seata:</span><br><span class="line">  #配置中心</span><br><span class="line">  config:</span><br><span class="line">    # support: nacos, consul, apollo, zk, etcd3 多种配置中心</span><br><span class="line">    type: file</span><br><span class="line">    # nacos:</span><br><span class="line">    #   server-addr: nacos:8848</span><br><span class="line">    #   group : &quot;DEFAULT_GROUP&quot;</span><br><span class="line">    #   namespace: &quot;&quot;</span><br><span class="line">    #   dataId: &quot;seataServer.properties&quot;</span><br><span class="line">    #   username: &quot;nacos&quot;</span><br><span class="line">    #   password: &quot;nacos&quot;</span><br><span class="line">  #注册中心</span><br><span class="line">  registry:</span><br><span class="line">    # support: nacos, eureka, redis, zk, consul, etcd3, sofa  多种注册中心</span><br><span class="line">    type: nacos</span><br><span class="line">    nacos:</span><br><span class="line">      application: seata-server</span><br><span class="line">      server-addr: nacos:8848   #①ip地址 ②nacos就是容器名，意味着nacos和seata要在同一网络中(这样可通过容器名访问)</span><br><span class="line">      group : &quot;DEFAULT_GROUP&quot;</span><br><span class="line">      namespace: &quot;&quot;</span><br><span class="line">      username: &quot;nacos&quot;</span><br><span class="line">      password: &quot;nacos&quot;</span><br><span class="line">#  server:</span><br><span class="line">#    service-port: 8091 #If not configured, the default is &#39;$&#123;server.port&#125; + 1000&#39;</span><br><span class="line">  security:</span><br><span class="line">    secretKey: SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span><br><span class="line">    tokenValidityInMilliseconds: 1800000</span><br><span class="line">    ignore:</span><br><span class="line">      urls: &#x2F;,&#x2F;**&#x2F;*.css,&#x2F;**&#x2F;*.js,&#x2F;**&#x2F;*.html,&#x2F;**&#x2F;*.map,&#x2F;**&#x2F;*.svg,&#x2F;**&#x2F;*.png,&#x2F;**&#x2F;*.ico,&#x2F;console-fe&#x2F;public&#x2F;**,&#x2F;api&#x2F;v1&#x2F;auth&#x2F;login</span><br><span class="line">  server:</span><br><span class="line">    # service-port: 8091 #If not configured, the default is &#39;$&#123;server.port&#125; + 1000&#39;</span><br><span class="line">    max-commit-retry-timeout: -1</span><br><span class="line">    max-rollback-retry-timeout: -1</span><br><span class="line">    rollback-retry-timeout-unlock-enable: false</span><br><span class="line">    enable-check-auth: true</span><br><span class="line">    enable-parallel-request-handle: true</span><br><span class="line">    retry-dead-threshold: 130000</span><br><span class="line">    xaer-nota-retry-timeout: 60000</span><br><span class="line">    enableParallelRequestHandle: true</span><br><span class="line">    recovery:</span><br><span class="line">      committing-retry-period: 1000</span><br><span class="line">      async-committing-retry-period: 1000</span><br><span class="line">      rollbacking-retry-period: 1000</span><br><span class="line">      timeout-retry-period: 1000</span><br><span class="line">    undo:</span><br><span class="line">      log-save-days: 7</span><br><span class="line">      log-delete-period: 86400000</span><br><span class="line">    session:</span><br><span class="line">      branch-async-queue-size: 5000 #branch async remove queue size</span><br><span class="line">      enable-branch-async-remove: false #enable to asynchronous remove branchSession</span><br><span class="line">  store:</span><br><span class="line">    # support: file 、 db 、 redis</span><br><span class="line">    mode: db</span><br><span class="line">    session:</span><br><span class="line">      mode: db</span><br><span class="line">    lock:</span><br><span class="line">      mode: db</span><br><span class="line">    #数据库配置</span><br><span class="line">    db:</span><br><span class="line">      datasource: druid</span><br><span class="line">      db-type: mysql</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      url: jdbc:mysql:&#x2F;&#x2F;mysql:3306&#x2F;seata?rewriteBatchedStatements&#x3D;true&amp;serverTimezone&#x3D;UTC</span><br><span class="line">      user: root</span><br><span class="line">      password: 123</span><br><span class="line">      min-conn: 10</span><br><span class="line">      max-conn: 100</span><br><span class="line">      global-table: global_table</span><br><span class="line">      branch-table: branch_table</span><br><span class="line">      lock-table: lock_table</span><br><span class="line">      distributed-lock-table: distributed_lock</span><br><span class="line">      query-limit: 1000</span><br><span class="line">      max-wait: 5000</span><br><span class="line">    # redis:</span><br><span class="line">    #   mode: single</span><br><span class="line">    #   database: 0</span><br><span class="line">    #   min-conn: 10</span><br><span class="line">    #   max-conn: 100</span><br><span class="line">    #   password:</span><br><span class="line">    #   max-total: 100</span><br><span class="line">    #   query-limit: 1000</span><br><span class="line">    #   single:</span><br><span class="line">    #     host: 192.168.150.101</span><br><span class="line">    #     port: 6379</span><br><span class="line">  metrics:</span><br><span class="line">    enabled: false</span><br><span class="line">    registry-type: compact</span><br><span class="line">    exporter-list: prometheus</span><br><span class="line">    exporter-prometheus-port: 9898</span><br><span class="line">  transport:</span><br><span class="line">    rpc-tc-request-timeout: 15000</span><br><span class="line">    enable-tc-server-batch-send-response: false</span><br><span class="line">    shutdown:</span><br><span class="line">      wait: 3</span><br><span class="line">    thread-factory:</span><br><span class="line">      boss-thread-prefix: NettyBoss</span><br><span class="line">      worker-thread-prefix: NettyServerNIOWorker</span><br><span class="line">      boss-thread-size: 1</span><br></pre></td></tr></table></figure><h2 id="1-3-Docker部署"><a href="#1-3-Docker部署" class="headerlink" title="1.3 Docker部署"></a>1.3 Docker部署</h2><ul><li>1.导入镜像文件和配置文件</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201712969.png" alt="image-20240620171216896" style="zoom: 80%;"><ul><li>2.加载镜像文件</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201714130.png" alt="image-20240620171453072" style="zoom:80%;"><ul><li>3.运行docker容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run --name seata \</span><br><span class="line">-p 8099:8099 \</span><br><span class="line">-p 7099:7099 \</span><br><span class="line">-e SEATA_IP&#x3D;192.168.92.129 \</span><br><span class="line">-v .&#x2F;seata:&#x2F;seata-server&#x2F;resources \</span><br><span class="line">--privileged&#x3D;true \</span><br><span class="line">--network heima \</span><br><span class="line">-d \</span><br><span class="line">seataio&#x2F;seata-server:1.5.2</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201722214.png" alt="image-20240620172200138"></p><ul><li>4.查看容器运行情况：docker logs -f seata</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201723990.png" alt="image-20240620172332870"></p><ul><li>5.在浏览器输入IP：7099即可打开控制台</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201725901.png" alt="image-20240620172510841"></p><h1 id="2-微服务集成Seata"><a href="#2-微服务集成Seata" class="headerlink" title="2.微服务集成Seata"></a>2.微服务集成Seata</h1><h2 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h2><p>【所有分支事务都需要引入】为了方便各个微服务集成seata，我们需要把seata配置共享到nacos，因此<code>trade-service</code>模块不仅仅要引入seata依赖，还要引入nacos依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--统一配置管理，读取nacos共享配置文件--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--读取bootstrap文件--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!--如果只需要seata集成微服务，那就只导入这个依赖!!!!!!!!!!--&gt;</span><br><span class="line">  &lt;!--seata--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406210941722.png" alt="image-20240621094124650"></p><h2 id="2-2-添加配置-统一配置到nacos"><a href="#2-2-添加配置-统一配置到nacos" class="headerlink" title="2.2 添加配置(统一配置到nacos)"></a>2.2 添加配置(统一配置到nacos)</h2><p>【一般直接配置到apolication.yml文件】因为多个分支事务都需要，那我就可以将seata的配置放在nacos统一配置，剩下的就是改造application.yml和bootstrap.yml文件信息。</p><h3 id="2-2-1-配置公共配置"><a href="#2-2-1-配置公共配置" class="headerlink" title="2.2.1 配置公共配置"></a>2.2.1 配置公共配置</h3><p>server-addr一定要配置自己的ip：【不然容易注册不到nacos上去！！！】</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406210932325.png" alt="image-20240621093202209" style="zoom:67%;"><p>让微服务能找到TC的位置：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406210934620.png" alt="image-20240621093439565" style="zoom:67%;"><p><strong>这样配置之后，各个分支事务都去配置这个TC信息：</strong></p><h3 id="2-2-2-分支事务新建bootstrap-yml文件"><a href="#2-2-2-分支事务新建bootstrap-yml文件" class="headerlink" title="2.2.2 分支事务新建bootstrap.yml文件"></a>2.2.2 分支事务新建bootstrap.yml文件</h3><p>这样配置之后，各个分支事务都去配置这个TC信息：</p><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20240621094830123.png" alt="image-20240621094830123" style="zoom:67%;"><h3 id="2-2-3-分支事务调整application-yml文件"><a href="#2-2-3-分支事务调整application-yml文件" class="headerlink" title="2.2.3 分支事务调整application.yml文件"></a>2.2.3 分支事务调整application.yml文件</h3><img src="C:/Users/larkkkkkkk/AppData/Roaming/Typora/typora-user-images/image-20240621094943628.png" alt="image-20240621094943628" style="zoom: 67%;"><h2 id="2-3-添加数据库保存快照"><a href="#2-3-添加数据库保存快照" class="headerlink" title="2.3 添加数据库保存快照"></a>2.3 添加数据库保存快照</h2><p>seata的客户端(TM和RM)在解决分布式事务的时候需要记录一些中间数据，保存在数据库中。因此我们要先准备一个这样的表。</p><p>对三个分支事务hm-trade、hm-cart、hm-item三个数据库加入一个undo_log日志表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;undo_log&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;branch_id&#96;     BIGINT       NOT NULL COMMENT &#39;branch transaction id&#39;,</span><br><span class="line">    &#96;xid&#96;           VARCHAR(128) NOT NULL COMMENT &#39;global transaction id&#39;,</span><br><span class="line">    &#96;context&#96;       VARCHAR(128) NOT NULL COMMENT &#39;undo_log context,such as serialization&#39;,</span><br><span class="line">    &#96;rollback_info&#96; LONGBLOB     NOT NULL COMMENT &#39;rollback info&#39;,</span><br><span class="line">    &#96;log_status&#96;    INT(11)      NOT NULL COMMENT &#39;0:normal status,1:defense status&#39;,</span><br><span class="line">    &#96;log_created&#96;   DATETIME(6)  NOT NULL COMMENT &#39;create datetime&#39;,</span><br><span class="line">    &#96;log_modified&#96;  DATETIME(6)  NOT NULL COMMENT &#39;modify datetime&#39;,</span><br><span class="line">    UNIQUE KEY &#96;ux_undo_log&#96; (&#96;xid&#96;, &#96;branch_id&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  AUTO_INCREMENT &#x3D; 1</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8mb4 COMMENT &#x3D;&#39;AT transaction mode undo table&#39;;</span><br></pre></td></tr></table></figure><p>添加完成之后：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211004068.png" alt="image-20240621100417899"></p><h2 id="2-4-修改具体业务"><a href="#2-4-修改具体业务" class="headerlink" title="2.4 修改具体业务"></a>2.4 修改具体业务</h2><p>我们重新启动项目之后，可以查看seata日志：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211123561.png" alt="image-20240621112336246"></p><p>然后针对出问题的方法进行修改【修改为GlobalTransactional注解】：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211022878.png" alt="image-20240621102212713"></p><p><code>@GlobalTransactional</code>注解就是在标记事务的起点，将来TM就会基于这个方法判断全局事务范围，初始化全局事务。如果中途有分支事务出现问题，我们就可以告知TC进行回滚操作，保证全局事务要么成功/要么失败。</p><h1 id="3-实现步骤"><a href="#3-实现步骤" class="headerlink" title="3.实现步骤"></a>3.实现步骤</h1><ul><li>1.准备TC所需要的数据库，准备配置文件和镜像文件 —【可以直接去服务器利用docker配置TC】</li><li>2.微服务继承Seata<ul><li>2.1 引入seata依赖</li><li>2.2 在yml配置seata信息 【因为涉及多个分支事务，所以一般配置到nacos】</li><li>2.3 原有出现问题的方法替换@Tradtional注解为@GlobalTransactional注解解决分布式事务</li></ul></li></ul><h1 id="Seate四种底层原理-四种"><a href="#Seate四种底层原理-四种" class="headerlink" title="==Seate四种底层原理-四种=="></a>==Seate四种底层原理-四种==</h1><p>Seata支持四种不同的分布式事务解决方案：</p><ul><li><strong>XA</strong></li><li><strong>TCC（Try-Confirm-Cancel）</strong></li><li><strong>AT（Automatic Transaction）</strong></li><li><strong>SAGA</strong></li></ul><h1 id="使用过程中，只是yml配置多一个属性"><a href="#使用过程中，只是yml配置多一个属性" class="headerlink" title="==使用过程中，只是yml配置多一个属性=="></a>==使用过程中，只是yml配置多一个属性==</h1><h1 id="1-XA模式"><a href="#1-XA模式" class="headerlink" title="1.XA模式"></a>1.XA模式</h1><p><code>XA</code> 规范 是<code>X/Open</code> 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的<code>TM</code>与局部的<code>RM</code>之间的接口，几乎所有主流的数据库都对 XA 规范提供了支持。</p><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p>主要分为==两个阶段==提交：</p><p><strong>一阶段</strong>的工作：【TM通知各个RM执行本地事务，RM向TC注册和报告完成情况，但是不提交保持数据库锁】</p><p>①RM注册分支事务到TC【告知我是哪个TM的，我完成什么任务】</p><p>②RM执行分支业务sql但不提交【完成任务了】tryPayOrderByBalance</p><p>③RM报告执行状态到TC【告诉你我完成了】</p><p><strong>二阶段</strong>的工作：【TC基于一阶段RM提交事务状态来判断下一步操作是回滚还是提交】</p><p>①TC检测各分支事务执行状态【看看各个RM完成如何】</p><p>​    a.如果都成功，通知所有RM提交事务【ok，提交吧】</p><p>​    b.如果有失败，通知所有RM回滚事务【no，回滚吧】</p><p>②RM接收TC指令，提交或回滚事务【TC告诉我其他人好了/有问题，就提交/回滚】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211404912.png" alt="image-20240621140448858"></p><p>1.1 我们启动服务通过注解@GlobalTranscational开启全局事务</p><p>1.2 我们操作的时候调用多个分支事务</p><p>1.3 分支事务先向TC进行注册，告知TC我的哪个TM负责的，我要完成什么【告知之后可以进行业务逻辑】</p><p>1.4 开始执行业务，进行sql语句的完成【但是不提交!!!!】</p><p>1.5 执行业务sql完成之后报告TC我已经完成我自己的任务了，报告事务状态【TC就知道分支业务完成状态(有的完成了，有的失败了)】</p><p>因为第一阶段结束我们可以进行结束全局事务，后续看看是回滚还是提交</p><p>2.1 结束全局事务</p><p>2.2 TM告知TC检查一下第一阶段各分支事务执行状态，看是不是所有都完成</p><p>2.3 因为要全局事务要么提交/要么回滚，如果都成功，通知所有RM提交事务，如果有失败，通知所有RM回滚事务</p><p>流程图如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211439385.png" alt="image-20240621143957304" style="zoom:80%;"><h2 id="1-2-具体实现操作"><a href="#1-2-具体实现操作" class="headerlink" title="1.2 具体实现操作"></a>1.2 具体实现操作</h2><h3 id="1-2-1-yml配置"><a href="#1-2-1-yml配置" class="headerlink" title="1.2.1 yml配置"></a>1.2.1 yml配置</h3><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211318101.png" alt="image-20240621131831960" style="zoom:67%;"><h3 id="1-2-2-修改具体业务"><a href="#1-2-2-修改具体业务" class="headerlink" title="1.2.2 修改具体业务"></a>1.2.2 修改具体业务</h3><p>对应全局事务位置添加@GlobalTranscational：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211319207.png" alt="image-20240621131953128" style="zoom:80%;"><p>针对各个分支事务添加@transactional:</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211322389.png" alt="image-20240621132234331" style="zoom: 67%;"><h3 id="1-2-3-测试"><a href="#1-2-3-测试" class="headerlink" title="1.2.3 测试"></a>1.2.3 测试</h3><p>我们加入手机到购物车，然后修改手机库存stock=0下单之后trade-service会提示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211349778.png" alt="image-20240621134914617"></p><h2 id="1-3-XA使用总结"><a href="#1-3-XA使用总结" class="headerlink" title="1.3 XA使用总结"></a>1.3 XA使用总结</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211402548.png" alt="image-20240621140206477"></p><h2 id="1-4-XA优缺点"><a href="#1-4-XA优缺点" class="headerlink" title="1.4 XA优缺点"></a>1.4 XA优缺点</h2><ul><li><p>XA模式的<strong>优点</strong>是什么？</p><ul><li><p>事务的强一致性，满足ACID原则【第一阶段只完成不提交，只有第二阶段才告知一起回滚，还是一起提交】</p></li><li><p>常用数据库都支持，实现简单，并且没有代码侵入【比较好理解，而且比较规整】</p></li></ul></li><li><p>XA模式的<strong>缺点</strong>是什么？</p><ul><li><p>因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差【第一阶段只能等第二阶段指令，阻塞时间长】</p></li><li><p>依赖关系型数据库实现事务【关系型数据库】</p></li></ul></li></ul><h1 id="2-AT模式-Automatic-Transaction-—seata主推"><a href="#2-AT模式-Automatic-Transaction-—seata主推" class="headerlink" title="2.AT模式(Automatic Transaction)—seata主推"></a>2.AT模式(Automatic Transaction)—seata主推</h1><p>分阶段提交的事务模型，不过弥补了XA模型中资源锁定周期过长的缺陷(一直阻塞等到第二阶段TC告知RM才可以进行操作)</p><h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><p>主要分为==两个阶段==提交：</p><p><strong>一阶段</strong>的工作：</p><ol><li><code>TM</code>发起并注册全局事务到<code>TC</code></li><li><code>TM</code>调用分支事务</li><li>分支事务准备执行业务SQL</li><li><code>RM</code>拦截业务SQL，根据where条件查询原始数据，形成快照。【<strong>在执行业务sql之前生成快照</strong>】</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"money"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>RM</code>执行业务SQL，提交本地事务，释放数据库锁。此时 money = 90【我已经完成了自己的任务，并且提交了】</li><li><code>RM</code>报告本地事务状态给<code>TC</code></li></ol><p><strong>二阶段</strong>的工作：</p><ol><li><code>TM</code>通知<code>TC</code>事务结束【ok了，你判断一下吧】</li><li><code>TC</code>检查分支事务状态【如果都成功删除快照，如果有失败就用快照恢复数据库回滚】<ol><li>如果都成功，则立即删除快照</li><li>如果有分支事务失败，需要回滚。读取快照数据（{“id”: 1, “money”: 100}），将快照恢复到数据库。此时数据库再次恢复为100</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211514284.png" alt="image-20240621151403207"></p><p>流程图如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211535111.png" alt="image-20240621153523017"></p><h2 id="2-2-具体实现操作"><a href="#2-2-具体实现操作" class="headerlink" title="2.2 具体实现操作"></a>2.2 具体实现操作</h2><h3 id="2-2-1-yml配置"><a href="#2-2-1-yml配置" class="headerlink" title="2.2.1 yml配置"></a>2.2.1 yml配置</h3><p>类似于XA，就是将属性改为AT</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406211512339.png" alt="image-20240621151209260" style="zoom: 67%;"><h3 id="2-2-2-修改具体业务"><a href="#2-2-2-修改具体业务" class="headerlink" title="2.2.2 修改具体业务"></a>2.2.2 修改具体业务</h3><p>类似与XA，就是全局事务位置加注解@GlobalTransanctional，分支事务位置加注解@Transanctional</p><h3 id="2-2-3-添加快照undo表"><a href="#2-2-3-添加快照undo表" class="headerlink" title="2.2.3 添加快照undo表"></a>2.2.3 添加快照undo表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;undo_log&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;branch_id&#96;     BIGINT       NOT NULL COMMENT &#39;branch transaction id&#39;,</span><br><span class="line">    &#96;xid&#96;           VARCHAR(128) NOT NULL COMMENT &#39;global transaction id&#39;,</span><br><span class="line">    &#96;context&#96;       VARCHAR(128) NOT NULL COMMENT &#39;undo_log context,such as serialization&#39;,</span><br><span class="line">    &#96;rollback_info&#96; LONGBLOB     NOT NULL COMMENT &#39;rollback info&#39;,</span><br><span class="line">    &#96;log_status&#96;    INT(11)      NOT NULL COMMENT &#39;0:normal status,1:defense status&#39;,</span><br><span class="line">    &#96;log_created&#96;   DATETIME(6)  NOT NULL COMMENT &#39;create datetime&#39;,</span><br><span class="line">    &#96;log_modified&#96;  DATETIME(6)  NOT NULL COMMENT &#39;modify datetime&#39;,</span><br><span class="line">    UNIQUE KEY &#96;ux_undo_log&#96; (&#96;xid&#96;, &#96;branch_id&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  AUTO_INCREMENT &#x3D; 1</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8mb4 COMMENT &#x3D;&#39;AT transaction mode undo table&#39;;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-测试"><a href="#2-2-4-测试" class="headerlink" title="2.2.4 测试"></a>2.2.4 测试</h3><p>类似于XA测试，只不过多了快照数据进入到undo表</p><h2 id="2-3-AT使用总结"><a href="#2-3-AT使用总结" class="headerlink" title="2.3 AT使用总结"></a>2.3 AT使用总结</h2><p>1.yml添加配置</p><p>2.业务添加注解@GlobalTransanctional即可</p><p>3.添加快照表【比XA模式就多一个这个】</p><h2 id="2-4-AT优缺点"><a href="#2-4-AT优缺点" class="headerlink" title="2.4 AT优缺点"></a>2.4 AT优缺点</h2><ul><li><p>XA模式的<strong>优点</strong>是什么？</p><ul><li>第一阶段就直接提交了，性能较好【后续如果需要就使用快照恢复】</li></ul></li><li><p>XA模式的<strong>缺点</strong>是什么？</p><ul><li>第一阶段就提交，在第二阶段完成的极小时间段内可能出现数据不一致【<strong>用空间换时间</strong>】</li></ul></li></ul><h1 id="3-XA模式和AT模式对比"><a href="#3-XA模式和AT模式对比" class="headerlink" title="3.XA模式和AT模式对比"></a>3.XA模式和AT模式对比</h1><table><thead><tr><th></th><th>XA模式【模式强一致，一步一步来】</th><th>AT模式【模式最终一致，可以第二阶段回退】</th></tr></thead><tbody><tr><td>第一阶段</td><td>只完成不提交(锁定资源)</td><td>直接提交(不锁定资源)</td></tr><tr><td>第二阶段</td><td>数据库机制完成回滚</td><td>数据快照完成回滚(第一阶段执行业务之前生成快照)</td></tr><tr><td>性能</td><td>低(只有第二阶段才决定事务提交/回退)</td><td>高(第一阶段就提交，第二阶段可以恢复)</td></tr></tbody></table><h1 id="4-代码实现思路"><a href="#4-代码实现思路" class="headerlink" title="4.代码实现思路"></a>4.代码实现思路</h1><p>其实就是Seata实现步骤:</p><p>①导入依赖</p><p>②yml配置(基础配置+模式配置属性)       —-<strong>多了一个配置data-source-proxy-mode</strong></p><p>③全局事务位置加注解@GlobalTransanctional</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式事务产生原因&quot;&gt;&lt;a href=&quot;#分布式事务产生原因&quot; class=&quot;headerlink&quot; title=&quot;==分布式事务产生原因==&quot;&gt;&lt;/a&gt;==分布式事务产生原因==&lt;/h1&gt;&lt;p&gt;首先我们看看项目中的下单业务整体流程：&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务-服务保护</title>
    <link href="https://larkkkkkkk.github.io/2024/05/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4/"/>
    <id>https://larkkkkkkk.github.io/2024/05/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4/</id>
    <published>2024-05-27T08:58:27.000Z</published>
    <updated>2024-06-23T07:48:26.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务拆分容易出现的问题"><a href="#微服务拆分容易出现的问题" class="headerlink" title="==微服务拆分容易出现的问题=="></a>==微服务拆分容易出现的问题==</h1><h1 id="1-雪崩问题"><a href="#1-雪崩问题" class="headerlink" title="1.雪崩问题"></a>1.雪崩问题</h1><h2 id="1-1-产生背景"><a href="#1-1-产生背景" class="headerlink" title="1.1 产生背景"></a>1.1 产生背景</h2><p>在微服务远程调用的过程中，还存在几个问题需要解决。</p><p>①<strong>业务健壮性</strong>问题：</p><p>例如在之前的查询购物车列表业务中，购物车服务需要查询最新的商品信息，与购物车数据做对比，提醒用户。大家设想一下，如果商品服务查询时发生故障，查询购物车列表在调用商品服务时，是不是也会异常？从而导致购物车查询失败。</p><p>但从业务角度来说，为了提升用户体验，即便是商品查询失败，购物车列表也应该正确展示出来，哪怕是不包含最新的商品信息。</p><p>②<strong>级联失败</strong>问题：</p><p>还是查询购物车的业务，假如商品服务业务并发较高，占用过多Tomcat连接。可能会导致商品服务的所有接口响应时间增加，延迟变高，甚至是长时间阻塞直至查询失败。</p><p>此时查询购物车业务需要查询并等待商品查询结果，从而导致查询购物车列表业务的响应时间也变长，甚至也阻塞直至无法访问。而此时如果查询购物车的请求较多，可能导致购物车服务的Tomcat连接占用较多，所有接口的响应时间都会增加，整个服务性能很差， 甚至不可用。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201107590.png" alt="image-20240620110735548"></p><p>依次类推，整个微服务群中与购物车服务、商品服务等有调用关系的服务可能都会出现问题，最终导致整个集群不可用。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201108846.png" alt="image-20240620110826809"></p><p>==雪崩【级联失败】==：微服务调用链路中的某个服务故障，引起整个链路中的所有微服务都不可用。</p><h2 id="1-2-产生原因"><a href="#1-2-产生原因" class="headerlink" title="1.2 产生原因"></a>1.2 产生原因</h2><ul><li><p>微服务相互调用，服务提供者出现故障或阻塞。</p></li><li><p>服务调用者没有做好异常处理，导致自身故障。</p></li><li><p>调用链中的所有服务级联失败，导致整个集群故障</p></li></ul><h2 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h2><ul><li><p>尽量避免服务出现故障或阻塞。–<strong>请求限流和线程隔离</strong></p><ul><li><p>保证代码的健壮性；</p></li><li><p>保证网络畅通；</p></li><li><p>能应对较高的并发请求；</p></li></ul></li><li><p>服务调用者做好远程调用异常的后备方案，避免故障扩散 –<strong>服务熔断</strong></p></li></ul><p>这些方案或多或少都会导致服务的体验上略有下降，比如请求限流，降低了并发上限；线程隔离，降低了可用资源数量；服务熔断，降低了服务的完整度，部分服务变的不可用或弱可用。因此这些方案都属于服务<strong>降级</strong>的方案。但通过这些方案，服务的健壮性得到了提升。</p><h3 id="1-请求限流-降低访问流量"><a href="#1-请求限流-降低访问流量" class="headerlink" title="1.请求限流(降低访问流量)"></a>1.请求限流(降低访问流量)</h3><p>==限制访问微服务的请求并发量，避免服务因流量激增出现故障==</p><p>服务故障最重要原因，就是并发太高！解决了这个问题，就能避免大部分故障。当然，接口的并发不是一直很高，而是突发的。因此请求限流，就是<strong>限制或控制</strong>接口访问的并发流量，避免服务因流量激增而出现故障。</p><p>请求限流往往会有一个限流器，数量高低起伏的并发请求曲线，经过限流器就变的非常平稳。这就像是水电站的大坝，起到蓄水的作用，可以通过开关控制水流出的大小，让下游水流始终维持在一个平稳的量。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201115053.png" alt="image-20240620111528990"></p><h3 id="2-线程隔离-降低独占资源数量"><a href="#2-线程隔离-降低独占资源数量" class="headerlink" title="2.线程隔离(降低独占资源数量)"></a>2.线程隔离(降低独占资源数量)</h3><p>==限制分给其他服务的线程数，保证不会因为一个服务挂了导致其他服务消耗完自己资源也挂了==</p><p>为了避免某个接口故障或压力过大导致整个服务不可用，我们可以限定每个接口可以使用的资源范围，也就是将其“隔离”起来。</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201120287.png" alt="image-20240620112057241" style="zoom:67%;"><p>举例子说明：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201121329.png" alt="image-20240620112134291" style="zoom: 80%;"><p>如图所示，我们给查询购物车业务限定可用线程数量上限为20，这样即便查询购物车的请求因为查询商品服务而出现故障，也不会导致服务器的线程资源被耗尽，不会影响到其它接口。</p><h3 id="3-快速失败-fallback后备方案"><a href="#3-快速失败-fallback后备方案" class="headerlink" title="3.快速失败(fallback后备方案)"></a>3.快速失败(fallback后备方案)</h3><p><strong>快速失败</strong>：给业务编写一个调用失败时的处理的逻辑，称为fallback。当调用出现故障（比如无线程可用）时，按照失败处理逻辑执行业务并返回，而不是直接抛出异常。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201124632.png" alt="image-20240620112448590"></p><h3 id="4-服务熔断-提前预测，不对劲就fallback"><a href="#4-服务熔断-提前预测，不对劲就fallback" class="headerlink" title="4.服务熔断(提前预测，不对劲就fallback)"></a>4.服务熔断(提前预测，不对劲就fallback)</h3><p>==【相当于一个提前预判】设定一个断路器(开关)，统计请求的异常比例和慢调用比例，超过阈值我就拒绝不让你用。熔断了去走服务的后备fallback逻辑(备份方案)==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201333946.png" alt="image-20240620133335898"></p><p>思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务，即拦截访问该服务的一切请求。而当设定熔断时间结束后它会尝试放行一次请求测试，如果成功就是服务恢复时，断路器会放行访问该服务的请求；如果放行不通过继续走熔断状态，所有请求走fallback快速失败。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201448853.png" alt="image-20240620144802785"></p><h1 id="2-常见服务保护技术"><a href="#2-常见服务保护技术" class="headerlink" title="2. 常见服务保护技术"></a>2. 常见服务保护技术</h1><p>目前我们常见的就是以下两种，我们都推荐使用Sentinel：【实习公司用Hystrix】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406191725090.png" alt="image-20240619172500972"></p><h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="==Sentinel=="></a>==Sentinel==</h1><h1 id="服务保护方案–Sentinel基础使用"><a href="#服务保护方案–Sentinel基础使用" class="headerlink" title="==服务保护方案–Sentinel基础使用=="></a>==服务保护方案–Sentinel基础使用==</h1><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><p>Sentinel是阿里巴巴开源的一款服务保护框架，目前已经加入SpringCloudAlibaba中。官方网站：</p><p><a href="https://security.feishu.cn/link/safety?target=https%3A%2F%2Fsentinelguard.io%2Fzh-cn%2F&amp;scene=ccm&amp;logParams=%7B%22location%22%3A%22ccm_docs%22%7D&amp;lang=zh-CN">https://security.feishu.cn/link/safety?target=https%3A%2F%2Fsentinelguard.io%2Fzh-cn%2F&amp;scene=ccm&amp;logParams=%7B%22location%22%3A%22ccm_docs%22%7D&amp;lang=zh-CN</a></p><p>Sentinel 的使用可以分为两个部分:</p><ul><li><strong>核心库</strong>（Jar包）：不依赖任何框架/库，能够运行于 Java 8 及以上的版本的运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。在项目中引入依赖即可实现服务限流、隔离、熔断等功能。</li><li><strong>控制台</strong>（Dashboard）：Dashboard 主要负责管理推送规则、监控、管理机器信息等。</li></ul><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><p>为了方便监控微服务，我们先把Sentinel的控制台搭建出来</p><h2 id="2-1-下载jar包"><a href="#2-1-下载jar包" class="headerlink" title="2.1 下载jar包"></a>2.1 下载jar包</h2><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">Releases · alibaba/Sentinel · GitHub</a></p><h2 id="2-2-启动测试"><a href="#2-2-启动测试" class="headerlink" title="2.2 启动测试"></a>2.2 启动测试</h2><ul><li>1.存放jar：将jar包放在任意非中文、不包含特殊字符的目录下，重命名为<code>sentinel-dashboard.jar</code>：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201004928.png" alt="image-20240620100439761"></p><ul><li>2.启动：在当前目录下cmd打开命令行输入指令启动：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入以下命令：</span><br><span class="line">java -Dserver.port=8090 -Dcsp.sentinel.dashboard.server=localhost:8090 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">其余配置项可以参考官方文档：</span></span><br><span class="line">https://github.com/alibaba/Sentinel/wiki/%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E9%A1%B9</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201006735.png" alt="image-20240620100605675"></p><ul><li>3.访问：访问<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8090</a>页面，就可以看到sentinel的控制台了：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201009932.png" alt="image-20240620100945847"></p><p>需要输入账号和密码，默认都是：sentinel</p><p>登录后，即可看到控制台，默认会监控sentinel-dashboard服务本身</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201010818.png" alt="image-20240620101024738" style="zoom:67%;"><h1 id="3-微服务整合"><a href="#3-微服务整合" class="headerlink" title="3.微服务整合"></a>3.微服务整合</h1><p>我们以微服务-黑马商城中的cart-service购物车模块为例：</p><h2 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h2><p>我们在cart-service服务pom.xml文件引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--sentinel--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt; </span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>因为整合到springalibaba，所以依赖名也是spring-cloud-starter前缀</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201012586.png" alt="image-20240620101220519"></p><h2 id="3-2-yml配置控制台"><a href="#3-2-yml配置控制台" class="headerlink" title="3.2 yml配置控制台"></a>3.2 yml配置控制台</h2><p>我们在cart-service服务yml文件引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    sentinel:</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: localhost:8090  # sentinel控制台地址</span><br><span class="line">      # 因为restful风格，如果不设置的话同一个controller下的接口都是一个资源</span><br><span class="line">      http-method-specify: true #是否设置请求方式作为资源名称</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201013409.png" alt="image-20240620101330326"></p><h2 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h2><p>重启<code>cart-service</code>，然后访问查询购物车接口，sentinel的客户端就会将服务访问的信息提交到<code>sentinel-dashboard</code>控制台。并展示出统计信息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201015183.png" alt="image-20240620101510077"></p><p>点击cart-service的簇点链路菜单，会看到下面的页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201016674.png" alt="image-20240620101637577"></p><p>所谓<strong>簇点链路</strong>，就是<strong>单机调用链路</strong>，是一次请求进入服务后经过的每一个被<code>Sentinel</code>监控的资源。【默认情况下，<code>Sentinel</code>会监控<code>SpringMVC</code>的每一个<code>Endpoint</code>（接口）】</p><p>因此，我们看到<code>/carts</code>这个接口路径就是其中一个簇点，我们可以对其进行限流、熔断、隔离等保护措施。</p><h2 id="3-4-簇点链路"><a href="#3-4-簇点链路" class="headerlink" title="3.4 簇点链路"></a>3.4 簇点链路</h2><p>【默认情况下】Sentinel会把路径作为簇点资源的名称，无法区分路径相同但请求方式不同的接口，查询、删除、修改等都被<strong>识别为一个簇点资源</strong>(我们的SpringMVC接口是按照Restful风格设计，因此购物车的查询、删除、修改等接口全部都是<code>/carts</code>路径)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201019122.png" alt="image-20240620101946062"></p><p>解决方案：我们可以选择打开Sentinel的请求方式前缀，把<code>请求方式 + 请求路径</code>作为簇点资源名</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201020688.png" alt="image-20240620102041605" style="zoom: 50%;"><p>然后，重启服务，通过页面访问购物车的相关接口，可以看到sentinel控制台的簇点链路发生了变化：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201021628.png" alt="image-20240620102128531"></p><h1 id="服务保护方案–Sentinel四大解决方案"><a href="#服务保护方案–Sentinel四大解决方案" class="headerlink" title="==服务保护方案–Sentinel四大解决方案=="></a>==服务保护方案–Sentinel四大解决方案==</h1><p>我们以微服务-黑马商城中的cart-service购物车模块为例：</p><h1 id="1-请求限流"><a href="#1-请求限流" class="headerlink" title="1.请求限流"></a>1.请求限流</h1><p>前提：我们已经将cart-service购物车模块和sentinel建立连接，我们就可以通过控制台进行操作</p><h2 id="1-1-控制台设置限流QPS"><a href="#1-1-控制台设置限流QPS" class="headerlink" title="1.1 控制台设置限流QPS"></a>1.1 控制台设置限流QPS</h2><p>把查询购物车列表这个簇点资源的流量限制在了每秒6个，也就是最大QPS为6.</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201025052.png" alt="image-20240620102556908"></p><h2 id="1-2-Jmeter测试"><a href="#1-2-Jmeter测试" class="headerlink" title="1.2 Jmeter测试"></a>1.2 Jmeter测试</h2><p>【可参考笔记-jmeter快速入门】</p><p>我们利用Jemeter做限流测试，我们每秒发出10个请求：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201028517.png" alt="image-20240620102852440" style="zoom:67%;"><p>最终在sentinel监控结果如下：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201030005.png" alt="image-20240620103024899" style="zoom:67%;"><p>可以看出<code>GET:/carts</code>这个接口的通过QPS稳定在6附近，而拒绝的QPS在4附近，符合我们的预</p><h1 id="2-线程隔离"><a href="#2-线程隔离" class="headerlink" title="2.线程隔离"></a>2.线程隔离</h1><h2 id="2-1-控制台设置并发线程数"><a href="#2-1-控制台设置并发线程数" class="headerlink" title="2.1 控制台设置并发线程数"></a>2.1 控制台设置并发线程数</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201044237.png" alt="image-20240620104405158"></p><h2 id="2-2-Jmeter测试"><a href="#2-2-Jmeter测试" class="headerlink" title="2.2 Jmeter测试"></a>2.2 Jmeter测试</h2><p>【可参考笔记-jmeter快速入门】</p><p>我们利用Jemeter测试，每秒发送100个请求：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201044411.png" alt="image-20240620104448371"></p><p>最终在sentinel监控结果如下：</p><p>进入查询购物车的请求每秒大概在100，而在查询商品时却只剩下每秒10左右，符合我们的预期。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201045455.png" alt="image-20240620104557342"></p><p>此时如果我们通过页面访问购物车的其它接口，例如添加购物车、修改购物车商品数量，发现不受影响：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201046905.png" alt="image-20240620104632824"></p><p>利用线程隔离对查询购物车业务进行隔离，保护了购物车服务的其它接口。由于查询商品的功能耗时较高（我们模拟了500毫秒延时），再加上线程隔离限定了线程数为5，导致接口吞吐能力有限，最终QPS只有10左右。这就导致了几个问题：</p><p>第一，超出的QPS上限的请求就只能抛出异常，从而导致购物车的查询失败。但从业务角度来说，即便没有查询到最新的商品信息，购物车也应该展示给用户，用户体验更好。也就是给查询失败设置一个<strong>降级处理</strong>逻辑【fallback快速失败】。</p><p>第二，由于查询商品的延迟较高（模拟的500ms），从而导致查询购物车的响应时间也变的很长。这样不仅拖慢了购物车服务，消耗了购物车服务的更多资源，而且用户体验也很差。对于商品服务这种不太健康的接口，我们应该<strong>直接停止调用</strong>，直接走降级逻辑，避免影响到当前服务。也就是将商品查询接口<strong>熔断</strong>。</p><h1 id="3-快速失败-Fallback-后备方案"><a href="#3-快速失败-Fallback-后备方案" class="headerlink" title="3.快速失败-Fallback(后备方案)"></a>3.快速失败-Fallback(后备方案)</h1><p>触发限流或熔断后的请求不一定要直接报错，也可以返回一些默认数据或者友好提示，用户体验会更好。</p><h2 id="3-1-OpenFeign的Fallback两种配置方式"><a href="#3-1-OpenFeign的Fallback两种配置方式" class="headerlink" title="3.1 OpenFeign的Fallback两种配置方式"></a>3.1 OpenFeign的Fallback两种配置方式</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201349492.png" alt="image-20240620134907425"></p><h2 id="3-2-方式二举例"><a href="#3-2-方式二举例" class="headerlink" title="3.2 方式二举例"></a>3.2 方式二举例</h2><h3 id="3-2-1-yml导入依赖"><a href="#3-2-1-yml导入依赖" class="headerlink" title="3.2.1 yml导入依赖"></a>3.2.1 yml导入依赖</h3><p>修改cart-service模块的application.yml文件，开启Feign的sentinel功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: true # 开启feign对sentinel的支持</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201048318.png" alt="image-20240620104846227" style="zoom:50%;"><h3 id="3-2-2-编写降级处理类"><a href="#3-2-2-编写降级处理类" class="headerlink" title="3.2.2 编写降级处理类"></a>3.2.2 编写降级处理类</h3><p>在hm-api模块中给<code>ItemClient</code>定义降级处理类，实现<code>FallbackFactory</code></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201441819.png" alt="image-20240620144115712"></p><h3 id="3-2-3-注入bean"><a href="#3-2-3-注入bean" class="headerlink" title="3.2.3 注入bean"></a>3.2.3 注入bean</h3><p>在<code>hm-api</code>模块中的<code>com.hmall.api.config.DefaultFeignConfig</code>类中将<code>ItemClientFallback</code>注册为一个<code>Bean</code>：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201442473.png" alt="image-20240620144206407"></p><h3 id="3-2-4-给对应Openfeign添加属性"><a href="#3-2-4-给对应Openfeign添加属性" class="headerlink" title="3.2.4 给对应Openfeign添加属性"></a>3.2.4 给对应Openfeign添加属性</h3><p>在<code>hm-api</code>模块中的<code>ItemClient</code>接口中使用<code>ItemClientFallbackFactory</code>：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201442275.png" alt="image-20240620144229206"></p><h3 id="3-2-5-Jmeter测试"><a href="#3-2-5-Jmeter测试" class="headerlink" title="3.2.5 Jmeter测试"></a>3.2.5 Jmeter测试</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201443564.png" alt="image-20240620144351522"></p><p>但是未被限流的请求延时依然很高：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201444342.png" alt="image-20240620144417302"></p><p>导致最终的平局响应时间较长。</p><h1 id="4-服务熔断"><a href="#4-服务熔断" class="headerlink" title="4.服务熔断"></a>4.服务熔断</h1><p>查询商品的RT较高（模拟的500ms），从而导致查询购物车的RT也变的很长。这样不仅拖慢了购物车服务，消耗了购物车服务的更多资源，而且用户体验也很差。</p><p>对于商品服务这种不太健康的接口，我们应该停止调用，直接走降级逻辑，避免影响到当前服务。也就是将商品查询接口<strong>熔断</strong>。当商品服务接口恢复正常后，再允许调用。这其实就是<strong>断路器</strong>的工作模式了。</p><p>Sentinel中的断路器不仅可以统计某个接口的<strong>慢请求比例</strong>，还可以统计<strong>异常请求比例</strong>。当这些比例超出阈值时，就会<strong>熔断</strong>该接口，即拦截访问该接口的一切请求，降级处理；当该接口恢复正常时，再放行对于该接口的请求。</p><p>断路器的工作状态切换有一个状态机来控制：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201448853.png" alt="image-20240620144802785"></p><p>状态机包括三个状态：</p><ul><li><strong>closed</strong>：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态</li><li><strong>open</strong>：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态持续一段时间后会进入half-open状态</li><li><strong>half-open</strong>：半开状态，放行一次请求，根据执行结果来判断接下来的操作。 <ul><li>请求成功：则切换到closed状态【正常状态】</li><li>请求失败：则切换到open状态【熔断状态】</li></ul></li></ul><h2 id="4-1-控制台设置熔断规则"><a href="#4-1-控制台设置熔断规则" class="headerlink" title="4.1 控制台设置熔断规则"></a>4.1 控制台设置熔断规则</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201426870.png" alt="image-20240620142613725"></p><p>这种是按照慢调用比例来做熔断，上述配置的含义是：</p><ul><li>RT超过200毫秒的请求调用就是慢调用</li><li>统计最近1000ms内的最少5次请求，如果慢调用比例不低于0.5，则触发熔断</li><li>熔断持续时长20s</li></ul><h2 id="4-2-Jmeter测试"><a href="#4-2-Jmeter测试" class="headerlink" title="4.2 Jmeter测试"></a>4.2 Jmeter测试</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201450270.png" alt="image-20240620145038189"></p><p>此时整个购物车查询服务的平均RT影响不大：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406201450001.png" alt="image-20240620145054930"></p><h1 id="Sentinel服务保护总结"><a href="#Sentinel服务保护总结" class="headerlink" title="==Sentinel服务保护总结=="></a>==Sentinel服务保护总结==</h1><h1 id="1-具体使用操作"><a href="#1-具体使用操作" class="headerlink" title="1.具体使用操作"></a>1.具体使用操作</h1><ul><li>1.启动sentinel控制台(jar包)</li></ul><p>到这已经可以<strong>打开sentinel控制台</strong></p><ul><li>2.具体使用的微服务pom.xml文件导入sentinel依赖</li><li>3.具体使用的微服务yml文件配置sentinel控制台信息</li></ul><p>到这已经可以在<strong>sentinel控制台查看</strong></p><p><strong>具体的四大解决方案【1请求限流，2线程隔离，4服务熔断在平台设置就行】</strong></p><ul><li><p>1和2.控制台通过具体微服务-簇点链路的流控按钮设置请求限流(设置QPS)和线程隔离(设置并发线程数)</p></li><li><p>3.fallback快速失败需要编写代码(Openfeign所在微服务进行编写)</p><ul><li><p>①在Openfeign所在微服务编写降级处理类实现FallbackFactory重写create方法里面将ItemClient被其他微服务调用的方法都重写处理(后备方案，可以是信息提示等)</p></li><li><p>②将降级处理类加入bean</p></li><li><p>③在微服务ItemClient的FeignClient注解添加属性fallbackFactory=①降级处理类</p></li></ul></li></ul><ul><li>4.控制台通过具体微服务-簇点链路的熔断按钮设置熔断策略</li></ul><h1 id="2-四大解决方案总结"><a href="#2-四大解决方案总结" class="headerlink" title="2.四大解决方案总结"></a>2.四大解决方案总结</h1><p>1.请求限流(限制访问量)和线程隔离(限制线程数，不让此服务占用所有资源)相当于对单个微服务调用做保护</p><p>2.快速失败(如果请求限流/线程隔离资源没了，那就可以走这个fallback后备方案，不至于直接抛出异常)和服务熔断(提前对这个服务判断如果经常出异常，那就熔断)是在微服务调用其他微服务情况时候做保护</p><p>如果比喻成买火车票乘车：</p><p>1.请求限流就是限制购买人数</p><p>2.线程隔离就是车次分到A候车厅(六个通道)和B候车厅(四个通道)，如果B满了或者速度太慢可以去A候车厅的通道，不至于直接瘫痪。</p><p>3.服务熔断就是我提前预测哪里经常会出问题，我可以一段时间内不让大家去那候车可以去备用候车厅；如果一段时间后，我可以测试走一个人如果通那就打开去候车，如果不行那就继续用备用候车厅。</p><p>4.快速失败就是如果这个通道走不了，那你不能让乘客不上车啊，所有可以大喇叭提示等待或者提供备用候车厅上车</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务拆分容易出现的问题&quot;&gt;&lt;a href=&quot;#微服务拆分容易出现的问题&quot; class=&quot;headerlink&quot; title=&quot;==微服务拆分容易出现的问题==&quot;&gt;&lt;/a&gt;==微服务拆分容易出现的问题==&lt;/h1&gt;&lt;h1 id=&quot;1-雪崩问题&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
      <category term="微服务" scheme="https://Larkkkkkkk.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="https://larkkkkkkk.github.io/2024/04/25/MybatisPlus/"/>
    <id>https://larkkkkkkk.github.io/2024/04/25/MybatisPlus/</id>
    <published>2024-04-25T08:17:17.000Z</published>
    <updated>2024-08-24T09:15:47.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Mybatis介绍"><a href="#1-Mybatis介绍" class="headerlink" title="1.Mybatis介绍"></a>1.Mybatis介绍</h1><p>在日常开发中应该能发现，单表的CRUD功能代码重复度很高，也没有什么难度。而这部分代码量往往比较大，开发起来比较费时。</p><p>因此，目前企业中都会使用一些组件来简化或省略单表的CRUD开发工作。目前在国内使用较多的一个组件就是MybatisPlus。</p><p>官方网站如下：</p><p>当然，MybatisPlus不仅仅可以简化单表操作，而且还对Mybatis的功能有很多的增强。</p><h1 id="Mybatis——-基础使用"><a href="#Mybatis——-基础使用" class="headerlink" title="==Mybatis——-基础使用=="></a>==Mybatis——-基础使用==</h1><h2 id="1-1-pom-xml引入依赖"><a href="#1-1-pom-xml引入依赖" class="headerlink" title="1.1 pom.xml引入依赖"></a>1.1 pom.xml引入依赖</h2><p>MybatisPlus提供了starter，实现了自动Mybatis以及MybatisPlus的自动装配功能，坐标如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251623535.png" alt="image-20240425162339464"></p><p>如图所示，由于这个starter包含对mybatis的自动装配，因此完全可以替换掉Mybatis的starter</p><h2 id="1-2-定义Mapper层"><a href="#1-2-定义Mapper层" class="headerlink" title="1.2 定义Mapper层"></a>1.2 定义Mapper层</h2><p>为了简化单表CRUD，MybatisPlus提供了一个基础的<code>BaseMapper</code>接口，其中已经实现了单表的CRUD：</p><p>我们直接==实现BaseMapper接口==即可</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251730201.png" alt="image-20240425173015132"></p><h2 id="1-3-对比"><a href="#1-3-对比" class="headerlink" title="1.3 对比"></a>1.3 对比</h2><p>我们可以看出这样直接调用简单的CRUD方法即可，就不用自己去mapper层写方法和对应xml文件了。==只需要继承BaseMapper就能省去所有的单表CRUD==。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251731200.png" alt="image-20240425173132151"></p><h2 id="1-4-底层实现原理"><a href="#1-4-底层实现原理" class="headerlink" title="1.4 底层实现原理"></a>1.4 底层实现原理</h2><p>刚才①引入依赖和②mapper层继承BaseMapper接口就可以进行CRUD，那MP怎么知道是哪张表？表中有哪些字段？</p><p>这也是因为UserMapper在继承BaseMapper的时候指定了一个泛型和数据库对应的实体类</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556323.png" alt="image-20240425174306575"></p><p>MybatisPlus就是根据PO实体的信息来推断出表的信息，从而生成SQL的。默认情况下：</p><ul><li>MybatisPlus会把PO实体的类名驼峰转下划线作为表名</li><li>MybatisPlus会把PO实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li><li>MybatisPlus会把名为id的字段作为主键</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251748690.png" alt="image-20240425174818635"></p><p>但很多情况下，默认的实现与实际场景不符，因此MybatisPlus提供一些注解便于我们声明表信息</p><h1 id="2-常见注解-解决po和mysql字段映射"><a href="#2-常见注解-解决po和mysql字段映射" class="headerlink" title="2.常见注解==解决po和mysql字段映射=="></a>2.常见注解==解决po和mysql字段映射==</h1><p>==如果不按照约定的话，需要使用以下三种注解来解决：==  </p><p>MybatisPlus中比较常用的几个注解如下：</p><p>•<strong>@TableName</strong>：用来指定表名</p><p>•<strong>@TableId</strong>：用来指定表中的<strong>主键字段</strong>信息</p><p>•<strong>@TableField</strong>：用来指定表中的<strong>普通字段</strong>信息 </p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556542.png" alt="image-20240425175502493"></p><p>其中，具体的细节如图所示：==使用查看==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556898.png" alt="image-20240425175807030"></p><h2 id="2-1-TableName"><a href="#2-1-TableName" class="headerlink" title="2.1 @TableName"></a>2.1 @TableName</h2><ul><li>描述：表名注解，标识实体类对应的表</li><li>使用位置：实体类</li></ul><p>所有属性:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251805672.png" alt="image-20240425180531600"></p><h2 id="2-2-TableId"><a href="#2-2-TableId" class="headerlink" title="2.2 @TableId"></a>2.2 @TableId</h2><ul><li>描述：主键注解，标识实体类中的主键字段</li><li>使用位置：实体类的主键字段</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556871.png" alt="image-20240425180555143"></p><p>其中type=IdType.xxxx取值范围：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556553.png" alt="image-20240425180718677" style="zoom:67%;"><h2 id="2-3-TableField"><a href="#2-3-TableField" class="headerlink" title="2.3 @TableField"></a>2.3 @TableField</h2><p>描述：普通字段注解</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556013.png" alt="image-20240425180842453"></p><h1 id="3-yml常见配置"><a href="#3-yml常见配置" class="headerlink" title="3.yml常见配置"></a>3.yml常见配置</h1><p>在application.yml文件配置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251719086.png" alt="image-20240425171943982"></p><h1 id="Mybatis——-核心功能"><a href="#Mybatis——-核心功能" class="headerlink" title="==Mybatis——-核心功能=="></a>==Mybatis——-核心功能==</h1><p>刚才都是以id为条件的简单CRUD,一些复杂的SQL语句就需要用到一些高级功能。</p><h1 id="1-条件构造器-提供复杂where语句"><a href="#1-条件构造器-提供复杂where语句" class="headerlink" title="1.条件构造器==提供复杂where语句=="></a>1.条件构造器==提供复杂where语句==</h1><p>修改、删除、查询的SQL语句都需要<strong>指定where条件</strong></p><p>因此BaseMapper中提供的相关方法除了以<code>id</code>作为<code>where</code>条件以外，还支持更加复杂的<code>where</code>条件。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261556460.png" alt="image-20240425181511109"></p><p>参数中的<code>Wrapper</code>就是条件构造的抽象类，其下有很多默认实现，继承关系如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251813468.png" alt="image-20240425181331409"></p><p>其中，<code>Wrapper</code>的子类<code>AbstractWrapper</code>提供了where中包含的所有条件构造方法：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557411.png" alt="image-20240425181538417"></p><p>而QueryWrapper在AbstractWrapper的基础上拓展了一个select方法，允许指定查询字段：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251815330.png" alt="image-20240425181553298"></p><p>而UpdateWrapper在AbstractWrapper的基础上拓展了一个set方法，允许指定SQL中的SET部分：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404251816541.png" alt="image-20240425181601512"></p><h2 id="1-1-QueryWrapper"><a href="#1-1-QueryWrapper" class="headerlink" title="1.1 QueryWrapper"></a>1.1 QueryWrapper</h2><p>==主要对where语句的条件进行设置==</p><p>对于查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id,username,info,balance</span><br><span class="line">from user</span><br><span class="line">where name like &quot;%o%&quot; AND balance &gt;&#x3D; 1000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557952.png" alt="image-20240426152253324"></p><p>对于修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update </span><br><span class="line">set balance&#x3D;2000</span><br><span class="line">where username&#x3D;&#39;Jack&#39;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261525035.png" alt="image-20240426152523969"></p><h2 id="1-2-UpdateWrapper"><a href="#1-2-UpdateWrapper" class="headerlink" title="1.2 UpdateWrapper"></a>1.2 UpdateWrapper</h2><p>==弥补BaseMapper中update()只能写 set Xxx==，提出的updatewrapper可以写成set balance=balance-xx这种形式</p><p>以更新多个id为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update user</span><br><span class="line">set balance&#x3D;balance-200</span><br><span class="line">where id in(1,2,3)</span><br></pre></td></tr></table></figure><p>这个set的赋值结果是基于字段现有值，这时候需要使用UpdateWrapper中的==setSql功能：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557927.png" alt="image-20240426153602036"></p><h2 id="1-3-LambdaQueryWrapper"><a href="#1-3-LambdaQueryWrapper" class="headerlink" title="1.3 LambdaQueryWrapper"></a>1.3 LambdaQueryWrapper</h2><p>==1.1和1.2会在构造条件时候写死字段名称==，现在1.3就可以通过变量的getter方法结合反射获取</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557838.png" alt="image-20240426154148926"></p><h1 id="2-自定义SQL"><a href="#2-自定义SQL" class="headerlink" title="2.自定义SQL"></a>2.自定义SQL</h1><p>1.2中演示了一个修改余额-200的时候将sql维护应该放在持久层，而不是业务层：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261543946.png" alt="image-20240426154345876"></p><p>==利用Wrapper生成查询条件，然后再结合mapper自定义xml文件编写sql==</p><h2 id="2-1-原位置变化"><a href="#2-1-原位置变化" class="headerlink" title="2.1 原位置变化"></a>2.1 原位置变化</h2><p>以刚才案例为例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261545351.png" alt="image-20240426154550302"></p><h2 id="2-2-Mapper层方法定义"><a href="#2-2-Mapper层方法定义" class="headerlink" title="2.2 Mapper层方法定义"></a>2.2 Mapper层方法定义</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557154.png" alt="image-20240426154750747"></p><h2 id="2-3-写sql语句"><a href="#2-3-写sql语句" class="headerlink" title="2.3 写sql语句"></a>2.3 写sql语句</h2><p>方式一：直接在mapper的方法上写@Select方法</p><p>方式二：在mapper.xml文件中写动态sql</p><p>和以往的区别就是：==where语句直接用${ew.customSqlSegment}替换==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557847.png" alt="image-20240426154956395"></p><p><strong>总结如下</strong>：</p><p>与以往的变化就是我传入参数和where判断条件，mapper方法加一个@Param(“ew”)标志，然后sql里面就直接用${ew.customSqlSegment}替换</p><h1 id="3-Service接口"><a href="#3-Service接口" class="headerlink" title="3.Service接口"></a>3.Service接口</h1><p>通用接口为==Iservice==，默认实现为==ServiceImpl==。其中封装方法可以分为：</p><ul><li><code>save</code>：新增</li><li><code>remove</code>：删除</li><li><code>update</code>：更新</li><li><code>get</code>：查询单个结果</li><li><code>list</code>：查询集合结果</li><li><code>count</code>：计数</li><li><code>page</code>：分页查询</li></ul><h2 id="3-1-五大类方法解释"><a href="#3-1-五大类方法解释" class="headerlink" title="3.1 五大类方法解释"></a>3.1 五大类方法解释</h2><h3 id="3-1-1-新增-save"><a href="#3-1-1-新增-save" class="headerlink" title="3.1.1 新增(save)"></a>3.1.1 新增(save)</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261557861.png" alt="image-20240426155746820"></p><h3 id="3-1-2-删除-remove"><a href="#3-1-2-删除-remove" class="headerlink" title="3.1.2 删除(remove)"></a>3.1.2 删除(remove)</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261558520.png" alt="image-20240426155808475"></p><h3 id="3-1-3-修改-update"><a href="#3-1-3-修改-update" class="headerlink" title="3.1.3 修改(update)"></a>3.1.3 修改(update)</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261558839.png" alt="image-20240426155852795"></p><h3 id="3-1-4-查询"><a href="#3-1-4-查询" class="headerlink" title="3.1.4 查询"></a>3.1.4 查询</h3><h4 id="3-4-1-查询一条-get"><a href="#3-4-1-查询一条-get" class="headerlink" title="3.4.1 查询一条(get)"></a>3.4.1 查询一条(get)</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261559663.png" alt="image-20240426155954622"></p><h4 id="3-4-2-查询多条-list"><a href="#3-4-2-查询多条-list" class="headerlink" title="3.4.2 查询多条(list)"></a>3.4.2 查询多条(list)</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261600209.png" alt="image-20240426160001166"></p><h4 id="3-4-3-计数-count"><a href="#3-4-3-计数-count" class="headerlink" title="3.4.3 计数(count)"></a>3.4.3 计数(count)</h4><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261600943.png" alt="image-20240426160025902"></p><h3 id="3-1-5调用mapper层自定义sql"><a href="#3-1-5调用mapper层自定义sql" class="headerlink" title="3.1.5调用mapper层自定义sql"></a>3.1.5调用mapper层自定义sql</h3><p>通过getBaseMapper获取Mapper，然后就mapper.自定义sql()</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261601255.png" alt="image-20240426160126219"></p><h2 id="3-6-基本用法"><a href="#3-6-基本用法" class="headerlink" title="3.6 基本用法"></a>3.6 基本用法</h2><p>现在的变化就是，==拿现成的直接用==:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261605501.png" alt="image-20240426160527425"></p><p>具体操作就是：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261606835.png" alt="image-20240426160603797"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--保证自定义mapper继承basemapper 【底层使用时候直接还是调用basemapper的方法】</span><br></pre></td></tr></table></figure><h2 id="3-7-快速搭建-直接看"><a href="#3-7-快速搭建-直接看" class="headerlink" title="3.7 快速搭建(直接看)"></a>3.7 快速搭建(直接看)</h2><p>==1.业务简单的话直接调用mp方法；==</p><p>==2.业务复杂的话就跟原来方式一样，controller调用service方法，然后在mapper层写具体sql==</p><h3 id="3-7-1-简单业务-直接调用mp方法"><a href="#3-7-1-简单业务-直接调用mp方法" class="headerlink" title="3.7.1 简单业务-直接调用mp方法"></a>3.7.1 简单业务-直接调用mp方法</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261703070.png" alt="image-20240426170341983"></p><h3 id="3-7-2-复杂业务-原始模式优化"><a href="#3-7-2-复杂业务-原始模式优化" class="headerlink" title="3.7.2 复杂业务-原始模式优化"></a>3.7.2 复杂业务-原始模式优化</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261711105.png" alt="image-20240426171113039"></p><p>之后调用mapper层的sql：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261707032.png" alt="image-20240426170626547"></p><h2 id="3-8-Lambda查询-添加属性"><a href="#3-8-Lambda查询-添加属性" class="headerlink" title="3.8 Lambda查询[添加属性]"></a>3.8 Lambda查询[添加属性]</h2><p>就是在基本的方法上(属性，最新值)再多使用一个属性(==判断条件==，属性，最新值)</p><p>这样就可以把动态sql里面<if>标签这种麻烦的操作放在serviceImpl类上进行操作</if></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404261752712.png" alt="image-20240426175243646"></p><h2 id="3-9-批量新增"><a href="#3-9-批量新增" class="headerlink" title="3.9 批量新增"></a>3.9 批量新增</h2><p>三种方案：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404272308413.png" alt="image-20240427230857329"></p><p>最推荐第三种我们在yml配置文件中添加&amp;rewriteBatchedStatements=true</p><h1 id="Mybatis——-扩展功能"><a href="#Mybatis——-扩展功能" class="headerlink" title="==Mybatis——-扩展功能=="></a>==Mybatis——-扩展功能==</h1><h1 id="1-代码生成"><a href="#1-代码生成" class="headerlink" title="1.代码生成"></a>1.代码生成</h1><p>在使用MybatisPlus以后，基础的<code>Mapper</code>、<code>Service</code>、<code>PO</code>代码相对固定，重复编写也比较麻烦</p><p>==为了方便生成基本固定的代码==</p><h2 id="1-1-下载插件"><a href="#1-1-下载插件" class="headerlink" title="1.1 下载插件"></a>1.1 下载插件</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281818769.png" alt="image-20240428181825670"></p><h2 id="1-2-配置数据库"><a href="#1-2-配置数据库" class="headerlink" title="1.2 配置数据库"></a>1.2 配置数据库</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281820612.png" alt="image-20240428182003520"></p><h2 id="1-3-配置信息生成代码"><a href="#1-3-配置信息生成代码" class="headerlink" title="1.3 配置信息生成代码"></a>1.3 配置信息生成代码</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281823255.png" alt="image-20240428182342159"></p><h2 id="1-4查看代码"><a href="#1-4查看代码" class="headerlink" title="1.4查看代码"></a>1.4查看代码</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281824739.png" alt="image-20240428182458664"></p><h1 id="2-静态工具—-Db"><a href="#2-静态工具—-Db" class="headerlink" title="2.静态工具—-Db"></a>2.静态工具—-Db</h1><p>有一种可能就是有AService用来查询用户和BService用来查询地址，他们都实现了Iservice可以实现一些简单的CRUD。现在需要查询用户和对应的地址，就可能AService调用BService，然后BService也要调用AService就会导致@Autowired时候<strong>循环依赖</strong></p><p>MybatisPlus提供一个静态工具类:==Db==，==就是用来解决多个service层互相调用导致的循环依赖==，其中一些静态方法与IService中的方法签名基本一致，也可以帮助我们实现CRUD的功能</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404281835860.png" alt="image-20240428183527812"></p><p>在使用的时候，就可以直接像平时书写习惯直接调用</p><h1 id="3-逻辑删除"><a href="#3-逻辑删除" class="headerlink" title="3.逻辑删除"></a>3.逻辑删除</h1><p>多表查询时删除A表的数据同时也会删除B数据，但是B里面有一些比较重要的数据我们不想删除。因此，我们采用==逻辑删除==的方案：</p><p>可以考虑在表中添加一个字段flag(标记数据是否被删除)，这样我们在删除数据的时候还需要将flag设置为true，如果在查询数据的时候还需要添加一个and flag=xxx的条件。<strong>这样的话就会让之前的查询和删除逻辑都要跟着变化，非常麻烦。</strong></p><p>因此，MybatisPlus就添加了对逻辑删除的支持。</p><blockquote><p>只有MybatisPlus生成的SQL语句才支持自动的逻辑删除【就是直接拿来用的哪些CRUD方法】</p><p>自定义SQL就需要自己手动处理逻辑删除</p></blockquote><h2 id="3-1-配置逻辑删除"><a href="#3-1-配置逻辑删除" class="headerlink" title="3.1 配置逻辑删除"></a>3.1 配置逻辑删除</h2><p>我们对于Address表添加一个字段deleted用于判断是否删除：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291709199.png" alt="image-20240429170953086"></p><h2 id="3-2-底层实现"><a href="#3-2-底层实现" class="headerlink" title="3.2 底层实现"></a>3.2 底层实现</h2><p>我们在使用MybatisPlus自己的CRUD方法时候支持自动逻辑删除：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291211605.png" alt="image-20240429121132491"></p><p>具体的两个语法操作：</p><p>1.删除的时候我们就会将delete更改为一个update语句拼接一个deleted=false未被删除的判断</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291715300.png" alt="image-20240429171532251"></p><p>2.查询的时候我们就会在where语句拼接一个deleted=false未被删除的判断</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291715596.png" alt="image-20240429171544562"></p><h2 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h2><p>开启逻辑删除功能之后，可以像普通删除一样做CRUD，基本不用考虑代码逻辑功能问题。</p><p>但是，逻辑删除本身也有缺点：</p><ul><li>会导致数据库表垃圾数据越来越多，从而影响查询效率</li><li>sql中全都需要对逻辑删除字段做判断，影响查询效率</li></ul><p>==因此，不太建议采用逻辑删除功能，如果数据不能删除，可以采用数据迁移到其他表的办法==</p><h1 id="4-枚举处理器-字段有多个值"><a href="#4-枚举处理器-字段有多个值" class="headerlink" title="4.枚举处理器(字段有多个值)"></a>4.枚举处理器(字段有多个值)</h1><p>对某个字段(0是正常，1是不正常)判断时候如果写==1这样很不美观，并且如果0和1的含义修改了要修改很多地方，因此我们可以使用枚举(很像c语言的参数宏定义)来处理</p><p>针对于之前案例User类的status属性，就可以这样修改：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291637868.png" alt="image-20240429163735826"></p><p>在原始的mybatis底层帮我们把Java中的类型和数据库的类型一一对应，但是对于枚举类型和Json类型无法解决。因此mybatisplus针对枚举和Json类型提出了新的处理器：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291643419.png" alt="image-20240429164303308"></p><h2 id="4-1-配置枚举处理器"><a href="#4-1-配置枚举处理器" class="headerlink" title="4.1 配置枚举处理器"></a>4.1 配置枚举处理器</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291640002.png" alt="image-20240429164034948"></p><h2 id="4-2-定义枚举类"><a href="#4-2-定义枚举类" class="headerlink" title="4.2 定义枚举类"></a>4.2 定义枚举类</h2><p>这样就可以将1和2分别代表正常和冻结，我们在使用的时候只需要调用UserStatus.NORMAL就可以对比了</p><p>此外，@EnumValue可以保证我们可以按照value的类型和数据库一一对应；而@JsonValue可以保证我们输出给前端的时候可以将描述词/对应值返回(而不是返回NORMAL/FORZEN这种类型)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291652755.png" alt="image-20240429165234689"></p><h2 id="4-3-修改PO和VO类型"><a href="#4-3-修改PO和VO类型" class="headerlink" title="4.3 修改PO和VO类型"></a>4.3 修改PO和VO类型</h2><p>主要是将类型Integer改为UserStatus枚举类</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291655394.png" alt="image-20240429165517353"></p><h2 id="4-4-修改具体逻辑位置"><a href="#4-4-修改具体逻辑位置" class="headerlink" title="4.4 修改具体逻辑位置"></a>4.4 修改具体逻辑位置</h2><p>原来位置是用数字比对，可读性太差，现在就可以优雅地使用枚举类</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291656672.png" alt="image-20240429165653581"></p><h1 id="5-Json类型处理器-字段是Json类型"><a href="#5-Json类型处理器-字段是Json类型" class="headerlink" title="5.Json类型处理器(字段是Json类型)"></a>5.Json类型处理器(字段是Json类型)</h1><p>如果实体类有一个属性是Json类型，那么Java中的Json类型和数据库中的匹配就有问题：<br>就跟4枚举处理器里面将的，MybatisPlus在Myabtis的基础上提供了Json类型处理器</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404291721065.png" alt="image-20240429172137951" style="zoom: 67%;"><h2 id="5-1-配置Json类型处理器"><a href="#5-1-配置Json类型处理器" class="headerlink" title="5.1 配置Json类型处理器"></a>5.1 配置Json类型处理器</h2><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301426197.png" alt="image-20240430142629145" style="zoom: 67%;"><p>因为没有提供在application.yml配置的方式，只能通过给实体类属性添加注解</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301424410.png" alt="image-20240430142453316"></p><h2 id="5-2-测试查看"><a href="#5-2-测试查看" class="headerlink" title="5.2 测试查看"></a>5.2 测试查看</h2><p>info字段已经改成了一个Json类型</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301427801.png" alt="image-20240430142717732"></p><h1 id="6-配置加密"><a href="#6-配置加密" class="headerlink" title="6.配置加密"></a>6.配置加密</h1><p>目前我们配置文件中很多参数都是明文存储，如果开发人员跑路很容易导致敏感信息泄露。</p><p>MyBatisPlus从3.3.2版本开始提供了一个==基于AES算法的加密工具==，帮助我们对配置中的敏感信息做加密处理。</p><h2 id="6-1-生成秘钥"><a href="#6-1-生成秘钥" class="headerlink" title="6.1 生成秘钥"></a>6.1 生成秘钥</h2><p>以数据库的账户密码为例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301432687.png" alt="image-20240430143223630"></p><h2 id="6-2-配置秘钥"><a href="#6-2-配置秘钥" class="headerlink" title="6.2 配置秘钥"></a>6.2 配置秘钥</h2><p>在application.yml文件中修改：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301435095.png" alt="image-20240430143508047"></p><h2 id="6-3-测试"><a href="#6-3-测试" class="headerlink" title="6.3 测试"></a>6.3 测试</h2><p>测试类：在测试类的注解上配置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301438113.png" alt="image-20240430143859062"></p><p>启动项目：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301440705.png" alt="image-20240430144043661"></p><h1 id="Mybatis——-插件功能"><a href="#Mybatis——-插件功能" class="headerlink" title="==Mybatis——-插件功能=="></a>==Mybatis——-插件功能==</h1><p>其实MybatisPlus提供了多个插件，而我们重点关注分页插件</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301647585.png" alt="image-20240430164735500"></p><h1 id="1-分页插件"><a href="#1-分页插件" class="headerlink" title="1.分页插件"></a>1.分页插件</h1><h2 id="1-1-配置分页功能"><a href="#1-1-配置分页功能" class="headerlink" title="1.1 配置分页功能"></a>1.1 配置分页功能</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301523505.png" alt="image-20240430152339416"></p><h2 id="1-2-测试简单分页"><a href="#1-2-测试简单分页" class="headerlink" title="1.2 测试简单分页"></a>1.2 测试简单分页</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301522267.png" alt="image-20240430152253190"></p><h2 id="1-3-测试复杂分页"><a href="#1-3-测试复杂分页" class="headerlink" title="1.3 测试复杂分页"></a>1.3 测试复杂分页</h2><p>针对于1.2的话其实就是更针对业务逻辑：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301643474.png" alt="image-20240430164354320"></p><h1 id="Mybatis——-使用操作"><a href="#Mybatis——-使用操作" class="headerlink" title="==Mybatis——-使用操作=="></a>==Mybatis——-使用操作==</h1><p>1.可以创建好数据库表</p><p>2.根据mybatis插件生成:</p><p>​    po(可以添加注解保证数据库和Java实体类对应，对于枚举和Json类型都有新推出的处理器解决)，</p><p>​    service(extends IService<Xxx>)，</Xxx></p><p>​    serviceImpl( extends ServiceImpl&lt;XxxMapper, Xxx&gt; implements IAddressService)， [引入mapper方法：①注入xxxMapper ②直接getBaseMapper]</p><p>​    controller，</p><p>​    mapper(extends BaseMapper<Xxx>)</Xxx></p><p>3.按照原有的设计思路写代码：</p><p>​    3.1 简单的就直接调用service的CRUD方法【service接口默认也有实现类ServiceImpl&lt;XXXMapper,实体类&gt;，这样也说明底层还是直接调用BaseMapper方法】</p><p>​    3.2 复杂的话，①xml文件按照原来的动态sql书写</p><p>​    3.3 复杂的话，②使用xxxMapper.条件构造器[创建复杂where语句]</p><p>​    3.4 复杂的话，③使用lambdaQuery()/lambdaUpdate()添加一些where语句  –新特性【好用】</p><p>【只不过在书写过程中有很多好用的扩展功能】</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Mybatis介绍&quot;&gt;&lt;a href=&quot;#1-Mybatis介绍&quot; class=&quot;headerlink&quot; title=&quot;1.Mybatis介绍&quot;&gt;&lt;/a&gt;1.Mybatis介绍&lt;/h1&gt;&lt;p&gt;在日常开发中应该能发现，单表的CRUD功能代码重复度很高，也没有什么
      
    
    </summary>
    
    
    
      <category term="MybatisPlus" scheme="https://Larkkkkkkk.github.io/tags/MybatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="https://larkkkkkkk.github.io/2024/04/17/Elasticsearch/"/>
    <id>https://larkkkkkkk.github.io/2024/04/17/Elasticsearch/</id>
    <published>2024-04-17T13:58:55.000Z</published>
    <updated>2024-06-23T09:37:13.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-使用场景"><a href="#0-使用场景" class="headerlink" title="0.使用场景"></a>0.使用场景</h1><p>数据库的模糊搜索功能单一，匹配条件非常苛刻，必须恰好包含用户搜索的关键字。</p><p>而在搜索引擎中，用户输入出现个别错字，或者用拼音搜索、同义词搜索都能正确匹配到数据。</p><p>综上，在面临海量数据的搜索，或者有一些复杂搜索需求的时候，推荐使用专门的搜索引擎来实现搜索功能。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405171647803.png" alt="image-20240517164744539"></p><h2 id="0-1-全文搜索"><a href="#0-1-全文搜索" class="headerlink" title="0.1 全文搜索"></a>0.1 全文搜索</h2><p>Elasticsearch 凭借其强大、可扩展和快速的搜索功能，在全文搜索场景中表现出色。</p><p>它通常用于支持大型网站和应用程序的搜索功能，允许用户执行复杂的查询并获得<strong>近乎实时的响应</strong>。</p><h2 id="0-2-实时分析"><a href="#0-2-实时分析" class="headerlink" title="0.2 实时分析"></a>0.2 实时分析</h2><p>Elasticsearch 能够实时执行分析，因此适用于跟踪实时数据（如用户活动、交易或传感器输出）的仪表盘。这种能力使企业能够根据最新信息及时做出决策。</p><h2 id="0-3-机器学习"><a href="#0-3-机器学习" class="headerlink" title="0.3 机器学习"></a>0.3 机器学习</h2><p>通过在 X-Pack 中添加机器学习功能，Elasticsearch 可以<strong>自动检测数据中的异常、模式和趋势</strong>。这对于预测分析、个性化和提高运营效率非常有用。</p><h2 id="0-4-地理数据应用"><a href="#0-4-地理数据应用" class="headerlink" title="0.4 地理数据应用"></a>0.4 地理数据应用</h2><p>Elasticsearch 通过地理空间索引和搜索功能支持地理数据。这对于需要管理和可视化地理信息（如地图和基于位置的服务）的应用非常有用，使执行<strong>邻近搜索</strong>和基于位置的数据可视化成为可能。</p><h2 id="0-5-日志和事件数据分析"><a href="#0-5-日志和事件数据分析" class="headerlink" title="0.5 日志和事件数据分析"></a>0.5 日志和事件数据分析</h2><p>企业使用 Elasticsearch 聚合、监控和分析各种来源的日志和事件数据。它是 ELK 堆栈（Elasticsearch、Logstash、Kibana）的关键组件，该堆栈常用于管理系统和应用程序日志，以发现问题并监控系统健康状况。</p><h2 id="0-6-安全信息和事件管理（SIEM）"><a href="#0-6-安全信息和事件管理（SIEM）" class="headerlink" title="0.6 安全信息和事件管理（SIEM）"></a>0.6 安全信息和事件管理（SIEM）</h2><p>Elasticsearch 可用作 SIEM 的工具，帮助企业实时分析安全事件。这对于检测、分析和响应安全事件和漏洞至关重要。</p><p>上述每个用例都利用了 Elasticsearch 的优势（如可扩展性、速度和灵活性）来处理不同的数据类型和复杂的查询，为数据驱动型应用提供了重要价值。</p><h1 id="1-Elasticsearch-ES"><a href="#1-Elasticsearch-ES" class="headerlink" title="1.Elasticsearch(ES)"></a>1.Elasticsearch(ES)</h1><p>ES是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容。</p><p>Elasticsearch结合Kibana，Logstash，beats是一整套技术栈，被叫做==ELK==。经常用来做日志收集、系统监控和状态分析等等：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404301712288.png" alt="image-20240430171212212"></p><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><h3 id="1-1-1-安装elasticsearch"><a href="#1-1-1-安装elasticsearch" class="headerlink" title="1.1.1 安装elasticsearch"></a>1.1.1 安装elasticsearch</h3><p>通过下面的Docker命令即可安装单机版本的elasticsearch：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#先在tar所在目录下打开cmd</span><br><span class="line">docker load -i es.tar</span><br><span class="line"></span><br><span class="line">#创建一个网络【不然kibana不能连接es，踩坑了！！】</span><br><span class="line">docker network create elastic</span><br><span class="line"></span><br><span class="line">#黑马安装：</span><br><span class="line">docker run -d \</span><br><span class="line">  --name es \</span><br><span class="line">  -e &quot;ES_JAVA_OPTS&#x3D;-Xms512m -Xmx512m&quot; \        #配置jvm的内存</span><br><span class="line">  -e &quot;discovery.type&#x3D;single-node&quot; \            #配置运行模式【单点模式&#x2F;集群模式】</span><br><span class="line">  -v es-data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data \   #挂载</span><br><span class="line">  -v es-plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network hm-net \   </span><br><span class="line">  -p 9200:9200 \  #访问http端口</span><br><span class="line">  -p 9300:9300 \  #集群使用</span><br><span class="line">  elasticsearch:7.12.1</span><br><span class="line">  </span><br><span class="line">#csdn安装:</span><br><span class="line">docker run -d --name es -e ES_JAVA_OPTS&#x3D;&quot;-Xms512m -Xmx512m&quot; -e &quot;discovery.type&#x3D;single-node&quot; --privileged --network elastic -p 9200:9200 -p 9300:9300 elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><p>启动之后访问<a href="http://localhost:9200/就可以看到elasticsearch信息：" target="_blank" rel="noopener">http://localhost:9200/就可以看到elasticsearch信息：</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072044725.png" alt="image-20240507204417602" style="zoom:67%;"><h3 id="1-1-2-安装Kibana"><a href="#1-1-2-安装Kibana" class="headerlink" title="1.1.2 安装Kibana"></a>1.1.2 安装Kibana</h3><p>通过下面的Docker命令，即可部署Kibana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#先在tar所在目录下打开cmd</span><br><span class="line">docker load -i kibana.tar</span><br><span class="line"></span><br><span class="line">#黑马安装：</span><br><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es:9200 \   #es的地址，这里的es要和es配置docker的时候--name一致</span><br><span class="line">--network&#x3D;hm-net \  #网络和es一个网络</span><br><span class="line">-p 5601:5601  \</span><br><span class="line">kibana:7.12.1  #要保证和es版本一致！！！</span><br><span class="line"></span><br><span class="line">#csdn安装：</span><br><span class="line">docker run -d --name kibana -e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es:9200 --network elastic -p 5601:5601  kibana:7.12.1</span><br></pre></td></tr></table></figure><p>启动之后访问<a href="http://localhost:5601/就可以通过kibana数据化访问elasticsearch：" target="_blank" rel="noopener">http://localhost:5601/就可以通过kibana数据化访问elasticsearch：</a></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072046111.png" alt="image-20240507204635028" style="zoom:80%;"><p>可以点击右上角Dev tools，进入开发工具页面：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221602466.png" alt="image-20240507204914788"></p><p>点击之后：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072051099.png" alt="image-20240507205135009"></p><h1 id="2-倒排索引"><a href="#2-倒排索引" class="headerlink" title="2.倒排索引"></a>2.倒排索引</h1><p>elasticsearch的高性能搜索表现，因为底层的倒排索引技术解决的就是根据==部分词条模糊匹配==的问题。【Innodb底层就是用倒排索引做的全文索引】</p><h2 id="2-1-正向索引-精准匹配"><a href="#2-1-正向索引-精准匹配" class="headerlink" title="2.1 正向索引(精准匹配)"></a>2.1 正向索引(精准匹配)</h2><p>我们有一张名为tb_goods的表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072100540.png" alt="image-20240507210036497"></p><p>其中，id字段已经创建了索引（底层使用b+树）所以根据id搜索的速度会非常快。但是其他字段例如title只在叶子结点上存在。</p><p>比如用户的sql语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from tb_goods</span><br><span class="line">where title like &#39;%手机%&#39;;</span><br></pre></td></tr></table></figure><p>搜索大概流程如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072124917.png" alt="image-20240507212400849"></p><p>说明：</p><ul><li>1）检查到搜索条件为<code>like &#39;%手机%&#39;</code>，需要找到<code>title</code>中包含<code>手机</code>的数据</li><li>2）逐条遍历每行数据（每个叶子节点），比如第1次拿到<code>id</code>为1的数据</li><li>3）判断数据中的<code>title</code>字段值是否符合条件</li><li>4）如果符合则放入结果集，不符合则丢弃</li><li>5）回到步骤1</li></ul><p>综上，根据id搜索条件为精确匹配时，可以走索引，查询效率较高。而当搜索条件为模糊匹配时，由于索引无法生效，导致从索引查询退化为全表扫描，效率很差。</p><p>因此，正向索引适合于根据索引字段的精确搜索，不适合基于部分词条的模糊匹配。</p><p>而倒排索引恰好解决的就是根据部分词条模糊匹配的问题。</p><h2 id="2-2-倒排索引-模糊匹配"><a href="#2-2-倒排索引-模糊匹配" class="headerlink" title="2.2 倒排索引(模糊匹配)"></a>2.2 倒排索引(模糊匹配)</h2><h3 id="2-2-1-基本概念"><a href="#2-2-1-基本概念" class="headerlink" title="2.2.1 基本概念"></a>2.2.1 基本概念</h3><p>倒排索引中两个重要的概念：</p><ul><li><p><strong>文档(Document):</strong>用来搜索的数据，<strong>每一条数据</strong>就是一个文档【一个网页，一个商品信息】</p></li><li><p><strong>词条(Term):</strong>对文档数据/用户搜索数据，利用某种算法分词，得到的<strong>具备含义的词语</strong>就是词条【我是中国人，就可以分为：我，是，中国人，国人，人这几个词条】</p></li></ul><h3 id="2-2-2-创建流程"><a href="#2-2-2-创建流程" class="headerlink" title="2.2.2 创建流程"></a>2.2.2 创建流程</h3><p>创建倒排索引是对正向索引的一种特殊处理和应用，流程如下：</p><ul><li><p>将每个文档的数据利用<strong>分词算法</strong>根据语义拆分得到一个个词条</p></li><li><p>创建表，表中每行数据：{词条，词条所在文档id，词条位置}</p></li><li><p>因为词条唯一性，可以给词条创建正向索引(唯一索引)</p></li></ul><p>此时形成的这张以词条为索引的表就是倒排索引表：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221602499.png" alt="image-20240507214322180"></p><h3 id="2-2-3-搜索流程"><a href="#2-2-3-搜索流程" class="headerlink" title="2.2.3 搜索流程"></a>2.2.3 搜索流程</h3><p>以搜索”华为手机”为例，如图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072150690.png" alt="image-20240507215033610"></p><p>流程描述：</p><p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。</p><p>2）对用户输入条件<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。</p><p>3）拿着词条在倒排索引中查找（<strong>由于词条有唯一索引，查询效率很高</strong>），即可得到包含词条的文档id：<code>1、2、3</code>。</p><p>4）拿着文档<code>id</code>到正向索引中查找具体文档即可（由于<strong><code>id</code>也有索引</strong>，查询效率也很高）</p><p>==根据条件先分词，每个词条去倒排索引查询【词条有唯一索引】找到对应文档id，根据文档id到正向索引【id有索引】查询具体文档(一条数据)==</p><h3 id="2-2-4-两者对比"><a href="#2-2-4-两者对比" class="headerlink" title="2.2.4 两者对比"></a>2.2.4 两者对比</h3><ul><li><strong>正向索引</strong>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。 </li><li>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是<strong>根据词条找文档的过程</strong>。 </li></ul><p>两者优缺点：</p><table><thead><tr><th></th><th>正向索引</th><th>倒排索引</th></tr></thead><tbody><tr><td>优点</td><td>1.可以给多个字段创建索引<br>2.根据索引字段搜索和排序速度非常快</td><td>部分词条查询效率高【创建唯一索引】</td></tr><tr><td>缺点</td><td>部分词条查询效率不高，只能全表扫描</td><td>1.只能给词条创建索引，而不是字段<br>2.无法根据字段做排序</td></tr></tbody></table><h1 id="3-基础概念"><a href="#3-基础概念" class="headerlink" title="3.基础概念"></a>3.基础概念</h1><h2 id="3-1-文档-一行数据-和字段-一个列"><a href="#3-1-文档-一行数据-和字段-一个列" class="headerlink" title="3.1 文档(一行数据)和字段(一个列)"></a>3.1 文档(一行数据)和字段(一个列)</h2><p>elasticsearch是面向<strong>文档（Document）</strong>存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为<code>json</code>格式存储在<code>elasticsearch</code>中：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072305342.png" alt="image-20240507230531294"></p><p>因此， 数据库中一行数据 &lt;==&gt; ES中一个JSON文档；</p><p>而数据库中每行数据都包含很多列，这些列就转换为JSON文档中的<strong>字段（Field）</strong></p><h2 id="3-2-索引-数据库的表-和映射-数据库表结构约束"><a href="#3-2-索引-数据库的表-和映射-数据库表结构约束" class="headerlink" title="3.2 索引(数据库的表)和映射(数据库表结构约束)"></a>3.2 索引(数据库的表)和映射(数据库表结构约束)</h2><p>随着业务发展，需要在es中存储的文档也会越来越多，比如有商品的文档，用户的文档，订单的文档等等；</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405082235832.png" alt="image-20240508223520776"></p><p>所有文档都散乱存放显然非常混乱，也不方便管理。</p><p>因此，我们要将==类型相同的文档==(一行数据)集中在一起管理，称为<strong>索引（Index）</strong></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405082238659.png" alt="image-20240508223847616"></p><p>因此，==索引(类型相同的很多行文档) &lt;—-&gt;数据库中的表==</p><p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。</p><p>因此，索引库中就有==<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束==</p><h2 id="3-3-Mysql和Elasticsearch对比"><a href="#3-3-Mysql和Elasticsearch对比" class="headerlink" title="3.3 Mysql和Elasticsearch对比"></a>3.3 Mysql和Elasticsearch对比</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405082256502.png" alt="image-20240508225648423"></p><blockquote><p>注意：mysql的语法就是sql，而es的语法是dsl【提供json风格的请求语句，用来操作es进行crud】</p></blockquote><ul><li>Mysql：擅长事务类型操作，可以确保数据的安全和一致性 </li><li>Elasticsearch：擅长海量数据的搜索、分析、计算 </li></ul><p>因此在企业中，往往是两者结合使用：</p><ul><li>对安全性要求较高的写操作，使用mysql实现</li><li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405082312525.png" alt="image-20240508231244479"></p><h1 id="4-IK分词器-ikun"><a href="#4-IK分词器-ikun" class="headerlink" title="4.IK分词器(ikun)"></a>4.IK分词器(ikun)</h1><p>Elasticsearch的关键就是倒排索引，而倒排索引依赖于对文档内容的分词情况(分词好那就效率高)，而分词则需要高效、精准的分词算法，IK分词器就是这样一个中文分词算法</p><h2 id="4-1-安装IK分词器"><a href="#4-1-安装IK分词器" class="headerlink" title="4.1 安装IK分词器"></a>4.1 安装IK分词器</h2><p>方案一：在线安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it es .&#x2F;bin&#x2F;elasticsearch-plugin  install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v7.12.1&#x2F;elasticsearch-analysis-ik-7.12.1.zip</span><br></pre></td></tr></table></figure><p>方案二：离线安装</p><p>首先，查看之前安装的elasticsearch容器的plugins数据卷目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221602482.png" alt="image-20240507221107758"></p><p>可以看到elasticsearch的插件挂载到了<code>/var/lib/docker/volumes/es-plugins/_data</code>这个目录。我们需要把IK分词器上传至这个目录</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072216972.png" alt="image-20240507221628934"></p><h2 id="4-2-使用IK分词器"><a href="#4-2-使用IK分词器" class="headerlink" title="4.2 使用IK分词器"></a>4.2 使用IK分词器</h2><h3 id="4-2-1-官方标准分词器-standard"><a href="#4-2-1-官方标准分词器-standard" class="headerlink" title="4.2.1 官方标准分词器(standard)"></a>4.2.1 官方标准分词器(standard)</h3><p>我们在Kibana的DevTools上来测试分词器，首先测试Elasticsearch官方提供的标准分词器：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072218254.png" alt="image-20240507221852165" style="zoom: 67%;"><p>我们可以看到，标准分词器只能1个字作为一个1个词条，无法正取对中文做分词</p><h3 id="4-2-2-IK分词器-ik-smart智能语义切分"><a href="#4-2-2-IK分词器-ik-smart智能语义切分" class="headerlink" title="4.2.2 IK分词器(ik_smart智能语义切分)"></a>4.2.2 IK分词器(ik_smart智能语义切分)</h3><p>这种情况下，可以智能的将词语切分。但是像程序员这种词可以拆分为程序员，程序，员</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072222404.png" alt="image-20240507222246345"></p><h3 id="4-2-3-IK分词器-ik-max-word最细粒度切分"><a href="#4-2-3-IK分词器-ik-max-word最细粒度切分" class="headerlink" title="4.2.3 IK分词器(ik_max_word最细粒度切分)"></a>4.2.3 IK分词器(ik_max_word最细粒度切分)</h3><p>这种情况下，可以在4.2.2的前提下继续细分【程序员这种词可以拆分为程序员，程序，员】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072225864.png" alt="image-20240507222545813"></p><h2 id="4-3-扩展词典"><a href="#4-3-扩展词典" class="headerlink" title="4.3 扩展词典"></a>4.3 扩展词典</h2><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“泰裤辣”，“传智播客” 等</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072226525.png" alt="image-20240507222659451" style="zoom:80%;"><p>所以想要正确分词，<strong>IK分词器的词库也需要不断地更新</strong>，IK分词器提供了扩展词汇的功能：</p><p>我们可以在ik-config文件夹下的<code>IkAnalyzer.cfg.xml</code>文件添加拓展词典和停用词典，这样我们再调用的时候，宋亚翔和传智播客就可以被认为是一个词语作为词条</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405072244524.png" alt="image-20240507224408412"></p><h1 id="基础操作-对索引库和文档基础操作"><a href="#基础操作-对索引库和文档基础操作" class="headerlink" title="==基础操作(对索引库和文档基础操作)=="></a>==基础操作(对索引库和文档基础操作)==</h1><h1 id="方式一：通过ES手动创建–很繁琐"><a href="#方式一：通过ES手动创建–很繁琐" class="headerlink" title="==方式一：通过ES手动创建–很繁琐=="></a>==方式一：通过ES手动创建–很繁琐==</h1><h1 id="1-索引库操作-数据库表"><a href="#1-索引库操作-数据库表" class="headerlink" title="1.索引库操作(数据库表)"></a>1.索引库操作(数据库表)</h1><p>index类似数据库表，映射类似表的结构。我们要向es中存储数据，必须先创建索引(数据库表)和映射(数据库定义)</p><h2 id="1-1-Mapping映射属性"><a href="#1-1-Mapping映射属性" class="headerlink" title="1.1 Mapping映射属性"></a>1.1 Mapping映射属性</h2><p>Mapping是对索引库的文档设置约束，常见的mapping属性包括：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201506907.png" alt="image-20240520150601809"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;age&quot;: 21,</span><br><span class="line">    &quot;weight&quot;: 52.1,</span><br><span class="line">    &quot;isMarried&quot;: false,</span><br><span class="line">    &quot;info&quot;: &quot;黑马程序员Java讲师&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;zy@itcast.cn&quot;,</span><br><span class="line">    &quot;score&quot;: [99.1, 99.5, 98.9],</span><br><span class="line">    &quot;name&quot;: &#123;</span><br><span class="line">        &quot;firstName&quot;: &quot;云&quot;,</span><br><span class="line">        &quot;lastName&quot;: &quot;赵&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的每个字段映射(Mapping)：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201510959.png" alt="image-20240520151047898"></p><h2 id="1-2-索引库的CRUD"><a href="#1-2-索引库的CRUD" class="headerlink" title="1.2 索引库的CRUD"></a>1.2 索引库的CRUD</h2><p>由于Elasticsearch采用的是Restful风格的API，因此其请求方式和路径相对都比较规范，而且请求参数也都采用JSON风格。</p><p>我们直接基于Kibana的DevTools来编写请求做测试，由于有语法提示，会非常方便。</p><h3 id="1-2-1-创建索引库和映射"><a href="#1-2-1-创建索引库和映射" class="headerlink" title="1.2.1 创建索引库和映射"></a>1.2.1 创建索引库和映射</h3><p><strong>基本语法</strong>：</p><ul><li>请求方式：<code>PUT</code></li><li>请求路径：<code>/索引库名</code>，可以自定义</li><li>请求参数：<code>mapping</code>映射</li></ul><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;索引库名称</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;字段名&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名2&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;false&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名3&quot;:&#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;子字段&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; ...略</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201510959.png" alt="image-20240520151047898"></p><h3 id="1-2-2-查询索引库"><a href="#1-2-2-查询索引库" class="headerlink" title="1.2.2 查询索引库"></a>1.2.2 查询索引库</h3><p><strong>基本语法</strong>：</p><ul><li>请求方式：GET </li><li>请求路径：/索引库名 </li><li>请求参数：无 </li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201513186.png" alt="image-20240520151340133"></p><h3 id="1-2-3-修改索引库-只能修改新字段"><a href="#1-2-3-修改索引库-只能修改新字段" class="headerlink" title="1.2.3 修改索引库(只能修改新字段)"></a>1.2.3 修改索引库(只能修改新字段)</h3><p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改mapping</strong></p><p>虽然==无法修改mapping中已有字段，却允许添加新的字段到mapping==，因为不会对倒排索引产生影响。因此修改索引库能做的就是向索引库中添加新字段，或者更新索引库的基础属性。</p><p><strong>基本语法</strong>：</p><ul><li>请求方式：PUT</li><li>请求路径：/索引库名 </li><li>请求参数：/_mapping</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201516998.png" alt="image-20240520151647929"></p><h3 id="1-2-4-删除索引库"><a href="#1-2-4-删除索引库" class="headerlink" title="1.2.4 删除索引库"></a>1.2.4 删除索引库</h3><p><strong>基本语法：</strong></p><ul><li>请求方式：DELETE </li><li>请求路径：/索引库名 </li><li>请求参数：无 </li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201514822.png" alt="image-20240520151416751"></p><h3 id="1-2-5-索引库操作总结"><a href="#1-2-5-索引库操作总结" class="headerlink" title="==1.2.5 索引库操作总结=="></a>==1.2.5 索引库操作总结==</h3><p>索引库操作：</p><ul><li>创建索引库：PUT /索引库名{“mappings”:{“properties”:{部分新字段信息}}}}</li><li>查询索引库：GET /索引库名</li><li>删除索引库：DELETE /索引库名</li><li>修改索引库【添加字段】：PUT /索引库名/_mapping{“properties”:{部分新字段信息}}</li></ul><p>可以看到，对索引库的操作基本遵循的Restful的风格，因此API接口非常统一，方便记忆。</p><h1 id="2-文档操作-一行数据"><a href="#2-文档操作-一行数据" class="headerlink" title="2.文档操作(一行数据)"></a>2.文档操作(一行数据)</h1><p>有了索引库，接下来就可以向索引库中添加数据。而ElasticSearch数据就是JSON风格的文档。</p><h2 id="2-1-新增文档"><a href="#2-1-新增文档" class="headerlink" title="2.1 新增文档"></a>2.1 新增文档</h2><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;索引库名&#x2F;_doc&#x2F;文档id</span><br><span class="line">&#123;</span><br><span class="line">    &quot;字段1&quot;: &quot;值1&quot;,</span><br><span class="line">    &quot;字段2&quot;: &quot;值2&quot;,</span><br><span class="line">    &quot;字段3&quot;: &#123;</span><br><span class="line">        &quot;子属性1&quot;: &quot;值3&quot;,</span><br><span class="line">        &quot;子属性2&quot;: &quot;值4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，目前要新增id=1的文档：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201536525.png" alt="image-20240520153641479"></p><h2 id="2-2-查询文档"><a href="#2-2-查询文档" class="headerlink" title="2.2 查询文档"></a>2.2 查询文档</h2><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;&#123;索引库名称&#125;&#x2F;_doc&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure><p>例如，查询id=1的文档：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201538769.png" alt="image-20240520153813733"></p><h2 id="2-3-删除文档"><a href="#2-3-删除文档" class="headerlink" title="2.3 删除文档"></a>2.3 删除文档</h2><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /&#123;索引库名&#125;/_doc/id值</span><br></pre></td></tr></table></figure><p>例如，删除id=1的文档：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201539097.png" alt="image-20240520153911052"></p><h2 id="2-4-修改文档"><a href="#2-4-修改文档" class="headerlink" title="2.4 修改文档"></a>2.4 修改文档</h2><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档【会删除旧文档，添加新文档(如果没有就直接删除)】</li><li>局部修改：修改文档中的部分字段</li></ul><h3 id="2-4-1-全量修改"><a href="#2-4-1-全量修改" class="headerlink" title="2.4.1 全量修改"></a>2.4.1 全量修改</h3><p>全量修改是覆盖原来的文档，其本质是两步操作：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /&#123;索引库名&#125;/_doc/文档id</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"字段1"</span>: <span class="string">"值1"</span>,</span><br><span class="line">    <span class="attr">"字段2"</span>: <span class="string">"值2"</span>,</span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201542046.png" alt="image-20240520154216989"></p><h3 id="2-4-2-局部修改"><a href="#2-4-2-局部修改" class="headerlink" title="2.4.2 局部修改"></a>2.4.2 局部修改</h3><p>局部修改是只修改指定id匹配的文档中的部分字段。【<strong>注意：局部修改是POST</strong>】</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /&#123;索引库名&#125;/_update/文档id</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"doc"</span>: &#123;</span><br><span class="line">         <span class="attr">"字段名"</span>: <span class="string">"新的值"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201542149.png" alt="image-20240520154237114"></p><h2 id="2-5-批处理"><a href="#2-5-批处理" class="headerlink" title="2.5 批处理"></a>2.5 批处理</h2><p>类似于Mysql数据库，可以进行多条数据一次性操作【感觉很麻烦，主要是可读性很差】</p><p>批处理采用==POST请求==，基本语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line"># 1.修改 --如果文档id存在就覆盖，不存在就创建</span><br><span class="line"># index代表新增操作  _index表示索引库名 _id表示要操作的文档id  </span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"test"</span>, <span class="string">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line"># 代表新增的文档内容</span><br><span class="line">&#123; <span class="string">"field1"</span> : <span class="string">"value1"</span> &#125;</span><br><span class="line"></span><br><span class="line"># 2.删除</span><br><span class="line">&#123; <span class="string">"delete"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"test"</span>, <span class="string">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"># 3.新增 --如果文档id存在就报错</span><br><span class="line">&#123; <span class="string">"create"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"test"</span>, <span class="string">"_id"</span> : <span class="string">"3"</span> &#125; &#125;</span><br><span class="line">&#123; <span class="string">"field1"</span> : <span class="string">"value3"</span> &#125;</span><br><span class="line"></span><br><span class="line"># 4.更新</span><br><span class="line">&#123; <span class="string">"update"</span> : &#123;<span class="string">"_id"</span> : <span class="string">"1"</span>, <span class="string">"_index"</span> : <span class="string">"test"</span>&#125; &#125;</span><br><span class="line">&#123; <span class="string">"doc"</span> : &#123;<span class="string">"field2"</span> : <span class="string">"value2"</span>&#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-文档操作总结"><a href="#2-6-文档操作总结" class="headerlink" title="==2.6 文档操作总结=="></a>==2.6 文档操作总结==</h2><p>相对于索引库创建，大致就是中间多了一个_doc路径，修改文档类似于修改索引库比较特殊。</p><ul><li>创建文档：<code>POST /{索引库名}/_doc/文档id   { json文档 }</code></li><li>查询文档：<code>GET /{索引库名}/_doc/文档id</code></li><li>删除文档：<code>DELETE /{索引库名}/_doc/文档id</code></li><li>修改文档： <ul><li>全量修改：<code>PUT /{索引库名}/_doc/文档id { json文档 }</code></li><li>局部修改：<code>POST /{索引库名}/_update/文档id { &quot;doc&quot;: {字段}}</code></li></ul></li></ul><p>==索引库操作和文档操作对比：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211500548.png" alt="image-20240521150017482"></p><p>5和6步骤主要是在网页端进行设置，因此提出了一个Java的客户端—==JavaRestClient==</p><h1 id="方式二：通过Java实现—不用繁琐的手动创建"><a href="#方式二：通过Java实现—不用繁琐的手动创建" class="headerlink" title="==方式二：通过Java实现—不用繁琐的手动创建=="></a>==方式二：通过Java实现—不用繁琐的手动创建==</h1><h1 id="1-JavaRestClient"><a href="#1-JavaRestClient" class="headerlink" title="1.JavaRestClient"></a>1.JavaRestClient</h1><p>提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是==组装DSL语句==，通过http请求发送给ES。</p><p>由于ES目前最新版本是8.8，提供了全新版本的客户端，老版本的客户端已经被标记为过时。而我们采用的是7.12版本，因此只能使用老版本客户端：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201555388.png" alt="image-20240520155549341"></p><p>然后选择7.12版本，HighLevelRestClient版本：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201556867.png" alt="image-20240520155613826"></p><h2 id="1-1-初始化RestClient"><a href="#1-1-初始化RestClient" class="headerlink" title="==1.1 初始化RestClient=="></a>==1.1 初始化RestClient==</h2><p>在Elasticsearch提供的API中，与Elasticsearch一切交互都封装在一个名为<code>RestHighLevelClient</code>的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。</p><h3 id="1-1-1-引入RestHighLevelClient依赖"><a href="#1-1-1-引入RestHighLevelClient依赖" class="headerlink" title="1.1.1 引入RestHighLevelClient依赖"></a>1.1.1 引入RestHighLevelClient依赖</h3><p>在<code>item-service</code>模块中引入<code>es</code>的<code>RestHighLevelClient</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-覆盖ES版本"><a href="#1-1-2-覆盖ES版本" class="headerlink" title="1.1.2 覆盖ES版本"></a>1.1.2 覆盖ES版本</h3><p>因为SpringBoot默认的ES版本是<code>7.17.10</code>，所以我们需要覆盖默认的ES版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--覆盖成7.12.1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-3-初始化RestHighLevelClient"><a href="#1-1-3-初始化RestHighLevelClient" class="headerlink" title="1.1.3 初始化RestHighLevelClient"></a>1.1.3 初始化RestHighLevelClient</h3><p>初始化的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">    <span class="comment">//使用RestClient的builder方法创建</span></span><br><span class="line">    RestClient.builder(</span><br><span class="line">        HttpHost.create(<span class="string">"http://192.168.xxx.xxx:9200"</span>)</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="1-2-商品Mapping映射"><a href="#1-2-商品Mapping映射" class="headerlink" title="==1.2 商品Mapping映射=="></a>==1.2 商品Mapping映射==</h2><p>我们针对购物车数据库进行分析：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201728989.png" alt="image-20240520172813812"></p><p>我们可以对购物车的所有字段进行分析，判断哪些字段必须添加到ElasticSearch中，判断哪些字段必须添加搜索功能。从而进行新建索引库和映射：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201717606.png" alt="image-20240520171754450"></p><p>在网页上的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;items</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;stock&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;image&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;category&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;sold&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;commentCount&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;isAD&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;boolean&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;updateTime&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-索引库操作"><a href="#1-3-索引库操作" class="headerlink" title="1.3 索引库操作"></a>1.3 索引库操作</h2><p>创建索引库的JavaAPI和Restful接口API对比：</p><h3 id="1-3-1-创建索引库"><a href="#1-3-1-创建索引库" class="headerlink" title="1.3.1 创建索引库"></a>1.3.1 创建索引库</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405201733352.png" alt="image-20240520173351287"></p><p>具体代码如下:</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211350671.png" alt="image-20240521135017531" style="zoom:80%;"><p>创建索引库：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211351676.png" alt="image-20240521135105629" style="zoom:80%;"><h3 id="1-3-2-删除索引库"><a href="#1-3-2-删除索引库" class="headerlink" title="1.3.2 删除索引库"></a>1.3.2 删除索引库</h3><p>具体代码如下:</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211351946.png" alt="image-20240521135115905" style="zoom:80%;"><h3 id="1-3-3-查询索引库"><a href="#1-3-3-查询索引库" class="headerlink" title="1.3.3 查询索引库"></a>1.3.3 查询索引库</h3><p>具体代码如下:</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211351275.png" style="zoom:80%;"><h3 id="1-3-4-索引库操作总结"><a href="#1-3-4-索引库操作总结" class="headerlink" title="==1.3.4 索引库操作总结=="></a>==1.3.4 索引库操作总结==</h3><p>JavaRestClient操作elasticsearch的流程基本类似。核心是<code>client.indices()</code>方法来获取索引库的操作对象。</p><p>索引库操作的基本步骤：</p><ul><li><p>1.初始化RestHighLevelClient类对象client【创建客户端】</p></li><li><p>2.创建XxxIndexRequest对象request【XXX是<code>Create</code>、<code>Get</code>、<code>Delete</code>】</p></li><li><p>3.准备请求参数request.source()方法【<code>Create</code>时需要参数，其他情况不需要】</p></li><li><p>4.发送请求client.indices().xxx()方法【xxx是<code>create</code>、<code>exists</code>、<code>delete</code>】</p></li></ul><h2 id="1-4-文档操作"><a href="#1-4-文档操作" class="headerlink" title="1.4 文档操作"></a>1.4 文档操作</h2><h3 id="1-4-1-新增文档"><a href="#1-4-1-新增文档" class="headerlink" title="1.4.1 新增文档"></a>1.4.1 新增文档</h3><ul><li>1.创建Request对象，这里是<code>IndexRequest</code>，因为添加文档就是创建倒排索引的过程</li><li>2.准备请求参数，本例中就是Json文档</li><li>3.发送请求【client.index()方法就好了】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211427513.png" alt="image-20240521142712455"></p><h3 id="1-4-2-查询文档"><a href="#1-4-2-查询文档" class="headerlink" title="1.4.2 查询文档"></a>1.4.2 查询文档</h3><p>与之前的流程类似，代码大概分2步：</p><ul><li>创建Request对象</li><li>准备请求参数，这里是无参，【直接省略】</li><li>发送请求</li><li>解析结果【因为结果在_source部分内】</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211428059.png" alt="image-20240521142844007"></p><p>可以看到，响应结果是一个JSON，其中文档放在一个<code>_source</code>属性中，因此解析就是拿到<code>_source</code>，反序列化为Java对象即可</p><h3 id="1-4-3-删除文档"><a href="#1-4-3-删除文档" class="headerlink" title="1.4.3 删除文档"></a>1.4.3 删除文档</h3><p>与查询相比，仅仅是请求方式从<code>DELETE</code>变成<code>GET</code>，可以想象Java代码应该依然是2步走：</p><ul><li>1）准备Request对象，因为是删除，这次是<code>DeleteRequest</code>对象。要指定索引库名和id</li><li>2）准备参数，无参，直接省略</li><li>3）发送请求。因为是删除，所以是<code>client.delete()</code>方法</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211430055.png" alt="image-20240521143043972"></p><h3 id="1-4-4-修改文档"><a href="#1-4-4-修改文档" class="headerlink" title="1.4.4 修改文档"></a>1.4.4 修改文档</h3><p>修改我们讲过两种方式：</p><ul><li>全量修改：本质是先根据id删除，再新增【与1.4.1一致】</li><li>局部修改：修改文档中的指定字段值</li></ul><p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：</p><ul><li>如果新增时，ID已经存在，则修改</li><li>如果新增时，ID不存在，则新增</li></ul><p>这里不再赘述，我们主要关注局部修改的API即可</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211431593.png" alt="image-20240521143147541"></p><p>与之前类似，也是三步走：</p><ul><li>1）准备<code>Request</code>对象。【这次是修改，所以是<code>UpdateRequest</code>】</li><li>2）准备参数。【也就是JSON文档，里面包含要修改的字段】</li><li>3）更新文档。【这里调用<code>client.update()</code>方法】</li></ul><h3 id="1-4-5-批量导入文档"><a href="#1-4-5-批量导入文档" class="headerlink" title="1.4.5 批量导入文档"></a>1.4.5 批量导入文档</h3><p>7.4.1-7.4.4的单条处理通过<strong>BulkRequest</strong>解决。因此<code>BulkRequest</code>中提供了<code>add</code>方法，用以添加其它CRUD的请求：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211441488.png" alt="image-20240521144140401"></p><p>具体代码：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211439619.png" alt="image-20240521143955532"></p><h3 id="1-4-6-文档操作总结"><a href="#1-4-6-文档操作总结" class="headerlink" title="==1.4.6 文档操作总结=="></a>==1.4.6 文档操作总结==</h3><p>文档操作的基本步骤：</p><ul><li>1.初始化RestHighLevelClient类对象client【创建客户端】</li><li>2.创建XxxRequest对象request【Xxx是<code>Index</code>、<code>Update</code>、<code>Delete</code>、<code>Bulk</code>】</li><li>3.准备请求参数request.source()方法（<code>Index</code>、<code>Update</code>、<code>Bulk</code>时需要）</li><li>4.发送请求client.Xxx()方法【Xxx是<code>index</code>、<code>get</code>、<code>update</code>、<code>delete</code>、<code>bulk</code>】</li><li>5.解析结果（<code>Get</code>查询时需要，数据在_source内部）</li></ul><p>上述的操作都是围绕id来进行的，只能进行简单查询不符合我们所预期的搜索</p><h1 id="进阶操作-DSL查询，更高级的查询"><a href="#进阶操作-DSL查询，更高级的查询" class="headerlink" title="==进阶操作(DSL查询，更高级的查询)=="></a>==进阶操作(DSL查询，更高级的查询)==</h1><p>Elasticsearch提供基于JSON的<strong>DSL（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl.html" target="_blank" rel="noopener">Domain Specific Language</a>）语句</strong>来定义查询条件，其JavaAPI就是在组织DSL条件。</p><p>Elasticsearch的查询可以分为两大类：</p><ul><li><strong>叶子查询（Leaf</strong> <strong>query</strong> <strong>clauses）</strong>：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。</li><li><strong>复合查询（Compound</strong> <strong>query</strong> <strong>clauses）</strong>：以逻辑方式组合多个叶子查询/更改叶子查询的行为方式。</li></ul><p>在查询以后，还可以对查询的结果做处理，包括：</p><p>• <strong>排序</strong>：按照1个或多个字段值做排序</p><p>• <strong>分页</strong>：根据from和size做分页，类似MySQL</p><p>• <strong>高亮</strong>：对搜索结果中的关键字添加特殊样式，使其更加醒目</p><p>• <strong>聚合</strong>：对搜索结果做数据统计以形成报表</p><p>==后续内容总结图：==  </p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221649088.png" alt="image-20240522164945976" style="zoom:150%;"><h1 id="方式一：通过手动创建–DSL查询"><a href="#方式一：通过手动创建–DSL查询" class="headerlink" title="==方式一：通过手动创建–DSL查询=="></a>==方式一：通过手动创建–DSL查询==</h1><h1 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h1><p>查询的语法结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search   #_search是固定路径，不能修改</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"查询类型"</span>: &#123;</span><br><span class="line">      <span class="comment">// .. 查询条件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，我们以最简单的无条件查询为例【查询类型=match_all】:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /items/_search  #_search是固定路径，不能修改</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    "match_all": &#123;  #查询类型=match_all</span><br><span class="line">         #match_all无条件，所以条件位置不写即可         </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211543976.png" alt="image-20240521154302865"></p><p>虽然是match_all，但是响应结果中并不会包含索引库中的所有文档，而是仅有10条。这是因为处于安全考虑，elasticsearch设置了默认的查询页数</p><h1 id="2-查询—-①叶子查询"><a href="#2-查询—-①叶子查询" class="headerlink" title="2.查询—-①叶子查询"></a>2.查询—-①叶子查询</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211544349.png" alt="image-20240521154435190"></p><h2 id="2-1-全文检索–-分词"><a href="#2-1-全文检索–-分词" class="headerlink" title="2.1 全文检索–(分词)"></a>2.1 全文检索–(分词)</h2><p>全文检索的种类也很多，详情可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/full-text-queries.html" target="_blank" rel="noopener">官方文档</a>：</p><h3 id="2-1-1-match–检索一个字段"><a href="#2-1-1-match–检索一个字段" class="headerlink" title="2.1.1 match–检索一个字段"></a>2.1.1 match–检索一个字段</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"字段名"</span>: <span class="string">"搜索条件"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211623220.png" alt="image-20240521162042810"></p><h3 id="2-1-2-multi-match–检索多个字段"><a href="#2-1-2-multi-match–检索多个字段" class="headerlink" title="2.1.2 multi_match–检索多个字段"></a>2.1.2 multi_match–检索多个字段</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="attr">"query"</span>: <span class="string">"搜索条件"</span>,</span><br><span class="line">      <span class="attr">"fields"</span>: [<span class="string">"字段1"</span>, <span class="string">"字段2"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211620893.png" alt="image-20240521162042810"></p><h2 id="2-2-精确查询–-不分词"><a href="#2-2-精确查询–-不分词" class="headerlink" title="2.2 精确查询–(不分词)"></a>2.2 精确查询–(不分词)</h2><p>精确查询，英文是<code>Term-level query</code>，顾名思义，词条级别的查询。也就是说不会对用户输入的搜索条件再分词，而是作为一个词条，与搜索的字段内容精确值匹配。因此推荐查找<code>keyword</code>、数值、日期、<code>boolean</code>类型的字段。例如：</p><ul><li>id</li><li>price</li><li>城市</li><li>地名</li><li>人名</li></ul><p>等等，作为一个整体才有含义的字段。</p><p>详情可以查看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/term-level-queries.html" target="_blank" rel="noopener">官方文档</a>：</p><h3 id="2-2-1-term–根据词条精确匹配"><a href="#2-2-1-term–根据词条精确匹配" class="headerlink" title="2.2.1 term–根据词条精确匹配"></a>2.2.1 term–根据词条精确匹配</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"字段名"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"搜索条件"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211638230.png" alt="image-20240521163826141"></p><h3 id="2-2-2-range–根据数值范围查询"><a href="#2-2-2-range–根据数值范围查询" class="headerlink" title="2.2.2 range–根据数值范围查询"></a>2.2.2 range–根据数值范围查询</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /&#123;索引库名&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"字段名"</span>: &#123;</span><br><span class="line">        "gte": &#123;最小值&#125;,</span><br><span class="line">        "lte": &#123;最大值&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211639643.png" alt="image-20240521163921559"></p><h2 id="2-3-地理-geo-查询"><a href="#2-3-地理-geo-查询" class="headerlink" title="2.3 地理(geo)查询"></a>2.3 地理(geo)查询</h2><p>未涉及，用到了补充</p><h1 id="3-查询—-②复合查询"><a href="#3-查询—-②复合查询" class="headerlink" title="3.查询—-②复合查询"></a>3.查询—-②复合查询</h1><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211642708.png" alt="image-20240521164256532"></p><p>其他符合查询和相关语法可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/compound-queries.html" target="_blank" rel="noopener">官方文档</a>：</p><h2 id="3-1-布尔查询–-与-或-非"><a href="#3-1-布尔查询–-与-或-非" class="headerlink" title="3.1 布尔查询– 与/或/非"></a>3.1 布尔查询– 与/或/非</h2><p>bool查询，即布尔查询。就是利用逻辑运算来组合一个或多个查询子句的组合。bool查询支持的逻辑运算有：</p><ul><li>must：必须匹配每个子查询，类似“与”  【输入框的搜索条件肯定要参与相关性算分】</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li><li>filter：必须匹配，<strong>不参与算分</strong> 【其他的过滤条件就可以不参与算分】</li></ul><p>bool查询的语法如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211705511.png" alt="image-20240521170512412"></p><p>出于性能考虑，与搜索关键字无关的查询尽量采用must_not或filter逻辑运算，避免参与相关性算分</p><h2 id="3-2-function-score查询–人为修改相关性算分"><a href="#3-2-function-score查询–人为修改相关性算分" class="headerlink" title="3.2 function_score查询–人为修改相关性算分"></a>3.2 function_score查询–人为修改相关性算分</h2><h3 id="3-2-1-相关性算分介绍"><a href="#3-2-1-相关性算分介绍" class="headerlink" title="3.2.1 相关性算分介绍"></a>3.2.1 相关性算分介绍</h3><p>当我们利用match进行叶子查询，文档结果会根据与搜索词条的<strong>关联度打分</strong>（<strong>_score</strong>），返回结果时按照分值降序排列</p><p>例如，我们搜索”手机”，结果如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211713118.png" alt="image-20240521171322014"></p><p>从Elasticsearch5.1开始，采用的相关性打分算法是BM25算法，其公式如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211714744.png" alt="image-20240521171415660"></p><p>基于这套公式，就可以判断出<strong>某个文档</strong>与<strong>用户搜索的关键字</strong>之间的关联度，还是比较准确的。但是，在实际业务需求中，常常会有竞价排名的功能。不是相关度越高排名越靠前，而是掏的钱多的排名靠前。</p><p>例如在百度中搜索Java培训，排名靠前的就是广告推广</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211715630.png" alt="image-20240521171538540"></p><p>要想人为控制相关性算法【添加一个过滤条件，增加一个算分函数得到一个值，然后和原始相关性算分运算一下得到新的】，就需要利用Elasticsearch的<strong>function_score查询</strong>：</p><h3 id="3-2-2-function-score介绍"><a href="#3-2-2-function-score介绍" class="headerlink" title="3.2.2 function_score介绍"></a>3.2.2 function_score介绍</h3><p>function score 查询中包含四部分内容：</p><ul><li><strong>1.原始查询</strong>条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，<strong>原始算分</strong>（query score)</li><li><strong>2.过滤条件</strong>：filter部分，符合该条件的文档才会重新算分</li><li><strong>3.算分函数</strong>：符合filter条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数 <ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数算法</li></ul></li><li>4.<strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： <ul><li>multiply：相乘</li><li>replace：用function score替换query score</li><li>其它，例如：sum、avg、max、min</li></ul></li></ul><p>==【大致就是在原有BM25算法得到相关性算分，然后根据符合filter条件的文档根据算分函数得到一个值，最后两者进行一些运算方式得到最终值】==</p><p>function score的运行流程如下：</p><ul><li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li><li>2）根据<strong>过滤条件</strong>，过滤文档</li><li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li><li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li></ul><p>举例：给IPhone这个品牌的手机算分提高十倍，分析如下：</p><ul><li>过滤条件：品牌必须为IPhone</li><li>算分函数：常量weight，值为10</li><li>算分模式：相乘multiply</li></ul><p>对应代码：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405211729636.png" alt="image-20240521172952514"></p><h1 id="4-排序和分页"><a href="#4-排序和分页" class="headerlink" title="4.排序和分页"></a>4.排序和分页</h1><p>1.默认排序：Elasticsearch支持对搜索结果根据相关度算分(_score)进行排序，按照分值降序排列。</p><p>2.指定字段排序：Elasticsearch支持对keyword类型，数值类型，地理坐标类型，日期类型等。</p><h2 id="4-1-指定排序"><a href="#4-1-指定排序" class="headerlink" title="4.1 指定排序"></a>4.1 指定排序</h2><p>基本语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"排序字段"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"排序方式asc和desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221601389.png" alt="image-20240522160121221"></p><h2 id="4-2-分页"><a href="#4-2-分页" class="headerlink" title="4.2 分页"></a>4.2 分页</h2><p>elasticsearch 【默认】只返回==top10数据==。而如果要查询更多数据就需要修改分页参数了</p><p>elasticsearch中通过修改<code>from</code>、<code>size</code>参数来控制要返回的分页结果：</p><ul><li><code>from</code>：从第几个文档开始</li><li><code>size</code>：总共查询几个文档</li></ul><p>类似于mysql中的<code>limit ?, ?</code></p><p>基本语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">0</span>, <span class="comment">// 分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">10</span>,  <span class="comment">// 每页文档数量，默认10</span></span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221604381.png" alt="image-20240522160315919"></p><p>elasticsearch的数据一般会采用<strong>分片存储</strong>，也就是把一个索引中的数据分成N份，存储到不同节点上。这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。</p><p>举例如下：</p><p>如果一个索引库有100000条数据，分别存储到4个分片中，每个分片有25000条数据。现在每页查询10条，查询第99页。那分页查询条件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /items/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">990</span>, <span class="comment">// 从第990条开始查询</span></span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">10</span>, <span class="comment">// 每页查询10条</span></span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="string">"asc"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从语句分析来讲：要查询的是第990-1000名数据。</p><p>从实现思路分析来讲：①将所有数据排序，找出前1000名②取出其中990-1000的部分</p><p>这样来看操作很复杂，因为每个片的数据不是顺序存储的，只能所有拿到一起再重新排序，才能找到最终前1000名截取出990-1000数据</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221608493.png" alt="image-20240522160808390"></p><p>因此，<strong>Elasticsearch对普通分页会有一个设置：(from+size)&lt;10000</strong></p><h2 id="4-3-深度分页-解决普通分页"><a href="#4-3-深度分页-解决普通分页" class="headerlink" title="4.3 深度分页(解决普通分页)"></a>4.3 深度分页(解决普通分页)</h2><p>针对深度分页，elasticsearch提供了两种解决方案：</p><ul><li><code>search after</code>：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li><li><code>scroll</code>：原理将排序后的文档id形成快照，保存下来，基于快照做分页。官方已经不推荐使用。</li></ul><p>以search after为例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221614507.png" alt="image-20240522161437320"></p><p>优点：没有查询上限，支持深度分页【更智能，无上限】</p><p>缺点：只能向后逐页查询，不能随机翻页【一页一页查询】</p><p>场景：数据大规模顺序迁移、手机滚动查询【一页一页】</p><p><strong>适用建议：</strong></p><ul><li><p>大多数情况下，我们采用普通分页就可以了。查看百度、京东等网站，会发现其分页都有限制。例如百度最多支持77页，每页不足20条。京东最多100页，每页最多60条。</p></li><li><p>因此，一般我们采用限制分页深度的方式即可，无需实现深度分页。</p></li></ul><h1 id="5-高亮显示"><a href="#5-高亮显示" class="headerlink" title="5.高亮显示"></a>5.高亮显示</h1><h2 id="5-1-高亮原理"><a href="#5-1-高亮原理" class="headerlink" title="5.1 高亮原理"></a>5.1 高亮原理</h2><p>我们在百度，京东搜索时，关键字会变成红色，比较醒目，这叫高亮显示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221620058.png" alt="image-20240522162022778"></p><p>css样式肯定是前端实现页面的时候写好的，但是前端编写页面的时候是不知道页面要展示什么数据的，不可能给数据加标签。而服务端实现搜索功能，要是有<code>elasticsearch</code>做分词搜索，是知道哪些词条需要高亮的。</p><p>因此词条的<strong>高亮标签肯定是由服务端提供数据的时候已经加上的</strong></p><h2 id="5-2-高亮操作"><a href="#5-2-高亮操作" class="headerlink" title="5.2 高亮操作"></a>5.2 高亮操作</h2><p>高亮的思路就是：</p><ul><li>用户输入搜索关键字搜索数据</li><li>服务端根据搜索关键字到Elasticsearch搜索，并给搜索结果中的关键字词条添加<code>html</code>标签</li><li>前端提前给约定好的<code>html</code>标签添加<code>CSS</code>样式</li></ul><p>基本语法：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221624880.png" alt="image-20240522162432699"></p><p>注意：</p><ul><li>搜索必须有查询条件，而且是叶子查询的全文检索类型的查询条件(有分词)，例如<code>match</code></li><li>参与高亮的字段必须是<code>text</code>类型的字段</li><li>默认情况下参与高亮的字段要与搜索字段一致，除非添加：<code>required_field_match=false</code></li></ul><h1 id="6-聚合"><a href="#6-聚合" class="headerlink" title="6.聚合"></a>6.聚合</h1><p>聚合（<code>aggregations</code>）可以让我们极其方便的实现对数据的统计、分析、运算。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现≈<strong>实时搜索</strong>效果。</p><p><strong>聚合分类</strong>：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231432297.png" alt="image-20240523143246188"></p><p>==【注意】：参与聚合的字段必须是Keyword、数值、日期、布尔的类型的字段(这些字段一般不分词)==</p><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231454009.png" alt></p><p>具体位置解释：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231455468.png" alt="image-20240523145507262"></p><h1 id="DSL手写规则总结"><a href="#DSL手写规则总结" class="headerlink" title="==DSL手写规则总结=="></a>==DSL手写规则总结==</h1><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221649088.png" alt="image-20240522164945976" style="zoom:150%;"><h1 id="方式二：通过Java实现—RestClient查询"><a href="#方式二：通过Java实现—RestClient查询" class="headerlink" title="==方式二：通过Java实现—RestClient查询=="></a>==方式二：通过Java实现—RestClient查询==</h1><h1 id="0-总体对照分析"><a href="#0-总体对照分析" class="headerlink" title="==0.总体对照分析=="></a>==0.总体对照分析==</h1><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>我们可以分三步拼凑DSL语句和发起请求获取相应结果：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221720814.png" alt="image-20240522172046658"></p><p>其中2.组织DSL参数的步骤中source()方法下面对应的查询/高亮/分页/排序/聚合：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221728464.png" alt="image-20240522172832347"></p><p>在查询方面我们直接可以通过QueryBuilders类调用对应的叶子查询/复杂查询</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221729417.png" alt="image-20240522172921305"></p><h2 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h2><p>我们可以通过响应结果和Elasticsearch页面返回结果获取具体细节: 【<strong>可以扩展很多，但其实就是对照DSL查询结果写</strong>】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221738726.png" alt="image-20240522173851593"></p><p>黑马的图：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405221739571.png" alt="image-20240522173920457"></p><h2 id="整体步骤"><a href="#整体步骤" class="headerlink" title="整体步骤"></a>整体步骤</h2><p>文档搜索的基本步骤是：</p><ol><li>创建<code>SearchRequest</code>对象实例request</li><li>准备<code>request.source()</code>，也就是DSL语句【这个位置可以创建查询，分页，排序，聚合，高亮等操作】<ol><li><code>QueryBuilders</code>来构建查询条件</li><li>传入<code>request.source()</code> 的<code>query()</code>方法</li></ol></li><li>发送请求，得到结果</li><li>解析结果（参考DSL查询得到的JSON结果，从外到内，逐层解析）</li></ol><h1 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h1><p>上述手动创建DSL查询的时候讲过查询的分类：<br><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231356476.png" alt="image-20240523135626365"></p><h2 id="1-1-叶子查询"><a href="#1-1-叶子查询" class="headerlink" title="1.1 叶子查询"></a>1.1 叶子查询</h2><h3 id="1-1-1-全文检索"><a href="#1-1-1-全文检索" class="headerlink" title="1.1.1 全文检索"></a>1.1.1 全文检索</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231357981.png" alt="image-20240523135752868"></p><h3 id="1-1-2-精确查询"><a href="#1-1-2-精确查询" class="headerlink" title="1.1.2 精确查询"></a>1.1.2 精确查询</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231358697.png" alt="image-20240523135825592"></p><h2 id="1-2-复合查询"><a href="#1-2-复合查询" class="headerlink" title="1.2 复合查询"></a>1.2 复合查询</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231359487.png" alt="image-20240523135928266"></p><h2 id="1-3-举例"><a href="#1-3-举例" class="headerlink" title="1.3 举例"></a>1.3 举例</h2><p>举例：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231415435.png" alt="image-20240523141521261"></p><p>具体代码如下:</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231415153.png" alt="image-20240523141510018"></p><h1 id="2-分页和排序"><a href="#2-分页和排序" class="headerlink" title="2.分页和排序"></a>2.分页和排序</h1><h2 id="2-1-基础API"><a href="#2-1-基础API" class="headerlink" title="2.1 基础API"></a>2.1 基础API</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231427552.png" alt="image-20240523142727445"></p><h1 id="3-高亮"><a href="#3-高亮" class="headerlink" title="3.高亮"></a>3.高亮</h1><ul><li>条件同样是在<code>request.source()</code>中指定，只不过高亮条件要基于<code>HighlightBuilder</code>来构造</li><li>高亮响应结果与搜索的文档结果不在一起，需要单独解析</li></ul><h2 id="3-1-基础API"><a href="#3-1-基础API" class="headerlink" title="3.1 基础API"></a>3.1 基础API</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231425033.png" alt="image-20240523142500909"></p><h2 id="3-2-获取高亮值"><a href="#3-2-获取高亮值" class="headerlink" title="3.2 获取高亮值"></a>3.2 获取高亮值</h2><p>每一条hits信息原始数据在_source部分，而高亮部分在同级highlight内部：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231424188.png" alt="image-20240523142428052"></p><p>在整体代码的位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231426493.png" alt="image-20240523142651360"></p><p>代码解读：</p><ul><li>从结果中获取<code>_source</code>。<code>hit.getSourceAsString()</code>，这部分是非高亮结果，json字符串。还需要反序列为<code>ItemDoc</code>对象</li><li>获取高亮结果。<code>hit.getHighlightFields()</code>，返回值是一个<code>Map</code>，key是高亮字段名称，值是<code>HighlightField</code>对象，代表高亮值</li><li>从<code>Map</code>中根据高亮字段名称，获取高亮字段值对象<code>HighlightField</code></li><li>从<code>HighlightField</code>中获取<code>Fragments</code>，并且转为字符串。这部分就是真正的高亮字符串了</li><li>最后：用高亮的结果替换<code>ItemDoc</code>中的非高亮结果</li></ul><h1 id="4-聚合"><a href="#4-聚合" class="headerlink" title="4.聚合"></a>4.聚合</h1><p>我们以品牌聚合为例:</p><h2 id="4-1-基础API"><a href="#4-1-基础API" class="headerlink" title="4.1 基础API"></a>4.1 基础API</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231500598.png" alt="image-20240523150059473"></p><p>在Java代码中位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231502329.png" alt="image-20240523150224095"></p><h2 id="4-2-获取桶结果"><a href="#4-2-获取桶结果" class="headerlink" title="4.2 获取桶结果"></a>4.2 获取桶结果</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231508702.png" alt="image-20240523150857573"></p><p>在Java代码中位置：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231509794.png" alt="image-20240523150938582"></p><h1 id="Elasticsearch学习总结"><a href="#Elasticsearch学习总结" class="headerlink" title="==Elasticsearch学习总结=="></a>==Elasticsearch学习总结==</h1><h1 id="1-基本使用思路："><a href="#1-基本使用思路：" class="headerlink" title="==1.基本使用思路：=="></a>==1.基本使用思路：==</h1><p>1.创建索引库和映射   –有了类似于数据库的表和表定义</p><p>2.对文档进行CRUD  –有了类似于数据库的一行行数据</p><p>3.在对应位置进行复杂的DSL查询  –我们可以进行高级的查询，分页，排序，高亮，聚合操作</p><h1 id="2-如果写Java代码的话："><a href="#2-如果写Java代码的话：" class="headerlink" title="==2.如果写Java代码的话：=="></a>==2.如果写Java代码的话：==</h1><p>1.pom.xml导入RestHighLevelClient依赖，然后在父工程覆盖ES版本，初始化RestHighLevelClient依赖</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231551904.png" alt="image-20240523155157771"></p><p>2.分析Mysql哪些字段需要搜索和必须存在，然后Elasticsearch在网页上进行手动设定索引库映射</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231552362.png" alt="image-20240523155251252"></p><p>3.对索引库进行操作【不过我认为网页上更方便】 —到这一步类似于完成了数据库的表和表定义</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231553363.png" alt="image-20240523155356214"></p><p>4.对文档操作【不过我认为网页上更方便】   —到这一步类似于有了数据库的数据</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231555759.png" alt="image-20240523155503652"></p><p>5.在具体位置就可以进行复杂的DSL查询【可以进行查询，分页，排序，高亮，聚合等操作】</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202405231556637.png" alt="image-20240523155632499"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-使用场景&quot;&gt;&lt;a href=&quot;#0-使用场景&quot; class=&quot;headerlink&quot; title=&quot;0.使用场景&quot;&gt;&lt;/a&gt;0.使用场景&lt;/h1&gt;&lt;p&gt;数据库的模糊搜索功能单一，匹配条件非常苛刻，必须恰好包含用户搜索的关键字。&lt;/p&gt;
&lt;p&gt;而在搜索引擎中，用
      
    
    </summary>
    
    
    
      <category term="Elasticsearch" scheme="https://Larkkkkkkk.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="https://larkkkkkkk.github.io/2024/04/01/Zookeeper/"/>
    <id>https://larkkkkkkk.github.io/2024/04/01/Zookeeper/</id>
    <published>2024-04-01T02:58:23.000Z</published>
    <updated>2024-04-17T08:09:30.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Zookeeper"><a href="#1-Zookeeper" class="headerlink" title="1.Zookeeper"></a>1.Zookeeper</h1><p>学完dubbo来看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Zookeeper&quot;&gt;&lt;a href=&quot;#1-Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;1.Zookeeper&quot;&gt;&lt;/a&gt;1.Zookeeper&lt;/h1&gt;&lt;p&gt;学完dubbo来看&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Zookeeper" scheme="https://Larkkkkkkk.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://larkkkkkkk.github.io/2024/03/18/RabbitMQ-0/"/>
    <id>https://larkkkkkkk.github.io/2024/03/18/RabbitMQ-0/</id>
    <published>2024-03-18T11:43:04.000Z</published>
    <updated>2024-06-23T07:47:20.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-同步调用和异步调用"><a href="#1-同步调用和异步调用" class="headerlink" title="1.同步调用和异步调用"></a>1.同步调用和异步调用</h1><h2 id="1-1-同步调用"><a href="#1-1-同步调用" class="headerlink" title="1.1 同步调用"></a>1.1 同步调用</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407480.png" alt="image-20240319100914998"></p><p>综上，同步调用的方式存在下列问题：</p><ul><li>拓展性差(新增业务和逻辑就要修改，不符合开闭原则)</li><li>性能下降</li><li>级联失败</li></ul><p>而要解决这些问题，我们就必须用<strong>异步调用</strong>的方式来代替<strong>同步调用</strong></p><h2 id="1-2-异步调用"><a href="#1-2-异步调用" class="headerlink" title="1.2 异步调用"></a>1.2 异步调用</h2><p>  异步调用方式其实就是==基于消息通知的方式==，一般包含三个角色：</p><ul><li>消息发送者：投递消息的人，就是原来的调用方</li><li>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</li><li>消息接收者：接收和处理消息的人，就是原来的服务提供方</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071403552.png" alt="image-20240319143703635"></p><p>异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker(消息代理)。然后接收者根据自己的需求从消息Broker那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理  —&gt;  发送消息的人和接收消息的人就完全解耦了</p><p>如图所示：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071404220.png" alt="image-20240319144436498"></p><p>综上，异步调用的优势包括：</p><ul><li>耦合度更低</li><li>性能更好</li><li>业务拓展性强</li><li>故障隔离，避免级联失败</li></ul><p>当然，异步通信也并非完美无缺，它存在下列缺点：</p><ul><li><p>完全依赖于Broker的可靠性、安全性和性能</p></li><li><p>架构复杂，后期维护和调试麻烦</p></li></ul><h2 id="1-3-MQ技术选型"><a href="#1-3-MQ技术选型" class="headerlink" title="1.3 MQ技术选型"></a>1.3 MQ技术选型</h2><p>消息Broker，目前常见的实现方案就是消息队列（MessageQueue），简称为MQ.<br>目比较常见的MQ实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP  XMPP  SMTP  STOMP</td><td>OpenWire  STOMP  REST  XMPP  AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ<br>追求可靠性：RabbitMQ、RocketMQ<br>追求吞吐能力：RocketMQ、Kafka<br>追求消息低延迟：RabbitMQ、Kafka</p><p>据统计，目前国内消息队列使用最多的还是RabbitMQ，再加上其各方面都比较均衡，稳定性也好</p><h1 id="2-RabbitMQ"><a href="#2-RabbitMQ" class="headerlink" title="2.RabbitMQ"></a>2.RabbitMQ</h1><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407789.png" alt="image-20240319093425166" style="zoom:80%;"><p>RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：<a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">Messaging that just works — RabbitMQ</a></p><h2 id="2-1-RabbitMQ安装"><a href="#2-1-RabbitMQ安装" class="headerlink" title="2.1 RabbitMQ安装"></a>2.1 RabbitMQ安装</h2><p>基于Docker来安装RabbitMQ，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run </span><br><span class="line">-e RABBITMQ_DEFAULT_USER&#x3D;larkkkkkkk   #设置默认用户名</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS&#x3D;123456   #设置默认密码</span><br><span class="line">-v mq-plugins:&#x2F;plugins   #将本地主机上的mq-plugins目录挂载到容器内部的&#x2F;plugins目录，可以存放插件</span><br><span class="line">--name mq    #指定容器名</span><br><span class="line">--hostname mq  #指定容器的主机名</span><br><span class="line">-p 15672:15672 #RabbitMQ管理页面登录的端口号 [浏览器输入http:&#x2F;&#x2F;localhost:15672&#x2F;即可进入]</span><br><span class="line">-p 5672:5672  #RabbitMQ用于AMQP协议通信 [SpringAMQP配置时候用]</span><br><span class="line">--network heima #将容器连接到名字为heima的网络中  [如果没有就使用命令创建hmall网络 docker network create heima]</span><br><span class="line">-d  #在后台运行容器</span><br><span class="line">rabbitmq:3.8-management  #使用RabbitMQ 3.8版本带有管理界面的镜像来创建容器</span><br></pre></td></tr></table></figure><p>可以看到在安装命令中有两个映射的端口：</p><ul><li>15672：RabbitMQ提供的管理控制台的端口</li><li>5672：RabbitMQ的消息发送处理接口</li></ul><p>通过访问 <a href="http://localhost:15672即可看到管理控制台。首次访问登录，需要配置文件中设定的用户名和密码">http://localhost:15672即可看到管理控制台。首次访问登录，需要配置文件中设定的用户名和密码</a></p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407126.png" alt="image-20240319192803935"></p><h2 id="2-2-RabbitMQ架构"><a href="#2-2-RabbitMQ架构" class="headerlink" title="2.2 RabbitMQ架构"></a>2.2 RabbitMQ架构</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071410365.png" alt="image-20240319193424489"></p><p>其中包含几个概念：</p><ul><li><code>**publisher**</code>：生产者，也就是发送消息的一方</li><li><code>**consumer**</code>：消费者，也就是消费消息的一方</li><li><code>**queue**</code>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li><li><code>**exchange**</code>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li><li><code>**virtual host**</code>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li></ul><p>上述这些东西都可以在RabbitMQ的管理控制台来管理</p><h1 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3.SpringAMQP"></a>3.SpringAMQP</h1><p>RabbitMQ采用AMQP协议，因此具有跨语言的特性。任何语言只要遵循AMQP协议收发消息，都可以与RabbitMQ交互【RabbitMQ官方提供了各种不同语言的客户端】</p><p>但是RabbitMQ官方提供的Java客户端编码复杂，一般生产环境下我们更多会结合Spring来使用,Spring提供模板工具和SpringBoot自动装配 –&gt; ==SpringAMQP==</p><p>提供三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息 -rabbitTemplate.convertAndSend(队列名,发送信息);</li></ul><h2 id="3-1-生产者-消费者-1-1"><a href="#3-1-生产者-消费者-1-1" class="headerlink" title="3.1 生产者-消费者(1-1)"></a>3.1 生产者-消费者(1-1)</h2><h3 id="3-1-1-导入Demo工程"><a href="#3-1-1-导入Demo工程" class="headerlink" title="3.1.1 导入Demo工程"></a>3.1.1 导入Demo工程</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407932.png" alt="image-20240319195614981"></p><h3 id="3-1-2-导入maven坐标"><a href="#3-1-2-导入maven坐标" class="headerlink" title="3.1.2 导入maven坐标"></a>3.1.2 导入maven坐标</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407671.png" alt="image-20240319195708883"></p><h3 id="3-1-3-新建队列"><a href="#3-1-3-新建队列" class="headerlink" title="3.1.3  新建队列"></a>3.1.3  新建队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407672.png" alt="image-20240319200226308"></p><h3 id="3-1-4-每个子工程配置RabbitMQ信息"><a href="#3-1-4-每个子工程配置RabbitMQ信息" class="headerlink" title="3.1.4  每个子工程配置RabbitMQ信息"></a>3.1.4  每个子工程配置RabbitMQ信息</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407634.png" alt="image-20240319200405081"></p><h3 id="3-1-5-生产者发送消息"><a href="#3-1-5-生产者发送消息" class="headerlink" title="3.1.5 生产者发送消息"></a>3.1.5 生产者发送消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.注入RabbitTemplate对象</span><br><span class="line">2.对象调用convertAndSend(队列名，信息)方法</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407159.png" alt="image-20240319200946446" style="zoom:150%;"><h3 id="3-1-6-消费者接收消息"><a href="#3-1-6-消费者接收消息" class="headerlink" title="3.1.6 消费者接收消息"></a>3.1.6 消费者接收消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.使用注解RabbitListener(队列名&#x3D;“xxx”)</span><br><span class="line">2.启动当前消费者子工程(SpringBoot工程)</span><br><span class="line">3.生产者发送一次消息，消费者就会接收到一次消息</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407040.png" alt="image-20240319201418364"></p><h2 id="3-2-生产者-消费者-1-n-WorkQueues任务模型"><a href="#3-2-生产者-消费者-1-n-WorkQueues任务模型" class="headerlink" title="3.2 生产者-消费者(1-n) -WorkQueues任务模型"></a>3.2 生产者-消费者(1-n) -WorkQueues任务模型</h2><p>Work queues任务模型    –&gt;   让多个消费者绑定到一个队列，共同消费队列中的消息   –&gt;   ==解决消息堆积太多==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407290.png" alt="image-20240319202054225"></p><h3 id="3-2-1-新建队列"><a href="#3-2-1-新建队列" class="headerlink" title="3.2.1 新建队列"></a>3.2.1 新建队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407109.png" alt="image-20240320091336394"></p><h3 id="3-2-2-生产者发送消息"><a href="#3-2-2-生产者发送消息" class="headerlink" title="3.2.2 生产者发送消息"></a>3.2.2 生产者发送消息</h3><p>一个发送者，循环发送50次消息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407815.png" alt="image-20240320091703762"></p><h3 id="3-2-3-消费者接收消息"><a href="#3-2-3-消费者接收消息" class="headerlink" title="3.2.3 消费者接收消息"></a>3.2.3 消费者接收消息</h3><p>两个消费者接收消息，一个休眠20ms(每秒钟处理50个消息)，一个休眠200ms(每秒钟处理5个消息)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071410175.png" alt="image-20240320092251196"></p><h3 id="3-2-4-均匀分配"><a href="#3-2-4-均匀分配" class="headerlink" title="3.2.4 均匀分配"></a>3.2.4 均匀分配</h3><p>启动消费者子工程项目，再发送消息就可以接受消息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407287.png" alt="image-20240320092647584"></p><p>可以看到消费者1和消费者2竟然每人消费了25条消息：</p><ul><li>消费者1很快完成了自己的25条消息</li><li>消费者2却在缓慢的处理自己的25条消息。</li></ul><p>也就是说消息是==平均分配==给每个消费者，并没有考虑到消费者的处理能力。导致1个消费者空闲，另一个消费者忙的不可开交。没有充分利用每一个消费者的能力，最终消息处理的耗时远远超过了1秒。这样显然是有问题的  </p><h3 id="3-2-5-能者多劳-yml配置prefetch"><a href="#3-2-5-能者多劳-yml配置prefetch" class="headerlink" title="3.2.5 能者多劳(yml配置prefetch)"></a>3.2.5 能者多劳(yml配置prefetch)</h3><p>修改==listener.simple.prefetch:1==可以保证==能者多劳==，每个消费者每次只能获取一条消息，处理完成才能获取下一条消息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407470.png" alt="image-20240320093106144"></p><p>更改之后重新发送消息：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407467.png" alt="image-20240320093225443"></p><p>可以发现，由于消费者1处理速度较快，所以处理了更多的消息；消费者2处理速度较慢，只处理了6条消息。而最终总的执行耗时也在1秒左右，大大提升。<br>正所谓能者多劳，这样充分利用了每一个消费者的处理能力，可以有效避免消息积压问题</p><h1 id="4-交换机-Exchange"><a href="#4-交换机-Exchange" class="headerlink" title="4.交换机(Exchange)"></a>4.交换机(Exchange)</h1><p>在3.1和3.2部分没有添加交换机，生产者直接发送消息到队列。但是引入交换机之后消息发送的模式会有很大的变化：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407236.png" alt="image-20240320093715426"></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li><strong>Publisher</strong>：生产者，不再发送消息到队列中，而是发给交换机</li><li><strong>Exchange</strong>：交换机，一方面，接收生产者发送的消息。另一方面，知道如何处理消息(递交给某个特别队列、递交给所有队列、或是将消息丢弃)</li><li><strong>Queue</strong>：消息队列也与以前一样，接收消息、缓存消息。不过队列一定要与交换机绑定。</li><li><strong>Consumer</strong>：消费者，与以前一样，订阅队列，【没有变化】</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><p>Exchange（交换机）的类型有四种：</p><ul><li><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列。【最早在控制台使用】</li><li><strong>Direct</strong>：订阅，基于RoutingKey（写死的路由key）发送给订阅了消息的队列</li><li><strong>Topic</strong>：通配符订阅，基于RoutingKey（符合通配符的路由key）发送给订阅了消息的队列</li><li><strong>Headers</strong>：头匹配，基于MQ的消息头匹配，【用的较少】</li></ul><h2 id="4-1-Fanout交换机-广播"><a href="#4-1-Fanout交换机-广播" class="headerlink" title="4.1 Fanout交换机(广播)"></a>4.1 Fanout交换机(广播)</h2><p>在广播(Fanout)模式下，消息发送流程是这样的</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407800.png" alt="image-20240320094830771"></p><h3 id="4-1-1-声明交换机和队列"><a href="#4-1-1-声明交换机和队列" class="headerlink" title="4.1.1 声明交换机和队列"></a>4.1.1 声明交换机和队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407936.png" alt="image-20240320095902006"></p><h3 id="4-1-2-消息发送"><a href="#4-1-2-消息发送" class="headerlink" title="4.1.2 消息发送"></a>4.1.2 消息发送</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407284.png" alt="image-20240320095942536"></p><h3 id="4-1-3-消息接收"><a href="#4-1-3-消息接收" class="headerlink" title="4.1.3 消息接收"></a>4.1.3 消息接收</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407340.png" alt="image-20240320100056347"></p><p>启动消费者子工程之后发送消息</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071412799.png" alt="image-20240320100134844"></p><h2 id="4-2-Direct交换机-订阅"><a href="#4-2-Direct交换机-订阅" class="headerlink" title="4.2 Direct交换机(订阅)"></a>4.2 Direct交换机(订阅)</h2><h3 id="4-2-1-声明交换机和队列"><a href="#4-2-1-声明交换机和队列" class="headerlink" title="4.2.1 声明交换机和队列"></a>4.2.1 声明交换机和队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071412758.png" alt="image-20240320200427090"></p><p>官网在线创建：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407754.png" alt="image-20240320200530874"></p><h3 id="4-2-2-消息发送"><a href="#4-2-2-消息发送" class="headerlink" title="4.2.2 消息发送"></a>4.2.2 消息发送</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407619.png" alt="image-20240320200725027"></p><h3 id="4-2-3-消息接收"><a href="#4-2-3-消息接收" class="headerlink" title="4.2.3 消息接收"></a>4.2.3 消息接收</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407860.png" alt="image-20240320200746903"></p><h2 id="4-3-Topic交换机-通配符订阅"><a href="#4-3-Topic交换机-通配符订阅" class="headerlink" title="4.3 Topic交换机(通配符订阅)"></a>4.3 Topic交换机(通配符订阅)</h2><h3 id="4-3-1-声明交换机和队列"><a href="#4-3-1-声明交换机和队列" class="headerlink" title="4.3.1 声明交换机和队列"></a>4.3.1 声明交换机和队列</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407415.png" alt="image-20240320200956679"></p><p>官网在线创建：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406222140936.png" alt="image-20240622214037809"></p><h3 id="4-3-2-消息发送"><a href="#4-3-2-消息发送" class="headerlink" title="4.3.2 消息发送"></a>4.3.2 消息发送</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407499.png" alt="image-20240320200802564"></p><h3 id="4-3-3-消息接收"><a href="#4-3-3-消息接收" class="headerlink" title="4.3.3 消息接收"></a>4.3.3 消息接收</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071407834.png" alt="image-20240320200816573"></p><h3 id="4-3-4-总结"><a href="#4-3-4-总结" class="headerlink" title="4.3.4 总结"></a>4.3.4 总结</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>BindingKey</code> 的时候使用==通配符==！</p><p>BindingKey一般是一个/多个单词组成，多个单词之间用.分割</p><p>通配符规则：</p><p>通配符规则：</p><ul><li><code>#</code>：匹配0个或者多个词</li><li><code>*</code>：匹配1个词</li></ul><p>举例：</p><ul><li><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code> 或者 <code>item</code> (#可以是0个词到多个词)</li><li><code>item.*</code>：只能匹配<code>item.spu</code>  （*只能是一个词）</li></ul><h1 id="5-API-队列和交换机-替换网页手动创建"><a href="#5-API-队列和交换机-替换网页手动创建" class="headerlink" title="5. API-队列和交换机(替换网页手动创建)"></a>5. API-队列和交换机(替换网页手动创建)</h1><p>SpringAMQP提供了声明队列，交换机和绑定关系的API：</p><ul><li>Queue：队列</li><li>Exchange：交换机</li><li>Binding：绑定关系</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408736.png" alt="image-20240320203603754"></p><h2 id="5-1-Bean方式声明-不推荐"><a href="#5-1-Bean方式声明-不推荐" class="headerlink" title="5.1 @Bean方式声明(不推荐)"></a>5.1 @Bean方式声明(不推荐)</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408875.png" alt="image-20240320215605011"></p><p>这样创建很繁琐，因此提供了基于注解的方式</p><h2 id="5-2-注解方式声明-推荐"><a href="#5-2-注解方式声明-推荐" class="headerlink" title="5.2 注解方式声明(推荐)"></a>5.2 注解方式声明(推荐)</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408708.png" alt="image-20240320220328866"></p><p>其实就是@RabbitListener注解里面配置关系(@QueueBinding)，然后里面具体的就是交换机(@Exchange)，队列(@Queue)以及路由key(key)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071412958.png" alt="image-20240320221056179"></p><h1 id="6-消息转换器-解决发送消息的JDK序列化"><a href="#6-消息转换器-解决发送消息的JDK序列化" class="headerlink" title="6.消息转换器[解决发送消息的JDK序列化]"></a>6.消息转换器[解决发送消息的JDK序列化]</h1><p>Spring的convertAndSend()方法接收的是一个Object类型：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408190.png" alt="image-20240320221749744"></p><p>而在数据传输时，可能会因为默认的==JDK序列化==导致数据体积过大(乱码一样的序列化结果)，安全漏洞，可读性差等问题。</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408420.png" alt="image-20240320222347892"></p><p>因此可以考虑使用==Json序列化和反序列化==：</p><h2 id="6-1-配置JSON转换器"><a href="#6-1-配置JSON转换器" class="headerlink" title="6.1 配置JSON转换器"></a>6.1 配置JSON转换器</h2><ul><li>1.在生产者和消费者两个服务中都要引入依赖</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408060.png" alt="image-20240321092511719"></p><p>注意：如果项目中引入了Spring-boot-starter-web依赖，则无需再次引入Jackson依赖</p><ul><li><p>2.在生产者和消费者两个服务的启动类中添加一个Bean：配置消息转换器</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408366.png" alt="image-20240321092839447"></p></li></ul><h1 id="7-RabbitMQ使用总结-【直接看这里写代码】"><a href="#7-RabbitMQ使用总结-【直接看这里写代码】" class="headerlink" title="==7.RabbitMQ使用总结==【直接看这里写代码】"></a>==7.RabbitMQ使用总结==【直接看这里写代码】</h1><p>==可以参考&lt;RabbitMQ-黑马商城为例&gt;这篇文章，有详细的操作介绍和步骤==</p><h2 id="7-1-maven引入maven坐标"><a href="#7-1-maven引入maven坐标" class="headerlink" title="7.1 maven引入maven坐标"></a>7.1 maven引入maven坐标</h2><p>在生产者和消费者的pom.xml文件中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--消息发送--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="7-2-子工程配置RabbitMQ信息"><a href="#7-2-子工程配置RabbitMQ信息" class="headerlink" title="7.2 子工程配置RabbitMQ信息"></a>7.2 子工程配置RabbitMQ信息</h2><p>在生产者和消费者的application.yml文件中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: 192.168.92.129 # 你的虚拟机IP</span><br><span class="line">    port: 5672 # 端口</span><br><span class="line">    virtual-host: &#x2F;hmall # 虚拟主机</span><br><span class="line">    username: hmall # 用户名</span><br><span class="line">    password: 123456 # 密码</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;消费者和生产者会在对应位置添加配置 【例如：生产者消费者的确认机制，重试机制等】</span><br></pre></td></tr></table></figure><h2 id="7-3-配置消息转换器-解决发送消息的JDK序列化"><a href="#7-3-配置消息转换器-解决发送消息的JDK序列化" class="headerlink" title="7.3 配置消息转换器[解决发送消息的JDK序列化]"></a>7.3 配置消息转换器[解决发送消息的JDK序列化]</h2><p>可以在公共模块添加bean</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408004.png" alt="image-20240321095355698"></p><h2 id="7-4-生产者-发送消息"><a href="#7-4-生产者-发送消息" class="headerlink" title="7.4 生产者-发送消息"></a>7.4 生产者-发送消息</h2><p>将原始的同步修改订单信息更改为异步修改</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408382.png" alt="image-20240321095847784"></p><h2 id="7-5-消费者-接收消息"><a href="#7-5-消费者-接收消息" class="headerlink" title="7.5 消费者-接收消息"></a>7.5 消费者-接收消息</h2><p>消费者可以添加消息监听，添加好交换机和路由key和队列</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408722.png" alt="image-20240321100301473"></p><p>==总结如下：==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408690.png" alt="image-20240403110457790"></p><p>大致就是导入maven，子工程配置一些属性，然后生产者调用rabbitMQ的rabbitTemplate.convertAndSend()方法发送消息【里面可以添加各种】，在消费者方面可以①使用bean进行声明交换机，队列和关系②使用@RabbitListener注解进行声明【里面可以添加一些属性，例如持久化的，lazyqueue的，延迟消息的】</p><hr><h1 id="高级进阶-–保证消息可靠性-三个方面"><a href="#高级进阶-–保证消息可靠性-三个方面" class="headerlink" title="==高级进阶 –保证消息可靠性(三个方面)=="></a>==高级进阶 –保证消息可靠性(三个方面)==</h1><p>异步结构可能会在发送者，MQ，消费者三个地方出现问题!!!因此要考虑这三个位置的可靠性和兜底方案(延迟消息)</p><p>消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408510.png" alt="image-20240321120455090"></p><p>消息从生产者到消费者的每一步都可能导致消息丢失：</p><ul><li>发送消息时丢失：<ul><li>生产者发送消息时连接MQ失败</li><li>生产者发送消息到达MQ后未找到<code>Exchange</code></li><li>生产者发送消息到达MQ的<code>Exchange</code>后，未找到合适的<code>Queue</code></li><li>消息到达MQ后，处理消息的进程发生异常</li></ul></li><li>MQ导致消息丢失：<ul><li>消息到达MQ，保存到队列后，尚未消费就突然宕机</li></ul></li><li>消费者处理消息时：<ul><li>消息接收后尚未处理突然宕机</li><li>消息接收后处理过程中抛出异常</li></ul></li></ul><p>综上，我们要解决消息丢失问题，保证MQ的可靠性，就必须从3个方面入手：</p><ul><li><p>确保生产者一定把消息发送到MQ    —&gt; ==生产者的可靠性(生产者重试机制，生产者确认机制)==</p></li><li><p>确保MQ不会将消息弄丢   —&gt; ==MQ的可靠性(数据持久化，lazy queue)==</p></li><li><p>确保消费者一定要处理消息   —&gt;   ==消费者的可靠性(消费者确认机制，失败重传机制，失败处理策略，业务幂等性)==</p><p>==总汇总(复习图)==</p></li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408491.png" alt="image-20240325153049616" style="zoom:150%;"><h1 id="8-可靠性——-发送者"><a href="#8-可靠性——-发送者" class="headerlink" title="8.可靠性——-发送者"></a>8.可靠性——-发送者</h1><h2 id="8-1-生产者重试机制-建议禁用"><a href="#8-1-生产者重试机制-建议禁用" class="headerlink" title="8.1 生产者重试机制(建议禁用)"></a>8.1 生产者重试机制(建议禁用)</h2><p>生产者发送消息时，出现网络故障，导致与MQ连接中断   ———-&gt;  SpringAMQP提供的消息发送时的==重试机制==</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408900.png" alt="image-20240321110716739"></p><p>注意:<br>当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的重试机制是==阻塞式重试==（也就是说多次重试等待的过程中，当前线程是被阻塞的）</p><p>如果对业务性能有要求的，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。</p><h2 id="8-2-生产者确认机制-默认不开启"><a href="#8-2-生产者确认机制-默认不开启" class="headerlink" title="8.2 生产者确认机制(默认不开启)"></a>8.2 生产者确认机制(默认不开启)</h2><p>一般情况下，只要生产者与MQ之间的网络连接顺畅，基本不会出现发送消息丢失的情况，因此大多数情况下我们无需考虑这种问题。</p><p>少数情况下，也会出现消息发送到MQ之后丢失的现象，比如：</p><ul><li>MQ内部处理消息的进程发生了异常 </li><li>生产者发送消息到达MQ后未找到交换机</li><li>生产者发送消息到达MQ的交换机之后，未找到合适的队列，因此无法路由</li></ul><p>针对上述三种情况，RabbitMQ提供了==生产者消息确认机制==，包括了<strong>Publisher Confirm</strong>和<strong>Publisher Return</strong>两种方式。</p><p>在开启确认机制的情况下，当生产者发送消息给MQ之后，MQ会根据消息处理的情况返回不同的回执：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408106.png" alt="image-20240321160450585"></p><p>总结如下：</p><ul><li>1.只要消息投递到MQ，就返回ACK，告知投递成功(基本上这三种ack我们可以考虑不处理，直接只关注nack的情况)</li></ul><p>​              1.1 当消息投递到MQ，但是路由失败时，通过<strong>Publisher Return</strong>返回异常信息，同时返回ack的确认信息，代表投递成功</p><p>​              1.2 临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功</p><p>​              1.3 持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功</p><ul><li>2.其它情况都会返回NACK，告知投递失败</li></ul><p>【其中ack(投递成功)和nack(投递失败)都属于Publisher Confirm机制;return是属于Publisher Return机制】</p><p>【(默认)两种机制都是关闭状态，需要通过配置文件来开启，因为是需要额外的网络和系统资源开销】</p><p>【一定要使用的话，无需开启Publisher-Return机制(一般路由失败是自己业务问题)】</p><h3 id="8-2-1-配置文件添加"><a href="#8-2-1-配置文件添加" class="headerlink" title="8.2.1 配置文件添加"></a>8.2.1 配置文件添加</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408985.png" alt="image-20240321161135899"></p><p>这里<code>publisher-confirm-type</code>有三种模式可选：</p><ul><li><code>none</code>：关闭confirm机制</li><li><code>simple</code>：同步阻塞等待MQ的回执</li><li><code>correlated</code>：MQ异步回调返回回执</li></ul><p>一般我们推荐使用<code>correlated</code>，回调机制。</p><h3 id="8-2-2-定义ReturnCallback-返回信息"><a href="#8-2-2-定义ReturnCallback-返回信息" class="headerlink" title="8.2.2 定义ReturnCallback(返回信息)"></a>8.2.2 定义ReturnCallback(返回信息)</h3><p><strong>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此我们可以在配置类中统一设置</strong></p><p>我们在publisher模块定义一个配置类：rabbitTemplate对象调用setReturnsCallback()方法，方法参数是一个匿名内部类(重写returnedMessage方法)</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408864.png" alt="image-20240321161749402"></p><h3 id="8-2-3-定义ConfirmCallback-确定ack-nack"><a href="#8-2-3-定义ConfirmCallback-确定ack-nack" class="headerlink" title="8.2.3 定义ConfirmCallback(确定ack/nack)"></a>8.2.3 定义ConfirmCallback(确定ack/nack)</h3><p>由于每个消息发送时的处理逻辑不一定相同，因此ConfirmCallback需要在每次发送消息时定义。</p><p>就是在发送消息时，调用RabbitTemplate.convertAndSend()时多传递一个参数：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408581.png" alt="image-20240321162745583"></p><p>这里的CorrelationData中包含两个核心的东西：</p><ul><li><code>id</code>：消息的唯一标示，MQ对不同的消息的回执以此做判断，避免混淆</li><li><code>SettableListenableFuture</code>：回执结果的Future对象</li></ul><p>将来MQ的回执就会通过这个<code>Future</code>来返回，我们可以提前给<code>CorrelationData</code>中的<code>Future</code>添加回调函数来处理消息回执：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408700.png" alt="image-20240321194022895"></p><p>发送者位置发送消息(新增字段为了获取MQ给的结果)：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408032.png" alt="image-20240321194656371"></p><p><strong>注意</strong>：<br>开启生产者确认比较消耗MQ性能，一般不建议开启。而且大家思考一下触发确认的几种情况：</p><ul><li>路由失败：一般是因为RoutingKey错误导致，往往是编程导致</li><li>交换机名称错误：同样是编程错误导致</li><li>MQ内部故障：这种需要处理，但概率往往较低。因此只有对消息可靠性要求非常高的业务才需要开启，而且仅仅需要开启ConfirmCallback处理nack就可以</li></ul><h1 id="9-可靠性——–RabbitMQ"><a href="#9-可靠性——–RabbitMQ" class="headerlink" title="9.可靠性——–RabbitMQ"></a>9.可靠性——–RabbitMQ</h1><p>在默认情况下，RabbitMQ会将接收到的信息保存在==内存==中(降低消息收发延迟)。这样会导致两个问题：</p><ul><li>一旦RabbitMQ宕机，内存中的消息会丢失   –&gt; ==交换机持久化,队列持久化,消息持久化==</li><li>内存空间有限，当消费者故障或者处理过慢，会导致消息积压，引发RabbitMQ阻塞  –&gt; ==Lazy Queue==</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408311.png" alt="image-20240321200321687"></p><h2 id="9-1-三种持久化"><a href="#9-1-三种持久化" class="headerlink" title="9.1 三种持久化"></a>9.1 三种持久化</h2><p>为了提升性能，默认情况下MQ的数据都是在内存存储的临时数据，重启后就会消失。为了保证数据的可靠性，必须配置数据持久化，包括：</p><ul><li>1.交换机持久化</li><li>2.队列持久化</li><li>3.消息持久化</li></ul><p>其中以<strong>控制台界面</strong>为例：</p><ul><li>1.交换机持久化：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408675.png" alt="image-20240321202630567"></p><ul><li>2.队列持久化：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408066.png" alt="image-20240321202726506"></p><ul><li>3.消息持久化：</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071408104.png" alt="image-20240321202757851"></p><p><strong>说明：</strong></p><p>在开启持久化机制以后，如果同时还开启了生产者确认机制，那么MQ会在消息持久化以后才发送ACK回执，进一步确保消息的可靠性</p><p>不过出于性能考虑，为了减少IO次数，发送到RabbitMQ的消息是每隔一段时间(100ms左右)批量持久化，这会导致后续的ACK回执有一定的延迟，因此建议生产者确认全部采用异步方式</p><h2 id="9-2-LazyQueue惰性队列"><a href="#9-2-LazyQueue惰性队列" class="headerlink" title="9.2 LazyQueue惰性队列"></a>9.2 LazyQueue惰性队列</h2><p>在默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：</p><ul><li>消费者宕机或出现网络故障(后续崩了)</li><li>消息发送量激增，超过了消费者处理速度(前面发的太快了，后面接不住)</li><li>消费者处理业务发生阻塞(后续阻塞)</li></ul><p>一旦出现消息堆积问题，RabbitMQ的内存占用会越来越高 —&gt; 触发内存预警上限，此时RabbitMQ会将内存消息 –刷–&gt; 磁盘，这个行为叫==PageOut==，<code>PageOut</code>会耗费一段时间，并且会阻塞队列进程。因此在这个过程中RabbitMQ不会再处理新的消息，生产者的所有请求都会被阻塞</p><p>为了解决这个问题，从3.6.0版本开始，增加了Lazy Queues(惰性队列)。惰性队列的特征如下：</p><ul><li>接收到消息后直接存入磁盘而非内存 (直接存磁盘，就不会刷盘造成阻塞队列进程)</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载，需要了我才加载内存）</li><li>支持数百万条的消息存储</li></ul><p>而在3.12版本之后，LazyQueue已经成为了所有队列的默认格式。因此官方推荐升级RabbitMQ为3.12版本/所有队列都设置为LazyQueue模式</p><h3 id="9-2-1方式一—-控制台配置Lazy模式"><a href="#9-2-1方式一—-控制台配置Lazy模式" class="headerlink" title="9.2.1方式一— 控制台配置Lazy模式"></a>9.2.1方式一— 控制台配置Lazy模式</h3><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409172.png" alt="image-20240321204855176"></p><h3 id="9-2-2-方式二—代码配置Lazy模式"><a href="#9-2-2-方式二—代码配置Lazy模式" class="headerlink" title="9.2.2 方式二—代码配置Lazy模式"></a>9.2.2 方式二—代码配置Lazy模式</h3><p>基本原理都是设置属性：==x-queue-mode=lazy==</p><ul><li><strong>基于@Bean注解</strong>(配置类)</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409643.png" alt="image-20240321204954868"></p><p>QueueBuilder底层源码为：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409225.png" alt="image-20240321205034258"></p><ul><li><strong>基于@RabbitListener注解</strong>(消费者子工程)</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409794.png" alt="image-20240321205132950"></p><h3 id="9-2-3-更新已有队列为Lazy模式"><a href="#9-2-3-更新已有队列为Lazy模式" class="headerlink" title="9.2.3 更新已有队列为Lazy模式"></a>9.2.3 更新已有队列为Lazy模式</h3><ul><li>基于控制台：</li></ul><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409681.png" alt="image-20240321205402456" style="zoom: 80%;"><ul><li>基于命令行：</li></ul><p>可以基于命令行设置policy：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#39;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#39; --apply-to queues</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</li><li><code>set_policy</code> ：添加一个策略</li><li><code>Lazy</code> ：策略名称，可以自定义</li><li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li><li><code>&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</code> ：设置队列模式为lazy模式</li><li><code>--apply-to queues</code>：策略的作用对象，是所有的队列</li></ul><h1 id="10-可靠性——-消费者"><a href="#10-可靠性——-消费者" class="headerlink" title="10.可靠性——-消费者"></a>10.可靠性——-消费者</h1><h2 id="10-1-消费者确认机制"><a href="#10-1-消费者确认机制" class="headerlink" title="10.1 消费者确认机制"></a>10.1 消费者确认机制</h2><p>为了确定消费者是否成功处理消息，RabbitMQ提供了消费者确认机制(<strong>Consumer Acknowledgement</strong>)</p><p>就是说当消费者处理消息结束后，应该向+RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态。这时候回执有三种可选值：</p><ul><li><strong>ack</strong>：<strong>成功处理消息</strong>，RabbitMQ从队列中删除该消息</li><li><strong>nack</strong>：<strong>消息处理失败</strong>，RabbitMQ再次投递消息</li><li><strong>reject(很少使用)</strong>：<strong>消息处理失败并拒绝该消息</strong>，RabbitMQ从队列中删除该消息</li></ul><p>一般第三种reject方式比较少，除非是消息格式问题(那就是开发问题)，因此大多数情况下我们需要将消息处理的代码通过try-catch机制捕获，消息处理成功就返回ack，处理失败就返回nack。</p><p>由于消息回执的处理代码比较统一，因此<strong>SpringAMQP帮我们实现了消息确认</strong>。并且允许我们通过配置文件(yml)设置ACK处理方式，有三种模式：</p><ul><li><strong>none</strong>:<strong>不处理</strong>。就是将消息投递给消费者后立刻回调ack，消息会立刻从MQ中删除。【非常不安全，不建议使用】</li><li><strong>manual</strong>:<strong>手动模式</strong>。需要自己在业务代码中调用api，回调发送ack/reject【存在业务入侵，但更灵活】</li><li><strong>auto</strong>:<strong>自动模式</strong>。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强。<ul><li>当业务正常执行时则自动返回ack(RabbitMQ删除消息)</li><li>当业务出现异常时根据异常判断返回不同的结果</li></ul></li></ul><p>​                - 如果是业务异常，自动返回nack(RabbitMQ再次投递消息)     —&gt; <strong>可能会出现不停重复投递(导致消息堆积)</strong></p><p>​                - 如果是消息处理/校验异常，自动返回reject(RabbitMQ删除消息)</p><p>配置消费者的xml文件可以修改SpringAMQP的ack处理方式：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409439.png" alt="image-20240401141236210"></p><p>但是，如果auto模式下是业务异常回执给nack，那就会不断从MQ中投递消息，会导致MQ消息处理飙升带来不必要的压力(这种极端情况就是消费者一直无法执行成功，发生概率很低，但是不怕万一就怕一万)</p><h2 id="10-2-消费者失败重试机制"><a href="#10-2-消费者失败重试机制" class="headerlink" title="10.2 消费者失败重试机制"></a>10.2 消费者失败重试机制</h2><p>因为10.1如果是收到nack回执，那么就会不断从MQ中投递消息，可能会导致消息堆积，导致mq的消息处理飙升，带来不必要的压力</p><p>我们可以利用Spring的retry机制—&gt;==当消费者异常就利用本地重试(×无限制重试)==</p><p>配置消费者的xml文件可以修改SpringAMQP的本地重试机制：</p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409973.png" alt="image-20240401154838741" style="zoom: 50%;"><p>在开启重试机制后，重试次数耗尽之后，如果消息依然失效，则会默认<strong>直接丢弃消息!!!!!!!!!!!!!</strong></p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409607.png" alt="image-20240401155907410" style="zoom: 50%;"><p>可以发现：</p><ul><li><p>消费者在失败后消息并没有重新回到MQ无限重新投递，而是重试3次</p></li><li><p>本地重试3次之后，抛出了AmqpRejectAndDontRequeueException异常（说明直接reject丢弃了）</p></li></ul><h2 id="10-3-失败处理策略-解决10-2重试后reject丢弃消息情况"><a href="#10-3-失败处理策略-解决10-2重试后reject丢弃消息情况" class="headerlink" title="10.3 失败处理策略[解决10.2重试后reject丢弃消息情况]"></a>10.3 失败处理策略[解决10.2重试后reject丢弃消息情况]</h2><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409952.png" alt="image-20240401163030885"></p><p>因为10.2本地重试之后如果消息失效就直接丢弃，因此我们可以考虑==加上自定义重试次数之后的策略==。只需要==MessageRecoverer接口==来处理，它包含了三种不同的实现：</p><ul><li><strong>RejectAndDontRequeueRecoverer(默认)</strong>：重试耗尽后，直接reject，丢弃消息</li><li>*<em>ImmediateRequeueMessageRecoverer *</em>：重试耗尽后，返回nack，消息重新入队 【减缓重试的速度，就还是要重新投递到前一步】</li><li><strong>RepublishMessageRecoverer</strong>：重试耗尽后，将失败消息投递到指定的交换机(最后人工校验/特殊校验)</li></ul><h3 id="10-3-1-第三种策略为例"><a href="#10-3-1-第三种策略为例" class="headerlink" title="10.3.1 第三种策略为例"></a>10.3.1 第三种策略为例</h3><p>①定义接受失败消息的交换机，队列和绑定关系</p><p>②定义RepublishMessageRecoverer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima.consumer.config;</span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.DirectExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line">import org.springframework.amqp.rabbit.retry.MessageRecoverer;</span><br><span class="line">import org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">&#x2F;&#x2F;当消费者重试机制属性enabled&#x3D;true的时候生效</span><br><span class="line">@ConditionalOnProperty(name &#x3D; &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue &#x3D; &quot;true&quot;)</span><br><span class="line">public class ErrorMessageConfig &#123;</span><br><span class="line">    &#x2F;&#x2F;交换机</span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange errorMessageExchange()&#123;</span><br><span class="line">        return new DirectExchange(&quot;error.direct&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;队列</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue errorQueue()&#123;</span><br><span class="line">        return new Queue(&quot;error.queue&quot;, true);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;交换机和队列绑定</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding errorBinding(Queue errorQueue, DirectExchange errorMessageExchange)&#123;</span><br><span class="line">        return BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;第三种!!!!  返回一个MessageRecoverer类型</span><br><span class="line">    @Bean</span><br><span class="line">    public MessageRecoverer republishMessageRecoverer(RabbitTemplate rabbitTemplate)&#123;</span><br><span class="line">        return new RepublishMessageRecoverer(rabbitTemplate, &quot;error.direct&quot;, &quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③在10.2基础上会将消息直接传递到对应交换机上最后进行人工处理</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409804.png" alt="image-20240401163012833"></p><ul><li><p>总结：</p><p>自定义的三种方式，第一种默认直接拒绝(不好)，第二种相当于往前重试了一个环节(减缓了重试速度，但是也不好)，第三种相当于交给专门队列和交换机，最后交给人工处理(也不是很好)</p></li></ul><h2 id="10-4-业务幂等性-解决10-2多次重新投递消息情况"><a href="#10-4-业务幂等性-解决10-2多次重新投递消息情况" class="headerlink" title="10.4 业务幂等性[解决10.2多次重新投递消息情况]"></a>10.4 业务幂等性[解决10.2多次重新投递消息情况]</h2><ul><li><p><strong>幂等性</strong></p><p>用函数表达式来描述是这样的：<code>f(x) = f(f(x))</code>，例如求绝对值函数。</p><p>在程序开发中，则是指==同一个业务，执行一次或多次对业务状态的影响是一致的==。例如：</p><ul><li>根据id删除数据</li><li>查询数据</li><li>新增数据</li></ul><p>但数据的更新往往不是幂等的，如果重复执行可能造成不一样的后果。比如：</p><ul><li>取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况</li><li>退款业务。重复退款对商家而言会有经济损失。</li></ul><p>所以，我们要尽可能避免业务被重复执行。然而在实际业务场景中，由于意外经常会出现业务被重复执行的情况，例如：</p><ul><li>页面卡顿时频繁刷新导致表单重复提交</li><li>服务间调用的重试</li><li>MQ消息的重复投递</li></ul><p>我们在用户支付成功后会发送MQ消息到交易服务，修改订单状态为已支付，就可能出现消息回</p><p>复投递的情况。如果消费者不做判断，很有可能导致消息被消费多次，出现业务故障。</p><p>举例：</p><ol><li>假如用户刚刚支付完成，并且投递消息到交易服务，交易服务更改订单为<strong>已支付</strong>状态。</li><li>由于某种原因，例如网络故障导致生产者没有得到确认，隔了一段时间后<strong>重新投递</strong>给交易服务。</li><li>但是，在新投递的消息被消费之前，用户选择了退款，将订单状态改为了<strong>已退款</strong>状态。</li><li>退款完成后，新投递的消息才被消费，那么订单状态会被再次改为<strong>已支付</strong>。业务异常。</li></ol><p>因此，我们必须想办法保证消息处理的幂等性。这里给出两种方案：</p><ul><li>唯一消息ID</li><li>业务状态判断</li></ul></li></ul><h3 id="10-4-1-唯一消息ID-存在业务侵入"><a href="#10-4-1-唯一消息ID-存在业务侵入" class="headerlink" title="10.4.1 唯一消息ID(存在业务侵入)"></a>10.4.1 唯一消息ID(存在业务侵入)</h3><p>这个思路非常简单：</p><ol><li>每一条消息都生成一个唯一的id，与消息一起投递给消费者。</li><li>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</li><li>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。</li></ol><ul><li><strong>1.SpringAMQP的MeesageConverter自带MessageID的功能</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;以Jackson的消息转换器为例：</span><br><span class="line">&#x2F;&#x2F;在消费者和生产者的config配置里面添加</span><br><span class="line">@Bean</span><br><span class="line">public MessageConverter messageConverter()&#123;</span><br><span class="line">    &#x2F;&#x2F; 1.定义消息转换器</span><br><span class="line">    Jackson2JsonMessageConverter jjmc &#x3D; new Jackson2JsonMessageConverter();</span><br><span class="line">    &#x2F;&#x2F; 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span><br><span class="line">    jjmc.setCreateMessageIds(true);</span><br><span class="line">    &#x2F;&#x2F; 3.返回jjmc</span><br><span class="line">    return jjmc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在生产者位置添加：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409146.png" alt="image-20240402102220873"></p><p>打开源码可以看到，生成随机id的底层源码：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409752.png" alt="image-20240402095327684"></p><p>最终发送一条消息如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409002.png" alt="image-20240402102055345"></p><ul><li><p><strong>2.使用Redis缓存(tk使用)</strong></p><p>在调用接口的时候+调用生成随机数的接口生成id(全局唯一)两者合二为一，然后判断是否第一次调用，第一次调用的话业务处理完成之后将{key：id，value：操作结果}+过期时间存入redis数据库；之后每次进行的时候判断是否key存在，存在的话说明重复提交返回错误</p></li></ul><h3 id="10-4-2-业务状态判断"><a href="#10-4-2-业务状态判断" class="headerlink" title="10.4.2 业务状态判断"></a>10.4.2 业务状态判断</h3><p>业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息，不同的业务场景判断的思路也不一样。</p><p>相比较而言，消息ID的方案需要改造原有的数据库(<strong>会存在业务侵入问题</strong>)，所以我更推荐使用业务判断的方案。</p><p>以支付修改订单的业务为例，我们需要修改<code>OrderServiceImpl</code>中的<code>markOrderPaySuccess</code>方法：处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以在执行业务时判断订单状态是否是未支付，如果不是则证明订单已经被处理过，无需重复处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在原有基础上添加判断订单状态 ---如果不符合直接消息reject了!!!!!!!</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">    public void markOrderPaySuccess(Long orderId) &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.查询订单</span><br><span class="line">        Order old &#x3D; getById(orderId);</span><br><span class="line">        &#x2F;&#x2F; 2.判断订单状态</span><br><span class="line">        if (old &#x3D;&#x3D; null || old.getStatus() !&#x3D; 1) &#123;</span><br><span class="line">            &#x2F;&#x2F; 订单不存在或者订单状态不是1，放弃处理</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 3.尝试更新订单</span><br><span class="line">        Order order &#x3D; new Order();</span><br><span class="line">        order.setId(orderId);</span><br><span class="line">        order.setStatus(2);</span><br><span class="line">        order.setPayTime(LocalDateTime.now());</span><br><span class="line">        updateById(order);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据上述代码逻辑可以完成幂等判断需求，但是由于判断和更新是两步动作，可能会在极小概率下可能存在线程安全问题  –&gt; 可以考虑使用==乐观锁(CAS机制)==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;可以将上述三步直接合并为一条sql语句</span><br><span class="line">@Override</span><br><span class="line">public void markOrderPaySuccess(Long orderId) &#123;</span><br><span class="line">    &#x2F;&#x2F; UPDATE &#96;order&#96; SET status &#x3D; ? , pay_time &#x3D; ? WHERE id &#x3D; ? AND status &#x3D; 1</span><br><span class="line">    &#x2F;&#x2F;mybatisplus的方式</span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(Order::getStatus, 2)</span><br><span class="line">            .set(Order::getPayTime, LocalDateTime.now())</span><br><span class="line">            .eq(Order::getId, orderId)</span><br><span class="line">            .eq(Order::getStatus, 1)</span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看，上述代码等同于这样的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`order`</span> <span class="keyword">SET</span> <span class="keyword">status</span> = ? , pay_time = ? <span class="keyword">WHERE</span> <span class="keyword">id</span> = ? <span class="keyword">AND</span> <span class="keyword">status</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们在where条件中除了判断id以外，还加上了status必须为1的条件。如果条件不符（说明订单已支付），则SQL匹配不到数据，根本不会执行。</p><h2 id="10-5-兜底方案-消费者定时主动询问"><a href="#10-5-兜底方案-消费者定时主动询问" class="headerlink" title="10.5 兜底方案[消费者定时主动询问]"></a>10.5 兜底方案[消费者定时主动询问]</h2><p>上述机制可能增加了消息的可靠性，但是也不好说能保证消息100%的可靠。</p><p>其实思想很简单：既然MQ通知不一定发送到交易服务(消费者)，那么交易服务(消费者)就必须自己<strong>主动去查询</strong>支付状态。这样即便支付服务的MQ通知失败，我们依然能通过主动查询来保证订单状态的一致</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202406231514126.png" alt="image-20240623151453867"></p><p>图中黄色线圈起来的部分就是MQ通知失败后的兜底处理方案，由交易服务自己主动去查询支付状态。</p><p>什么时候去查询是无法确定的，因此我们通常采用的措施是利用<strong>定时任务</strong>(例如：SpringTask框架)定期查询。</p><h1 id="可靠性总结图"><a href="#可靠性总结图" class="headerlink" title="==可靠性总结图=="></a>==可靠性总结图==</h1><p>综上，支付服务与交易服务之间的订单状态一致性是如何保证的？</p><ul><li>首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。</li><li>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性</li><li>最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便MQ通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409144.png" alt="image-20240402164059822"></p><h1 id="高级进阶-–延迟消息-两种方式"><a href="#高级进阶-–延迟消息-两种方式" class="headerlink" title="==高级进阶 –延迟消息(两种方式)=="></a>==高级进阶 –延迟消息(两种方式)==</h1><p>在电商的支付业务中，对于一些库存有限的商品，为了更好的用户体验，通常都会在用户下单时立刻扣减商品库存。例如电影院购票、高铁购票，下单后就会锁定座位资源，其他人无法重复购买。</p><p>但是这样就存在一个问题，假如用户下单后一直不付款，就会一直占有库存资源，导致其他客户无法正常交易，最终导致商户利益受损！</p><p>因此，电商中通常的做法就是：<strong>对于超过一定时间未支付的订单，应该立刻取消订单并释放占用的库存</strong>。</p><p>例如，订单支付超时时间为30分钟，则我们应该在用户下单后的第30分钟检查订单支付状态，如果发现未支付，应该立刻取消订单，释放库存。</p><p>但问题来了：如何才能准确的实现在下单后第30分钟去检查支付状态呢？</p><p>像这种在一段时间以后才执行的任务，我们称之为<strong>延迟任务</strong>，而要实现延迟任务，最简单的方案就是利用MQ的延迟消息了。</p><h1 id="11-延迟消息"><a href="#11-延迟消息" class="headerlink" title="11.延迟消息"></a>11.延迟消息</h1><p><strong>延迟消息</strong>：生产者发送消息时指定一个时间，消费者不会立刻收到消息，而在指定时间之后才收到消息</p><p><strong>延迟任务：</strong>设置一定时间之后才执行的任务，(最简单的方案就是利用MQ的延迟消息)</p><p>在RabbitMQ中实现延迟消息也有两种方案：</p><ul><li>死信交换机+TTL</li><li>延迟消息插件</li></ul><h2 id="11-1-死信交换机和延迟消息"><a href="#11-1-死信交换机和延迟消息" class="headerlink" title="11.1 死信交换机和延迟消息"></a>11.1 死信交换机和延迟消息</h2><h3 id="11-1-1-死信交换机"><a href="#11-1-1-死信交换机" class="headerlink" title="11.1.1 死信交换机"></a>11.1.1 死信交换机</h3><p><strong>死信(dead letter)</strong>？</p><ul><li>消费者使用<code>basic.reject</code>或 <code>basic.nack</code>声明消费失败，并且消息的<code>requeue</code>参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p>如果队列设置属性dead-letter-exchange指定交换机 –&gt;该队列的死信就会投递到这个交换机。</p><p>这个交换机就叫做<strong>死信交换机(Dead letter Exchange,简称DLX)</strong></p><p><strong>死信交换机的作用</strong>？</p><ol><li><p>收集那些因处理失败而被拒绝的消息</p></li><li><p>收集那些因队列满了而被拒绝的消息</p></li><li><p>收集因TTL（有效期）到期的消息</p></li></ol><h3 id="11-1-2-延迟消息"><a href="#11-1-2-延迟消息" class="headerlink" title="11.1.2 延迟消息"></a>11.1.2 延迟消息</h3><p>总结来说：宏观上看到就是内部做了一个延迟一样</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409360.png" alt="image-20240402113915144"></p><p>进一步说：变相的让发送消息到消费多了5s</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409151.png" alt="image-20240402114329589"></p><h2 id="11-2-延迟消息插件-DelayExchange"><a href="#11-2-延迟消息插件-DelayExchange" class="headerlink" title="11.2 延迟消息插件(DelayExchange)"></a>11.2 延迟消息插件(DelayExchange)</h2><p>RabbitMQ官方提供一款插件，==原生支持延迟消息功能==。</p><p>插件原理就是设计了一种<strong>支持延迟消息功能</strong>的交换机，当消息投递到交换机后可以存放一定时间，到期后再投递到队列。</p><h3 id="11-2-1-下载"><a href="#11-2-1-下载" class="headerlink" title="11.2.1 下载"></a>11.2.1 下载</h3><p>插件下载地址：<br><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange" target="_blank" rel="noopener">GitHub - rabbitmq/rabbitmq-delayed-message-exchange: Delayed Messaging for RabbitMQ</a></p><p>由于我们安装的MQ是<code>3.8</code>版本，因此这里下载<code>3.8.17</code>版本：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409089.png" alt="image-20240402133333466"></p><h3 id="11-2-2-安装"><a href="#11-2-2-安装" class="headerlink" title="11.2.2 安装"></a>11.2.2 安装</h3><p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件目录对应的数据卷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect mq-plugins</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409492.png" alt="image-20240402133421439"></p><p>插件目录被挂载到了<code>/var/lib/docker/volumes/mq-plugins/_data</code>这个目录，我们上传插件到该目录下。</p><p>接下来执行命令，安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mq rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409136.png" alt="image-20240402134224233"></p><h3 id="11-2-3-声明延迟交换机"><a href="#11-2-3-声明延迟交换机" class="headerlink" title="11.2.3 声明延迟交换机"></a>11.2.3 声明延迟交换机</h3><ul><li>方式一：基于注解方式</li></ul><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409244.png" alt="image-20240402134800279"></p><ul><li><p>方式二：基于@Bean方式</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409868.png" alt="image-20240402135010167"></p></li></ul><h3 id="11-2-4-发送延迟消息"><a href="#11-2-4-发送延迟消息" class="headerlink" title="11.2.4 发送延迟消息"></a>11.2.4 发送延迟消息</h3><p>发送消息时：只需要通过设定x-delay属性设定延迟时间：</p><p><img src="https://raw.githubusercontent.com/Larkkkkkkk/hexo-picture/main/.images/202404071409934.png" alt="image-20240402135204953"></p><p>延迟消息插件内部会维护一个本地数据库表，同时使用Elang Timers功能实现计时。如果消息的延迟时间设置较长，可能会导致堆积的延迟消息非常多，会带来较大的CPU开销，同时延迟消息的时间会存在误差。<br>因此，<strong>不建议设置延迟时间过长的延迟消息</strong>。</p><h1 id="12-实际操作-日后补充"><a href="#12-实际操作-日后补充" class="headerlink" title="12. 实际操作(日后补充)"></a>12. 实际操作(日后补充)</h1><p>==可以参考&lt;RabbitMQ-黑马商城为例&gt;这篇文章，有详细的操作介绍和步骤==</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-同步调用和异步调用&quot;&gt;&lt;a href=&quot;#1-同步调用和异步调用&quot; class=&quot;headerlink&quot; title=&quot;1.同步调用和异步调用&quot;&gt;&lt;/a&gt;1.同步调用和异步调用&lt;/h1&gt;&lt;h2 id=&quot;1-1-同步调用&quot;&gt;&lt;a href=&quot;#1-1-同步调用&quot;
      
    
    </summary>
    
    
    
      <category term="RabbitMQ" scheme="https://Larkkkkkkk.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
</feed>
